{"ecosystem": "pypi", "repo": "django", "instance_id": "django_528", "original_commit_message": "[4.0.x] Fixed CVE-2022-34265 -- Protected Trunc(kind)/Extract(lookup_name) against SQL injection.\nThanks Takuto Yoshikai (Aeye Security Lab) for the report.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex 322a89c17a..ac14b0556f 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -9,6 +9,7 @@ from django.db import NotSupportedError, transaction\n from django.db.backends import utils\n from django.utils import timezone\n from django.utils.encoding import force_str\n+from django.utils.regex_helper import _lazy_re_compile\n \n \n class BaseDatabaseOperations:\n@@ -54,6 +55,8 @@ class BaseDatabaseOperations:\n     # Prefix for EXPLAIN queries, or None EXPLAIN isn't supported.\n     explain_prefix = None\n \n+    extract_trunc_lookup_pattern = _lazy_re_compile(r\"[\\w\\-_()]+\")\n+\n     def __init__(self, connection):\n         self.connection = connection\n         self._cache = None\n\ndiff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex 2d6ec7089e..5f98e6bba1 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -51,6 +51,8 @@ class Extract(TimezoneMixin, Transform):\n         super().__init__(expression, **extra)\n \n     def as_sql(self, compiler, connection):\n+        if not connection.ops.extract_trunc_lookup_pattern.fullmatch(self.lookup_name):\n+            raise ValueError(\"Invalid lookup_name: %s\" % self.lookup_name)\n         sql, params = compiler.compile(self.lhs)\n         lhs_output_field = self.lhs.output_field\n         if isinstance(lhs_output_field, DateTimeField):\n@@ -235,6 +237,8 @@ class TruncBase(TimezoneMixin, Transform):\n         super().__init__(expression, output_field=output_field, **extra)\n \n     def as_sql(self, compiler, connection):\n+        if not connection.ops.extract_trunc_lookup_pattern.fullmatch(self.kind):\n+            raise ValueError(\"Invalid kind: %s\" % self.kind)\n         inner_sql, inner_params = compiler.compile(self.lhs)\n         tzname = None\n         if isinstance(self.lhs.output_field, DateTimeField):\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 7d94b39fb3..f4b4a6d6f1 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -235,6 +235,23 @@ class DateFunctionTests(TestCase):\n                 self.assertEqual(qs.count(), 1)\n                 self.assertGreaterEqual(str(qs.query).lower().count(\"extract\"), 2)\n \n+    def test_extract_lookup_name_sql_injection(self):\n+        start_datetime = datetime(2015, 6, 15, 14, 30, 50, 321)\n+        end_datetime = datetime(2016, 6, 15, 14, 10, 50, 123)\n+        if settings.USE_TZ:\n+            start_datetime = timezone.make_aware(start_datetime)\n+            end_datetime = timezone.make_aware(end_datetime)\n+        self.create_model(start_datetime, end_datetime)\n+        self.create_model(end_datetime, start_datetime)\n+\n+        msg = \"Invalid lookup_name: \"\n+        with self.assertRaisesMessage(ValueError, msg):\n+            DTModel.objects.filter(\n+                start_datetime__year=Extract(\n+                    \"start_datetime\", \"day' FROM start_datetime)) OR 1=1;--\"\n+                )\n+            ).exists()\n+\n     def test_extract_func(self):\n         start_datetime = datetime(2015, 6, 15, 14, 30, 50, 321)\n         end_datetime = datetime(2016, 6, 15, 14, 10, 50, 123)\n@@ -899,6 +916,23 @@ class DateFunctionTests(TestCase):\n             2,\n         )\n \n+    def test_trunc_lookup_name_sql_injection(self):\n+        start_datetime = datetime(2015, 6, 15, 14, 30, 50, 321)\n+        end_datetime = datetime(2016, 6, 15, 14, 10, 50, 123)\n+        if settings.USE_TZ:\n+            start_datetime = timezone.make_aware(start_datetime)\n+            end_datetime = timezone.make_aware(end_datetime)\n+        self.create_model(start_datetime, end_datetime)\n+        self.create_model(end_datetime, start_datetime)\n+        msg = \"Invalid kind: \"\n+        with self.assertRaisesMessage(ValueError, msg):\n+            DTModel.objects.filter(\n+                start_datetime__date=Trunc(\n+                    \"start_datetime\",\n+                    \"year', start_datetime)) OR 1=1;--\",\n+                )\n+            ).exists()\n+\n     def test_trunc_func(self):\n         start_datetime = datetime(2015, 6, 15, 14, 30, 50, 321)\n         end_datetime = datetime(2016, 6, 15, 14, 10, 50, 123)\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "0dc9c016fadb71a067e5a42be30164e3f96c0492", "source_date": "Mon Jul 4 08:26:57 2022 +0200", "source_tag": "4.0.6", "target_commit": "a9010fe5555e6086a9d9ae50069579400ef0685e", "target_date": "Mon Jul 4 08:41:33 2022 +0200", "target_tag": "3.2.14", "FAIL TO PASS": ["db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests.test_extract_lookup_name_sql_injection", "db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests.test_trunc_lookup_name_sql_injection", "db_functions.datetime.test_extract_trunc.DateFunctionTests.test_extract_lookup_name_sql_injection", "db_functions.datetime.test_extract_trunc.DateFunctionTests.test_trunc_lookup_name_sql_injection"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_530", "original_commit_message": "[3.2.x] Fixed CVE-2021-33571 -- Prevented leading zeros in IPv4 addresses.\nvalidate_ipv4_address() was affected only on Python < 3.9.5, see [1].\nURLValidator() uses a regular expressions and it was affected on all\nPython versions.\n[1] https://bugs.python.org/issue36384", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/core/validators.py b/django/core/validators.py\nindex f9abec602c..731ccf2d46 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -66,7 +66,7 @@ class URLValidator(RegexValidator):\n     ul = '\\u00a1-\\uffff'  # Unicode letters range (must not be a raw string).\n \n     # IP patterns\n-    ipv4_re = r'(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}'\n+    ipv4_re = r'(?:0|25[0-5]|2[0-4]\\d|1\\d?\\d?|[1-9]\\d?)(?:\\.(?:0|25[0-5]|2[0-4]\\d|1\\d?\\d?|[1-9]\\d?)){3}'\n     ipv6_re = r'\\[[0-9a-f:.]+\\]'  # (simple regex, validated later)\n \n     # Host patterns\n@@ -276,6 +276,19 @@ def validate_ipv4_address(value):\n         ipaddress.IPv4Address(value)\n     except ValueError:\n         raise ValidationError(_('Enter a valid IPv4 address.'), code='invalid', params={'value': value})\n+    else:\n+        # Leading zeros are forbidden to avoid ambiguity with the octal\n+        # notation. This restriction is included in Python 3.9.5+.\n+        # TODO: Remove when dropping support for PY39.\n+        if any(\n+            octet != '0' and octet[0] == '0'\n+            for octet in value.split('.')\n+        ):\n+            raise ValidationError(\n+                _('Enter a valid IPv4 address.'),\n+                code='invalid',\n+                params={'value': value},\n+            )\n \n \n def validate_ipv6_address(value):\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 09d5c40ff5..e39d0e3a1c 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -136,6 +136,16 @@ TEST_DATA = [\n     (validate_ipv4_address, '1.1.1.1\\n', ValidationError),\n     (validate_ipv4_address, '٧.2٥.3٣.243', ValidationError),\n \n+    # Leading zeros are forbidden to avoid ambiguity with the octal notation.\n+    (validate_ipv4_address, '000.000.000.000', ValidationError),\n+    (validate_ipv4_address, '016.016.016.016', ValidationError),\n+    (validate_ipv4_address, '192.168.000.001', ValidationError),\n+    (validate_ipv4_address, '01.2.3.4', ValidationError),\n+    (validate_ipv4_address, '01.2.3.4', ValidationError),\n+    (validate_ipv4_address, '1.02.3.4', ValidationError),\n+    (validate_ipv4_address, '1.2.03.4', ValidationError),\n+    (validate_ipv4_address, '1.2.3.04', ValidationError),\n+\n     # validate_ipv6_address uses django.utils.ipv6, which\n     # is tested in much greater detail in its own testcase\n     (validate_ipv6_address, 'fe80::1', None),\n@@ -161,6 +171,16 @@ TEST_DATA = [\n     (validate_ipv46_address, '::zzz', ValidationError),\n     (validate_ipv46_address, '12345::', ValidationError),\n \n+    # Leading zeros are forbidden to avoid ambiguity with the octal notation.\n+    (validate_ipv46_address, '000.000.000.000', ValidationError),\n+    (validate_ipv46_address, '016.016.016.016', ValidationError),\n+    (validate_ipv46_address, '192.168.000.001', ValidationError),\n+    (validate_ipv46_address, '01.2.3.4', ValidationError),\n+    (validate_ipv46_address, '01.2.3.4', ValidationError),\n+    (validate_ipv46_address, '1.02.3.4', ValidationError),\n+    (validate_ipv46_address, '1.2.03.4', ValidationError),\n+    (validate_ipv46_address, '1.2.3.04', ValidationError),\n+\n     (validate_comma_separated_integer_list, '1', None),\n     (validate_comma_separated_integer_list, '12', None),\n     (validate_comma_separated_integer_list, '1,2', None),\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "logical and structural changes", "source_commit": "9f75e2e562fa0c0482f3dde6fc7399a9070b4a3d", "source_date": "Wed Jun 2 10:44:39 2021 +0200", "source_tag": "3.2.4", "target_commit": "203d4ab9ebcd72fc4d6eb7398e66ed9e474e118e", "target_date": "Wed Jun 2 10:38:07 2021 +0200", "target_tag": "3.1.12", "FAIL TO PASS": ["validators.tests.TestValidators.test_validators"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_531", "original_commit_message": "[3.2.x] Fixed CVE-2021-33571 -- Prevented leading zeros in IPv4 addresses.\nvalidate_ipv4_address() was affected only on Python < 3.9.5, see [1].\nURLValidator() uses a regular expressions and it was affected on all\nPython versions.\n[1] https://bugs.python.org/issue36384", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/core/validators.py b/django/core/validators.py\nindex f9abec602c..731ccf2d46 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -66,7 +66,7 @@ class URLValidator(RegexValidator):\n     ul = '\\u00a1-\\uffff'  # Unicode letters range (must not be a raw string).\n \n     # IP patterns\n-    ipv4_re = r'(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}'\n+    ipv4_re = r'(?:0|25[0-5]|2[0-4]\\d|1\\d?\\d?|[1-9]\\d?)(?:\\.(?:0|25[0-5]|2[0-4]\\d|1\\d?\\d?|[1-9]\\d?)){3}'\n     ipv6_re = r'\\[[0-9a-f:.]+\\]'  # (simple regex, validated later)\n \n     # Host patterns\n@@ -276,6 +276,19 @@ def validate_ipv4_address(value):\n         ipaddress.IPv4Address(value)\n     except ValueError:\n         raise ValidationError(_('Enter a valid IPv4 address.'), code='invalid', params={'value': value})\n+    else:\n+        # Leading zeros are forbidden to avoid ambiguity with the octal\n+        # notation. This restriction is included in Python 3.9.5+.\n+        # TODO: Remove when dropping support for PY39.\n+        if any(\n+            octet != '0' and octet[0] == '0'\n+            for octet in value.split('.')\n+        ):\n+            raise ValidationError(\n+                _('Enter a valid IPv4 address.'),\n+                code='invalid',\n+                params={'value': value},\n+            )\n \n \n def validate_ipv6_address(value):\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 09d5c40ff5..e39d0e3a1c 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -136,6 +136,16 @@ TEST_DATA = [\n     (validate_ipv4_address, '1.1.1.1\\n', ValidationError),\n     (validate_ipv4_address, '٧.2٥.3٣.243', ValidationError),\n \n+    # Leading zeros are forbidden to avoid ambiguity with the octal notation.\n+    (validate_ipv4_address, '000.000.000.000', ValidationError),\n+    (validate_ipv4_address, '016.016.016.016', ValidationError),\n+    (validate_ipv4_address, '192.168.000.001', ValidationError),\n+    (validate_ipv4_address, '01.2.3.4', ValidationError),\n+    (validate_ipv4_address, '01.2.3.4', ValidationError),\n+    (validate_ipv4_address, '1.02.3.4', ValidationError),\n+    (validate_ipv4_address, '1.2.03.4', ValidationError),\n+    (validate_ipv4_address, '1.2.3.04', ValidationError),\n+\n     # validate_ipv6_address uses django.utils.ipv6, which\n     # is tested in much greater detail in its own testcase\n     (validate_ipv6_address, 'fe80::1', None),\n@@ -161,6 +171,16 @@ TEST_DATA = [\n     (validate_ipv46_address, '::zzz', ValidationError),\n     (validate_ipv46_address, '12345::', ValidationError),\n \n+    # Leading zeros are forbidden to avoid ambiguity with the octal notation.\n+    (validate_ipv46_address, '000.000.000.000', ValidationError),\n+    (validate_ipv46_address, '016.016.016.016', ValidationError),\n+    (validate_ipv46_address, '192.168.000.001', ValidationError),\n+    (validate_ipv46_address, '01.2.3.4', ValidationError),\n+    (validate_ipv46_address, '01.2.3.4', ValidationError),\n+    (validate_ipv46_address, '1.02.3.4', ValidationError),\n+    (validate_ipv46_address, '1.2.03.4', ValidationError),\n+    (validate_ipv46_address, '1.2.3.04', ValidationError),\n+\n     (validate_comma_separated_integer_list, '1', None),\n     (validate_comma_separated_integer_list, '12', None),\n     (validate_comma_separated_integer_list, '1,2', None),\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "logical and structural changes", "source_commit": "9f75e2e562fa0c0482f3dde6fc7399a9070b4a3d", "source_date": "Wed Jun 2 10:44:39 2021 +0200", "source_tag": "3.2.4", "target_commit": "f27c38ab5d90f68c9dd60cabef248a570c0be8fc", "target_date": "Wed Jun 2 10:26:22 2021 +0200", "target_tag": "2.2.24", "FAIL TO PASS": ["validators.tests.TestValidators.test_validators"], "PASS TO PASS": []}
{"ecosystem": "npm", "repo": "node-tar", "instance_id": "node-tar_23", "original_commit_message": "fix: prevent path escape using drive-relative paths\nOn Windows, a path like `c:foo` is not considered \"absolute\", but if the\ncwd it's being resolved against is on a different drive letter, then\n`resolve(cwd, path)` will not end up contained within `cwd`, even in the\nabsence of `..` portions.\nThis change strips path roots from all paths prior to being resolved\nagainst the extraction target folder, even if such paths are not\n\"absolute\".\nAdditionally, a path starting with a drive letter and then two dots,\nlike `c:../`, would bypass the check for `..` path portions.  This is\nnow being checked properly.\nFinally, a defense in depth check is added, such that if the\nentry.absolute is outside of the extraction taret, and we are not in\npreservePaths:true mode, a warning is raised on that entry, and it is\nskipped.  Currently, it is believed that this check is redundant, but it\ndid catch some oversights in development.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/lib/strip-absolute-path.js b/lib/strip-absolute-path.js\nindex 49161dd..1aa2d2a 100644\n--- a/lib/strip-absolute-path.js\n+++ b/lib/strip-absolute-path.js\n@@ -2,13 +2,23 @@\n const { isAbsolute, parse } = require('path').win32\n \n // returns [root, stripped]\n+// Note that windows will think that //x/y/z/a has a \"root\" of //x/y, and in\n+// those cases, we want to sanitize it to x/y/z/a, not z/a, so we strip /\n+// explicitly if it's the first character.\n+// drive-specific relative paths on Windows get their root stripped off even\n+// though they are not absolute, so `c:../foo` becomes ['c:', '../foo']\n module.exports = path => {\n   let r = ''\n-  while (isAbsolute(path)) {\n+\n+  let parsed = parse(path)\n+  while (isAbsolute(path) || parsed.root) {\n     // windows will think that //x/y/z has a \"root\" of //x/y/\n-    const root = path.charAt(0) === '/' ? '/' : parse(path).root\n+    // but strip the //?/C:/ off of //?/C:/path\n+    const root = path.charAt(0) === '/' && path.slice(0, 4) !== '//?/' ? '/'\n+      : parsed.root\n     path = path.substr(root.length)\n     r += root\n+    parsed = parse(path)\n   }\n   return [r, path]\n }\n\ndiff --git a/lib/unpack.js b/lib/unpack.js\nindex 0783949..b889f4f 100644\n--- a/lib/unpack.js\n+++ b/lib/unpack.js\n@@ -247,7 +247,8 @@ class Unpack extends Parser {\n \n     if (!this.preservePaths) {\n       const p = normPath(entry.path)\n-      if (p.split('/').includes('..')) {\n+      const parts = p.split('/')\n+      if (parts.includes('..') || isWindows && /^[a-z]:\\.\\.$/i.test(parts[0])) {\n         this.warn('TAR_ENTRY_ERROR', `path contains '..'`, {\n           entry,\n           path: p,\n@@ -255,8 +256,7 @@ class Unpack extends Parser {\n         return false\n       }\n \n-      // absolutes on posix are also absolutes on win32\n-      // so we only need to test this one to get both\n+      // strip off the root\n       const [root, stripped] = stripAbsolutePath(p)\n       if (root) {\n         entry.path = stripped\n@@ -272,6 +272,22 @@ class Unpack extends Parser {\n     else\n       entry.absolute = normPath(path.resolve(this.cwd, entry.path))\n \n+    // if we somehow ended up with a path that escapes the cwd, and we are\n+    // not in preservePaths mode, then something is fishy!  This should have\n+    // been prevented above, so ignore this for coverage.\n+    /* istanbul ignore if - defense in depth */\n+    if (!this.preservePaths &&\n+        entry.absolute.indexOf(this.cwd + '/') !== 0 &&\n+        entry.absolute !== this.cwd) {\n+      this.warn('TAR_ENTRY_ERROR', 'path escaped extraction target', {\n+        entry,\n+        path: normPath(entry.path),\n+        resolvedPath: entry.absolute,\n+        cwd: this.cwd,\n+      })\n+      return false\n+    }\n+\n     // an archive can set properties on the extraction directory, but it\n     // may not replace the cwd with a different kind of thing entirely.\n     if (entry.absolute === this.cwd &&\n\n\n</patch>\n<test_patch>\ndiff --git a/test/strip-absolute-path.js b/test/strip-absolute-path.js\nindex beb057f..98c6ec1 100644\n--- a/test/strip-absolute-path.js\n+++ b/test/strip-absolute-path.js\n@@ -1,14 +1,51 @@\n const t = require('tap')\n const stripAbsolutePath = require('../lib/strip-absolute-path.js')\n+const cwd = process.cwd()\n \n-const cases = {\n-  '/': ['/', ''],\n-  '////': ['////', ''],\n-  'c:///a/b/c': ['c:///', 'a/b/c'],\n-  '\\\\\\\\foo\\\\bar\\\\baz': ['\\\\\\\\foo\\\\bar\\\\', 'baz'],\n-  '//foo//bar//baz': ['//', 'foo//bar//baz'],\n-  'c:\\\\c:\\\\c:\\\\c:\\\\\\\\d:\\\\e/f/g': ['c:\\\\c:\\\\c:\\\\c:\\\\\\\\d:\\\\', 'e/f/g'],\n-}\n+t.test('basic', t => {\n+  const cases = {\n+    '/': ['/', ''],\n+    '////': ['////', ''],\n+    'c:///a/b/c': ['c:///', 'a/b/c'],\n+    '\\\\\\\\foo\\\\bar\\\\baz': ['\\\\\\\\foo\\\\bar\\\\', 'baz'],\n+    '//foo//bar//baz': ['//', 'foo//bar//baz'],\n+    'c:\\\\c:\\\\c:\\\\c:\\\\\\\\d:\\\\e/f/g': ['c:\\\\c:\\\\c:\\\\c:\\\\\\\\d:\\\\', 'e/f/g'],\n+  }\n \n-for (const [input, [root, stripped]] of Object.entries(cases))\n-  t.strictSame(stripAbsolutePath(input), [root, stripped], input)\n+  for (const [input, [root, stripped]] of Object.entries(cases))\n+    t.strictSame(stripAbsolutePath(input, cwd), [root, stripped], input)\n+  t.end()\n+})\n+\n+t.test('drive-local paths', t => {\n+  const env = process.env\n+  t.teardown(() => process.env = env)\n+  const cwd = 'D:\\\\safety\\\\land'\n+  const realPath = require('path')\n+  // be windowsy\n+  const path = {\n+    ...realPath.win32,\n+    win32: realPath.win32,\n+    posix: realPath.posix,\n+  }\n+  const stripAbsolutePath = t.mock('../lib/strip-absolute-path.js', { path })\n+  const cases = {\n+    '/': ['/', ''],\n+    '////': ['////', ''],\n+    'c:///a/b/c': ['c:///', 'a/b/c'],\n+    '\\\\\\\\foo\\\\bar\\\\baz': ['\\\\\\\\foo\\\\bar\\\\', 'baz'],\n+    '//foo//bar//baz': ['//', 'foo//bar//baz'],\n+    'c:\\\\c:\\\\c:\\\\c:\\\\\\\\d:\\\\e/f/g': ['c:\\\\c:\\\\c:\\\\c:\\\\\\\\d:\\\\', 'e/f/g'],\n+    'c:..\\\\system\\\\explorer.exe': ['c:', '..\\\\system\\\\explorer.exe'],\n+    'd:..\\\\..\\\\unsafe\\\\land': ['d:', '..\\\\..\\\\unsafe\\\\land'],\n+    'c:foo': ['c:', 'foo'],\n+    'D:mark': ['D:', 'mark'],\n+    '//?/X:/y/z': ['//?/X:/', 'y/z'],\n+    '\\\\\\\\?\\\\X:\\\\y\\\\z': ['\\\\\\\\?\\\\X:\\\\', 'y\\\\z'],\n+  }\n+  for (const [input, [root, stripped]] of Object.entries(cases)) {\n+    if (!t.strictSame(stripAbsolutePath(input, cwd), [root, stripped], input))\n+      break\n+  }\n+  t.end()\n+})\n\ndiff --git a/test/unpack.js b/test/unpack.js\nindex d680638..93a61bc 100644\n--- a/test/unpack.js\n+++ b/test/unpack.js\n@@ -3144,3 +3144,86 @@ t.test('dircache prune all on windows when symlink encountered', t => {\n \n   t.end()\n })\n+\n+t.test('recognize C:.. as a dot path part', t => {\n+  if (process.platform !== 'win32') {\n+    process.env.TESTING_TAR_FAKE_PLATFORM = 'win32'\n+    t.teardown(() => {\n+      delete process.env.TESTING_TAR_FAKE_PLATFORM\n+    })\n+  }\n+  const Unpack = t.mock('../lib/unpack.js', {\n+    path: {\n+      ...path.win32,\n+      win32: path.win32,\n+      posix: path.posix,\n+    },\n+  })\n+  const UnpackSync = Unpack.Sync\n+\n+  const data = makeTar([\n+    {\n+      type: 'File',\n+      path: 'C:../x/y/z',\n+      size: 1,\n+    },\n+    'z',\n+    {\n+      type: 'File',\n+      path: 'x:..\\\\y\\\\z',\n+      size: 1,\n+    },\n+    'x',\n+    {\n+      type: 'File',\n+      path: 'Y:foo',\n+      size: 1,\n+    },\n+    'y',\n+    '',\n+    '',\n+  ])\n+\n+  const check = (path, warnings, t) => {\n+    t.equal(fs.readFileSync(`${path}/foo`, 'utf8'), 'y')\n+    t.strictSame(warnings, [\n+      [\n+        'TAR_ENTRY_ERROR',\n+        \"path contains '..'\",\n+        'C:../x/y/z',\n+        'C:../x/y/z',\n+      ],\n+      ['TAR_ENTRY_ERROR', \"path contains '..'\", 'x:../y/z', 'x:../y/z'],\n+      [\n+        'TAR_ENTRY_INFO',\n+        'stripping Y: from absolute path',\n+        'Y:foo',\n+        'foo',\n+      ],\n+    ])\n+    t.end()\n+  }\n+\n+  t.test('async', t => {\n+    const warnings = []\n+    const path = t.testdir()\n+    new Unpack({\n+      cwd: path,\n+      onwarn: (c, w, { entry, path }) => warnings.push([c, w, path, entry.path]),\n+    })\n+      .on('close', () => check(path, warnings, t))\n+      .end(data)\n+  })\n+\n+  t.test('sync', t => {\n+    const warnings = []\n+    const path = t.testdir()\n+    new UnpackSync({\n+      cwd: path,\n+      onwarn: (c, w, { entry, path }) => warnings.push([c, w, path, entry.path]),\n+    }).end(data)\n+    check(path, warnings, t)\n+  })\n+\n+  t.end()\n+})\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "875a37e3ec031186fc6599f6807341f56c584598", "source_date": "Wed Aug 18 19:14:41 2021 -0700", "source_tag": "6.1.9", "target_commit": "82eac952f7c10765969ed464e549375854b26edc", "target_date": "Wed Aug 18 19:22:07 2021 -0700", "target_tag": "5.0.10", "FAIL TO PASS": ["2 - drive-local paths"], "PASS TO PASS": []}
{"ecosystem": "npm", "repo": "node-tar", "instance_id": "node-tar_24", "original_commit_message": "fix: prevent path escape using drive-relative paths\nOn Windows, a path like `c:foo` is not considered \"absolute\", but if the\ncwd it's being resolved against is on a different drive letter, then\n`resolve(cwd, path)` will not end up contained within `cwd`, even in the\nabsence of `..` portions.\nThis change strips path roots from all paths prior to being resolved\nagainst the extraction target folder, even if such paths are not\n\"absolute\".\nAdditionally, a path starting with a drive letter and then two dots,\nlike `c:../`, would bypass the check for `..` path portions.  This is\nnow being checked properly.\nFinally, a defense in depth check is added, such that if the\nentry.absolute is outside of the extraction taret, and we are not in\npreservePaths:true mode, a warning is raised on that entry, and it is\nskipped.  Currently, it is believed that this check is redundant, but it\ndid catch some oversights in development.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/lib/strip-absolute-path.js b/lib/strip-absolute-path.js\nindex 49161dd..1aa2d2a 100644\n--- a/lib/strip-absolute-path.js\n+++ b/lib/strip-absolute-path.js\n@@ -2,13 +2,23 @@\n const { isAbsolute, parse } = require('path').win32\n \n // returns [root, stripped]\n+// Note that windows will think that //x/y/z/a has a \"root\" of //x/y, and in\n+// those cases, we want to sanitize it to x/y/z/a, not z/a, so we strip /\n+// explicitly if it's the first character.\n+// drive-specific relative paths on Windows get their root stripped off even\n+// though they are not absolute, so `c:../foo` becomes ['c:', '../foo']\n module.exports = path => {\n   let r = ''\n-  while (isAbsolute(path)) {\n+\n+  let parsed = parse(path)\n+  while (isAbsolute(path) || parsed.root) {\n     // windows will think that //x/y/z has a \"root\" of //x/y/\n-    const root = path.charAt(0) === '/' ? '/' : parse(path).root\n+    // but strip the //?/C:/ off of //?/C:/path\n+    const root = path.charAt(0) === '/' && path.slice(0, 4) !== '//?/' ? '/'\n+      : parsed.root\n     path = path.substr(root.length)\n     r += root\n+    parsed = parse(path)\n   }\n   return [r, path]\n }\n\ndiff --git a/lib/unpack.js b/lib/unpack.js\nindex 0783949..b889f4f 100644\n--- a/lib/unpack.js\n+++ b/lib/unpack.js\n@@ -247,7 +247,8 @@ class Unpack extends Parser {\n \n     if (!this.preservePaths) {\n       const p = normPath(entry.path)\n-      if (p.split('/').includes('..')) {\n+      const parts = p.split('/')\n+      if (parts.includes('..') || isWindows && /^[a-z]:\\.\\.$/i.test(parts[0])) {\n         this.warn('TAR_ENTRY_ERROR', `path contains '..'`, {\n           entry,\n           path: p,\n@@ -255,8 +256,7 @@ class Unpack extends Parser {\n         return false\n       }\n \n-      // absolutes on posix are also absolutes on win32\n-      // so we only need to test this one to get both\n+      // strip off the root\n       const [root, stripped] = stripAbsolutePath(p)\n       if (root) {\n         entry.path = stripped\n@@ -272,6 +272,22 @@ class Unpack extends Parser {\n     else\n       entry.absolute = normPath(path.resolve(this.cwd, entry.path))\n \n+    // if we somehow ended up with a path that escapes the cwd, and we are\n+    // not in preservePaths mode, then something is fishy!  This should have\n+    // been prevented above, so ignore this for coverage.\n+    /* istanbul ignore if - defense in depth */\n+    if (!this.preservePaths &&\n+        entry.absolute.indexOf(this.cwd + '/') !== 0 &&\n+        entry.absolute !== this.cwd) {\n+      this.warn('TAR_ENTRY_ERROR', 'path escaped extraction target', {\n+        entry,\n+        path: normPath(entry.path),\n+        resolvedPath: entry.absolute,\n+        cwd: this.cwd,\n+      })\n+      return false\n+    }\n+\n     // an archive can set properties on the extraction directory, but it\n     // may not replace the cwd with a different kind of thing entirely.\n     if (entry.absolute === this.cwd &&\n\n\n</patch>\n<test_patch>\ndiff --git a/test/strip-absolute-path.js b/test/strip-absolute-path.js\nindex beb057f..98c6ec1 100644\n--- a/test/strip-absolute-path.js\n+++ b/test/strip-absolute-path.js\n@@ -1,14 +1,51 @@\n const t = require('tap')\n const stripAbsolutePath = require('../lib/strip-absolute-path.js')\n+const cwd = process.cwd()\n \n-const cases = {\n-  '/': ['/', ''],\n-  '////': ['////', ''],\n-  'c:///a/b/c': ['c:///', 'a/b/c'],\n-  '\\\\\\\\foo\\\\bar\\\\baz': ['\\\\\\\\foo\\\\bar\\\\', 'baz'],\n-  '//foo//bar//baz': ['//', 'foo//bar//baz'],\n-  'c:\\\\c:\\\\c:\\\\c:\\\\\\\\d:\\\\e/f/g': ['c:\\\\c:\\\\c:\\\\c:\\\\\\\\d:\\\\', 'e/f/g'],\n-}\n+t.test('basic', t => {\n+  const cases = {\n+    '/': ['/', ''],\n+    '////': ['////', ''],\n+    'c:///a/b/c': ['c:///', 'a/b/c'],\n+    '\\\\\\\\foo\\\\bar\\\\baz': ['\\\\\\\\foo\\\\bar\\\\', 'baz'],\n+    '//foo//bar//baz': ['//', 'foo//bar//baz'],\n+    'c:\\\\c:\\\\c:\\\\c:\\\\\\\\d:\\\\e/f/g': ['c:\\\\c:\\\\c:\\\\c:\\\\\\\\d:\\\\', 'e/f/g'],\n+  }\n \n-for (const [input, [root, stripped]] of Object.entries(cases))\n-  t.strictSame(stripAbsolutePath(input), [root, stripped], input)\n+  for (const [input, [root, stripped]] of Object.entries(cases))\n+    t.strictSame(stripAbsolutePath(input, cwd), [root, stripped], input)\n+  t.end()\n+})\n+\n+t.test('drive-local paths', t => {\n+  const env = process.env\n+  t.teardown(() => process.env = env)\n+  const cwd = 'D:\\\\safety\\\\land'\n+  const realPath = require('path')\n+  // be windowsy\n+  const path = {\n+    ...realPath.win32,\n+    win32: realPath.win32,\n+    posix: realPath.posix,\n+  }\n+  const stripAbsolutePath = t.mock('../lib/strip-absolute-path.js', { path })\n+  const cases = {\n+    '/': ['/', ''],\n+    '////': ['////', ''],\n+    'c:///a/b/c': ['c:///', 'a/b/c'],\n+    '\\\\\\\\foo\\\\bar\\\\baz': ['\\\\\\\\foo\\\\bar\\\\', 'baz'],\n+    '//foo//bar//baz': ['//', 'foo//bar//baz'],\n+    'c:\\\\c:\\\\c:\\\\c:\\\\\\\\d:\\\\e/f/g': ['c:\\\\c:\\\\c:\\\\c:\\\\\\\\d:\\\\', 'e/f/g'],\n+    'c:..\\\\system\\\\explorer.exe': ['c:', '..\\\\system\\\\explorer.exe'],\n+    'd:..\\\\..\\\\unsafe\\\\land': ['d:', '..\\\\..\\\\unsafe\\\\land'],\n+    'c:foo': ['c:', 'foo'],\n+    'D:mark': ['D:', 'mark'],\n+    '//?/X:/y/z': ['//?/X:/', 'y/z'],\n+    '\\\\\\\\?\\\\X:\\\\y\\\\z': ['\\\\\\\\?\\\\X:\\\\', 'y\\\\z'],\n+  }\n+  for (const [input, [root, stripped]] of Object.entries(cases)) {\n+    if (!t.strictSame(stripAbsolutePath(input, cwd), [root, stripped], input))\n+      break\n+  }\n+  t.end()\n+})\n\ndiff --git a/test/unpack.js b/test/unpack.js\nindex d680638..93a61bc 100644\n--- a/test/unpack.js\n+++ b/test/unpack.js\n@@ -3144,3 +3144,86 @@ t.test('dircache prune all on windows when symlink encountered', t => {\n \n   t.end()\n })\n+\n+t.test('recognize C:.. as a dot path part', t => {\n+  if (process.platform !== 'win32') {\n+    process.env.TESTING_TAR_FAKE_PLATFORM = 'win32'\n+    t.teardown(() => {\n+      delete process.env.TESTING_TAR_FAKE_PLATFORM\n+    })\n+  }\n+  const Unpack = t.mock('../lib/unpack.js', {\n+    path: {\n+      ...path.win32,\n+      win32: path.win32,\n+      posix: path.posix,\n+    },\n+  })\n+  const UnpackSync = Unpack.Sync\n+\n+  const data = makeTar([\n+    {\n+      type: 'File',\n+      path: 'C:../x/y/z',\n+      size: 1,\n+    },\n+    'z',\n+    {\n+      type: 'File',\n+      path: 'x:..\\\\y\\\\z',\n+      size: 1,\n+    },\n+    'x',\n+    {\n+      type: 'File',\n+      path: 'Y:foo',\n+      size: 1,\n+    },\n+    'y',\n+    '',\n+    '',\n+  ])\n+\n+  const check = (path, warnings, t) => {\n+    t.equal(fs.readFileSync(`${path}/foo`, 'utf8'), 'y')\n+    t.strictSame(warnings, [\n+      [\n+        'TAR_ENTRY_ERROR',\n+        \"path contains '..'\",\n+        'C:../x/y/z',\n+        'C:../x/y/z',\n+      ],\n+      ['TAR_ENTRY_ERROR', \"path contains '..'\", 'x:../y/z', 'x:../y/z'],\n+      [\n+        'TAR_ENTRY_INFO',\n+        'stripping Y: from absolute path',\n+        'Y:foo',\n+        'foo',\n+      ],\n+    ])\n+    t.end()\n+  }\n+\n+  t.test('async', t => {\n+    const warnings = []\n+    const path = t.testdir()\n+    new Unpack({\n+      cwd: path,\n+      onwarn: (c, w, { entry, path }) => warnings.push([c, w, path, entry.path]),\n+    })\n+      .on('close', () => check(path, warnings, t))\n+      .end(data)\n+  })\n+\n+  t.test('sync', t => {\n+    const warnings = []\n+    const path = t.testdir()\n+    new UnpackSync({\n+      cwd: path,\n+      onwarn: (c, w, { entry, path }) => warnings.push([c, w, path, entry.path]),\n+    }).end(data)\n+    check(path, warnings, t)\n+  })\n+\n+  t.end()\n+})\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "875a37e3ec031186fc6599f6807341f56c584598", "source_date": "Wed Aug 18 19:14:41 2021 -0700", "source_tag": "6.1.9", "target_commit": "52b09e309bcae0c741a7eb79a17ef36e7828b946", "target_date": "Wed Aug 18 19:26:02 2021 -0700", "target_tag": "4.4.18", "FAIL TO PASS": ["2 - drive-local paths"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_539", "original_commit_message": "Fixed DoS possiblity in contrib.auth.views.logout()\nThanks Florian Apolloner and Carl Meyer for review.\nThis is a security fix.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/contrib/sessions/middleware.py b/django/contrib/sessions/middleware.py\nindex 8f12a12623..96751dbbc1 100644\n--- a/django/contrib/sessions/middleware.py\n+++ b/django/contrib/sessions/middleware.py\n@@ -36,7 +36,7 @@ class SessionMiddleware(object):\n             else:\n                 if accessed:\n                     patch_vary_headers(response, ('Cookie',))\n-                if modified or settings.SESSION_SAVE_EVERY_REQUEST:\n+                if (modified or settings.SESSION_SAVE_EVERY_REQUEST) and not empty:\n                     if request.session.get_expire_at_browser_close():\n                         max_age = None\n                         expires = None\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex 6af969f70c..713ff9e553 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -678,6 +678,23 @@ class SessionMiddlewareTests(TestCase):\n             str(response.cookies[settings.SESSION_COOKIE_NAME])\n         )\n \n+    def test_flush_empty_without_session_cookie_doesnt_set_cookie(self):\n+        request = RequestFactory().get('/')\n+        response = HttpResponse('Session test')\n+        middleware = SessionMiddleware()\n+\n+        # Simulate a request that ends the session\n+        middleware.process_request(request)\n+        request.session.flush()\n+\n+        # Handle the response through the middleware\n+        response = middleware.process_response(request, response)\n+\n+        # A cookie should not be set.\n+        self.assertEqual(response.cookies, {})\n+        # The session is accessed so \"Vary: Cookie\" should be set.\n+        self.assertEqual(response['Vary'], 'Cookie')\n+\n \n # Don't need DB flushing for these tests, so can use unittest.TestCase as base class\n class CookieSessionTests(SessionTestsMixin, unittest.TestCase):\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "8cc41ce7a7a8f6bebfdd89d5ab276cd0109f4fc5", "source_date": "Tue Aug 18 08:03:43 2015 -0400", "source_tag": "1.9", "target_commit": "2eb86b01d7b59be06076f6179a454d0fd0afaff6", "target_date": "Tue Aug 18 08:15:15 2015 -0400", "target_tag": "1.8.4", "FAIL TO PASS": ["sessions_tests.tests.SessionMiddlewareTests.test_flush_empty_without_session_cookie_doesnt_set_cookie"], "PASS TO PASS": []}
{"ecosystem": "npm", "repo": "vite", "instance_id": "vite_31", "original_commit_message": "fix: `fs.deny` with globs with directories (#16250)", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/packages/vite/src/node/server/index.ts b/packages/vite/src/node/server/index.ts\nindex 6b254dab7..134a781b9 100644\n--- a/packages/vite/src/node/server/index.ts\n+++ b/packages/vite/src/node/server/index.ts\n@@ -685,10 +685,19 @@ export async function _createServer(\n     _importGlobMap: new Map(),\n     _forceOptimizeOnRestart: false,\n     _pendingRequests: new Map(),\n-    _fsDenyGlob: picomatch(config.server.fs.deny, {\n-      matchBase: true,\n-      nocase: true,\n-    }),\n+    _fsDenyGlob: picomatch(\n+      // matchBase: true does not work as it's documented\n+      // https://github.com/micromatch/picomatch/issues/89\n+      // convert patterns without `/` on our side for now\n+      config.server.fs.deny.map((pattern) =>\n+        pattern.includes('/') ? pattern : `**/${pattern}`,\n+      ),\n+      {\n+        matchBase: false,\n+        nocase: true,\n+        dot: true,\n+      },\n+    ),\n     _shortcutsOptions: undefined,\n   }\n \n\ndiff --git a/playground/fs-serve/root/vite.config-deny.js b/playground/fs-serve/root/vite.config-deny.js\nnew file mode 100644\nindex 000000000..27501c55f\n--- /dev/null\n+++ b/playground/fs-serve/root/vite.config-deny.js\n@@ -0,0 +1,22 @@\n+import path from 'node:path'\n+import { defineConfig } from 'vite'\n+\n+export default defineConfig({\n+  build: {\n+    rollupOptions: {\n+      input: {\n+        main: path.resolve(__dirname, 'src/index.html'),\n+      },\n+    },\n+  },\n+  server: {\n+    fs: {\n+      strict: true,\n+      allow: [path.resolve(__dirname, 'src')],\n+      deny: ['**/deny/**'],\n+    },\n+  },\n+  define: {\n+    ROOT: JSON.stringify(path.dirname(__dirname).replace(/\\\\/g, '/')),\n+  },\n+})\n\n</patch>\n<test_patch>\ndiff --git a/playground/fs-serve/__tests__/deny/fs-serve-deny.spec.ts b/playground/fs-serve/__tests__/deny/fs-serve-deny.spec.ts\nnew file mode 100644\nindex 000000000..fb60922e8\n--- /dev/null\n+++ b/playground/fs-serve/__tests__/deny/fs-serve-deny.spec.ts\n@@ -0,0 +1,17 @@\n+import { describe, expect, test } from 'vitest'\n+import { isServe, page, viteTestUrl } from '~utils'\n+\n+describe.runIf(isServe)('main', () => {\n+  test('**/deny/** should deny src/deny/deny.txt', async () => {\n+    const res = await page.request.fetch(\n+      new URL('/src/deny/deny.txt', viteTestUrl).href,\n+    )\n+    expect(res.status()).toBe(403)\n+  })\n+  test('**/deny/** should deny src/deny/.deny', async () => {\n+    const res = await page.request.fetch(\n+      new URL('/src/deny/.deny', viteTestUrl).href,\n+    )\n+    expect(res.status()).toBe(403)\n+  })\n+})\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "ba5269cca81de3f5fbb0f49d58a1c55688043258", "source_date": "Sun Mar 24 13:31:50 2024 +0100", "source_tag": "5.3.0", "target_commit": "96a7f3a41ef2f9351c46f3ab12489bb4efa03cc9", "target_date": "Sun Mar 24 22:25:16 2024 +0900", "target_tag": "4.5.3", "FAIL TO PASS": ["playground/fs-serve/__tests__/deny/fs-serve-deny.spec.ts > main > **/deny/** should deny src/deny/deny.txt", "playground/fs-serve/__tests__/deny/fs-serve-deny.spec.ts > main > **/deny/** should deny src/deny/.deny"], "PASS TO PASS": []}
{"ecosystem": "npm", "repo": "vite", "instance_id": "vite_37", "original_commit_message": "fix: `fs.deny` with globs with directories (#16250)", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/packages/vite/src/node/server/index.ts b/packages/vite/src/node/server/index.ts\nindex 6b254dab7..134a781b9 100644\n--- a/packages/vite/src/node/server/index.ts\n+++ b/packages/vite/src/node/server/index.ts\n@@ -685,10 +685,19 @@ export async function _createServer(\n     _importGlobMap: new Map(),\n     _forceOptimizeOnRestart: false,\n     _pendingRequests: new Map(),\n-    _fsDenyGlob: picomatch(config.server.fs.deny, {\n-      matchBase: true,\n-      nocase: true,\n-    }),\n+    _fsDenyGlob: picomatch(\n+      // matchBase: true does not work as it's documented\n+      // https://github.com/micromatch/picomatch/issues/89\n+      // convert patterns without `/` on our side for now\n+      config.server.fs.deny.map((pattern) =>\n+        pattern.includes('/') ? pattern : `**/${pattern}`,\n+      ),\n+      {\n+        matchBase: false,\n+        nocase: true,\n+        dot: true,\n+      },\n+    ),\n     _shortcutsOptions: undefined,\n   }\n \n\ndiff --git a/playground/fs-serve/root/vite.config-deny.js b/playground/fs-serve/root/vite.config-deny.js\nnew file mode 100644\nindex 000000000..27501c55f\n--- /dev/null\n+++ b/playground/fs-serve/root/vite.config-deny.js\n@@ -0,0 +1,22 @@\n+import path from 'node:path'\n+import { defineConfig } from 'vite'\n+\n+export default defineConfig({\n+  build: {\n+    rollupOptions: {\n+      input: {\n+        main: path.resolve(__dirname, 'src/index.html'),\n+      },\n+    },\n+  },\n+  server: {\n+    fs: {\n+      strict: true,\n+      allow: [path.resolve(__dirname, 'src')],\n+      deny: ['**/deny/**'],\n+    },\n+  },\n+  define: {\n+    ROOT: JSON.stringify(path.dirname(__dirname).replace(/\\\\/g, '/')),\n+  },\n+})\n\n</patch>\n<test_patch>\ndiff --git a/playground/fs-serve/__tests__/deny/fs-serve-deny.spec.ts b/playground/fs-serve/__tests__/deny/fs-serve-deny.spec.ts\nnew file mode 100644\nindex 000000000..fb60922e8\n--- /dev/null\n+++ b/playground/fs-serve/__tests__/deny/fs-serve-deny.spec.ts\n@@ -0,0 +1,17 @@\n+import { describe, expect, test } from 'vitest'\n+import { isServe, page, viteTestUrl } from '~utils'\n+\n+describe.runIf(isServe)('main', () => {\n+  test('**/deny/** should deny src/deny/deny.txt', async () => {\n+    const res = await page.request.fetch(\n+      new URL('/src/deny/deny.txt', viteTestUrl).href,\n+    )\n+    expect(res.status()).toBe(403)\n+  })\n+  test('**/deny/** should deny src/deny/.deny', async () => {\n+    const res = await page.request.fetch(\n+      new URL('/src/deny/.deny', viteTestUrl).href,\n+    )\n+    expect(res.status()).toBe(403)\n+  })\n+})\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "ba5269cca81de3f5fbb0f49d58a1c55688043258", "source_date": "Sun Mar 24 13:31:50 2024 +0100", "source_tag": "5.3.0", "target_commit": "5a056dd2fc80dbafed033062fe6aaf4717309f48", "target_date": "Sun Mar 24 22:05:54 2024 +0900", "target_tag": "5.1.7", "FAIL TO PASS": ["playground/fs-serve/__tests__/deny/fs-serve-deny.spec.ts > main > **/deny/** should deny src/deny/deny.txt", "playground/fs-serve/__tests__/deny/fs-serve-deny.spec.ts > main > **/deny/** should deny src/deny/.deny"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_550", "original_commit_message": "[5.0.x] Fixed CVE-2024-42005 -- Mitigated QuerySet.values() SQL injection attacks against JSON fields.\nThanks Eyal (eyalgabay) for the report.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 277e8a18ca..fe6baca607 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2446,6 +2446,8 @@ class Query(BaseExpression):\n         self.has_select_fields = True\n \n         if fields:\n+            for field in fields:\n+                self.check_alias(field)\n             field_names = []\n             extra_names = []\n             annotation_names = []\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/expressions/models.py b/tests/expressions/models.py\nindex 0cab275631..b9cc86cd4e 100644\n--- a/tests/expressions/models.py\n+++ b/tests/expressions/models.py\n@@ -107,3 +107,10 @@ class UUIDPK(models.Model):\n class UUID(models.Model):\n     uuid = models.UUIDField(null=True)\n     uuid_fk = models.ForeignKey(UUIDPK, models.CASCADE, null=True)\n+\n+\n+class JSONFieldModel(models.Model):\n+    data = models.JSONField(null=True)\n+\n+    class Meta:\n+        required_db_features = {\"supports_json_field\"}\n\ndiff --git a/tests/expressions/test_queryset_values.py b/tests/expressions/test_queryset_values.py\nindex 80addef37b..47bd1358de 100644\n--- a/tests/expressions/test_queryset_values.py\n+++ b/tests/expressions/test_queryset_values.py\n@@ -1,7 +1,7 @@\n from django.db.models import F, Sum\n-from django.test import TestCase\n+from django.test import TestCase, skipUnlessDBFeature\n \n-from .models import Company, Employee\n+from .models import Company, Employee, JSONFieldModel\n \n \n class ValuesExpressionsTests(TestCase):\n@@ -43,6 +43,19 @@ class ValuesExpressionsTests(TestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             Company.objects.values(**{crafted_alias: F(\"ceo__salary\")})\n \n+    @skipUnlessDBFeature(\"supports_json_field\")\n+    def test_values_expression_alias_sql_injection_json_field(self):\n+        crafted_alias = \"\"\"injected_name\" from \"expressions_company\"; --\"\"\"\n+        msg = (\n+            \"Column aliases cannot contain whitespace characters, quotation marks, \"\n+            \"semicolons, or SQL comments.\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            JSONFieldModel.objects.values(f\"data__{crafted_alias}\")\n+\n+        with self.assertRaisesMessage(ValueError, msg):\n+            JSONFieldModel.objects.values_list(f\"data__{crafted_alias}\")\n+\n     def test_values_expression_group_by(self):\n         # values() applies annotate() first, so values selected are grouped by\n         # id, not firstname.\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "32ebcbf2e1fe3e5ba79a6554a167efce81f7422d", "source_date": "Tue Aug 6 08:51:55 2024 +0200", "source_tag": "5.0.8", "target_commit": "f4af67b9b41e0f4c117a8741da3abbd1c869ab28", "target_date": "Wed Jul 31 16:12:35 2024 +0200", "target_tag": "4.2.15", "FAIL TO PASS": ["expressions.test_queryset_values.ValuesExpressionsTests.test_values_expression_alias_sql_injection_json_field"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_551", "original_commit_message": "Fixed CVE-2016-2512 -- Prevented spoofing is_safe_url() with basic auth.\nThis is a security fix.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/utils/http.py b/django/utils/http.py\nindex 2dce7d3add..6e782bd576 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -290,8 +290,12 @@ def is_safe_url(url, host=None):\n         url = url.strip()\n     if not url:\n         return False\n-    # Chrome treats \\ completely as /\n-    url = url.replace('\\\\', '/')\n+    # Chrome treats \\ completely as / in paths but it could be part of some\n+    # basic auth credentials so we need to check both URLs.\n+    return _is_safe_url(url, host) and _is_safe_url(url.replace('\\\\', '/'), host)\n+\n+\n+def _is_safe_url(url, host):\n     # Chrome considers any URL with more than two slashes to be absolute, but\n     # urlparse is not so flexible. Treat any url with three slashes as unsafe.\n     if url.startswith('///'):\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex 6234e269ab..2a9b553b6a 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -97,6 +97,11 @@ class TestUtilsHttp(unittest.TestCase):\n                         'javascript:alert(\"XSS\")',\n                         '\\njavascript:alert(x)',\n                         '\\x08//example.com',\n+                        r'http://otherserver\\@example.com',\n+                        r'http:\\\\testserver\\@example.com',\n+                        r'http://testserver\\me:pass@example.com',\n+                        r'http://testserver\\@example.com',\n+                        r'http:\\\\testserver\\confirm\\me@example.com',\n                         '\\n'):\n             self.assertFalse(http.is_safe_url(bad_url, host='testserver'), \"%s should be blocked\" % bad_url)\n         for good_url in ('/view/?param=http://example.com',\n@@ -106,8 +111,15 @@ class TestUtilsHttp(unittest.TestCase):\n                      'https://testserver/',\n                      'HTTPS://testserver/',\n                      '//testserver/',\n+                     'http://testserver/confirm?email=me@example.com',\n                      '/url%20with%20spaces/'):\n             self.assertTrue(http.is_safe_url(good_url, host='testserver'), \"%s should be allowed\" % good_url)\n+        # Valid basic auth credentials are allowed.\n+        self.assertTrue(http.is_safe_url(r'http://user:pass@testserver/', host='user:pass@testserver'))\n+        # A path without host is allowed.\n+        self.assertTrue(http.is_safe_url('/confirm/me@example.com'))\n+        # Basic auth without host is not allowed.\n+        self.assertFalse(http.is_safe_url(r'http://testserver\\@example.com'))\n \n     def test_urlsafe_base64_roundtrip(self):\n         bytestring = b'foo'\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "c5544d289233f501917e25970c03ed444abbd4f0", "source_date": "Tue Mar 1 11:25:28 2016 -0500", "source_tag": "1.10", "target_commit": "fc6d147a63f89795dbcdecb0559256470fff4380", "target_date": "Tue Mar 1 11:38:49 2016 -0500", "target_tag": "1.9.3", "FAIL TO PASS": ["utils_tests.test_http.TestUtilsHttp.test_is_safe_url"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_552", "original_commit_message": "Fixed CVE-2016-2512 -- Prevented spoofing is_safe_url() with basic auth.\nThis is a security fix.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/utils/http.py b/django/utils/http.py\nindex 2dce7d3add..6e782bd576 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -290,8 +290,12 @@ def is_safe_url(url, host=None):\n         url = url.strip()\n     if not url:\n         return False\n-    # Chrome treats \\ completely as /\n-    url = url.replace('\\\\', '/')\n+    # Chrome treats \\ completely as / in paths but it could be part of some\n+    # basic auth credentials so we need to check both URLs.\n+    return _is_safe_url(url, host) and _is_safe_url(url.replace('\\\\', '/'), host)\n+\n+\n+def _is_safe_url(url, host):\n     # Chrome considers any URL with more than two slashes to be absolute, but\n     # urlparse is not so flexible. Treat any url with three slashes as unsafe.\n     if url.startswith('///'):\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex 6234e269ab..2a9b553b6a 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -97,6 +97,11 @@ class TestUtilsHttp(unittest.TestCase):\n                         'javascript:alert(\"XSS\")',\n                         '\\njavascript:alert(x)',\n                         '\\x08//example.com',\n+                        r'http://otherserver\\@example.com',\n+                        r'http:\\\\testserver\\@example.com',\n+                        r'http://testserver\\me:pass@example.com',\n+                        r'http://testserver\\@example.com',\n+                        r'http:\\\\testserver\\confirm\\me@example.com',\n                         '\\n'):\n             self.assertFalse(http.is_safe_url(bad_url, host='testserver'), \"%s should be blocked\" % bad_url)\n         for good_url in ('/view/?param=http://example.com',\n@@ -106,8 +111,15 @@ class TestUtilsHttp(unittest.TestCase):\n                      'https://testserver/',\n                      'HTTPS://testserver/',\n                      '//testserver/',\n+                     'http://testserver/confirm?email=me@example.com',\n                      '/url%20with%20spaces/'):\n             self.assertTrue(http.is_safe_url(good_url, host='testserver'), \"%s should be allowed\" % good_url)\n+        # Valid basic auth credentials are allowed.\n+        self.assertTrue(http.is_safe_url(r'http://user:pass@testserver/', host='user:pass@testserver'))\n+        # A path without host is allowed.\n+        self.assertTrue(http.is_safe_url('/confirm/me@example.com'))\n+        # Basic auth without host is not allowed.\n+        self.assertFalse(http.is_safe_url(r'http://testserver\\@example.com'))\n \n     def test_urlsafe_base64_roundtrip(self):\n         bytestring = b'foo'\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "c5544d289233f501917e25970c03ed444abbd4f0", "source_date": "Tue Mar 1 11:25:28 2016 -0500", "source_tag": "1.10", "target_commit": "382ab137312961ad62feb8109d70a5a581fe8350", "target_date": "Mon Feb 29 08:07:17 2016 -0500", "target_tag": "1.8.10", "FAIL TO PASS": ["utils_tests.test_http.TestUtilsHttp.test_is_safe_url"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "glance", "instance_id": "glance_554", "original_commit_message": "Prevent file, swift+config and filesystem schemes\nThis change ensures that 'file', 'filesystem', and 'swift+config' URI\nschemes are not allowed when setting the location field. A previous\nfix to CVE-2014-9493 attempted to address this issue but did not\ninclude 'filesystem', a URI scheme allowed by the glance_store.\nWithout this fix in place it is possible for a client to access any file\nthe glance-api server has read permissions for.\nChange-Id: I02cd099a8634b9c7e3cf8f172bcbd33f8edcbc83\nCloses-Bug: #1408663", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/glance/common/store_utils.py b/glance/common/store_utils.py\nindex 8c461892b..679057e9f 100644\n--- a/glance/common/store_utils.py\n+++ b/glance/common/store_utils.py\n@@ -38,6 +38,8 @@ store_utils_opts = [\n CONF = cfg.CONF\n CONF.register_opts(store_utils_opts)\n \n+RESTRICTED_URI_SCHEMAS = frozenset(['file', 'filesystem', 'swift+config'])\n+\n \n def safe_delete_from_backend(context, image_id, location):\n     \"\"\"\n@@ -136,8 +138,7 @@ def validate_external_location(uri):\n     \"\"\"\n \n     # TODO(zhiyan): This function could be moved to glance_store.\n-\n-    pieces = urlparse.urlparse(uri)\n-    valid_schemes = [scheme for scheme in store_api.get_known_schemes()\n-                     if scheme != 'file' and scheme != 'swift+config']\n-    return pieces.scheme in valid_schemes\n+    # TODO(gm): Use a whitelist of allowed schemes\n+    scheme = urlparse.urlparse(uri).scheme\n+    return (scheme in store_api.get_known_schemes() and\n+            scheme not in RESTRICTED_URI_SCHEMAS)\n\n\n</patch>\n<test_patch>\ndiff --git a/glance/tests/unit/test_store_location.py b/glance/tests/unit/test_store_location.py\nindex 2f82146d5..ae527ae55 100644\n--- a/glance/tests/unit/test_store_location.py\n+++ b/glance/tests/unit/test_store_location.py\n@@ -67,12 +67,15 @@ class TestStoreLocation(base.StoreClearingUnitTest):\n \n         loc1 = {'url': 'file:///fake1.img.tar.gz', 'metadata': {}}\n         loc2 = {'url': 'swift+config:///xxx', 'metadata': {}}\n+        loc3 = {'url': 'filesystem:///foo.img.tar.gz', 'metadata': {}}\n \n         # Test for insert location\n         image1 = TestStoreLocation.FakeImageProxy()\n         locations = glance.location.StoreLocations(image1, [])\n         self.assertRaises(exception.BadStoreUri, locations.insert, 0, loc1)\n+        self.assertRaises(exception.BadStoreUri, locations.insert, 0, loc3)\n         self.assertNotIn(loc1, locations)\n+        self.assertNotIn(loc3, locations)\n \n         # Test for set_attr of _locations_proxy\n         image2 = TestStoreLocation.FakeImageProxy()\n\ndiff --git a/glance/tests/unit/v1/test_api.py b/glance/tests/unit/v1/test_api.py\nindex 5ddae5543..acdc7d99a 100644\n--- a/glance/tests/unit/v1/test_api.py\n+++ b/glance/tests/unit/v1/test_api.py\n@@ -1070,31 +1070,23 @@ class TestGlanceAPI(base.IsolatedUnitTest):\n \n     def test_add_copy_from_with_restricted_sources(self):\n         \"\"\"Tests creates an image from copy-from with restricted sources\"\"\"\n-        fixture_headers = {'x-image-meta-store': 'file',\n+        header_template = {'x-image-meta-store': 'file',\n                            'x-image-meta-disk-format': 'vhd',\n-                           'x-glance-api-copy-from': 'file:///etc/passwd',\n                            'x-image-meta-container-format': 'ovf',\n                            'x-image-meta-name': 'fake image #F'}\n \n-        req = webob.Request.blank(\"/images\")\n-        req.method = 'POST'\n-        for k, v in six.iteritems(fixture_headers):\n-            req.headers[k] = v\n-        res = req.get_response(self.api)\n-        self.assertEqual(400, res.status_int)\n+        schemas = [\"file:///etc/passwd\",\n+                   \"swift+config:///xxx\",\n+                   \"filesystem:///etc/passwd\"]\n \n-        fixture_headers = {'x-image-meta-store': 'file',\n-                           'x-image-meta-disk-format': 'vhd',\n-                           'x-glance-api-copy-from': 'swift+config://xxx',\n-                           'x-image-meta-container-format': 'ovf',\n-                           'x-image-meta-name': 'fake image #F'}\n-\n-        req = webob.Request.blank(\"/images\")\n-        req.method = 'POST'\n-        for k, v in six.iteritems(fixture_headers):\n-            req.headers[k] = v\n-        res = req.get_response(self.api)\n-        self.assertEqual(400, res.status_int)\n+        for schema in schemas:\n+            req = webob.Request.blank(\"/images\")\n+            req.method = 'POST'\n+            for k, v in six.iteritems(header_template):\n+                req.headers[k] = v\n+            req.headers['x-glance-api-copy-from'] = schema\n+            res = req.get_response(self.api)\n+            self.assertEqual(400, res.status_int)\n \n     def test_add_copy_from_upload_image_unauthorized_with_body(self):\n         rules = {\"upload_image\": '!', \"modify_image\": '@',\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "a2d986b976e9325a272e2d422465165315d19fe6", "source_date": "Thu Jan 8 10:42:19 2015 -0800", "source_tag": "11.0.0", "target_commit": "5191ed1879c5fd5b2694f922bcedec232f461088", "target_date": "Thu Jan 8 14:43:54 2015 -0800", "target_tag": "2014.2.2", "FAIL TO PASS": ["glance.tests.unit.test_store_location.TestStoreLocation.test_add_location_with_restricted_sources"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "glance", "instance_id": "glance_555", "original_commit_message": "Prevent file, swift+config and filesystem schemes\nThis change ensures that 'file', 'filesystem', and 'swift+config' URI\nschemes are not allowed when setting the location field. A previous\nfix to CVE-2014-9493 attempted to address this issue but did not\ninclude 'filesystem', a URI scheme allowed by the glance_store.\nWithout this fix in place it is possible for a client to access any file\nthe glance-api server has read permissions for.\nChange-Id: I02cd099a8634b9c7e3cf8f172bcbd33f8edcbc83\nCloses-Bug: #1408663\n(cherry picked from commit a2d986b976e9325a272e2d422465165315d19fe6)", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/glance/common/store_utils.py b/glance/common/store_utils.py\nindex b7537ce01..64cfa87d8 100644\n--- a/glance/common/store_utils.py\n+++ b/glance/common/store_utils.py\n@@ -38,6 +38,8 @@ store_utils_opts = [\n CONF = cfg.CONF\n CONF.register_opts(store_utils_opts)\n \n+RESTRICTED_URI_SCHEMAS = frozenset(['file', 'filesystem', 'swift+config'])\n+\n \n def safe_delete_from_backend(context, image_id, location):\n     \"\"\"\n@@ -136,8 +138,7 @@ def validate_external_location(uri):\n     \"\"\"\n \n     # TODO(zhiyan): This function could be moved to glance_store.\n-\n-    pieces = urlparse.urlparse(uri)\n-    valid_schemes = [scheme for scheme in store_api.get_known_schemes()\n-                     if scheme != 'file' and scheme != 'swift+config']\n-    return pieces.scheme in valid_schemes\n+    # TODO(gm): Use a whitelist of allowed schemes\n+    scheme = urlparse.urlparse(uri).scheme\n+    return (scheme in store_api.get_known_schemes() and\n+            scheme not in RESTRICTED_URI_SCHEMAS)\n\n\n</patch>\n<test_patch>\ndiff --git a/glance/tests/unit/test_store_location.py b/glance/tests/unit/test_store_location.py\nindex c9ee44cd6..efaecd89f 100644\n--- a/glance/tests/unit/test_store_location.py\n+++ b/glance/tests/unit/test_store_location.py\n@@ -69,12 +69,15 @@ class TestStoreLocation(base.StoreClearingUnitTest):\n \n         loc1 = {'url': 'file:///fake1.img.tar.gz', 'metadata': {}}\n         loc2 = {'url': 'swift+config:///xxx', 'metadata': {}}\n+        loc3 = {'url': 'filesystem:///foo.img.tar.gz', 'metadata': {}}\n \n         # Test for insert location\n         image1 = TestStoreLocation.FakeImageProxy()\n         locations = glance.location.StoreLocations(image1, [])\n         self.assertRaises(exception.BadStoreUri, locations.insert, 0, loc1)\n+        self.assertRaises(exception.BadStoreUri, locations.insert, 0, loc3)\n         self.assertNotIn(loc1, locations)\n+        self.assertNotIn(loc3, locations)\n \n         # Test for set_attr of _locations_proxy\n         image2 = TestStoreLocation.FakeImageProxy()\n\ndiff --git a/glance/tests/unit/v1/test_api.py b/glance/tests/unit/v1/test_api.py\nindex 4ec136d86..39e9a44d1 100644\n--- a/glance/tests/unit/v1/test_api.py\n+++ b/glance/tests/unit/v1/test_api.py\n@@ -1071,31 +1071,23 @@ class TestGlanceAPI(base.IsolatedUnitTest):\n \n     def test_add_copy_from_with_restricted_sources(self):\n         \"\"\"Tests creates an image from copy-from with restricted sources\"\"\"\n-        fixture_headers = {'x-image-meta-store': 'file',\n+        header_template = {'x-image-meta-store': 'file',\n                            'x-image-meta-disk-format': 'vhd',\n-                           'x-glance-api-copy-from': 'file:///etc/passwd',\n                            'x-image-meta-container-format': 'ovf',\n                            'x-image-meta-name': 'fake image #F'}\n \n-        req = webob.Request.blank(\"/images\")\n-        req.method = 'POST'\n-        for k, v in six.iteritems(fixture_headers):\n-            req.headers[k] = v\n-        res = req.get_response(self.api)\n-        self.assertEqual(400, res.status_int)\n+        schemas = [\"file:///etc/passwd\",\n+                   \"swift+config:///xxx\",\n+                   \"filesystem:///etc/passwd\"]\n \n-        fixture_headers = {'x-image-meta-store': 'file',\n-                           'x-image-meta-disk-format': 'vhd',\n-                           'x-glance-api-copy-from': 'swift+config://xxx',\n-                           'x-image-meta-container-format': 'ovf',\n-                           'x-image-meta-name': 'fake image #F'}\n-\n-        req = webob.Request.blank(\"/images\")\n-        req.method = 'POST'\n-        for k, v in six.iteritems(fixture_headers):\n-            req.headers[k] = v\n-        res = req.get_response(self.api)\n-        self.assertEqual(400, res.status_int)\n+        for schema in schemas:\n+            req = webob.Request.blank(\"/images\")\n+            req.method = 'POST'\n+            for k, v in six.iteritems(header_template):\n+                req.headers[k] = v\n+            req.headers['x-glance-api-copy-from'] = schema\n+            res = req.get_response(self.api)\n+            self.assertEqual(400, res.status_int)\n \n     def test_add_copy_from_upload_image_unauthorized_with_body(self):\n         rules = {\"upload_image\": '!', \"modify_image\": '@',\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location & namespace changes", "source_commit": "5191ed1879c5fd5b2694f922bcedec232f461088", "source_date": "Thu Jan 8 14:43:54 2015 -0800", "source_tag": "2014.2.2", "target_commit": "7d3a1db33ccbd25b9fc7326ce3468eabd2a41a99", "target_date": "Thu Jan 8 15:49:45 2015 -0800", "target_tag": "2014.1.4", "FAIL TO PASS": ["glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_copy_from_with_restricted_sources"], "PASS TO PASS": ["glance.tests.unit.test_store_location.TestStoreLocation.test_add_location_with_restricted_sources"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_558", "original_commit_message": "[4.1.x] Fixed CVE-2023-23969 -- Prevented DoS with pathological values for Accept-Language.\nThe parsed values of Accept-Language headers are cached in order to\navoid repetitive parsing. This leads to a potential denial-of-service\nvector via excessive memory usage if the raw value of Accept-Language\nheaders is very large.\nAccept-Language headers are now limited to a maximum length in order\nto avoid this issue.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py\nindex 423f30eaba..2974cc6131 100644\n--- a/django/utils/translation/trans_real.py\n+++ b/django/utils/translation/trans_real.py\n@@ -30,6 +30,11 @@ _default = None\n # magic gettext number to separate context from message\n CONTEXT_SEPARATOR = \"\\x04\"\n \n+# Maximum number of characters that will be parsed from the Accept-Language\n+# header to prevent possible denial of service or memory exhaustion attacks.\n+# About 10x longer than the longest value shown on MDN’s Accept-Language page.\n+ACCEPT_LANGUAGE_HEADER_MAX_LENGTH = 500\n+\n # Format of Accept-Language header values. From RFC 2616, section 14.4 and 3.9\n # and RFC 3066, section 2.1\n accept_language_re = _lazy_re_compile(\n@@ -586,7 +591,7 @@ def get_language_from_request(request, check_path=False):\n \n \n @functools.lru_cache(maxsize=1000)\n-def parse_accept_lang_header(lang_string):\n+def _parse_accept_lang_header(lang_string):\n     \"\"\"\n     Parse the lang_string, which is the body of an HTTP Accept-Language\n     header, and return a tuple of (lang, q-value), ordered by 'q' values.\n@@ -608,3 +613,27 @@ def parse_accept_lang_header(lang_string):\n         result.append((lang, priority))\n     result.sort(key=lambda k: k[1], reverse=True)\n     return tuple(result)\n+\n+\n+def parse_accept_lang_header(lang_string):\n+    \"\"\"\n+    Parse the value of the Accept-Language header up to a maximum length.\n+\n+    The value of the header is truncated to a maximum length to avoid potential\n+    denial of service and memory exhaustion attacks. Excessive memory could be\n+    used if the raw value is very large as it would be cached due to the use of\n+    functools.lru_cache() to avoid repetitive parsing of common header values.\n+    \"\"\"\n+    # If the header value doesn't exceed the maximum allowed length, parse it.\n+    if len(lang_string) <= ACCEPT_LANGUAGE_HEADER_MAX_LENGTH:\n+        return _parse_accept_lang_header(lang_string)\n+\n+    # If there is at least one comma in the value, parse up to the last comma\n+    # before the max length, skipping any truncated parts at the end of the\n+    # header value.\n+    if (index := lang_string.rfind(\",\", 0, ACCEPT_LANGUAGE_HEADER_MAX_LENGTH)) > 0:\n+        return _parse_accept_lang_header(lang_string[:index])\n+\n+    # Don't attempt to parse if there is only one language-range value which is\n+    # longer than the maximum allowed length and so truncated.\n+    return ()\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/i18n/tests.py b/tests/i18n/tests.py\nindex 40fc306706..b361a84bd2 100644\n--- a/tests/i18n/tests.py\n+++ b/tests/i18n/tests.py\n@@ -1730,6 +1730,14 @@ class MiscTests(SimpleTestCase):\n             (\"de;q=0.\", [(\"de\", 0.0)]),\n             (\"en; q=1,\", [(\"en\", 1.0)]),\n             (\"en; q=1.0, * ; q=0.5\", [(\"en\", 1.0), (\"*\", 0.5)]),\n+            (\n+                \"en\" + \"-x\" * 20,\n+                [(\"en-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x\", 1.0)],\n+            ),\n+            (\n+                \", \".join([\"en; q=1.0\"] * 20),\n+                [(\"en\", 1.0)] * 20,\n+            ),\n             # Bad headers\n             (\"en-gb;q=1.0000\", []),\n             (\"en;q=0.1234\", []),\n@@ -1746,6 +1754,10 @@ class MiscTests(SimpleTestCase):\n             (\"\", []),\n             (\"en;q=1e0\", []),\n             (\"en-au;q=１.０\", []),\n+            # Invalid as language-range value too long.\n+            (\"xxxxxxxx\" + \"-xxxxxxxx\" * 500, []),\n+            # Header value too long, only parse up to limit.\n+            (\", \".join([\"en; q=1.0\"] * 500), [(\"en\", 1.0)] * 45),\n         ]\n         for value, expected in tests:\n             with self.subTest(value=value):\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "9d7bd5a56b1ce0576e8e07a8001373576d277942", "source_date": "Wed Feb 1 09:46:23 2023 +0100", "source_tag": "4.1.6", "target_commit": "c7e0151fdf33e1b11d488b6f67b94fdf3a30614a", "target_date": "Wed Feb 1 09:48:18 2023 +0100", "target_tag": "3.2.17", "FAIL TO PASS": ["i18n.tests.MiscTests.test_parse_spec_http_header"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_559", "original_commit_message": "[4.1.x] Fixed CVE-2023-23969 -- Prevented DoS with pathological values for Accept-Language.\nThe parsed values of Accept-Language headers are cached in order to\navoid repetitive parsing. This leads to a potential denial-of-service\nvector via excessive memory usage if the raw value of Accept-Language\nheaders is very large.\nAccept-Language headers are now limited to a maximum length in order\nto avoid this issue.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py\nindex 423f30eaba..2974cc6131 100644\n--- a/django/utils/translation/trans_real.py\n+++ b/django/utils/translation/trans_real.py\n@@ -30,6 +30,11 @@ _default = None\n # magic gettext number to separate context from message\n CONTEXT_SEPARATOR = \"\\x04\"\n \n+# Maximum number of characters that will be parsed from the Accept-Language\n+# header to prevent possible denial of service or memory exhaustion attacks.\n+# About 10x longer than the longest value shown on MDN’s Accept-Language page.\n+ACCEPT_LANGUAGE_HEADER_MAX_LENGTH = 500\n+\n # Format of Accept-Language header values. From RFC 2616, section 14.4 and 3.9\n # and RFC 3066, section 2.1\n accept_language_re = _lazy_re_compile(\n@@ -586,7 +591,7 @@ def get_language_from_request(request, check_path=False):\n \n \n @functools.lru_cache(maxsize=1000)\n-def parse_accept_lang_header(lang_string):\n+def _parse_accept_lang_header(lang_string):\n     \"\"\"\n     Parse the lang_string, which is the body of an HTTP Accept-Language\n     header, and return a tuple of (lang, q-value), ordered by 'q' values.\n@@ -608,3 +613,27 @@ def parse_accept_lang_header(lang_string):\n         result.append((lang, priority))\n     result.sort(key=lambda k: k[1], reverse=True)\n     return tuple(result)\n+\n+\n+def parse_accept_lang_header(lang_string):\n+    \"\"\"\n+    Parse the value of the Accept-Language header up to a maximum length.\n+\n+    The value of the header is truncated to a maximum length to avoid potential\n+    denial of service and memory exhaustion attacks. Excessive memory could be\n+    used if the raw value is very large as it would be cached due to the use of\n+    functools.lru_cache() to avoid repetitive parsing of common header values.\n+    \"\"\"\n+    # If the header value doesn't exceed the maximum allowed length, parse it.\n+    if len(lang_string) <= ACCEPT_LANGUAGE_HEADER_MAX_LENGTH:\n+        return _parse_accept_lang_header(lang_string)\n+\n+    # If there is at least one comma in the value, parse up to the last comma\n+    # before the max length, skipping any truncated parts at the end of the\n+    # header value.\n+    if (index := lang_string.rfind(\",\", 0, ACCEPT_LANGUAGE_HEADER_MAX_LENGTH)) > 0:\n+        return _parse_accept_lang_header(lang_string[:index])\n+\n+    # Don't attempt to parse if there is only one language-range value which is\n+    # longer than the maximum allowed length and so truncated.\n+    return ()\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/i18n/tests.py b/tests/i18n/tests.py\nindex 40fc306706..b361a84bd2 100644\n--- a/tests/i18n/tests.py\n+++ b/tests/i18n/tests.py\n@@ -1730,6 +1730,14 @@ class MiscTests(SimpleTestCase):\n             (\"de;q=0.\", [(\"de\", 0.0)]),\n             (\"en; q=1,\", [(\"en\", 1.0)]),\n             (\"en; q=1.0, * ; q=0.5\", [(\"en\", 1.0), (\"*\", 0.5)]),\n+            (\n+                \"en\" + \"-x\" * 20,\n+                [(\"en-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x\", 1.0)],\n+            ),\n+            (\n+                \", \".join([\"en; q=1.0\"] * 20),\n+                [(\"en\", 1.0)] * 20,\n+            ),\n             # Bad headers\n             (\"en-gb;q=1.0000\", []),\n             (\"en;q=0.1234\", []),\n@@ -1746,6 +1754,10 @@ class MiscTests(SimpleTestCase):\n             (\"\", []),\n             (\"en;q=1e0\", []),\n             (\"en-au;q=１.０\", []),\n+            # Invalid as language-range value too long.\n+            (\"xxxxxxxx\" + \"-xxxxxxxx\" * 500, []),\n+            # Header value too long, only parse up to limit.\n+            (\", \".join([\"en; q=1.0\"] * 500), [(\"en\", 1.0)] * 45),\n         ]\n         for value, expected in tests:\n             with self.subTest(value=value):\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "9d7bd5a56b1ce0576e8e07a8001373576d277942", "source_date": "Wed Feb 1 09:46:23 2023 +0100", "source_tag": "4.1.6", "target_commit": "4452642f193533e288a52c02efb5bbc766a68f95", "target_date": "Wed Feb 1 09:47:17 2023 +0100", "target_tag": "4.0.9", "FAIL TO PASS": ["i18n.tests.MiscTests.test_parse_spec_http_header"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_562", "original_commit_message": "[1.8.x] Prevented newlines from being accepted in some validators.\nThis is a security fix; disclosure to follow shortly.\nThanks to Sjoerd Job Postmus for the report and draft patch.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/core/validators.py b/django/core/validators.py\nindex ac10d92956..f97b3d9772 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -83,7 +83,7 @@ class URLValidator(RegexValidator):\n         r'(?:' + ipv4_re + '|' + ipv6_re + '|' + host_re + ')'\n         r'(?::\\d{2,5})?'  # port\n         r'(?:[/?#][^\\s]*)?'  # resource path\n-        r'$', re.IGNORECASE)\n+        r'\\Z', re.IGNORECASE)\n     message = _('Enter a valid URL.')\n     schemes = ['http', 'https', 'ftp', 'ftps']\n \n@@ -125,12 +125,15 @@ class URLValidator(RegexValidator):\n                     raise ValidationError(self.message, code=self.code)\n             url = value\n \n+integer_validator = RegexValidator(\n+    re.compile('^-?\\d+\\Z'),\n+    message=_('Enter a valid integer.'),\n+    code='invalid',\n+)\n+\n \n def validate_integer(value):\n-    try:\n-        int(value)\n-    except (ValueError, TypeError):\n-        raise ValidationError(_('Enter a valid integer.'), code='invalid')\n+    return integer_validator(value)\n \n \n @deconstructible\n@@ -138,17 +141,17 @@ class EmailValidator(object):\n     message = _('Enter a valid email address.')\n     code = 'invalid'\n     user_regex = re.compile(\n-        r\"(^[-!#$%&'*+/=?^_`{}|~0-9A-Z]+(\\.[-!#$%&'*+/=?^_`{}|~0-9A-Z]+)*$\"  # dot-atom\n-        r'|^\"([\\001-\\010\\013\\014\\016-\\037!#-\\[\\]-\\177]|\\\\[\\001-\\011\\013\\014\\016-\\177])*\"$)',  # quoted-string\n+        r\"(^[-!#$%&'*+/=?^_`{}|~0-9A-Z]+(\\.[-!#$%&'*+/=?^_`{}|~0-9A-Z]+)*\\Z\"  # dot-atom\n+        r'|^\"([\\001-\\010\\013\\014\\016-\\037!#-\\[\\]-\\177]|\\\\[\\001-\\011\\013\\014\\016-\\177])*\"\\Z)',  # quoted-string\n         re.IGNORECASE)\n     domain_regex = re.compile(\n         # max length of the domain is 249: 254 (max email length) minus one\n         # period, two characters for the TLD, @ sign, & one character before @.\n-        r'(?:[A-Z0-9](?:[A-Z0-9-]{0,247}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}|[A-Z0-9-]{2,}(?<!-))$',\n+        r'(?:[A-Z0-9](?:[A-Z0-9-]{0,247}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}|[A-Z0-9-]{2,}(?<!-))\\Z',\n         re.IGNORECASE)\n     literal_regex = re.compile(\n         # literal form, ipv4 or ipv6 address (SMTP 4.1.3)\n-        r'\\[([A-f0-9:\\.]+)\\]$',\n+        r'\\[([A-f0-9:\\.]+)\\]\\Z',\n         re.IGNORECASE)\n     domain_whitelist = ['localhost']\n \n@@ -206,14 +209,14 @@ class EmailValidator(object):\n \n validate_email = EmailValidator()\n \n-slug_re = re.compile(r'^[-a-zA-Z0-9_]+$')\n+slug_re = re.compile(r'^[-a-zA-Z0-9_]+\\Z')\n validate_slug = RegexValidator(\n     slug_re,\n     _(\"Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.\"),\n     'invalid'\n )\n \n-ipv4_re = re.compile(r'^(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(\\.(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}$')\n+ipv4_re = re.compile(r'^(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(\\.(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}\\Z')\n validate_ipv4_address = RegexValidator(ipv4_re, _('Enter a valid IPv4 address.'), 'invalid')\n \n \n@@ -254,7 +257,7 @@ def ip_address_validators(protocol, unpack_ipv4):\n         raise ValueError(\"The protocol '%s' is unknown. Supported: %s\"\n                          % (protocol, list(ip_address_validator_map)))\n \n-comma_separated_int_list_re = re.compile('^[\\d,]+$')\n+comma_separated_int_list_re = re.compile('^[\\d,]+\\Z')\n validate_comma_separated_integer_list = RegexValidator(\n     comma_separated_int_list_re,\n     _('Enter only digits separated by commas.'),\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 869c6d91cb..e410905b50 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -28,10 +28,12 @@ TEST_DATA = [\n     (validate_integer, '42', None),\n     (validate_integer, '-42', None),\n     (validate_integer, -42, None),\n-    (validate_integer, -42.5, None),\n \n+    (validate_integer, -42.5, ValidationError),\n     (validate_integer, None, ValidationError),\n     (validate_integer, 'a', ValidationError),\n+    (validate_integer, '\\n42', ValidationError),\n+    (validate_integer, '42\\n', ValidationError),\n \n     (validate_email, 'email@here.com', None),\n     (validate_email, 'weirder-email@here.and.there.com', None),\n@@ -72,6 +74,11 @@ TEST_DATA = [\n     # Max length of domain name in email is 249 (see validator for calculation)\n     (validate_email, 'a@%s.us' % ('a' * 249), None),\n     (validate_email, 'a@%s.us' % ('a' * 250), ValidationError),\n+    # Trailing newlines in username or domain not allowed\n+    (validate_email, 'a@b.com\\n', ValidationError),\n+    (validate_email, 'a\\n@b.com', ValidationError),\n+    (validate_email, '\"test@test\"\\n@example.com', ValidationError),\n+    (validate_email, 'a@[127.0.0.1]\\n', ValidationError),\n \n     (validate_slug, 'slug-ok', None),\n     (validate_slug, 'longer-slug-still-ok', None),\n@@ -84,6 +91,7 @@ TEST_DATA = [\n     (validate_slug, 'some@mail.com', ValidationError),\n     (validate_slug, '你好', ValidationError),\n     (validate_slug, '\\n', ValidationError),\n+    (validate_slug, 'trailing-newline\\n', ValidationError),\n \n     (validate_ipv4_address, '1.1.1.1', None),\n     (validate_ipv4_address, '255.0.0.0', None),\n@@ -93,6 +101,7 @@ TEST_DATA = [\n     (validate_ipv4_address, '25.1.1.', ValidationError),\n     (validate_ipv4_address, '25,1,1,1', ValidationError),\n     (validate_ipv4_address, '25.1 .1.1', ValidationError),\n+    (validate_ipv4_address, '1.1.1.1\\n', ValidationError),\n \n     # validate_ipv6_address uses django.utils.ipv6, which\n     # is tested in much greater detail in its own testcase\n@@ -126,6 +135,7 @@ TEST_DATA = [\n     (validate_comma_separated_integer_list, '', ValidationError),\n     (validate_comma_separated_integer_list, 'a,b,c', ValidationError),\n     (validate_comma_separated_integer_list, '1, 2, 3', ValidationError),\n+    (validate_comma_separated_integer_list, '1,2,3\\n', ValidationError),\n \n     (MaxValueValidator(10), 10, None),\n     (MaxValueValidator(10), -10, None),\n@@ -159,6 +169,9 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git://example.com/', None),\n \n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n+    # Trailing newlines not accepted\n+    (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n \n     (BaseValidator(True), True, None),\n     (BaseValidator(True), False, ValidationError),\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "logical and structural changes", "source_commit": "574dd5e0b0fbb877ae5827b1603d298edc9bb2a0", "source_date": "Wed Jul 8 15:23:18 2015 -0400", "source_tag": "1.8.3", "target_commit": "ae49b4d994656bc037513dcd064cb9ce5bb85649", "target_date": "Wed Jul 8 07:35:43 2015 -0400", "target_tag": "1.7.9", "FAIL TO PASS": ["validators.tests.TestSimpleValidators.test_RegexValidator_raises_error_90", "validators.tests.TestSimpleValidators.test_RegexValidator_raises_error_56", "validators.tests.TestSimpleValidators.test_URLValidator_raises_error_142", "validators.tests.TestSimpleValidators.test_validate_integer_raises_error_7", "validators.tests.TestSimpleValidators.test_EmailValidator_raises_error_45", "validators.tests.TestSimpleValidators.test_validate_integer_raises_error_3", "validators.tests.TestSimpleValidators.test_EmailValidator_raises_error_43", "validators.tests.TestSimpleValidators.test_RegexValidator_raises_error_64", "validators.tests.TestSimpleValidators.test_EmailValidator_raises_error_42", "validators.tests.TestSimpleValidators.test_validate_integer_raises_error_6", "validators.tests.TestSimpleValidators.test_EmailValidator_raises_error_44"], "PASS TO PASS": []}
{"ecosystem": "npm", "repo": "vite", "instance_id": "vite_50", "original_commit_message": "fix: fs deny for case insensitive systems (#15653)", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/packages/vite/src/node/server/index.ts b/packages/vite/src/node/server/index.ts\nindex bec44dafb..eb34efa3d 100644\n--- a/packages/vite/src/node/server/index.ts\n+++ b/packages/vite/src/node/server/index.ts\n@@ -617,7 +617,10 @@ export async function _createServer(\n     _importGlobMap: new Map(),\n     _forceOptimizeOnRestart: false,\n     _pendingRequests: new Map(),\n-    _fsDenyGlob: picomatch(config.server.fs.deny, { matchBase: true }),\n+    _fsDenyGlob: picomatch(config.server.fs.deny, {\n+      matchBase: true,\n+      nocase: true,\n+    }),\n     _shortcutsOptions: undefined,\n   }\n \n\n\n</patch>\n<test_patch>\ndiff --git a/playground/fs-serve/__tests__/base/fs-serve-base.spec.ts b/playground/fs-serve/__tests__/base/fs-serve-base.spec.ts\nindex 4660fafcc..51e87ccd3 100644\n--- a/playground/fs-serve/__tests__/base/fs-serve-base.spec.ts\n+++ b/playground/fs-serve/__tests__/base/fs-serve-base.spec.ts\n@@ -92,7 +92,13 @@ describe.runIf(isServe)('main', () => {\n   })\n \n   test('denied', async () => {\n-    expect(await page.textContent('.unsafe-dotenv')).toBe('404')\n+    expect(await page.textContent('.unsafe-dotenv')).toBe('403')\n+  })\n+\n+  test('denied EnV casing', async () => {\n+    // It is 403 in case insensitive system, 404 in others\n+    const code = await page.textContent('.unsafe-dotEnV-casing')\n+    expect(code === '403' || code === '404').toBeTruthy()\n   })\n })\n \n\ndiff --git a/playground/fs-serve/__tests__/fs-serve.spec.ts b/playground/fs-serve/__tests__/fs-serve.spec.ts\nindex 86e030326..9d9d4c6ec 100644\n--- a/playground/fs-serve/__tests__/fs-serve.spec.ts\n+++ b/playground/fs-serve/__tests__/fs-serve.spec.ts\n@@ -92,7 +92,13 @@ describe.runIf(isServe)('main', () => {\n   })\n \n   test('denied', async () => {\n-    expect(await page.textContent('.unsafe-dotenv')).toBe('404')\n+    expect(await page.textContent('.unsafe-dotenv')).toBe('403')\n+  })\n+\n+  test('denied EnV casing', async () => {\n+    // It is 403 in case insensitive system, 404 in others\n+    const code = await page.textContent('.unsafe-dotEnV-casing')\n+    expect(code === '403' || code === '404').toBeTruthy()\n   })\n })\n \n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "91641c4da0a011d4c5352e88fc68389d4e1289a5", "source_date": "Fri Jan 19 14:05:17 2024 +0100", "source_tag": "5.0.12", "target_commit": "eeec23bbc9d476c54a3a6d36e78455867185a7cb", "target_date": "Fri Jan 19 14:08:04 2024 +0100", "target_tag": "4.5.2", "FAIL TO PASS": ["playground/fs-serve/__tests__/fs-serve.spec.ts > main > denied EnV casing", "playground/fs-serve/__tests__/fs-serve.spec.ts > main > denied", "playground/fs-serve/__tests__/base/fs-serve-base.spec.ts > main > denied", "playground/fs-serve/__tests__/base/fs-serve-base.spec.ts > main > denied EnV casing"], "PASS TO PASS": []}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_1076", "original_commit_message": "Merge branch 'feature/token_self_revocation' into prerelease/4.7.x\n[#152093534] https://www.pivotaltracker.com/story/show/152093534\n[#152164930] https://www.pivotaltracker.com/story/show/152164930", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/TokenRevocationEndpoint.java b/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/TokenRevocationEndpoint.java\nindex 80393a81a..6b6353a23 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/TokenRevocationEndpoint.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/TokenRevocationEndpoint.java\n@@ -16,6 +16,7 @@ package org.cloudfoundry.identity.uaa.oauth;\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n+import org.cloudfoundry.identity.uaa.audit.event.SystemDeletable;\n import org.cloudfoundry.identity.uaa.authentication.UaaPrincipal;\n import org.cloudfoundry.identity.uaa.oauth.client.ClientConstants;\n import org.cloudfoundry.identity.uaa.oauth.token.RevocableToken;\n@@ -88,10 +89,12 @@ public class TokenRevocationEndpoint {\n     @RequestMapping(\"/oauth/token/revoke/client/{clientId}\")\n     public ResponseEntity<Void> revokeTokensForClient(@PathVariable String clientId) {\n         logger.debug(\"Revoking tokens for client: \" + clientId);\n-        BaseClientDetails client = (BaseClientDetails)clientDetailsService.loadClientByClientId(clientId, IdentityZoneHolder.get().getId());\n+        String zoneId = IdentityZoneHolder.get().getId();\n+        BaseClientDetails client = (BaseClientDetails)clientDetailsService.loadClientByClientId(clientId, zoneId);\n         client.addAdditionalInformation(ClientConstants.TOKEN_SALT,generator.generate());\n-        clientDetailsService.updateClientDetails(client, IdentityZoneHolder.get().getId());\n+        clientDetailsService.updateClientDetails(client, zoneId);\n         logger.debug(\"Tokens revoked for client: \" + clientId);\n+        ((SystemDeletable)tokenProvisioning).deleteByClient(clientId, zoneId);\n         return new ResponseEntity<>(OK);\n     }\n \n\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/token/JdbcRevocableTokenProvisioning.java b/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/token/JdbcRevocableTokenProvisioning.java\nindex 3d5345f2d..92f656e50 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/token/JdbcRevocableTokenProvisioning.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/token/JdbcRevocableTokenProvisioning.java\n@@ -55,7 +55,7 @@ public class JdbcRevocableTokenProvisioning implements RevocableTokenProvisionin\n     protected AtomicLong lastExpiredCheck = new AtomicLong(0);\n     protected long expirationCheckInterval = 30000; //30 seconds\n \n-    protected JdbcRevocableTokenProvisioning(JdbcTemplate jdbcTemplate) {\n+    public JdbcRevocableTokenProvisioning(JdbcTemplate jdbcTemplate) {\n         this.rowMapper =  new RevocableTokenRowMapper();\n         this.template = jdbcTemplate;\n     }\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/TokenRevocationEndpointTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/TokenRevocationEndpointTests.java\nnew file mode 100644\nindex 000000000..b593ec7ee\n--- /dev/null\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/TokenRevocationEndpointTests.java\n@@ -0,0 +1,122 @@\n+/*\n+ * ****************************************************************************\n+ *     Cloud Foundry\n+ *     Copyright (c) [2009-2017] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ * ****************************************************************************\n+ */\n+\n+package org.cloudfoundry.identity.uaa.oauth;\n+\n+import org.cloudfoundry.identity.uaa.authentication.UaaAuthentication;\n+import org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationDetails;\n+import org.cloudfoundry.identity.uaa.authentication.UaaPrincipal;\n+import org.cloudfoundry.identity.uaa.constants.OriginKeys;\n+import org.cloudfoundry.identity.uaa.oauth.token.JdbcRevocableTokenProvisioning;\n+import org.cloudfoundry.identity.uaa.oauth.token.RevocableToken;\n+import org.cloudfoundry.identity.uaa.resources.jdbc.JdbcPagingListFactory;\n+import org.cloudfoundry.identity.uaa.scim.ScimUserProvisioning;\n+import org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimUserProvisioning;\n+import org.cloudfoundry.identity.uaa.test.JdbcTestBase;\n+import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;\n+import org.cloudfoundry.identity.uaa.zone.MultitenantJdbcClientDetailsService;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.oauth2.common.util.RandomValueStringGenerator;\n+import org.springframework.security.oauth2.provider.ClientDetails;\n+import org.springframework.security.oauth2.provider.OAuth2Request;\n+import org.springframework.security.oauth2.provider.client.BaseClientDetails;\n+\n+import java.util.Collections;\n+\n+import static org.cloudfoundry.identity.uaa.oauth.client.ClientConstants.TOKEN_SALT;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+\n+public class TokenRevocationEndpointTests extends JdbcTestBase {\n+\n+    private TokenRevocationEndpoint endpoint;\n+    private RandomValueStringGenerator generator;\n+    private BaseClientDetails client;\n+    private ApplicationEventPublisher publisher;\n+    private MultitenantJdbcClientDetailsService clientService;\n+\n+    @Before\n+    public void setupForTokenRevocation() throws Exception {\n+        String zoneId = IdentityZoneHolder.get().getId();\n+        generator = new RandomValueStringGenerator();\n+        String clientId = generator.generate().toLowerCase();\n+        client = new BaseClientDetails(clientId, \"\", \"some.scopes\", \"client_credentials\", \"authorities\");\n+        client.addAdditionalInformation(TOKEN_SALT, \"pre-salt\");\n+        clientService = spy(new MultitenantJdbcClientDetailsService(jdbcTemplate));\n+        clientService.addClientDetails(client, zoneId);\n+\n+        ScimUserProvisioning userProvisioning = new JdbcScimUserProvisioning(\n+            jdbcTemplate,\n+            new JdbcPagingListFactory(jdbcTemplate, limitSqlAdapter)\n+        );\n+        JdbcRevocableTokenProvisioning provisioning = spy(new JdbcRevocableTokenProvisioning(jdbcTemplate));\n+        endpoint = spy(new TokenRevocationEndpoint(clientService, userProvisioning, provisioning));\n+        publisher = mock(ApplicationEventPublisher.class);\n+\n+        SecurityContextHolder.getContext().setAuthentication(\n+            new UaaOauth2Authentication(\n+                \"token-value\",\n+                zoneId,\n+                mock(OAuth2Request.class),\n+                new UaaAuthentication(\n+                    new UaaPrincipal(\"id\", \"username\", \"username@test.com\", OriginKeys.UAA, \"\", zoneId),\n+                    Collections.emptyList(),\n+                    mock(UaaAuthenticationDetails.class)\n+                )\n+            )\n+        );\n+\n+        provisioning.create(\n+            new RevocableToken()\n+                .setClientId(client.getClientId())\n+                .setTokenId(\"token-id\")\n+                .setUserId(null)\n+                .setResponseType(RevocableToken.TokenType.ACCESS_TOKEN)\n+                .setValue(\"value\")\n+                .setIssuedAt(System.currentTimeMillis()),\n+            zoneId\n+        );\n+    }\n+\n+    @After\n+    public void cleanup() throws Exception {\n+        SecurityContextHolder.clearContext();\n+        IdentityZoneHolder.clear();\n+    }\n+\n+    @Test\n+    public void revokeTokensForClient() throws Exception {\n+        assertEquals(\"pre-salt\", getClient().getAdditionalInformation().get(TOKEN_SALT));\n+        assertEquals(1, clientTokenCount());\n+        endpoint.revokeTokensForClient(client.getClientId());\n+        assertNotEquals(\"pre-salt\", getClient().getAdditionalInformation().get(TOKEN_SALT));\n+        assertEquals(0, clientTokenCount());\n+    }\n+\n+    public ClientDetails getClient() {\n+        return clientService.loadClientByClientId(client.getClientId());\n+    }\n+\n+    public int clientTokenCount() {\n+        return jdbcTemplate.queryForObject(\"select count(*) from revocable_tokens where client_id = ?\", Integer.class, client.getClientId());\n+    }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/TokenEndpointDocs.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/TokenEndpointDocs.java\nindex 96a5f0a56..3c5a4953a 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/TokenEndpointDocs.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/TokenEndpointDocs.java\n@@ -707,7 +707,7 @@ public class TokenEndpointDocs extends AbstractTokenMockMvcTests {\n                         true\n                 );\n         Snippet requestHeaders = requestHeaders(\n-            headerWithName(\"Authorization\").description(\"Bearer token with uaa.admin or tokens.revoke scope. Any token with the matching client_id may also be used for self revocation.\"),\n+            headerWithName(\"Authorization\").description(\"Bearer token with uaa.admin or tokens.revoke scope.\"),\n             IDENTITY_ZONE_ID_HEADER,\n             IDENTITY_ZONE_SUBDOMAIN_HEADER\n         );\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/token/TokenRevocationEndpointTest.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/token/TokenRevocationEndpointTest.java\nindex 4d3478bf7..88c4c9d4f 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/token/TokenRevocationEndpointTest.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/token/TokenRevocationEndpointTest.java\n@@ -72,7 +72,7 @@ public class TokenRevocationEndpointTest extends AbstractTokenMockMvcTests {\n     }\n \n     @Test\n-    public void revokeOtherClientToken() throws Exception {\n+    public void revokeOtherClientTokenByJti() throws Exception {\n         String revokerClientId = generator.generate();\n         String resourceClientId = generator.generate();\n \n@@ -128,6 +128,72 @@ public class TokenRevocationEndpointTest extends AbstractTokenMockMvcTests {\n         }\n     }\n \n+    @Test\n+    public void revokeOtherClientTokenByClientId_tokensDotRevoke() throws Exception {\n+        revokeOtherClientTokenByClientId(\"tokens.revoke\");\n+    }\n+\n+    @Test\n+    public void revokeOtherClientTokenByClientId_uaaDotAdmin() throws Exception {\n+        revokeOtherClientTokenByClientId(\"uaa.admin\");\n+    }\n+\n+    public void revokeOtherClientTokenByClientId(String scope) throws Exception {\n+        String revokerClientId = generator.generate();\n+        String resourceClientId = generator.generate();\n+\n+        BaseClientDetails revokerClient =\n+            setUpClients(revokerClientId,\n+                         scope,\n+                         \"openid\",\n+                         \"client_credentials,password\",\n+                         true\n+            );\n+\n+\n+        BaseClientDetails targetClient =\n+            setUpClients(resourceClientId,\n+                         \"uaa.none\",\n+                         \"openid\",\n+                         \"client_credentials,password\",\n+                         true\n+            );\n+\n+\n+        //this is the token we will revoke\n+        String revokeAccessToken =\n+            getClientCredentialsOAuthAccessToken(\n+                getMockMvc(),\n+                revokerClient.getClientId(),\n+                SECRET,\n+                scope,\n+                null,\n+                false\n+            );\n+\n+        String tokenToBeRevoked =\n+            getClientCredentialsOAuthAccessToken(\n+                getMockMvc(),\n+                resourceClientId,\n+                SECRET,\n+                null,\n+                null,\n+                true\n+            );\n+\n+        getMockMvc().perform(delete(\"/oauth/token/revoke/client/\" + resourceClientId)\n+                                 .header(\"Authorization\", \"Bearer \" + revokeAccessToken))\n+            .andExpect(status().isOk());\n+\n+\n+        try {\n+            tokenProvisioning.retrieve(tokenToBeRevoked, IdentityZoneHolder.get().getId());\n+            fail(\"Token should have been deleted\");\n+        } catch (EmptyResultDataAccessException e) {\n+            //expected\n+        }\n+    }\n+\n     @Test\n     public void revokeOtherClientTokenForbidden() throws Exception {\n         String resourceClientId = generator.generate();\n\n</test_patch>\n", "file change type": "Backport adds files", "content change type": "logical and structural changes", "source_commit": "66166d17781aa257ff77a2fb7c69f72d0b611be3", "source_date": "Wed Oct 25 11:22:52 2017 -0700", "source_tag": "4.7.1", "target_commit": "1e2a746968cdac5b53164ca8955646e4257ecc78", "target_date": "Tue Oct 24 11:18:24 2017 -0700", "target_tag": "3.20.1", "FAIL TO PASS": ["/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/TokenRevocationEndpointTests.java"], "PASS TO PASS": [":cloudfoundry-identity-model:compileJava", ":cloudfoundry-identity-model:jar", ":cloudfoundry-identity-server:classes", ":cloudfoundry-identity-server:compileJava/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", ":cloudfoundry-identity-server:compileTestJava", ":cloudfoundry-identity-model:processResources", ":cloudfoundry-identity-model:gitInfo", ":cloudfoundry-identity-server:compileJava", ":cloudfoundry-identity-server:processResources", ":cloudfoundry-identity-server:compileTestJava/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", ":cloudfoundry-identity-model:buildInfo", "/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", "/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", ":cloudfoundry-identity-server:jar", ":cloudfoundry-identity-model:classes", ":cloudfoundry-identity-model:mainOutputResourcesDir"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_1078", "original_commit_message": "Merge branch 'feature/token_self_revocation' into prerelease/4.7.x\n[#152093534] https://www.pivotaltracker.com/story/show/152093534\n[#152164930] https://www.pivotaltracker.com/story/show/152164930", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/TokenRevocationEndpoint.java b/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/TokenRevocationEndpoint.java\nindex 80393a81a..6b6353a23 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/TokenRevocationEndpoint.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/TokenRevocationEndpoint.java\n@@ -16,6 +16,7 @@ package org.cloudfoundry.identity.uaa.oauth;\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n+import org.cloudfoundry.identity.uaa.audit.event.SystemDeletable;\n import org.cloudfoundry.identity.uaa.authentication.UaaPrincipal;\n import org.cloudfoundry.identity.uaa.oauth.client.ClientConstants;\n import org.cloudfoundry.identity.uaa.oauth.token.RevocableToken;\n@@ -88,10 +89,12 @@ public class TokenRevocationEndpoint {\n     @RequestMapping(\"/oauth/token/revoke/client/{clientId}\")\n     public ResponseEntity<Void> revokeTokensForClient(@PathVariable String clientId) {\n         logger.debug(\"Revoking tokens for client: \" + clientId);\n-        BaseClientDetails client = (BaseClientDetails)clientDetailsService.loadClientByClientId(clientId, IdentityZoneHolder.get().getId());\n+        String zoneId = IdentityZoneHolder.get().getId();\n+        BaseClientDetails client = (BaseClientDetails)clientDetailsService.loadClientByClientId(clientId, zoneId);\n         client.addAdditionalInformation(ClientConstants.TOKEN_SALT,generator.generate());\n-        clientDetailsService.updateClientDetails(client, IdentityZoneHolder.get().getId());\n+        clientDetailsService.updateClientDetails(client, zoneId);\n         logger.debug(\"Tokens revoked for client: \" + clientId);\n+        ((SystemDeletable)tokenProvisioning).deleteByClient(clientId, zoneId);\n         return new ResponseEntity<>(OK);\n     }\n \n\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/token/JdbcRevocableTokenProvisioning.java b/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/token/JdbcRevocableTokenProvisioning.java\nindex 3d5345f2d..92f656e50 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/token/JdbcRevocableTokenProvisioning.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/token/JdbcRevocableTokenProvisioning.java\n@@ -55,7 +55,7 @@ public class JdbcRevocableTokenProvisioning implements RevocableTokenProvisionin\n     protected AtomicLong lastExpiredCheck = new AtomicLong(0);\n     protected long expirationCheckInterval = 30000; //30 seconds\n \n-    protected JdbcRevocableTokenProvisioning(JdbcTemplate jdbcTemplate) {\n+    public JdbcRevocableTokenProvisioning(JdbcTemplate jdbcTemplate) {\n         this.rowMapper =  new RevocableTokenRowMapper();\n         this.template = jdbcTemplate;\n     }\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/TokenRevocationEndpointTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/TokenRevocationEndpointTests.java\nnew file mode 100644\nindex 000000000..b593ec7ee\n--- /dev/null\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/TokenRevocationEndpointTests.java\n@@ -0,0 +1,122 @@\n+/*\n+ * ****************************************************************************\n+ *     Cloud Foundry\n+ *     Copyright (c) [2009-2017] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ * ****************************************************************************\n+ */\n+\n+package org.cloudfoundry.identity.uaa.oauth;\n+\n+import org.cloudfoundry.identity.uaa.authentication.UaaAuthentication;\n+import org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationDetails;\n+import org.cloudfoundry.identity.uaa.authentication.UaaPrincipal;\n+import org.cloudfoundry.identity.uaa.constants.OriginKeys;\n+import org.cloudfoundry.identity.uaa.oauth.token.JdbcRevocableTokenProvisioning;\n+import org.cloudfoundry.identity.uaa.oauth.token.RevocableToken;\n+import org.cloudfoundry.identity.uaa.resources.jdbc.JdbcPagingListFactory;\n+import org.cloudfoundry.identity.uaa.scim.ScimUserProvisioning;\n+import org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimUserProvisioning;\n+import org.cloudfoundry.identity.uaa.test.JdbcTestBase;\n+import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;\n+import org.cloudfoundry.identity.uaa.zone.MultitenantJdbcClientDetailsService;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.oauth2.common.util.RandomValueStringGenerator;\n+import org.springframework.security.oauth2.provider.ClientDetails;\n+import org.springframework.security.oauth2.provider.OAuth2Request;\n+import org.springframework.security.oauth2.provider.client.BaseClientDetails;\n+\n+import java.util.Collections;\n+\n+import static org.cloudfoundry.identity.uaa.oauth.client.ClientConstants.TOKEN_SALT;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+\n+public class TokenRevocationEndpointTests extends JdbcTestBase {\n+\n+    private TokenRevocationEndpoint endpoint;\n+    private RandomValueStringGenerator generator;\n+    private BaseClientDetails client;\n+    private ApplicationEventPublisher publisher;\n+    private MultitenantJdbcClientDetailsService clientService;\n+\n+    @Before\n+    public void setupForTokenRevocation() throws Exception {\n+        String zoneId = IdentityZoneHolder.get().getId();\n+        generator = new RandomValueStringGenerator();\n+        String clientId = generator.generate().toLowerCase();\n+        client = new BaseClientDetails(clientId, \"\", \"some.scopes\", \"client_credentials\", \"authorities\");\n+        client.addAdditionalInformation(TOKEN_SALT, \"pre-salt\");\n+        clientService = spy(new MultitenantJdbcClientDetailsService(jdbcTemplate));\n+        clientService.addClientDetails(client, zoneId);\n+\n+        ScimUserProvisioning userProvisioning = new JdbcScimUserProvisioning(\n+            jdbcTemplate,\n+            new JdbcPagingListFactory(jdbcTemplate, limitSqlAdapter)\n+        );\n+        JdbcRevocableTokenProvisioning provisioning = spy(new JdbcRevocableTokenProvisioning(jdbcTemplate));\n+        endpoint = spy(new TokenRevocationEndpoint(clientService, userProvisioning, provisioning));\n+        publisher = mock(ApplicationEventPublisher.class);\n+\n+        SecurityContextHolder.getContext().setAuthentication(\n+            new UaaOauth2Authentication(\n+                \"token-value\",\n+                zoneId,\n+                mock(OAuth2Request.class),\n+                new UaaAuthentication(\n+                    new UaaPrincipal(\"id\", \"username\", \"username@test.com\", OriginKeys.UAA, \"\", zoneId),\n+                    Collections.emptyList(),\n+                    mock(UaaAuthenticationDetails.class)\n+                )\n+            )\n+        );\n+\n+        provisioning.create(\n+            new RevocableToken()\n+                .setClientId(client.getClientId())\n+                .setTokenId(\"token-id\")\n+                .setUserId(null)\n+                .setResponseType(RevocableToken.TokenType.ACCESS_TOKEN)\n+                .setValue(\"value\")\n+                .setIssuedAt(System.currentTimeMillis()),\n+            zoneId\n+        );\n+    }\n+\n+    @After\n+    public void cleanup() throws Exception {\n+        SecurityContextHolder.clearContext();\n+        IdentityZoneHolder.clear();\n+    }\n+\n+    @Test\n+    public void revokeTokensForClient() throws Exception {\n+        assertEquals(\"pre-salt\", getClient().getAdditionalInformation().get(TOKEN_SALT));\n+        assertEquals(1, clientTokenCount());\n+        endpoint.revokeTokensForClient(client.getClientId());\n+        assertNotEquals(\"pre-salt\", getClient().getAdditionalInformation().get(TOKEN_SALT));\n+        assertEquals(0, clientTokenCount());\n+    }\n+\n+    public ClientDetails getClient() {\n+        return clientService.loadClientByClientId(client.getClientId());\n+    }\n+\n+    public int clientTokenCount() {\n+        return jdbcTemplate.queryForObject(\"select count(*) from revocable_tokens where client_id = ?\", Integer.class, client.getClientId());\n+    }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/TokenEndpointDocs.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/TokenEndpointDocs.java\nindex 96a5f0a56..3c5a4953a 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/TokenEndpointDocs.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/TokenEndpointDocs.java\n@@ -707,7 +707,7 @@ public class TokenEndpointDocs extends AbstractTokenMockMvcTests {\n                         true\n                 );\n         Snippet requestHeaders = requestHeaders(\n-            headerWithName(\"Authorization\").description(\"Bearer token with uaa.admin or tokens.revoke scope. Any token with the matching client_id may also be used for self revocation.\"),\n+            headerWithName(\"Authorization\").description(\"Bearer token with uaa.admin or tokens.revoke scope.\"),\n             IDENTITY_ZONE_ID_HEADER,\n             IDENTITY_ZONE_SUBDOMAIN_HEADER\n         );\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/token/TokenRevocationEndpointTest.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/token/TokenRevocationEndpointTest.java\nindex 4d3478bf7..88c4c9d4f 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/token/TokenRevocationEndpointTest.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/token/TokenRevocationEndpointTest.java\n@@ -72,7 +72,7 @@ public class TokenRevocationEndpointTest extends AbstractTokenMockMvcTests {\n     }\n \n     @Test\n-    public void revokeOtherClientToken() throws Exception {\n+    public void revokeOtherClientTokenByJti() throws Exception {\n         String revokerClientId = generator.generate();\n         String resourceClientId = generator.generate();\n \n@@ -128,6 +128,72 @@ public class TokenRevocationEndpointTest extends AbstractTokenMockMvcTests {\n         }\n     }\n \n+    @Test\n+    public void revokeOtherClientTokenByClientId_tokensDotRevoke() throws Exception {\n+        revokeOtherClientTokenByClientId(\"tokens.revoke\");\n+    }\n+\n+    @Test\n+    public void revokeOtherClientTokenByClientId_uaaDotAdmin() throws Exception {\n+        revokeOtherClientTokenByClientId(\"uaa.admin\");\n+    }\n+\n+    public void revokeOtherClientTokenByClientId(String scope) throws Exception {\n+        String revokerClientId = generator.generate();\n+        String resourceClientId = generator.generate();\n+\n+        BaseClientDetails revokerClient =\n+            setUpClients(revokerClientId,\n+                         scope,\n+                         \"openid\",\n+                         \"client_credentials,password\",\n+                         true\n+            );\n+\n+\n+        BaseClientDetails targetClient =\n+            setUpClients(resourceClientId,\n+                         \"uaa.none\",\n+                         \"openid\",\n+                         \"client_credentials,password\",\n+                         true\n+            );\n+\n+\n+        //this is the token we will revoke\n+        String revokeAccessToken =\n+            getClientCredentialsOAuthAccessToken(\n+                getMockMvc(),\n+                revokerClient.getClientId(),\n+                SECRET,\n+                scope,\n+                null,\n+                false\n+            );\n+\n+        String tokenToBeRevoked =\n+            getClientCredentialsOAuthAccessToken(\n+                getMockMvc(),\n+                resourceClientId,\n+                SECRET,\n+                null,\n+                null,\n+                true\n+            );\n+\n+        getMockMvc().perform(delete(\"/oauth/token/revoke/client/\" + resourceClientId)\n+                                 .header(\"Authorization\", \"Bearer \" + revokeAccessToken))\n+            .andExpect(status().isOk());\n+\n+\n+        try {\n+            tokenProvisioning.retrieve(tokenToBeRevoked, IdentityZoneHolder.get().getId());\n+            fail(\"Token should have been deleted\");\n+        } catch (EmptyResultDataAccessException e) {\n+            //expected\n+        }\n+    }\n+\n     @Test\n     public void revokeOtherClientTokenForbidden() throws Exception {\n         String resourceClientId = generator.generate();\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "66166d17781aa257ff77a2fb7c69f72d0b611be3", "source_date": "Wed Oct 25 11:22:52 2017 -0700", "source_tag": "4.7.1", "target_commit": "20808046de8bbdc6fb2ac62829d4cc9d7a19f37c", "target_date": "Tue Oct 24 10:39:04 2017 -0700", "target_tag": "4.5.3", "FAIL TO PASS": ["/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/TokenRevocationEndpointTests.java"], "PASS TO PASS": [":cloudfoundry-identity-server:classes", "/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", ":cloudfoundry-identity-model:processResources", ":cloudfoundry-identity-server:compileJava/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", ":cloudfoundry-identity-server:processResources", ":cloudfoundry-identity-model:gitInfo", ":cloudfoundry-identity-server:compileJava", ":cloudfoundry-identity-server:jar", ":cloudfoundry-identity-model:buildInfo", "/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", ":cloudfoundry-identity-model:mainOutputResourcesDir", ":cloudfoundry-identity-server:compileTestJava/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", ":cloudfoundry-identity-model:classes", ":cloudfoundry-identity-model:compileJava", ":cloudfoundry-identity-model:jar", ":cloudfoundry-identity-server:compileTestJava"]}
{"ecosystem": "maven", "repo": "tomcat", "instance_id": "tomcat_1084", "original_commit_message": "Add additional checks for valid characters to the HTTP request line\nparsing so invalid request lines are rejected sooner.\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1767641 13f79535-47bb-0310-9956-ffa450edef68", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/java/org/apache/coyote/http11/Http11InputBuffer.java b/java/org/apache/coyote/http11/Http11InputBuffer.java\nindex cd67498f64..52b020cf50 100644\n--- a/java/org/apache/coyote/http11/Http11InputBuffer.java\n+++ b/java/org/apache/coyote/http11/Http11InputBuffer.java\n@@ -27,6 +27,7 @@ import org.apache.juli.logging.Log;\n import org.apache.juli.logging.LogFactory;\n import org.apache.tomcat.util.buf.MessageBytes;\n import org.apache.tomcat.util.http.MimeHeaders;\n+import org.apache.tomcat.util.http.parser.HttpParser;\n import org.apache.tomcat.util.net.ApplicationBufferHandler;\n import org.apache.tomcat.util.net.SocketWrapperBase;\n import org.apache.tomcat.util.res.StringManager;\n@@ -47,56 +48,6 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler\n     private static final StringManager sm = StringManager.getManager(Http11InputBuffer.class);\n \n \n-    private static final boolean[] HTTP_TOKEN_CHAR = new boolean[128];\n-    static {\n-        for (int i = 0; i < 128; i++) {\n-            if (i < 32) {\n-                HTTP_TOKEN_CHAR[i] = false;\n-            } else if (i == 127) {\n-                HTTP_TOKEN_CHAR[i] = false;\n-            } else if (i == '(') {\n-                HTTP_TOKEN_CHAR[i] = false;\n-            } else if (i == ')') {\n-                HTTP_TOKEN_CHAR[i] = false;\n-            } else if (i == '<') {\n-                HTTP_TOKEN_CHAR[i] = false;\n-            } else if (i == '>') {\n-                HTTP_TOKEN_CHAR[i] = false;\n-            } else if (i == '@') {\n-                HTTP_TOKEN_CHAR[i] = false;\n-            } else if (i == ',') {\n-                HTTP_TOKEN_CHAR[i] = false;\n-            } else if (i == ';') {\n-                HTTP_TOKEN_CHAR[i] = false;\n-            } else if (i == ':') {\n-                HTTP_TOKEN_CHAR[i] = false;\n-            } else if (i == '\\\\') {\n-                HTTP_TOKEN_CHAR[i] = false;\n-            } else if (i == '\\\"') {\n-                HTTP_TOKEN_CHAR[i] = false;\n-            } else if (i == '/') {\n-                HTTP_TOKEN_CHAR[i] = false;\n-            } else if (i == '[') {\n-                HTTP_TOKEN_CHAR[i] = false;\n-            } else if (i == ']') {\n-                HTTP_TOKEN_CHAR[i] = false;\n-            } else if (i == '?') {\n-                HTTP_TOKEN_CHAR[i] = false;\n-            } else if (i == '=') {\n-                HTTP_TOKEN_CHAR[i] = false;\n-            } else if (i == '{') {\n-                HTTP_TOKEN_CHAR[i] = false;\n-            } else if (i == '}') {\n-                HTTP_TOKEN_CHAR[i] = false;\n-            } else if (i == ' ') {\n-                HTTP_TOKEN_CHAR[i] = false;\n-            } else {\n-                HTTP_TOKEN_CHAR[i] = true;\n-            }\n-        }\n-    }\n-\n-\n     private static final byte[] CLIENT_PREFACE_START =\n             \"PRI * HTTP/2.0\\r\\n\\r\\nSM\\r\\n\\r\\n\".getBytes(StandardCharsets.ISO_8859_1);\n \n@@ -446,7 +397,7 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler\n                     space = true;\n                     request.method().setBytes(byteBuffer.array(), parsingRequestLineStart,\n                             pos - parsingRequestLineStart);\n-                } else if (!HTTP_TOKEN_CHAR[chr]) {\n+                } else if (!HttpParser.isToken(chr)) {\n                     byteBuffer.position(byteBuffer.position() - 1);\n                     throw new IllegalArgumentException(sm.getString(\"iib.invalidmethod\"));\n                 }\n@@ -497,6 +448,8 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler\n                     end = pos;\n                 } else if (chr == Constants.QUESTION && parsingRequestLineQPos == -1) {\n                     parsingRequestLineQPos = pos;\n+                } else if (HttpParser.isNotRequestTarget(chr)) {\n+                    throw new IllegalArgumentException(sm.getString(\"iib.invalidRequestTarget\"));\n                 }\n             }\n             if (parsingRequestLineQPos >= 0) {\n@@ -534,7 +487,7 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler\n         if (parsingRequestLinePhase == 6) {\n             //\n             // Reading the protocol\n-            // Protocol is always US-ASCII\n+            // Protocol is always \"HTTP/\" DIGIT \".\" DIGIT\n             //\n             while (!parsingRequestLineEol) {\n                 // Read new bytes if needed\n@@ -552,6 +505,8 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler\n                         end = pos;\n                     }\n                     parsingRequestLineEol = true;\n+                } else if (!HttpParser.isHttpProtocol(chr)) {\n+                    throw new IllegalArgumentException(sm.getString(\"iib.invalidHttpProtocol\"));\n                 }\n             }\n \n@@ -816,7 +771,7 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler\n                 headerData.realPos = pos;\n                 headerData.lastSignificantChar = pos;\n                 break;\n-            } else if (chr < 0 || !HTTP_TOKEN_CHAR[chr]) {\n+            } else if (chr < 0 || !HttpParser.isToken(chr)) {\n                 // If a non-token header is detected, skip the line and\n                 // ignore the header\n                 headerData.lastSignificantChar = pos;\n\ndiff --git a/java/org/apache/tomcat/util/http/parser/HttpParser.java b/java/org/apache/tomcat/util/http/parser/HttpParser.java\nindex cba41b747c..e0b36346cd 100644\n--- a/java/org/apache/tomcat/util/http/parser/HttpParser.java\n+++ b/java/org/apache/tomcat/util/http/parser/HttpParser.java\n@@ -40,6 +40,8 @@ public class HttpParser {\n     private static final boolean[] IS_SEPARATOR = new boolean[ARRAY_SIZE];\n     private static final boolean[] IS_TOKEN = new boolean[ARRAY_SIZE];\n     private static final boolean[] IS_HEX = new boolean[ARRAY_SIZE];\n+    private static final boolean[] IS_NOT_REQUEST_TARGET = new boolean[ARRAY_SIZE];\n+    private static final boolean[] IS_HTTP_PROTOCOL = new boolean[ARRAY_SIZE];\n \n     static {\n         for (int i = 0; i < ARRAY_SIZE; i++) {\n@@ -65,6 +67,21 @@ public class HttpParser {\n             if ((i >= '0' && i <='9') || (i >= 'a' && i <= 'f') || (i >= 'A' && i <= 'F')) {\n                 IS_HEX[i] = true;\n             }\n+\n+            // Not valid for request target.\n+            // Combination of multiple rules from RFC7230 and RFC 3986. Must be\n+            // ASCII, no controls plus a few additional characters excluded\n+            if (IS_CONTROL[i] || i > 127 ||\n+                    i == ' ' || i == '\\\"' || i == '#' || i == '<' || i == '>' || i == '\\\\' ||\n+                    i == '^' || i == '`'  || i == '{' || i == '|' || i == '}') {\n+                IS_NOT_REQUEST_TARGET[i] = true;\n+            }\n+\n+            // Not valid for HTTP protocol\n+            // \"HTTP/\" DIGIT \".\" DIGIT\n+            if (i == 'H' || i == 'T' || i == 'P' || i == '/' || i == '.' || (i >= '0' && i <= '9')) {\n+                IS_HTTP_PROTOCOL[i] = true;\n+            }\n         }\n     }\n \n@@ -99,6 +116,7 @@ public class HttpParser {\n         return result.toString();\n     }\n \n+\n     public static boolean isToken(int c) {\n         // Fast for correct values, slower for incorrect ones\n         try {\n@@ -108,8 +126,9 @@ public class HttpParser {\n         }\n     }\n \n+\n     public static boolean isHex(int c) {\n-        // Fast for correct values, slower for incorrect ones\n+        // Fast for correct values, slower for some incorrect ones\n         try {\n             return IS_HEX[c];\n         } catch (ArrayIndexOutOfBoundsException ex) {\n@@ -117,6 +136,29 @@ public class HttpParser {\n         }\n     }\n \n+\n+    public static boolean isNotRequestTarget(int c) {\n+        // Fast for valid request target characters, slower for some incorrect\n+        // ones\n+        try {\n+            return IS_NOT_REQUEST_TARGET[c];\n+        } catch (ArrayIndexOutOfBoundsException ex) {\n+            return true;\n+        }\n+    }\n+\n+\n+    public static boolean isHttpProtocol(int c) {\n+        // Fast for valid HTTP protocol characters, slower for some incorrect\n+        // ones\n+        try {\n+            return IS_HTTP_PROTOCOL[c];\n+        } catch (ArrayIndexOutOfBoundsException ex) {\n+            return false;\n+        }\n+    }\n+\n+\n     // Skip any LWS and return the next char\n     static int skipLws(StringReader input, boolean withReset) throws IOException {\n \n\n\n</patch>\n<test_patch>\ndiff --git a/test/org/apache/catalina/valves/rewrite/TestRewriteValve.java b/test/org/apache/catalina/valves/rewrite/TestRewriteValve.java\nindex 72dd6c66ed..413d873cc7 100644\n--- a/test/org/apache/catalina/valves/rewrite/TestRewriteValve.java\n+++ b/test/org/apache/catalina/valves/rewrite/TestRewriteValve.java\n@@ -19,6 +19,7 @@ package org.apache.catalina.valves.rewrite;\n import java.nio.charset.StandardCharsets;\n \n import org.junit.Assert;\n+import org.junit.Ignore;\n import org.junit.Test;\n \n import org.apache.catalina.Context;\n@@ -227,6 +228,7 @@ public class TestRewriteValve extends TomcatBaseTest {\n \n \n     @Test\n+    @Ignore // Use of NE results in invalid characters in request-target\n     public void testUtf8WithBothQsFlagsRNE() throws Exception {\n         // Note %C2%A1 == \\u00A1\n         // Failing to escape the redirect means UTF-8 bytes in the Location\n@@ -237,6 +239,7 @@ public class TestRewriteValve extends TomcatBaseTest {\n \n \n     @Test\n+    @Ignore // Use of NE results in invalid characters in request-target\n     public void testUtf8WithBothQsFlagsRBNE() throws Exception {\n         // Note %C2%A1 == \\u00A1\n         // Failing to escape the redirect means UTF-8 bytes in the Location\n@@ -274,6 +277,7 @@ public class TestRewriteValve extends TomcatBaseTest {\n \n \n     @Test\n+    @Ignore // Use of NE results in invalid characters in request-target\n     public void testUtf8WithBothQsFlagsRNEQSA() throws Exception {\n         // Note %C2%A1 == \\u00A1\n         // Failing to escape the redirect means UTF-8 bytes in the Location\n@@ -285,6 +289,7 @@ public class TestRewriteValve extends TomcatBaseTest {\n \n \n     @Test\n+    @Ignore // Use of NE results in invalid characters in request-target\n     public void testUtf8WithBothQsFlagsRBNEQSA() throws Exception {\n         // Note %C2%A1 == \\u00A1\n         // Failing to escape the redirect means UTF-8 bytes in the Location\n@@ -328,6 +333,7 @@ public class TestRewriteValve extends TomcatBaseTest {\n \n \n     @Test\n+    @Ignore // Use of NE results in invalid characters in request-target\n     public void testUtf8WithOriginalQsFlagsRNE() throws Exception {\n         // Note %C2%A1 == \\u00A1\n         // Failing to escape the redirect means UTF-8 bytes in the Location\n@@ -338,6 +344,7 @@ public class TestRewriteValve extends TomcatBaseTest {\n \n \n     @Test\n+    @Ignore // Use of NE results in invalid characters in request-target\n     public void testUtf8WithOriginalQsFlagsRBNE() throws Exception {\n         // Note %C2%A1 == \\u00A1\n         // Failing to escape the redirect means UTF-8 bytes in the Location\n@@ -389,6 +396,7 @@ public class TestRewriteValve extends TomcatBaseTest {\n \n \n     @Test\n+    @Ignore // Use of NE results in invalid characters in request-target\n     public void testUtf8WithRewriteQsFlagsRNE() throws Exception {\n         // Note %C2%A1 == \\u00A1\n         // Failing to escape the redirect means UTF-8 bytes in the Location\n@@ -399,6 +407,7 @@ public class TestRewriteValve extends TomcatBaseTest {\n \n \n     @Test\n+    @Ignore // Use of NE results in invalid characters in request-target\n     public void testUtf8WithRewriteQsFlagsRBNE() throws Exception {\n         // Note %C2%A1 == \\u00A1\n         // Failing to escape the redirect means UTF-8 bytes in the Location\n@@ -446,6 +455,7 @@ public class TestRewriteValve extends TomcatBaseTest {\n \n \n     @Test\n+    @Ignore // Use of NE results in invalid characters in request-target\n     public void testUtf8FlagsRNE() throws Exception {\n         // Note %C2%A1 == \\u00A1\n         // Failing to escape the redirect means UTF-8 bytes in the Location\n@@ -456,6 +466,7 @@ public class TestRewriteValve extends TomcatBaseTest {\n \n \n     @Test\n+    @Ignore // Use of NE results in invalid characters in request-target\n     public void testUtf8FlagsRBNE() throws Exception {\n         // Note %C2%A1 == \\u00A1\n         // Failing to escape the redirect means UTF-8 bytes in the Location\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "516bda676ac8d0284da3e0295a7df70391315360", "source_date": "Wed Nov 2 11:57:14 2016 +0000", "source_tag": "9.0.0", "target_commit": "f96f5751d418ae5a2f550be040daf9c5f7d99256", "target_date": "Wed Nov 2 11:58:45 2016 +0000", "target_tag": "8.5.7", "FAIL TO PASS": ["testUtf8WithRewriteQsFlagsRNE", "testUtf8WithBothQsFlagsRBNEQSA", "testUtf8FlagsRBNE", "testUtf8WithOriginalQsFlagsRBNE", "testUtf8FlagsRNE", "testUtf8WithRewriteQsFlagsRBNE", "testUtf8WithBothQsFlagsRBNE", "testUtf8WithBothQsFlagsRNE", "testUtf8WithBothQsFlagsRNEQSA", "testUtf8WithOriginalQsFlagsRNE"], "PASS TO PASS": ["testNonAsciiQueryStringWithB", "testNonAsciiPath", "testUtf8FlagsRB", "testUtf8WithRewriteQsFlagsRB", "testUtf8WithOriginalQsFlagsR", "testQueryString", "testFlagsNC", "testUtf8FlagsB", "testPathRewrite", "testUtf8WithRewriteQsFlagsNone", "testUtf8WithOriginalQsFlagsRB", "testRewriteMap01", "testNonAsciiQueryStringAndPathAndRedirectWithB", "testRewriteMissingCurlyBraceOnMapper", "testNonAsciiQueryStringAndRedirect", "testNonAsciiPathRedirect", "testUtf8WithRewriteQsFlagsR", "testUtf8WithBothQsFlagsNone", "testNonNormalizedPathRewrite", "testRewriteMissingCurlyBraceOnVar", "testRewriteServerVar", "testNonAsciiQueryString", "testBackslashPercentSign", "testNoRewrite", "testUtf8FlagsNone", "testQueryStringRemove", "testUtf8WithRewriteQsFlagsQSA", "testUtf8WithBothQsFlagsRQSA", "testUtf8WithOriginalQsFlagsNone", "testNonAsciiQueryStringAndPath", "testRewriteServerVarAndEnvVar", "testUtf8WithBothQsFlagsQSA", "testRewriteEnvVarAndServerVar", "testUtf8WithRewriteQsFlagsB", "testHostRewrite", "testUtf8WithBothQsFlagsRBQSA", "testUtf8FlagsR", "testRewriteMap02", "testNonAsciiQueryStringAndPathAndRedirect", "testNoopRewrite", "testUtf8WithBothQsFlagsRB", "testUtf8WithOriginalQsFlagsB", "testUtf8WithBothQsFlagsBQSA", "testUtf8WithBothQsFlagsR", "testUtf8WithBothQsFlagsB"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_1086", "original_commit_message": "Improve invitations\n[#145624295] https://www.pivotaltracker.com/story/show/145624295\nSigned-off-by: Filip Hanik <fhanik@pivotal.io>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/invitations/InvitationsController.java b/server/src/main/java/org/cloudfoundry/identity/uaa/invitations/InvitationsController.java\nindex a99191bf3..d5669563f 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/invitations/InvitationsController.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/invitations/InvitationsController.java\n@@ -250,19 +250,34 @@ public class InvitationsController {\n \n         UaaPrincipal principal =  (UaaPrincipal) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n \n+        final ExpiringCode expiringCode = expiringCodeStore.retrieveCode(code);\n+\n+        if (expiringCode == null || expiringCode.getData() == null) {\n+            logger.debug(\"Failing invitation. Code not found.\");\n+            SecurityContextHolder.clearContext();\n+            return handleUnprocessableEntity(model, response, \"error_message_code\", \"code_expired\", \"invitations/accept_invite\");\n+        }\n+        Map<String,String> data = JsonUtils.readValue(expiringCode.getData(), new TypeReference<Map<String,String>>() {});\n+        if (principal == null || data.get(\"user_id\") == null || !data.get(\"user_id\").equals(principal.getId())) {\n+            logger.debug(\"Failing invitation. Code and user ID mismatch.\");\n+            SecurityContextHolder.clearContext();\n+            return handleUnprocessableEntity(model, response, \"error_message_code\", \"code_expired\", \"invitations/accept_invite\");\n+        }\n+\n+        final String newCode = expiringCodeStore.generateCode(expiringCode.getData(), new Timestamp(System.currentTimeMillis() + (10 * 60 * 1000)), expiringCode.getIntent()).getCode();\n         if (!validation.valid()) {\n-           return processErrorReload(code, model, principal.getEmail(), response, \"error_message_code\", validation.getMessageCode());\n+           return processErrorReload(newCode, model, principal.getEmail(), response, \"error_message_code\", validation.getMessageCode());\n //           return handleUnprocessableEntity(model, response, \"error_message_code\", validation.getMessageCode(), \"invitations/accept_invite\");\n         }\n         try {\n             passwordValidator.validate(password);\n         } catch (InvalidPasswordException e) {\n-            return processErrorReload(code, model, principal.getEmail(), response, \"error_message\", e.getMessagesAsOneString());\n+            return processErrorReload(newCode, model, principal.getEmail(), response, \"error_message\", e.getMessagesAsOneString());\n //            return handleUnprocessableEntity(model, response, \"error_message\", e.getMessagesAsOneString(), \"invitations/accept_invite\");\n         }\n         AcceptedInvitation invitation;\n         try {\n-            invitation = invitationsService.acceptInvitation(code, password);\n+            invitation = invitationsService.acceptInvitation(newCode, password);\n         } catch (HttpClientErrorException e) {\n             return handleUnprocessableEntity(model, response, \"error_message_code\", \"code_expired\", \"invitations/accept_invite\");\n         }\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsControllerTest.java b/server/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsControllerTest.java\nindex f99aaf2be..6f5a5c171 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsControllerTest.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsControllerTest.java\n@@ -73,6 +73,7 @@ import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.doThrow;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n import static org.springframework.http.HttpStatus.BAD_REQUEST;\n@@ -433,24 +434,71 @@ public class InvitationsControllerTest {\n         assertNull(SecurityContextHolder.getContext().getAuthentication());\n     }\n \n+    @Test\n+    public void missing_code() throws Exception {\n+        MockHttpServletRequestBuilder post = startAcceptInviteFlow(\"a\", \"a\");\n+\n+        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(null);\n+\n+        IdentityProvider identityProvider = new IdentityProvider();\n+        identityProvider.setType(OriginKeys.UAA);\n+        when(providerProvisioning.retrieveByOrigin(\"uaa\", \"uaa\")).thenReturn(identityProvider);\n+        mockMvc.perform(post)\n+            .andExpect(status().isUnprocessableEntity())\n+            .andExpect(model().attribute(\"error_message_code\", \"code_expired\"))\n+            .andExpect(view().name(\"invitations/accept_invite\"));\n+        verify(expiringCodeStore).retrieveCode(\"thecode\");\n+        verify(expiringCodeStore, never()).generateCode(anyString(),anyObject(),anyString());\n+        verify(invitationsService, never()).acceptInvitation(anyString(), anyString());\n+\n+    }\n+\n+    @Test\n+    public void invalid_principal_id() throws Exception {\n+        MockHttpServletRequestBuilder post = startAcceptInviteFlow(\"a\", \"a\");\n+\n+        Map<String,String> codeData = getInvitationsCode(OriginKeys.UAA);\n+        codeData.put(\"user_id\", \"invalid id\");\n+        String codeDataString = JsonUtils.writeValueAsString(codeData);\n+        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(new ExpiringCode(\"thecode\", new Timestamp(1), codeDataString, INVITATION.name()), null);\n+\n+        IdentityProvider identityProvider = new IdentityProvider();\n+        identityProvider.setType(OriginKeys.UAA);\n+        when(providerProvisioning.retrieveByOrigin(\"uaa\", \"uaa\")).thenReturn(identityProvider);\n+        mockMvc.perform(post)\n+            .andExpect(status().isUnprocessableEntity())\n+            .andExpect(model().attribute(\"error_message_code\", \"code_expired\"))\n+            .andExpect(view().name(\"invitations/accept_invite\"));\n+        verify(expiringCodeStore).retrieveCode(\"thecode\");\n+        verify(expiringCodeStore, never()).generateCode(anyString(),anyObject(),anyString());\n+        verify(invitationsService, never()).acceptInvitation(anyString(), anyString());\n+\n+    }\n+\n     @Test\n     public void testAcceptInviteWithContraveningPassword() throws Exception {\n         doThrow(new InvalidPasswordException(Arrays.asList(\"Msg 2c\", \"Msg 1c\"))).when(passwordValidator).validate(\"a\");\n         MockHttpServletRequestBuilder post = startAcceptInviteFlow(\"a\", \"a\");\n \n         Map<String,String> codeData = getInvitationsCode(OriginKeys.UAA);\n-        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(new ExpiringCode(\"thecode\", new Timestamp(1), \"{\\\"origin\\\":\\\"uaa\\\"}\", \"intent\"), null);\n+        String codeDataString = JsonUtils.writeValueAsString(codeData);\n+        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(new ExpiringCode(\"thecode\", new Timestamp(1), codeDataString, INVITATION.name()), null);\n+        when(expiringCodeStore.retrieveCode(\"thenewcode\")).thenReturn(new ExpiringCode(\"thenewcode\", new Timestamp(1), codeDataString, INVITATION.name()), null);\n+        when(expiringCodeStore.generateCode(eq(codeDataString),any(), eq(INVITATION.name()))).thenReturn(\n+            new ExpiringCode(\"thenewcode\", new Timestamp(1), codeDataString, INVITATION.name()),\n+            new ExpiringCode(\"thenewcode2\", new Timestamp(1), codeDataString, INVITATION.name())\n+        );\n+\n         IdentityProvider identityProvider = new IdentityProvider();\n         identityProvider.setType(OriginKeys.UAA);\n         when(providerProvisioning.retrieveByOrigin(\"uaa\", \"uaa\")).thenReturn(identityProvider);\n-        when(expiringCodeStore.generateCode(anyString(), anyObject(), anyString())).thenReturn(createCode(codeData));\n         mockMvc.perform(post)\n             .andExpect(status().isFound())\n             .andExpect(model().attribute(\"error_message\", \"Msg 1c Msg 2c\"))\n-            .andExpect(model().attribute(\"code\", \"code\"))\n+            .andExpect(model().attribute(\"code\", \"thenewcode2\"))\n             .andExpect(view().name(\"redirect:accept\"));\n         verify(expiringCodeStore).retrieveCode(\"thecode\");\n-        verify(expiringCodeStore).generateCode(anyString(),anyObject(),anyString());\n+        verify(expiringCodeStore, times(2)).generateCode(anyString(),anyObject(),anyString());\n         verify(invitationsService, never()).acceptInvitation(anyString(), anyString());\n     }\n \n@@ -460,6 +508,17 @@ public class InvitationsControllerTest {\n         user.setPrimaryEmail(user.getUserName());\n         MockHttpServletRequestBuilder post = startAcceptInviteFlow(\"passw0rd\",\"passw0rd\");\n \n+        Map<String,String> codeData = getInvitationsCode(OriginKeys.UAA);\n+        String codeDataString = JsonUtils.writeValueAsString(codeData);\n+        ExpiringCode thecode = new ExpiringCode(\"thecode\", new Timestamp(1), codeDataString, INVITATION.name());\n+        ExpiringCode thenewcode = new ExpiringCode(\"thenewcode\", new Timestamp(1), codeDataString, INVITATION.name());\n+        ExpiringCode thenewcode2 = new ExpiringCode(\"thenewcode2\", new Timestamp(1), codeDataString, INVITATION.name());\n+        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(thecode, null);\n+        when(expiringCodeStore.retrieveCode(\"thenewcode\")).thenReturn(thenewcode, null);\n+        when(expiringCodeStore.generateCode(eq(codeDataString),any(), eq(INVITATION.name())))\n+            .thenReturn(thenewcode)\n+            .thenReturn(thenewcode2);\n+\n         when(invitationsService.acceptInvitation(anyString(), eq(\"passw0rd\"))).thenReturn(new InvitationsService.AcceptedInvitation(\"/home\", user));\n \n         mockMvc.perform(post)\n@@ -489,6 +548,10 @@ public class InvitationsControllerTest {\n         UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(uaaPrincipal, null, UaaAuthority.USER_AUTHORITIES);\n         SecurityContextHolder.getContext().setAuthentication(token);\n \n+        Map<String,String> codeData = getInvitationsCode(OriginKeys.UAA);\n+        String codeDataString = JsonUtils.writeValueAsString(codeData);\n+        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(new ExpiringCode(\"thecode\", new Timestamp(1), codeDataString, INVITATION.name()), null);\n+        when(expiringCodeStore.generateCode(eq(codeDataString),any(), eq(INVITATION.name()))).thenReturn(new ExpiringCode(\"thenewcode\", new Timestamp(1), codeDataString, INVITATION.name()));\n         when(invitationsService.acceptInvitation(anyString(), eq(\"password\"))).thenReturn(new InvitationsService.AcceptedInvitation(\"valid.redirect.com\", user));\n \n         MockHttpServletRequestBuilder post = post(\"/invitations/accept.do\")\n@@ -510,6 +573,11 @@ public class InvitationsControllerTest {\n         ScimUser user = new ScimUser(uaaPrincipal.getId(), uaaPrincipal.getName(),\"fname\", \"lname\");\n         user.setPrimaryEmail(user.getUserName());\n \n+        Map<String,String> codeData = getInvitationsCode(OriginKeys.UAA);\n+        String codeDataString = JsonUtils.writeValueAsString(codeData);\n+        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(new ExpiringCode(\"thecode\", new Timestamp(1), codeDataString, INVITATION.name()), null);\n+        when(expiringCodeStore.generateCode(eq(codeDataString),any(), eq(INVITATION.name()))).thenReturn(new ExpiringCode(\"thenewcode\", new Timestamp(1), codeDataString, INVITATION.name()));\n+\n         when(invitationsService.acceptInvitation(anyString(), eq(\"password\"))).thenReturn(new InvitationsService.AcceptedInvitation(\"/home\", user));\n \n         MockHttpServletRequestBuilder post = post(\"/invitations/accept.do\")\n@@ -528,6 +596,11 @@ public class InvitationsControllerTest {\n         UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(uaaPrincipal, null, UaaAuthority.USER_AUTHORITIES);\n         SecurityContextHolder.getContext().setAuthentication(token);\n \n+        Map<String,String> codeData = getInvitationsCode(OriginKeys.UAA);\n+        String codeDataString = JsonUtils.writeValueAsString(codeData);\n+        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(new ExpiringCode(\"thecode\", new Timestamp(1), codeDataString, INVITATION.name()), null);\n+        when(expiringCodeStore.generateCode(eq(codeDataString),any(), eq(INVITATION.name()))).thenReturn(new ExpiringCode(\"thenewcode\", new Timestamp(1), codeDataString, INVITATION.name()));\n+\n         doThrow(new HttpClientErrorException(BAD_REQUEST)).when(invitationsService).acceptInvitation(anyString(), anyString());\n \n         MockHttpServletRequestBuilder post = post(\"/invitations/accept.do\")\n@@ -545,19 +618,26 @@ public class InvitationsControllerTest {\n     public void testAcceptInviteWithoutMatchingPasswords() throws Exception {\n         MockHttpServletRequestBuilder post = startAcceptInviteFlow(\"a\",\"b\");\n \n-        Map<String,String> codeData = getInvitationsCode(\"test-oidc\");\n-        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(new ExpiringCode(\"thecode\", new Timestamp(1), \"{\\\"origin\\\":\\\"uaa\\\"}\", \"intent\"), null);\n+        Map<String,String> codeData = getInvitationsCode(OriginKeys.UAA);\n+        String codeDataString = JsonUtils.writeValueAsString(codeData);\n+        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(new ExpiringCode(\"thecode\", new Timestamp(1), codeDataString, INVITATION.name()), null);\n+        when(expiringCodeStore.retrieveCode(\"thenewcode\")).thenReturn(new ExpiringCode(\"thenewcode\", new Timestamp(1), codeDataString, INVITATION.name()), null);\n+        when(expiringCodeStore.generateCode(eq(codeDataString),any(), eq(INVITATION.name()))).thenReturn(\n+            new ExpiringCode(\"thenewcode\", new Timestamp(1), codeDataString, INVITATION.name()),\n+            new ExpiringCode(\"thenewcode2\", new Timestamp(1), codeDataString, INVITATION.name())\n+        );\n+\n+\n         IdentityProvider identityProvider = new IdentityProvider();\n         identityProvider.setType(OriginKeys.UAA);\n         when(providerProvisioning.retrieveByOrigin(\"uaa\", \"uaa\")).thenReturn(identityProvider);\n-        when(expiringCodeStore.generateCode(anyString(), anyObject(), anyString())).thenReturn(createCode(codeData));\n         mockMvc.perform(post)\n             .andExpect(status().isFound())\n             .andExpect(model().attribute(\"error_message_code\", \"form_error\"))\n-            .andExpect(model().attribute(\"code\", \"code\"))\n+            .andExpect(model().attribute(\"code\", \"thenewcode2\"))\n             .andExpect(view().name(\"redirect:accept\"));\n         verify(expiringCodeStore).retrieveCode(\"thecode\");\n-        verify(expiringCodeStore).generateCode(anyString(),anyObject(),anyString());\n+        verify(expiringCodeStore, times(2)).generateCode(anyString(),anyObject(),anyString());\n         verify(invitationsService, never()).acceptInvitation(anyString(), anyString());\n     }\n \n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/InvitationsIT.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/InvitationsIT.java\nindex 06ceb379e..0ed73dad6 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/InvitationsIT.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/InvitationsIT.java\n@@ -43,6 +43,7 @@ import org.springframework.security.oauth2.common.util.RandomValueStringGenerato\n import org.springframework.security.oauth2.provider.client.BaseClientDetails;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.web.client.DefaultResponseErrorHandler;\n import org.springframework.web.client.RestTemplate;\n \n import java.net.URL;\n@@ -117,6 +118,22 @@ public class InvitationsIT {\n         webDriver.manage().deleteAllCookies();\n     }\n \n+    @Test\n+    public void invite_fails() {\n+        RestTemplate uaaTemplate = new RestTemplate();\n+        uaaTemplate.setErrorHandler(new DefaultResponseErrorHandler() {\n+            @Override\n+            protected boolean hasError(HttpStatus statusCode) {\n+                return statusCode.is5xxServerError();\n+            }\n+        });\n+        HttpHeaders headers = new HttpHeaders();\n+        headers.setContentType(APPLICATION_JSON);\n+        HttpEntity<String> request = new HttpEntity<>(\"{\\\"emails\\\":[\\\"marissa@test.org\\\"]}\", headers);\n+        ResponseEntity<Void> response = uaaTemplate.exchange(uaaUrl + \"/invite_users/?client_id=admin&redirect_uri={uri}\", POST, request, Void.class, \"https://www.google.com\");\n+        assertThat(response.getStatusCode(), is(HttpStatus.UNAUTHORIZED));\n+    }\n+\n     @Test\n     public void testInviteUserWithClientRedirect() throws Exception {\n         String userEmail = \"user-\" + new RandomValueStringGenerator().generate() + \"@example.com\";\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/InvitationsServiceMockMvcTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/InvitationsServiceMockMvcTests.java\nindex 17dcb57ee..0af34c576 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/InvitationsServiceMockMvcTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/InvitationsServiceMockMvcTests.java\n@@ -53,15 +53,18 @@ import static org.hamcrest.Matchers.endsWith;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertThat;\n import static org.junit.Assert.assertTrue;\n import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrl;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrlPattern;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;\n \n public class InvitationsServiceMockMvcTests extends InjectedMockContextTest {\n \n@@ -226,6 +229,55 @@ public class InvitationsServiceMockMvcTests extends InjectedMockContextTest {\n             .andExpect(status().isUnprocessableEntity());\n     }\n \n+    @Test\n+    public void invalid_code() throws Exception {\n+        String email = new RandomValueStringGenerator().generate().toLowerCase()+\"@test.org\";\n+        String invalid = new RandomValueStringGenerator().generate().toLowerCase()+\"@test.org\";\n+        URL inviteLink = inviteUser(email, userInviteToken, null, clientId, OriginKeys.UAA);\n+        URL invalidLink = inviteUser(invalid, userInviteToken, null, clientId, OriginKeys.UAA);\n+\n+        assertFalse(\"User should not be verified\", queryUserForField(email, \"verified\", Boolean.class));\n+        assertEquals(OriginKeys.UAA, queryUserForField(email, OriginKeys.ORIGIN, String.class));\n+\n+        String code = extractInvitationCode(inviteLink.toString());\n+        String invalidCode = extractInvitationCode(invalidLink.toString());\n+\n+        MvcResult result = getMockMvc().perform(get(\"/invitations/accept\")\n+            .param(\"code\", code)\n+            .accept(MediaType.TEXT_HTML)\n+        )\n+            .andExpect(status().isOk())\n+            .andExpect(content().string(containsString(\"Email: \" + email)))\n+            .andReturn();\n+\n+        MockHttpSession session = (MockHttpSession) result.getRequest().getSession(false);\n+        result = getMockMvc().perform(\n+            post(\"/invitations/accept.do\")\n+                .session(session)\n+                .param(\"password\", \"s3cret\")\n+                .param(\"password_confirmation\", \"s3cret\")\n+                .param(\"code\",invalidCode)\n+                .with(csrf())\n+        )\n+            .andExpect(status().isUnprocessableEntity())\n+            .andExpect(model().attribute(\"error_message_code\", \"code_expired\"))\n+            .andExpect(view().name(\"invitations/accept_invite\"))\n+            .andReturn();\n+\n+        assertFalse(\"User should be not yet be verified\", queryUserForField(email, \"verified\", Boolean.class));\n+        assertNull(session.getAttribute(\"SPRING_SECURITY_CONTEXT\"));\n+\n+        session = (MockHttpSession) result.getRequest().getSession(false);\n+        //not logged in anymore\n+        getMockMvc().perform(\n+            get(\"/profile\")\n+                .session(session)\n+                .accept(MediaType.TEXT_HTML)\n+        )\n+            .andExpect(status().isFound())\n+            .andExpect(redirectedUrl(\"http://localhost/login\"));\n+    }\n+\n     @Test\n     public void accept_invitation_sets_your_password() throws Exception {\n         String email = new RandomValueStringGenerator().generate().toLowerCase()+\"@test.org\";\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/LoginMockMvcTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/LoginMockMvcTests.java\nindex 4b52b3cd4..96a3d2150 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/LoginMockMvcTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/LoginMockMvcTests.java\n@@ -1767,7 +1767,12 @@ public class LoginMockMvcTests extends InjectedMockContextTest {\n         inviteContext.setAuthentication(inviteToken);\n         inviteSession.setAttribute(\"SPRING_SECURITY_CONTEXT\", inviteContext);\n \n-        ExpiringCode code = getWebApplicationContext().getBean(ExpiringCodeStore.class).generateCode(\"{ \\\"origin\\\" : \\\"uaa\\\"}\", new Timestamp(System.currentTimeMillis() + 1000 * 60), null);\n+        Map<String, String> codeData = new HashMap();\n+        codeData.put(\"user_id\", ((UaaPrincipal)marissaContext.getAuthentication().getPrincipal()).getId());\n+        codeData.put(\"email\", ((UaaPrincipal)marissaContext.getAuthentication().getPrincipal()).getEmail());\n+        codeData.put(\"origin\", OriginKeys.UAA);\n+\n+        ExpiringCode code = getWebApplicationContext().getBean(ExpiringCodeStore.class).generateCode(JsonUtils.writeValueAsString(codeData), new Timestamp(System.currentTimeMillis() + 1000 * 60), null);\n \n         //logged in with valid CSRF\n         MockHttpServletRequestBuilder post = post(\"/invitations/accept.do\")\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "logical and structural changes", "source_commit": "4f942064d85454a4bcc4da04cd482d114816c14a", "source_date": "Wed May 17 13:52:05 2017 -0700", "source_tag": "4.2.0", "target_commit": "1c9c6dd88266cfa7d333e5d8be1031fa31c5c939", "target_date": "Wed May 17 15:37:24 2017 -0700", "target_tag": "3.9.13", "FAIL TO PASS": ["org.cloudfoundry.identity.uaa.invitations.InvitationsControllerTest > testAcceptInviteWithContraveningPassword", "org.cloudfoundry.identity.uaa.invitations.InvitationsControllerTest > invalid_principal_id", "org.cloudfoundry.identity.uaa.invitations.InvitationsControllerTest > missing_code", "org.cloudfoundry.identity.uaa.invitations.InvitationsControllerTest > testAcceptInviteWithoutMatchingPasswords", "org.cloudfoundry.identity.uaa.mock.DefaultConfigurationTestSuite > org.cloudfoundry.identity.uaa.login.InvitationsServiceMockMvcTests.invalid_code"], "PASS TO PASS": ["org.cloudfoundry.identity.uaa.user.UaaAuthorityTests", ":cloudfoundry-identity-server:jar", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserEndpointsTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserLookupMockMvcTests", "org.cloudfoundry.identity.uaa.mock.zones.DisableUserManagementSecurityFilterMockMvcTest", "org.cloudfoundry.identity.uaa.authentication.ClientParametersAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.mock.DefaultDocsTestSuite", "org.cloudfoundry.identity.uaa.login.HomeControllerViewTests", "/uaa/uaa/src/test/java/org/springframework/security/ldap/server/ApacheDsSSLContainer.java", "org.cloudfoundry.identity.uaa.authentication.manager.ExternalLoginAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.login.AccountsControllerMockMvcTests", "org.cloudfoundry.identity.uaa.web.CookieBasedCsrfTokenRepositoryTests", ":cloudfoundry-identity-model:buildInfo", "org.cloudfoundry.identity.uaa.util.TokenValidationTest", "org.cloudfoundry.identity.uaa.util.CachingPasswordEncoderTest", "org.cloudfoundry.identity.uaa.mock.token.CheckTokenEndpointDocs", "org.cloudfoundry.identity.uaa.login.LoginMockMvcTests", "org.cloudfoundry.identity.uaa.error.UaaExceptionTests", "org.cloudfoundry.identity.uaa.client.ClientAdminBootstrapTests", "org.cloudfoundry.identity.uaa.provider.ldap.LdapIdentityProviderDefinitionTest", "org.cloudfoundry.identity.uaa.oauth.RemoteTokenServicesTests", "org.cloudfoundry.identity.uaa.zone.event.IdentityZoneModifiedEventTest", "org.cloudfoundry.identity.uaa.oauth.event.ClientAdminEventPublisherTests", "org.cloudfoundry.identity.uaa.login.util.LocalUaaRestTemplateMockMvcTests", "org.cloudfoundry.identity.uaa.authentication.manager.DynamicZoneAwareAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.provider.saml.SamlServiceProviderEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.util.KeyWithCertTest", "org.cloudfoundry.identity.uaa.provider.saml.SamlServiceProviderEndpointsZoneSwitchingMockMvcTests", "org.cloudfoundry.identity.uaa.zone.JdbcIdentityProviderProvisioningTests", "/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", "org.cloudfoundry.identity.uaa.provider.ldap.ProcessLdapPropertiesTest", ":cloudfoundry-identity-server:processTestResources", "org.cloudfoundry.identity.uaa.client.ClientMetadataAdminEndpointsMockMvcTest", "org.cloudfoundry.identity.uaa.invitations.InvitationsEndpointDocs", "org.cloudfoundry.identity.uaa.impl.config.ScimExternalGroupsTypeResolvingFactoryBeanTest", "org.cloudfoundry.identity.uaa.zone.MultitenantJdbcClientDetailsServiceTests", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimUserBootstrapTests", "org.cloudfoundry.identity.uaa.provider.uaa.UaaIdentityProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.error.ConvertingExceptionViewTests", "org.cloudfoundry.identity.uaa.authentication.manager.LdapLoginAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.util.EnsureOldLibrariesAreRemoved", "org.cloudfoundry.identity.uaa.authentication.manager.LoginAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.account.ResetPasswordAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.ZoneAwareIdpMetadataGeneratorTest", "org.cloudfoundry.identity.uaa.db.TableAndColumnNormalizationTest", "org.cloudfoundry.identity.uaa.util.NullifyFieldsTest", "org.cloudfoundry.identity.uaa.mock.ldap.LdapCertificateMockMvcTests", ":cloudfoundry-identity-uaa:processTestResources", "org.cloudfoundry.identity.uaa.provider.saml.BootstrapSamlIdentityProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.config.NestedMapPropertySourceTests", "org.cloudfoundry.identity.uaa.web.UaaSavedRequestAwareAuthenticationSuccessHandlerTests", "org.cloudfoundry.identity.uaa.oauth.token.AddTokenGranterTests", "org.cloudfoundry.identity.uaa.codestore.CodeStoreEndpointsTests", "org.cloudfoundry.identity.uaa.mock.token.ListUserTokenMockMvcTests", "org.cloudfoundry.identity.uaa.mock.config.HealthzShouldNotBeProtectedMockMvcTests", "org.cloudfoundry.identity.uaa.user.JdbcUaaUserDatabaseTests", "org.cloudfoundry.identity.uaa.audit.JdbcFailedLoginCountingAuditServiceTests", "org.cloudfoundry.identity.uaa.oauth.ZoneEndpointsClientDetailsValidatorTests", "org.cloudfoundry.identity.uaa.authorization.external.LdapGroupMappingAuthorizationManagerTests", "org.cloudfoundry.identity.uaa.login.InvitationsServiceMockMvcTests", "org.cloudfoundry.identity.uaa.oauth.DisableIdTokenResponseTypeFilterTest", "org.cloudfoundry.identity.uaa.util.UaaStringUtilsTest", "org.cloudfoundry.identity.uaa.provider.saml.FixedHttpMetaDataProviderTest", "org.cloudfoundry.identity.uaa.performance.TestMySQLEmailSearch", "org.cloudfoundry.identity.uaa.provider.saml.SamlRedirectUtilsTest", "org.cloudfoundry.identity.uaa.config.IdentityZoneConfigurationBootstrapTests", "org.cloudfoundry.identity.uaa.oauth.UaaTokenStoreTests", "org.cloudfoundry.identity.uaa.provider.saml.ConfigMetadataProviderTest", ":cloudfoundry-identity-server:processResources", "org.cloudfoundry.identity.uaa.authentication.manager.KeystoneAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.account.PasswordChangeEndpointTests", "org.cloudfoundry.identity.uaa.login.UaaChangePasswordServiceTest", "org.cloudfoundry.identity.uaa.oauth.token.TokenKeyEndpointTests", "org.cloudfoundry.identity.uaa.login.UsernamePasswordExtractingAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.account.ResetPasswordAuthenticationEntryPointTests", "org.cloudfoundry.identity.uaa.security.CsrfAwareEntryPointAndDeniedHandlerTest", "org.cloudfoundry.identity.uaa.web.RecognizeFailureDispatcherServletTest", "org.cloudfoundry.identity.uaa.authentication.manager.CommonLoginPolicyTest", "org.cloudfoundry.identity.uaa.provider.XOAuthIdentityProviderDefinitionTestx", "org.cloudfoundry.identity.uaa.client.ClientAdminEndpointsTests", "org.cloudfoundry.identity.uaa.config.EnvironmentMapFactoryBeanTests", "/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", "org.cloudfoundry.identity.uaa.util.DomainFilterTest", ":cloudfoundry-identity-model:gitInfo", "org.cloudfoundry.identity.uaa.scim.validate.UaaPasswordPolicyValidatorTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlIDPRefreshMockMvcTests", "org.cloudfoundry.identity.uaa.user.UaaUserEditorTests", "org.cloudfoundry.identity.uaa.oauth.approval.JdbcApprovalStoreTests", "org.cloudfoundry.identity.uaa.oauth.CheckTokenEndpointTests", "org.cloudfoundry.identity.uaa.zone.event.IdentityProviderModifiedEventTest", "org.cloudfoundry.identity.uaa.provider.LockoutPolicyTests", "org.cloudfoundry.identity.uaa.audit.JdbcAuditServiceTests", "org.cloudfoundry.identity.uaa.mock.codestore.ExpiringCodeStoreMockMvcTests", "org.cloudfoundry.identity.uaa.client.ClientAdminEndpointsValidatorTests", "org.cloudfoundry.identity.uaa.scim.endpoints.UserIdConversionEndpointsTests", ":cloudfoundry-identity-model:classes", "org.cloudfoundry.identity.uaa.oauth.AntPathRedirectResolverTests", "org.cloudfoundry.identity.uaa.config.YamlBindingTests", "org.cloudfoundry.identity.uaa.oauth.expression.IsSelfCheckTest", "org.cloudfoundry.identity.uaa.oauth.UserManagedAuthzApprovalHandlerTests", "org.cloudfoundry.identity.uaa.authentication.AuthzAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.authentication.UaaClientAuthenticationProviderTest", "org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationSerializationTests", "org.cloudfoundry.identity.uaa.db.TestThatClientIdIsVchar255", "org.cloudfoundry.identity.uaa.scim.ScimGroupMemberTests", "org.cloudfoundry.identity.uaa.login.AutologinAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.login.ChangeEmailControllerTest", "org.cloudfoundry.identity.uaa.login.UaaResetPasswordServiceTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.SamlServiceProviderDefinitionTest", ":cloudfoundry-identity-uaa:processResources", "org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationEndpointTest", ":cloudfoundry-identity-server:classes", "org.cloudfoundry.identity.uaa.oauth.AuthorizePromptNoneEntryPointTest", ":cloudfoundry-identity-uaa:classes", ":cloudfoundry-identity-server:compileJava", "org.cloudfoundry.identity.uaa.oauth.client.ClientDetailsModificationTests", "org.cloudfoundry.identity.uaa.oauth.jwt.JwtHelperTest", "org.cloudfoundry.identity.uaa.scim.ScimCoreTests", "org.cloudfoundry.identity.uaa.provider.saml.ComparableProviderTest", "org.cloudfoundry.identity.uaa.web.ForwardAwareInternalResourceViewResolverTests", ":cloudfoundry-identity-uaa:compileTestJava", "org.cloudfoundry.identity.uaa.resources.jdbc.JdbcPagingListTests", "org.cloudfoundry.identity.uaa.mock.token.TokenKeyEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.login.BootstrapTests", "org.cloudfoundry.identity.uaa.resources.MessageTests", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneResolvingMockMvcTest", "org.cloudfoundry.identity.uaa.provider.saml.ZoneAwareMetadataGeneratorTests", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeTests", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimExternalGroupBootstrapTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlIdentityProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.BootstrapTests", "org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcherTests", "org.cloudfoundry.identity.uaa.authentication.SessionResetFilterTests", "org.cloudfoundry.identity.uaa.login.util.FakeJavaMailSenderTest", "org.cloudfoundry.identity.uaa.authentication.UTF8ConversionFilterTests", "org.cloudfoundry.identity.uaa.authentication.manager.ChainedAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.zone.IdentityZoneHolderTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.SamlServiceProviderConfiguratorTest", "org.cloudfoundry.identity.uaa.security.web.CorsFilterTests", "org.cloudfoundry.identity.uaa.UaaConfigurationTests", "org.cloudfoundry.identity.uaa.scim.endpoints.UserInfoEndpointDocs", ":cloudfoundry-identity-uaa:testClasses", "org.cloudfoundry.identity.uaa.mock.password.PasswordEndpointsDocs", "org.cloudfoundry.identity.uaa.authentication.manager.ScopeAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.authentication.login.RemoteAuthenticationEndpointTests", "org.cloudfoundry.identity.uaa.scim.endpoints.OpenIdConnectEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.oauth.UaaScopesTests", "org.cloudfoundry.identity.uaa.authentication.manager.CheckIdpEnabledAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.login.ResetPasswordControllerMockMvcTests", "org.cloudfoundry.identity.uaa.scim.endpoints.PasswordResetEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.config.PasswordPolicyTest", "org.cloudfoundry.identity.uaa.audit.event.EntityDeletedEventTest", "org.cloudfoundry.identity.uaa.mock.clients.ClientAdminEndpointsDocs", "org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationSerializerDeserializerTest", "org.cloudfoundry.identity.uaa.authentication.manager.DynamicLdapAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.client.ClientMetadataAdminEndpointsDocs", "org.cloudfoundry.identity.uaa.provider.saml.idp.JdbcSamlServiceProviderProvisioningTest", "org.cloudfoundry.identity.uaa.login.SessionControllerMockMvcTests", "org.cloudfoundry.identity.uaa.test.CreateDB", "org.cloudfoundry.identity.uaa.account.event.PasswordChangeEventPublisherTests", "org.cloudfoundry.identity.uaa.provider.saml.LoginSamlAuthenticationProviderTests", "org.cloudfoundry.identity.uaa.scim.jdbc.ScimSearchQueryConverterTests", "org.cloudfoundry.identity.uaa.user.BCryptPasswordEncoderTest", ":cloudfoundry-identity-model:jar", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsTests", "org.cloudfoundry.identity.uaa.oauth.token.KeyInfoTests", "org.cloudfoundry.identity.uaa.mock.providers.IdentityProviderEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.oauth.AccessControllerTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.ZoneAwareIdpMetadataManagerTest", "org.cloudfoundry.identity.uaa.web.UaaSessionCookieConfigTest", "org.cloudfoundry.identity.uaa.web.HealthzEndpointTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpWebSsoProfileImplTest", "org.cloudfoundry.identity.uaa.config.YamlMapFactoryBeanTests", "org.cloudfoundry.identity.uaa.mock.DefaultConfigurationTestSuite", "org.cloudfoundry.identity.uaa.scim.remote.RemoteScimUserProvisioningTests", "org.cloudfoundry.identity.uaa.zone.IdentityZoneResolvingFilterTests", "org.cloudfoundry.identity.uaa.client.JdbcClientMetadataProvisioningTest", "org.cloudfoundry.identity.uaa.client.OAuthClientAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.invitations.InvitationsEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.scim.ScimUserTests", "org.cloudfoundry.identity.uaa.authentication.WhitelistLogoutHandlerTest", "org.cloudfoundry.identity.uaa.authentication.manager.AuthzAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.login.EmailChangeEmailServiceTest", "org.cloudfoundry.identity.uaa.provider.ldap.DynamicPasswordComparatorTests", ":cloudfoundry-identity-server:compileJava/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", "org.cloudfoundry.identity.uaa.mock.ldap.LdapMockMvcTests", "org.cloudfoundry.identity.uaa.mock.ldap.LdapProviderDefinitionDeserializeTests", "org.cloudfoundry.identity.uaa.provider.saml.LoginSAMLAuthenticationFailureHandlerTest", "org.cloudfoundry.identity.uaa.client.OAuth2ClientAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.mock.audit.AuditCheckMockMvcTests", "org.cloudfoundry.identity.uaa.config.YamlConfigurationValidatorTests", "org.cloudfoundry.identity.uaa.mock.zones.DisableInternalUserManagementFilterMockMvcTests", "org.cloudfoundry.identity.uaa.openid.UserInfoEndpointTests", "org.cloudfoundry.identity.uaa.invitations.InvitationsAuthenticationTrustResolverTest", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.login.CurrentUserCookieDestructorTests", "org.cloudfoundry.identity.uaa.oauth.approval.ApprovalsAdminEndpointsTests", ":cloudfoundry-identity-server:testClasses", "org.cloudfoundry.identity.uaa.resources.jdbc.SimpleSearchQueryConverterTests", "org.cloudfoundry.identity.uaa.db.TestSchemaValidation", "org.cloudfoundry.identity.uaa.login.SamlLoginServerKeyManagerTests", "org.cloudfoundry.identity.uaa.oauth.ClientInfoEndpointTests", "org.cloudfoundry.identity.uaa.login.ResetPasswordControllerTest", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupExternalMembershipManagerTests", "org.cloudfoundry.identity.uaa.login.LoginInfoEndpointDocs", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimGroupBootstrapTests", "org.cloudfoundry.identity.uaa.mock.token.TokenMvcMockTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlMockMvcTests", "org.cloudfoundry.identity.uaa.config.EnvironmentPropertiesFactoryBeanTests", "org.cloudfoundry.identity.uaa.client.SocialClientUserDetailsSourceTests", "org.cloudfoundry.identity.uaa.client.SourceTests", "org.cloudfoundry.identity.uaa.oauth.UaaUserApprovalHandlerTests", "org.cloudfoundry.identity.uaa.util.UaaUrlUtilsTest", "org.cloudfoundry.identity.uaa.security.web.SecurityFilterChainPostProcessorTests", "org.cloudfoundry.identity.uaa.mock.token.UserTokenMockMvcTests", "org.cloudfoundry.identity.uaa.zone.event.ServiceProviderModifiedEventTest", "org.cloudfoundry.identity.uaa.scim.security.GroupRoleCheckTests", ":cloudfoundry-identity-model:processResources", "org.cloudfoundry.identity.uaa.mock.providers.IdentityProviderEndpointsDocs", "org.cloudfoundry.identity.uaa.login.NotificationsServiceTest", "org.cloudfoundry.identity.uaa.util.UaaMapUtilsTest", "org.cloudfoundry.identity.uaa.login.ChangePasswordControllerTest", "org.cloudfoundry.identity.uaa.scim.endpoints.UserInfoEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.mock.approvals.ApprovalsMockMvcTests", "org.cloudfoundry.identity.uaa.login.AccountsControllerTest", "org.cloudfoundry.identity.uaa.login.AccountSavingAuthenticationSuccessHandlerTest", "org.cloudfoundry.identity.uaa.util.UaaHttpRequestUtilsTest", "org.cloudfoundry.identity.uaa.mock.clients.ClientAdminEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.zone.IdentityZoneSwitchingFilterTests", ":cloudfoundry-identity-uaa:compileJava", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneSwitchingFilterMockMvcTest", "org.cloudfoundry.identity.uaa.oauth.UaaOauth2ErrorHandlerTests", "org.cloudfoundry.identity.uaa.zone.JdbcIdentityZoneProvisioningTests", ":cloudfoundry-identity-server:compileTestJava/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", "org.cloudfoundry.identity.uaa.mock.oauth.CheckDefaultAuthoritiesMvcMockTests", "org.cloudfoundry.identity.uaa.config.IdentityProviderBootstrapTest", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneEndpointDocs", "org.cloudfoundry.identity.uaa.config.IdentityZoneConfigurationTests", "org.cloudfoundry.identity.uaa.login.EmailServiceTests", "org.cloudfoundry.identity.uaa.account.PasswordCheckEndpointTests", "org.cloudfoundry.identity.uaa.user.InMemoryUaaUserDatabaseTests", "org.cloudfoundry.identity.uaa.audit.AuditEventTypeTests", "org.cloudfoundry.identity.uaa.db.TestZonifyGroupSchema_V2_4_1", "org.cloudfoundry.identity.uaa.config.YamlPropertiesFactoryBeanTests", "org.cloudfoundry.identity.uaa.login.ProfileControllerTests", "org.cloudfoundry.identity.uaa.login.LoginInfoEndpointTests", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.oauth.token.UserTokenGranterTest", "org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationRequestManagerTests", "org.cloudfoundry.identity.uaa.oauth.approval.ApprovalTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlIdentityProviderDefinitionTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpSamlAuthenticationSuccessHandlerTest", "org.cloudfoundry.identity.uaa.provider.ldap.ExtendedLdapUserMapperTest", "org.cloudfoundry.identity.uaa.login.XFrameOptionsTheories", "org.cloudfoundry.identity.uaa.util.ColorHashTest", "org.cloudfoundry.identity.uaa.util.LinkedMaskingMultiValueMapTests", "org.cloudfoundry.identity.uaa.scim.exception.InvalidPasswordExceptionTest", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeStoreTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsDocs", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupProvisioningTests", "org.cloudfoundry.identity.uaa.scim.endpoints.OpenIdConnectEndpointsDocs", "org.cloudfoundry.identity.uaa.oauth.UaaTokenServicesTests", "org.cloudfoundry.identity.uaa.db.RevocableTokenTableTest", ":cloudfoundry-identity-model:compileJava", ":cloudfoundry-identity-server:compileTestJava", "org.cloudfoundry.identity.uaa.impl.config.YamlServletProfileInitializerTest", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimExternalGroupMappingsEndpointsDocs", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserEndpointDocs", "org.cloudfoundry.identity.uaa.provider.saml.UaaSamlIDPDocs", "org.cloudfoundry.identity.uaa.util.UaaTokenUtilsTest", "org.cloudfoundry.identity.uaa.audit.event.ApprovalModifiedEventTest", "org.cloudfoundry.identity.uaa.mock.token.RefreshTokenMockMvcTests", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimUserProvisioningTests", "org.cloudfoundry.identity.uaa.audit.event.AuditListenerTests", "org.cloudfoundry.identity.uaa.security.X509ExpiryCheckingTrustManagerTest", "org.cloudfoundry.identity.uaa.web.ExceptionReportHttpMessageConverterTest", "org.cloudfoundry.identity.uaa.authentication.ZoneAwareWhitelistLogoutHandlerTests", "org.cloudfoundry.identity.uaa.security.DefaultSecurityContextAccessorTests", "org.cloudfoundry.identity.uaa.web.UaaSavedRequestCacheTests", "org.cloudfoundry.identity.uaa.config.YamlServletProfileInitializerTests", ":cloudfoundry-identity-uaa:compileTestJava/uaa/uaa/src/test/java/org/springframework/security/ldap/server/ApacheDsSSLContainer.java", "org.cloudfoundry.identity.uaa.oauth.JdbcQueryableClientDetailsServiceTests", ":cloudfoundry-identity-model:mainOutputResourcesDir", "org.cloudfoundry.identity.uaa.scim.endpoints.ChangeEmailEndpointsTest", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthIdentityProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.login.PasswordConfirmationValidationTest", "org.cloudfoundry.identity.uaa.login.TokenEndpointDocs", "org.cloudfoundry.identity.uaa.db.StoreSubDomainAsLowerCase_V2_7_3_Tests", "org.cloudfoundry.identity.uaa.provider.saml.SamlConfigurationBeanTest", "org.cloudfoundry.identity.uaa.oauth.RestrictUaaScopesClientValidatorTest", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupMembershipManagerTests", "org.cloudfoundry.identity.uaa.authentication.manager.PeriodLockoutPolicyTests", "org.cloudfoundry.identity.uaa.login.EmailAccountCreationServiceTests", "org.cloudfoundry.identity.uaa.oauth.token.JdbcRevocableTokenProvisioningTest", "org.cloudfoundry.identity.uaa.util.UaaPagingUtilsTests", "org.cloudfoundry.identity.uaa.login.EmailInvitationsServiceTests", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.login.AuthorizeEndpointDocs", "org.cloudfoundry.identity.uaa.mock.token.TokenKeyEndpointDocs", "org.cloudfoundry.identity.uaa.scim.endpoints.PasswordResetEndpointTest", "org.cloudfoundry.identity.uaa.test.UaaTestAccountsTest", "org.cloudfoundry.identity.uaa.login.PasscodeMockMvcTests", "org.cloudfoundry.identity.uaa.mock.password.PasswordChangeEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.scim.endpoints.UserIdConversionEndpointDocs", "org.cloudfoundry.identity.uaa.authentication.listener.UserAuthenticationSuccessListenerTests", "org.cloudfoundry.identity.uaa.audit.LineAwareLayoutTest"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_1087", "original_commit_message": "Improve invitations\n[#145624295] https://www.pivotaltracker.com/story/show/145624295\nSigned-off-by: Filip Hanik <fhanik@pivotal.io>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/invitations/InvitationsController.java b/server/src/main/java/org/cloudfoundry/identity/uaa/invitations/InvitationsController.java\nindex a99191bf3..d5669563f 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/invitations/InvitationsController.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/invitations/InvitationsController.java\n@@ -250,19 +250,34 @@ public class InvitationsController {\n \n         UaaPrincipal principal =  (UaaPrincipal) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n \n+        final ExpiringCode expiringCode = expiringCodeStore.retrieveCode(code);\n+\n+        if (expiringCode == null || expiringCode.getData() == null) {\n+            logger.debug(\"Failing invitation. Code not found.\");\n+            SecurityContextHolder.clearContext();\n+            return handleUnprocessableEntity(model, response, \"error_message_code\", \"code_expired\", \"invitations/accept_invite\");\n+        }\n+        Map<String,String> data = JsonUtils.readValue(expiringCode.getData(), new TypeReference<Map<String,String>>() {});\n+        if (principal == null || data.get(\"user_id\") == null || !data.get(\"user_id\").equals(principal.getId())) {\n+            logger.debug(\"Failing invitation. Code and user ID mismatch.\");\n+            SecurityContextHolder.clearContext();\n+            return handleUnprocessableEntity(model, response, \"error_message_code\", \"code_expired\", \"invitations/accept_invite\");\n+        }\n+\n+        final String newCode = expiringCodeStore.generateCode(expiringCode.getData(), new Timestamp(System.currentTimeMillis() + (10 * 60 * 1000)), expiringCode.getIntent()).getCode();\n         if (!validation.valid()) {\n-           return processErrorReload(code, model, principal.getEmail(), response, \"error_message_code\", validation.getMessageCode());\n+           return processErrorReload(newCode, model, principal.getEmail(), response, \"error_message_code\", validation.getMessageCode());\n //           return handleUnprocessableEntity(model, response, \"error_message_code\", validation.getMessageCode(), \"invitations/accept_invite\");\n         }\n         try {\n             passwordValidator.validate(password);\n         } catch (InvalidPasswordException e) {\n-            return processErrorReload(code, model, principal.getEmail(), response, \"error_message\", e.getMessagesAsOneString());\n+            return processErrorReload(newCode, model, principal.getEmail(), response, \"error_message\", e.getMessagesAsOneString());\n //            return handleUnprocessableEntity(model, response, \"error_message\", e.getMessagesAsOneString(), \"invitations/accept_invite\");\n         }\n         AcceptedInvitation invitation;\n         try {\n-            invitation = invitationsService.acceptInvitation(code, password);\n+            invitation = invitationsService.acceptInvitation(newCode, password);\n         } catch (HttpClientErrorException e) {\n             return handleUnprocessableEntity(model, response, \"error_message_code\", \"code_expired\", \"invitations/accept_invite\");\n         }\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsControllerTest.java b/server/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsControllerTest.java\nindex f99aaf2be..6f5a5c171 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsControllerTest.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsControllerTest.java\n@@ -73,6 +73,7 @@ import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.doThrow;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n import static org.springframework.http.HttpStatus.BAD_REQUEST;\n@@ -433,24 +434,71 @@ public class InvitationsControllerTest {\n         assertNull(SecurityContextHolder.getContext().getAuthentication());\n     }\n \n+    @Test\n+    public void missing_code() throws Exception {\n+        MockHttpServletRequestBuilder post = startAcceptInviteFlow(\"a\", \"a\");\n+\n+        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(null);\n+\n+        IdentityProvider identityProvider = new IdentityProvider();\n+        identityProvider.setType(OriginKeys.UAA);\n+        when(providerProvisioning.retrieveByOrigin(\"uaa\", \"uaa\")).thenReturn(identityProvider);\n+        mockMvc.perform(post)\n+            .andExpect(status().isUnprocessableEntity())\n+            .andExpect(model().attribute(\"error_message_code\", \"code_expired\"))\n+            .andExpect(view().name(\"invitations/accept_invite\"));\n+        verify(expiringCodeStore).retrieveCode(\"thecode\");\n+        verify(expiringCodeStore, never()).generateCode(anyString(),anyObject(),anyString());\n+        verify(invitationsService, never()).acceptInvitation(anyString(), anyString());\n+\n+    }\n+\n+    @Test\n+    public void invalid_principal_id() throws Exception {\n+        MockHttpServletRequestBuilder post = startAcceptInviteFlow(\"a\", \"a\");\n+\n+        Map<String,String> codeData = getInvitationsCode(OriginKeys.UAA);\n+        codeData.put(\"user_id\", \"invalid id\");\n+        String codeDataString = JsonUtils.writeValueAsString(codeData);\n+        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(new ExpiringCode(\"thecode\", new Timestamp(1), codeDataString, INVITATION.name()), null);\n+\n+        IdentityProvider identityProvider = new IdentityProvider();\n+        identityProvider.setType(OriginKeys.UAA);\n+        when(providerProvisioning.retrieveByOrigin(\"uaa\", \"uaa\")).thenReturn(identityProvider);\n+        mockMvc.perform(post)\n+            .andExpect(status().isUnprocessableEntity())\n+            .andExpect(model().attribute(\"error_message_code\", \"code_expired\"))\n+            .andExpect(view().name(\"invitations/accept_invite\"));\n+        verify(expiringCodeStore).retrieveCode(\"thecode\");\n+        verify(expiringCodeStore, never()).generateCode(anyString(),anyObject(),anyString());\n+        verify(invitationsService, never()).acceptInvitation(anyString(), anyString());\n+\n+    }\n+\n     @Test\n     public void testAcceptInviteWithContraveningPassword() throws Exception {\n         doThrow(new InvalidPasswordException(Arrays.asList(\"Msg 2c\", \"Msg 1c\"))).when(passwordValidator).validate(\"a\");\n         MockHttpServletRequestBuilder post = startAcceptInviteFlow(\"a\", \"a\");\n \n         Map<String,String> codeData = getInvitationsCode(OriginKeys.UAA);\n-        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(new ExpiringCode(\"thecode\", new Timestamp(1), \"{\\\"origin\\\":\\\"uaa\\\"}\", \"intent\"), null);\n+        String codeDataString = JsonUtils.writeValueAsString(codeData);\n+        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(new ExpiringCode(\"thecode\", new Timestamp(1), codeDataString, INVITATION.name()), null);\n+        when(expiringCodeStore.retrieveCode(\"thenewcode\")).thenReturn(new ExpiringCode(\"thenewcode\", new Timestamp(1), codeDataString, INVITATION.name()), null);\n+        when(expiringCodeStore.generateCode(eq(codeDataString),any(), eq(INVITATION.name()))).thenReturn(\n+            new ExpiringCode(\"thenewcode\", new Timestamp(1), codeDataString, INVITATION.name()),\n+            new ExpiringCode(\"thenewcode2\", new Timestamp(1), codeDataString, INVITATION.name())\n+        );\n+\n         IdentityProvider identityProvider = new IdentityProvider();\n         identityProvider.setType(OriginKeys.UAA);\n         when(providerProvisioning.retrieveByOrigin(\"uaa\", \"uaa\")).thenReturn(identityProvider);\n-        when(expiringCodeStore.generateCode(anyString(), anyObject(), anyString())).thenReturn(createCode(codeData));\n         mockMvc.perform(post)\n             .andExpect(status().isFound())\n             .andExpect(model().attribute(\"error_message\", \"Msg 1c Msg 2c\"))\n-            .andExpect(model().attribute(\"code\", \"code\"))\n+            .andExpect(model().attribute(\"code\", \"thenewcode2\"))\n             .andExpect(view().name(\"redirect:accept\"));\n         verify(expiringCodeStore).retrieveCode(\"thecode\");\n-        verify(expiringCodeStore).generateCode(anyString(),anyObject(),anyString());\n+        verify(expiringCodeStore, times(2)).generateCode(anyString(),anyObject(),anyString());\n         verify(invitationsService, never()).acceptInvitation(anyString(), anyString());\n     }\n \n@@ -460,6 +508,17 @@ public class InvitationsControllerTest {\n         user.setPrimaryEmail(user.getUserName());\n         MockHttpServletRequestBuilder post = startAcceptInviteFlow(\"passw0rd\",\"passw0rd\");\n \n+        Map<String,String> codeData = getInvitationsCode(OriginKeys.UAA);\n+        String codeDataString = JsonUtils.writeValueAsString(codeData);\n+        ExpiringCode thecode = new ExpiringCode(\"thecode\", new Timestamp(1), codeDataString, INVITATION.name());\n+        ExpiringCode thenewcode = new ExpiringCode(\"thenewcode\", new Timestamp(1), codeDataString, INVITATION.name());\n+        ExpiringCode thenewcode2 = new ExpiringCode(\"thenewcode2\", new Timestamp(1), codeDataString, INVITATION.name());\n+        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(thecode, null);\n+        when(expiringCodeStore.retrieveCode(\"thenewcode\")).thenReturn(thenewcode, null);\n+        when(expiringCodeStore.generateCode(eq(codeDataString),any(), eq(INVITATION.name())))\n+            .thenReturn(thenewcode)\n+            .thenReturn(thenewcode2);\n+\n         when(invitationsService.acceptInvitation(anyString(), eq(\"passw0rd\"))).thenReturn(new InvitationsService.AcceptedInvitation(\"/home\", user));\n \n         mockMvc.perform(post)\n@@ -489,6 +548,10 @@ public class InvitationsControllerTest {\n         UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(uaaPrincipal, null, UaaAuthority.USER_AUTHORITIES);\n         SecurityContextHolder.getContext().setAuthentication(token);\n \n+        Map<String,String> codeData = getInvitationsCode(OriginKeys.UAA);\n+        String codeDataString = JsonUtils.writeValueAsString(codeData);\n+        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(new ExpiringCode(\"thecode\", new Timestamp(1), codeDataString, INVITATION.name()), null);\n+        when(expiringCodeStore.generateCode(eq(codeDataString),any(), eq(INVITATION.name()))).thenReturn(new ExpiringCode(\"thenewcode\", new Timestamp(1), codeDataString, INVITATION.name()));\n         when(invitationsService.acceptInvitation(anyString(), eq(\"password\"))).thenReturn(new InvitationsService.AcceptedInvitation(\"valid.redirect.com\", user));\n \n         MockHttpServletRequestBuilder post = post(\"/invitations/accept.do\")\n@@ -510,6 +573,11 @@ public class InvitationsControllerTest {\n         ScimUser user = new ScimUser(uaaPrincipal.getId(), uaaPrincipal.getName(),\"fname\", \"lname\");\n         user.setPrimaryEmail(user.getUserName());\n \n+        Map<String,String> codeData = getInvitationsCode(OriginKeys.UAA);\n+        String codeDataString = JsonUtils.writeValueAsString(codeData);\n+        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(new ExpiringCode(\"thecode\", new Timestamp(1), codeDataString, INVITATION.name()), null);\n+        when(expiringCodeStore.generateCode(eq(codeDataString),any(), eq(INVITATION.name()))).thenReturn(new ExpiringCode(\"thenewcode\", new Timestamp(1), codeDataString, INVITATION.name()));\n+\n         when(invitationsService.acceptInvitation(anyString(), eq(\"password\"))).thenReturn(new InvitationsService.AcceptedInvitation(\"/home\", user));\n \n         MockHttpServletRequestBuilder post = post(\"/invitations/accept.do\")\n@@ -528,6 +596,11 @@ public class InvitationsControllerTest {\n         UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(uaaPrincipal, null, UaaAuthority.USER_AUTHORITIES);\n         SecurityContextHolder.getContext().setAuthentication(token);\n \n+        Map<String,String> codeData = getInvitationsCode(OriginKeys.UAA);\n+        String codeDataString = JsonUtils.writeValueAsString(codeData);\n+        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(new ExpiringCode(\"thecode\", new Timestamp(1), codeDataString, INVITATION.name()), null);\n+        when(expiringCodeStore.generateCode(eq(codeDataString),any(), eq(INVITATION.name()))).thenReturn(new ExpiringCode(\"thenewcode\", new Timestamp(1), codeDataString, INVITATION.name()));\n+\n         doThrow(new HttpClientErrorException(BAD_REQUEST)).when(invitationsService).acceptInvitation(anyString(), anyString());\n \n         MockHttpServletRequestBuilder post = post(\"/invitations/accept.do\")\n@@ -545,19 +618,26 @@ public class InvitationsControllerTest {\n     public void testAcceptInviteWithoutMatchingPasswords() throws Exception {\n         MockHttpServletRequestBuilder post = startAcceptInviteFlow(\"a\",\"b\");\n \n-        Map<String,String> codeData = getInvitationsCode(\"test-oidc\");\n-        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(new ExpiringCode(\"thecode\", new Timestamp(1), \"{\\\"origin\\\":\\\"uaa\\\"}\", \"intent\"), null);\n+        Map<String,String> codeData = getInvitationsCode(OriginKeys.UAA);\n+        String codeDataString = JsonUtils.writeValueAsString(codeData);\n+        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(new ExpiringCode(\"thecode\", new Timestamp(1), codeDataString, INVITATION.name()), null);\n+        when(expiringCodeStore.retrieveCode(\"thenewcode\")).thenReturn(new ExpiringCode(\"thenewcode\", new Timestamp(1), codeDataString, INVITATION.name()), null);\n+        when(expiringCodeStore.generateCode(eq(codeDataString),any(), eq(INVITATION.name()))).thenReturn(\n+            new ExpiringCode(\"thenewcode\", new Timestamp(1), codeDataString, INVITATION.name()),\n+            new ExpiringCode(\"thenewcode2\", new Timestamp(1), codeDataString, INVITATION.name())\n+        );\n+\n+\n         IdentityProvider identityProvider = new IdentityProvider();\n         identityProvider.setType(OriginKeys.UAA);\n         when(providerProvisioning.retrieveByOrigin(\"uaa\", \"uaa\")).thenReturn(identityProvider);\n-        when(expiringCodeStore.generateCode(anyString(), anyObject(), anyString())).thenReturn(createCode(codeData));\n         mockMvc.perform(post)\n             .andExpect(status().isFound())\n             .andExpect(model().attribute(\"error_message_code\", \"form_error\"))\n-            .andExpect(model().attribute(\"code\", \"code\"))\n+            .andExpect(model().attribute(\"code\", \"thenewcode2\"))\n             .andExpect(view().name(\"redirect:accept\"));\n         verify(expiringCodeStore).retrieveCode(\"thecode\");\n-        verify(expiringCodeStore).generateCode(anyString(),anyObject(),anyString());\n+        verify(expiringCodeStore, times(2)).generateCode(anyString(),anyObject(),anyString());\n         verify(invitationsService, never()).acceptInvitation(anyString(), anyString());\n     }\n \n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/InvitationsIT.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/InvitationsIT.java\nindex 06ceb379e..0ed73dad6 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/InvitationsIT.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/InvitationsIT.java\n@@ -43,6 +43,7 @@ import org.springframework.security.oauth2.common.util.RandomValueStringGenerato\n import org.springframework.security.oauth2.provider.client.BaseClientDetails;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.web.client.DefaultResponseErrorHandler;\n import org.springframework.web.client.RestTemplate;\n \n import java.net.URL;\n@@ -117,6 +118,22 @@ public class InvitationsIT {\n         webDriver.manage().deleteAllCookies();\n     }\n \n+    @Test\n+    public void invite_fails() {\n+        RestTemplate uaaTemplate = new RestTemplate();\n+        uaaTemplate.setErrorHandler(new DefaultResponseErrorHandler() {\n+            @Override\n+            protected boolean hasError(HttpStatus statusCode) {\n+                return statusCode.is5xxServerError();\n+            }\n+        });\n+        HttpHeaders headers = new HttpHeaders();\n+        headers.setContentType(APPLICATION_JSON);\n+        HttpEntity<String> request = new HttpEntity<>(\"{\\\"emails\\\":[\\\"marissa@test.org\\\"]}\", headers);\n+        ResponseEntity<Void> response = uaaTemplate.exchange(uaaUrl + \"/invite_users/?client_id=admin&redirect_uri={uri}\", POST, request, Void.class, \"https://www.google.com\");\n+        assertThat(response.getStatusCode(), is(HttpStatus.UNAUTHORIZED));\n+    }\n+\n     @Test\n     public void testInviteUserWithClientRedirect() throws Exception {\n         String userEmail = \"user-\" + new RandomValueStringGenerator().generate() + \"@example.com\";\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/InvitationsServiceMockMvcTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/InvitationsServiceMockMvcTests.java\nindex 17dcb57ee..0af34c576 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/InvitationsServiceMockMvcTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/InvitationsServiceMockMvcTests.java\n@@ -53,15 +53,18 @@ import static org.hamcrest.Matchers.endsWith;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertThat;\n import static org.junit.Assert.assertTrue;\n import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrl;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrlPattern;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;\n \n public class InvitationsServiceMockMvcTests extends InjectedMockContextTest {\n \n@@ -226,6 +229,55 @@ public class InvitationsServiceMockMvcTests extends InjectedMockContextTest {\n             .andExpect(status().isUnprocessableEntity());\n     }\n \n+    @Test\n+    public void invalid_code() throws Exception {\n+        String email = new RandomValueStringGenerator().generate().toLowerCase()+\"@test.org\";\n+        String invalid = new RandomValueStringGenerator().generate().toLowerCase()+\"@test.org\";\n+        URL inviteLink = inviteUser(email, userInviteToken, null, clientId, OriginKeys.UAA);\n+        URL invalidLink = inviteUser(invalid, userInviteToken, null, clientId, OriginKeys.UAA);\n+\n+        assertFalse(\"User should not be verified\", queryUserForField(email, \"verified\", Boolean.class));\n+        assertEquals(OriginKeys.UAA, queryUserForField(email, OriginKeys.ORIGIN, String.class));\n+\n+        String code = extractInvitationCode(inviteLink.toString());\n+        String invalidCode = extractInvitationCode(invalidLink.toString());\n+\n+        MvcResult result = getMockMvc().perform(get(\"/invitations/accept\")\n+            .param(\"code\", code)\n+            .accept(MediaType.TEXT_HTML)\n+        )\n+            .andExpect(status().isOk())\n+            .andExpect(content().string(containsString(\"Email: \" + email)))\n+            .andReturn();\n+\n+        MockHttpSession session = (MockHttpSession) result.getRequest().getSession(false);\n+        result = getMockMvc().perform(\n+            post(\"/invitations/accept.do\")\n+                .session(session)\n+                .param(\"password\", \"s3cret\")\n+                .param(\"password_confirmation\", \"s3cret\")\n+                .param(\"code\",invalidCode)\n+                .with(csrf())\n+        )\n+            .andExpect(status().isUnprocessableEntity())\n+            .andExpect(model().attribute(\"error_message_code\", \"code_expired\"))\n+            .andExpect(view().name(\"invitations/accept_invite\"))\n+            .andReturn();\n+\n+        assertFalse(\"User should be not yet be verified\", queryUserForField(email, \"verified\", Boolean.class));\n+        assertNull(session.getAttribute(\"SPRING_SECURITY_CONTEXT\"));\n+\n+        session = (MockHttpSession) result.getRequest().getSession(false);\n+        //not logged in anymore\n+        getMockMvc().perform(\n+            get(\"/profile\")\n+                .session(session)\n+                .accept(MediaType.TEXT_HTML)\n+        )\n+            .andExpect(status().isFound())\n+            .andExpect(redirectedUrl(\"http://localhost/login\"));\n+    }\n+\n     @Test\n     public void accept_invitation_sets_your_password() throws Exception {\n         String email = new RandomValueStringGenerator().generate().toLowerCase()+\"@test.org\";\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/LoginMockMvcTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/LoginMockMvcTests.java\nindex 4b52b3cd4..96a3d2150 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/LoginMockMvcTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/LoginMockMvcTests.java\n@@ -1767,7 +1767,12 @@ public class LoginMockMvcTests extends InjectedMockContextTest {\n         inviteContext.setAuthentication(inviteToken);\n         inviteSession.setAttribute(\"SPRING_SECURITY_CONTEXT\", inviteContext);\n \n-        ExpiringCode code = getWebApplicationContext().getBean(ExpiringCodeStore.class).generateCode(\"{ \\\"origin\\\" : \\\"uaa\\\"}\", new Timestamp(System.currentTimeMillis() + 1000 * 60), null);\n+        Map<String, String> codeData = new HashMap();\n+        codeData.put(\"user_id\", ((UaaPrincipal)marissaContext.getAuthentication().getPrincipal()).getId());\n+        codeData.put(\"email\", ((UaaPrincipal)marissaContext.getAuthentication().getPrincipal()).getEmail());\n+        codeData.put(\"origin\", OriginKeys.UAA);\n+\n+        ExpiringCode code = getWebApplicationContext().getBean(ExpiringCodeStore.class).generateCode(JsonUtils.writeValueAsString(codeData), new Timestamp(System.currentTimeMillis() + 1000 * 60), null);\n \n         //logged in with valid CSRF\n         MockHttpServletRequestBuilder post = post(\"/invitations/accept.do\")\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "logical and structural changes", "source_commit": "4f942064d85454a4bcc4da04cd482d114816c14a", "source_date": "Wed May 17 13:52:05 2017 -0700", "source_tag": "4.2.0", "target_commit": "96a294013c0c9a13ef32afc49d2b759f5107dc49", "target_date": "Wed May 17 22:04:48 2017 -0700", "target_tag": "2.7.4", "FAIL TO PASS": ["org.cloudfoundry.identity.uaa.invitations.InvitationsControllerTest > testAcceptInviteWithContraveningPassword", "org.cloudfoundry.identity.uaa.invitations.InvitationsControllerTest > invalidCodeOnAcceptPost", "org.cloudfoundry.identity.uaa.invitations.InvitationsControllerTest > invalid_principal_id", "org.cloudfoundry.identity.uaa.invitations.InvitationsControllerTest > missing_code", "org.cloudfoundry.identity.uaa.invitations.InvitationsControllerTest > testAcceptInviteWithoutMatchingPasswords", "org.cloudfoundry.identity.uaa.mock.DefaultConfigurationTestSuite > org.cloudfoundry.identity.uaa.login.InvitationsServiceMockMvcTests.invalid_code"], "PASS TO PASS": ["org.cloudfoundry.identity.uaa.mock.clients.ClientAdminEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.mock.config.LockoutPolicyTests", ":cloudfoundry-identity-login:copyCoberturaDatafile", "org.cloudfoundry.identity.uaa.authentication.manager.DynamicLdapAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.login.UsernamePasswordExtractingAuthenticationManagerTests", ":cloudfoundry-identity-uaa:compileJava", "org.cloudfoundry.identity.uaa.login.RestUaaApprovalsServiceTest", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneSwitchingFilterMockMvcTest", "org.cloudfoundry.identity.uaa.mock.oauth.CheckDefaultAuthoritiesMvcMockTests", ":cloudfoundry-identity-payload:gitInfo", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserLookupMockMvcTests", "org.cloudfoundry.identity.uaa.mock.zones.DisableUserManagementSecurityFilterMockMvcTest", ":cloudfoundry-identity-uaa:copyCoberturaDatafile", "org.cloudfoundry.identity.uaa.security.CsrfAwareEntryPointAndDeniedHandlerTest", "org.cloudfoundry.identity.uaa.login.HomeControllerViewTests", ":cloudfoundry-identity-scim:classes", "/uaa/uaa/src/test/java/org/springframework/security/ldap/server/ApacheDsSSLContainer.java", "org.cloudfoundry.identity.uaa.login.AccountsControllerMockMvcTests", ":cloudfoundry-identity-scim:makeInstrumentedSourceSet", ":cloudfoundry-identity-common:makeInstrumentedSourceSet", "org.cloudfoundry.identity.uaa.login.EmailServiceTests", ":cloudfoundry-identity-login:testClasses", "org.cloudfoundry.identity.uaa.db.TestZonifyGroupSchema_V2_4_1", "org.cloudfoundry.identity.uaa.login.LoginMockMvcTests", "org.cloudfoundry.identity.uaa.login.ProfileControllerTests", ":cloudfoundry-identity-payload:compileJava", ":cloudfoundry-identity-login:instrument", "org.cloudfoundry.identity.uaa.mock.authentication.AuthzAuthenticationManagerConfigurationTests", ":cloudfoundry-identity-scim:compileTestJava", ":cloudfoundry-identity-scim:instrumentedClasses", "org.cloudfoundry.identity.uaa.mock.DefaultConfigurationTestSuite", ":cloudfoundry-identity-scim:processTestResources", "org.cloudfoundry.identity.uaa.login.saml.SamlIDPRefreshMockMvcTests", "org.cloudfoundry.identity.uaa.login.XFrameOptionsTheories", ":cloudfoundry-identity-common:instrumentedJar", "org.cloudfoundry.identity.uaa.login.util.LocalUaaRestTemplateMockMvcTests", "org.cloudfoundry.identity.uaa.authentication.manager.DynamicZoneAwareAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.mock.codestore.ExpiringCodeStoreMockMvcTests", ":cloudfoundry-identity-scim:instrumentedJar", "org.cloudfoundry.identity.uaa.invitations.InvitationsEndpointMockMvcTests", ":cloudfoundry-identity-payload:classes", ":cloudfoundry-identity-scim:processResources", ":cloudfoundry-identity-common:processResources", "org.cloudfoundry.identity.uaa.authentication.WhitelistLogoutHandlerTest", ":cloudfoundry-identity-login:compileJava", "org.cloudfoundry.identity.uaa.login.EmailChangeEmailServiceTest", ":cloudfoundry-identity-payload:processResources", ":cloudfoundry-identity-scim:compileJava", "org.cloudfoundry.identity.uaa.login.AutologinAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.login.ChangeEmailControllerTest", "org.cloudfoundry.identity.uaa.mock.ldap.LdapMockMvcTests", ":cloudfoundry-identity-scim:testClasses", ":cloudfoundry-identity-uaa:processResources", "org.cloudfoundry.identity.uaa.mock.audit.AuditCheckMockMvcTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserEndpointsMockMvcTests", ":cloudfoundry-identity-login:processResources", "org.cloudfoundry.identity.uaa.mock.zones.DisableInternalUserManagementFilterMockMvcTests", "org.cloudfoundry.identity.uaa.login.LinkedMaskingMultiValueMapTests", "org.cloudfoundry.identity.uaa.invitations.InvitationsAuthenticationTrustResolverTest", ":cloudfoundry-identity-login:compileInstrumentedJava", ":cloudfoundry-identity-login:compileTestJava", "org.cloudfoundry.identity.uaa.login.TileInfoTest", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsMockMvcTests", ":cloudfoundry-identity-uaa:processTestResources", ":cloudfoundry-identity-uaa:classes", ":cloudfoundry-identity-payload:buildInfo", ":cloudfoundry-identity-login:makeInstrumentedSourceSet", ":cloudfoundry-identity-common:processTestResources", ":cloudfoundry-identity-common:instrumentedClasses", ":cloudfoundry-identity-scim:jar", "org.cloudfoundry.identity.web.PromptTest", "org.cloudfoundry.identity.uaa.login.ResetPasswordControllerTest", ":cloudfoundry-identity-login:processInstrumentedResources", ":cloudfoundry-identity-login:jar", ":cloudfoundry-identity-uaa:compileTestJava", "org.cloudfoundry.identity.uaa.mock.config.HealthzShouldNotBeProtectedMockMvcTests", "org.cloudfoundry.identity.uaa.mock.token.TokenKeyEndpointMockMvcTests", ":cloudfoundry-identity-scim:processInstrumentedResources", ":cloudfoundry-identity-common:copyInstrumentedClasses", "org.cloudfoundry.identity.uaa.login.BootstrapTests", "org.cloudfoundry.identity.uaa.mock.token.TokenMvcMockTests", ":cloudfoundry-identity-common:processInstrumentedResources", ":cloudfoundry-identity-scim:compileInstrumentedJava", ":cloudfoundry-identity-uaa:compileTestJava/uaa/uaa/src/test/java/org/springframework/security/ldap/server/ApacheDsSSLContainer.java", ":cloudfoundry-identity-common:compileTestJava", ":cloudfoundry-identity-common:instrument", ":cloudfoundry-identity-scim:copyInstrumentedClasses", "org.cloudfoundry.identity.uaa.login.saml.LoginSamlAuthenticationProviderTests", "org.cloudfoundry.identity.uaa.login.InvitationsServiceMockMvcTests", "org.cloudfoundry.identity.uaa.BootstrapTests", ":cloudfoundry-identity-common:testClasses", ":cloudfoundry-identity-common:compileJava", "org.cloudfoundry.identity.uaa.login.util.FakeJavaMailSenderTest", ":cloudfoundry-identity-payload:mainOutputResourcesDir", "org.cloudfoundry.identity.uaa.login.PasswordConfirmationValidationTest", "org.cloudfoundry.identity.uaa.UaaConfigurationTests", ":cloudfoundry-identity-login:instrumentedClasses", ":cloudfoundry-identity-common:classes", ":cloudfoundry-identity-scim:instrument", ":cloudfoundry-identity-common:jar", ":cloudfoundry-identity-common:compileInstrumentedJava", ":cloudfoundry-identity-uaa:testClasses", ":cloudfoundry-identity-uaa:instrument", "org.cloudfoundry.identity.uaa.login.EmailAccountCreationServiceTests", ":cloudfoundry-identity-login:processTestResources", ":cloudfoundry-identity-login:instrumentedJar", "org.cloudfoundry.identity.uaa.mock.zones.IdentityProviderEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.login.NotificationsServiceTest", "org.cloudfoundry.identity.uaa.login.EmailInvitationsServiceTests", ":cloudfoundry-identity-payload:jar", "org.cloudfoundry.identity.uaa.login.ResetPasswordControllerMockMvcTests", "org.cloudfoundry.identity.uaa.login.ChangePasswordControllerTest", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.scim.endpoints.PasswordResetEndpointMockMvcTests", ":cloudfoundry-identity-login:copyInstrumentedClasses", "org.cloudfoundry.identity.uaa.mock.approvals.ApprovalsMockMvcTests", "org.cloudfoundry.identity.uaa.login.PasscodeMockMvcTests", "org.cloudfoundry.identity.uaa.mock.password.PasswordChangeEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.login.AccountsControllerTest", "org.cloudfoundry.identity.uaa.login.UaaChangePasswordServiceTest", ":cloudfoundry-identity-login:classes"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_1088", "original_commit_message": "Improve invitations\n[#145624295] https://www.pivotaltracker.com/story/show/145624295\nSigned-off-by: Filip Hanik <fhanik@pivotal.io>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/invitations/InvitationsController.java b/server/src/main/java/org/cloudfoundry/identity/uaa/invitations/InvitationsController.java\nindex a99191bf3..d5669563f 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/invitations/InvitationsController.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/invitations/InvitationsController.java\n@@ -250,19 +250,34 @@ public class InvitationsController {\n \n         UaaPrincipal principal =  (UaaPrincipal) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n \n+        final ExpiringCode expiringCode = expiringCodeStore.retrieveCode(code);\n+\n+        if (expiringCode == null || expiringCode.getData() == null) {\n+            logger.debug(\"Failing invitation. Code not found.\");\n+            SecurityContextHolder.clearContext();\n+            return handleUnprocessableEntity(model, response, \"error_message_code\", \"code_expired\", \"invitations/accept_invite\");\n+        }\n+        Map<String,String> data = JsonUtils.readValue(expiringCode.getData(), new TypeReference<Map<String,String>>() {});\n+        if (principal == null || data.get(\"user_id\") == null || !data.get(\"user_id\").equals(principal.getId())) {\n+            logger.debug(\"Failing invitation. Code and user ID mismatch.\");\n+            SecurityContextHolder.clearContext();\n+            return handleUnprocessableEntity(model, response, \"error_message_code\", \"code_expired\", \"invitations/accept_invite\");\n+        }\n+\n+        final String newCode = expiringCodeStore.generateCode(expiringCode.getData(), new Timestamp(System.currentTimeMillis() + (10 * 60 * 1000)), expiringCode.getIntent()).getCode();\n         if (!validation.valid()) {\n-           return processErrorReload(code, model, principal.getEmail(), response, \"error_message_code\", validation.getMessageCode());\n+           return processErrorReload(newCode, model, principal.getEmail(), response, \"error_message_code\", validation.getMessageCode());\n //           return handleUnprocessableEntity(model, response, \"error_message_code\", validation.getMessageCode(), \"invitations/accept_invite\");\n         }\n         try {\n             passwordValidator.validate(password);\n         } catch (InvalidPasswordException e) {\n-            return processErrorReload(code, model, principal.getEmail(), response, \"error_message\", e.getMessagesAsOneString());\n+            return processErrorReload(newCode, model, principal.getEmail(), response, \"error_message\", e.getMessagesAsOneString());\n //            return handleUnprocessableEntity(model, response, \"error_message\", e.getMessagesAsOneString(), \"invitations/accept_invite\");\n         }\n         AcceptedInvitation invitation;\n         try {\n-            invitation = invitationsService.acceptInvitation(code, password);\n+            invitation = invitationsService.acceptInvitation(newCode, password);\n         } catch (HttpClientErrorException e) {\n             return handleUnprocessableEntity(model, response, \"error_message_code\", \"code_expired\", \"invitations/accept_invite\");\n         }\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsControllerTest.java b/server/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsControllerTest.java\nindex f99aaf2be..6f5a5c171 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsControllerTest.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsControllerTest.java\n@@ -73,6 +73,7 @@ import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.doThrow;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n import static org.springframework.http.HttpStatus.BAD_REQUEST;\n@@ -433,24 +434,71 @@ public class InvitationsControllerTest {\n         assertNull(SecurityContextHolder.getContext().getAuthentication());\n     }\n \n+    @Test\n+    public void missing_code() throws Exception {\n+        MockHttpServletRequestBuilder post = startAcceptInviteFlow(\"a\", \"a\");\n+\n+        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(null);\n+\n+        IdentityProvider identityProvider = new IdentityProvider();\n+        identityProvider.setType(OriginKeys.UAA);\n+        when(providerProvisioning.retrieveByOrigin(\"uaa\", \"uaa\")).thenReturn(identityProvider);\n+        mockMvc.perform(post)\n+            .andExpect(status().isUnprocessableEntity())\n+            .andExpect(model().attribute(\"error_message_code\", \"code_expired\"))\n+            .andExpect(view().name(\"invitations/accept_invite\"));\n+        verify(expiringCodeStore).retrieveCode(\"thecode\");\n+        verify(expiringCodeStore, never()).generateCode(anyString(),anyObject(),anyString());\n+        verify(invitationsService, never()).acceptInvitation(anyString(), anyString());\n+\n+    }\n+\n+    @Test\n+    public void invalid_principal_id() throws Exception {\n+        MockHttpServletRequestBuilder post = startAcceptInviteFlow(\"a\", \"a\");\n+\n+        Map<String,String> codeData = getInvitationsCode(OriginKeys.UAA);\n+        codeData.put(\"user_id\", \"invalid id\");\n+        String codeDataString = JsonUtils.writeValueAsString(codeData);\n+        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(new ExpiringCode(\"thecode\", new Timestamp(1), codeDataString, INVITATION.name()), null);\n+\n+        IdentityProvider identityProvider = new IdentityProvider();\n+        identityProvider.setType(OriginKeys.UAA);\n+        when(providerProvisioning.retrieveByOrigin(\"uaa\", \"uaa\")).thenReturn(identityProvider);\n+        mockMvc.perform(post)\n+            .andExpect(status().isUnprocessableEntity())\n+            .andExpect(model().attribute(\"error_message_code\", \"code_expired\"))\n+            .andExpect(view().name(\"invitations/accept_invite\"));\n+        verify(expiringCodeStore).retrieveCode(\"thecode\");\n+        verify(expiringCodeStore, never()).generateCode(anyString(),anyObject(),anyString());\n+        verify(invitationsService, never()).acceptInvitation(anyString(), anyString());\n+\n+    }\n+\n     @Test\n     public void testAcceptInviteWithContraveningPassword() throws Exception {\n         doThrow(new InvalidPasswordException(Arrays.asList(\"Msg 2c\", \"Msg 1c\"))).when(passwordValidator).validate(\"a\");\n         MockHttpServletRequestBuilder post = startAcceptInviteFlow(\"a\", \"a\");\n \n         Map<String,String> codeData = getInvitationsCode(OriginKeys.UAA);\n-        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(new ExpiringCode(\"thecode\", new Timestamp(1), \"{\\\"origin\\\":\\\"uaa\\\"}\", \"intent\"), null);\n+        String codeDataString = JsonUtils.writeValueAsString(codeData);\n+        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(new ExpiringCode(\"thecode\", new Timestamp(1), codeDataString, INVITATION.name()), null);\n+        when(expiringCodeStore.retrieveCode(\"thenewcode\")).thenReturn(new ExpiringCode(\"thenewcode\", new Timestamp(1), codeDataString, INVITATION.name()), null);\n+        when(expiringCodeStore.generateCode(eq(codeDataString),any(), eq(INVITATION.name()))).thenReturn(\n+            new ExpiringCode(\"thenewcode\", new Timestamp(1), codeDataString, INVITATION.name()),\n+            new ExpiringCode(\"thenewcode2\", new Timestamp(1), codeDataString, INVITATION.name())\n+        );\n+\n         IdentityProvider identityProvider = new IdentityProvider();\n         identityProvider.setType(OriginKeys.UAA);\n         when(providerProvisioning.retrieveByOrigin(\"uaa\", \"uaa\")).thenReturn(identityProvider);\n-        when(expiringCodeStore.generateCode(anyString(), anyObject(), anyString())).thenReturn(createCode(codeData));\n         mockMvc.perform(post)\n             .andExpect(status().isFound())\n             .andExpect(model().attribute(\"error_message\", \"Msg 1c Msg 2c\"))\n-            .andExpect(model().attribute(\"code\", \"code\"))\n+            .andExpect(model().attribute(\"code\", \"thenewcode2\"))\n             .andExpect(view().name(\"redirect:accept\"));\n         verify(expiringCodeStore).retrieveCode(\"thecode\");\n-        verify(expiringCodeStore).generateCode(anyString(),anyObject(),anyString());\n+        verify(expiringCodeStore, times(2)).generateCode(anyString(),anyObject(),anyString());\n         verify(invitationsService, never()).acceptInvitation(anyString(), anyString());\n     }\n \n@@ -460,6 +508,17 @@ public class InvitationsControllerTest {\n         user.setPrimaryEmail(user.getUserName());\n         MockHttpServletRequestBuilder post = startAcceptInviteFlow(\"passw0rd\",\"passw0rd\");\n \n+        Map<String,String> codeData = getInvitationsCode(OriginKeys.UAA);\n+        String codeDataString = JsonUtils.writeValueAsString(codeData);\n+        ExpiringCode thecode = new ExpiringCode(\"thecode\", new Timestamp(1), codeDataString, INVITATION.name());\n+        ExpiringCode thenewcode = new ExpiringCode(\"thenewcode\", new Timestamp(1), codeDataString, INVITATION.name());\n+        ExpiringCode thenewcode2 = new ExpiringCode(\"thenewcode2\", new Timestamp(1), codeDataString, INVITATION.name());\n+        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(thecode, null);\n+        when(expiringCodeStore.retrieveCode(\"thenewcode\")).thenReturn(thenewcode, null);\n+        when(expiringCodeStore.generateCode(eq(codeDataString),any(), eq(INVITATION.name())))\n+            .thenReturn(thenewcode)\n+            .thenReturn(thenewcode2);\n+\n         when(invitationsService.acceptInvitation(anyString(), eq(\"passw0rd\"))).thenReturn(new InvitationsService.AcceptedInvitation(\"/home\", user));\n \n         mockMvc.perform(post)\n@@ -489,6 +548,10 @@ public class InvitationsControllerTest {\n         UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(uaaPrincipal, null, UaaAuthority.USER_AUTHORITIES);\n         SecurityContextHolder.getContext().setAuthentication(token);\n \n+        Map<String,String> codeData = getInvitationsCode(OriginKeys.UAA);\n+        String codeDataString = JsonUtils.writeValueAsString(codeData);\n+        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(new ExpiringCode(\"thecode\", new Timestamp(1), codeDataString, INVITATION.name()), null);\n+        when(expiringCodeStore.generateCode(eq(codeDataString),any(), eq(INVITATION.name()))).thenReturn(new ExpiringCode(\"thenewcode\", new Timestamp(1), codeDataString, INVITATION.name()));\n         when(invitationsService.acceptInvitation(anyString(), eq(\"password\"))).thenReturn(new InvitationsService.AcceptedInvitation(\"valid.redirect.com\", user));\n \n         MockHttpServletRequestBuilder post = post(\"/invitations/accept.do\")\n@@ -510,6 +573,11 @@ public class InvitationsControllerTest {\n         ScimUser user = new ScimUser(uaaPrincipal.getId(), uaaPrincipal.getName(),\"fname\", \"lname\");\n         user.setPrimaryEmail(user.getUserName());\n \n+        Map<String,String> codeData = getInvitationsCode(OriginKeys.UAA);\n+        String codeDataString = JsonUtils.writeValueAsString(codeData);\n+        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(new ExpiringCode(\"thecode\", new Timestamp(1), codeDataString, INVITATION.name()), null);\n+        when(expiringCodeStore.generateCode(eq(codeDataString),any(), eq(INVITATION.name()))).thenReturn(new ExpiringCode(\"thenewcode\", new Timestamp(1), codeDataString, INVITATION.name()));\n+\n         when(invitationsService.acceptInvitation(anyString(), eq(\"password\"))).thenReturn(new InvitationsService.AcceptedInvitation(\"/home\", user));\n \n         MockHttpServletRequestBuilder post = post(\"/invitations/accept.do\")\n@@ -528,6 +596,11 @@ public class InvitationsControllerTest {\n         UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(uaaPrincipal, null, UaaAuthority.USER_AUTHORITIES);\n         SecurityContextHolder.getContext().setAuthentication(token);\n \n+        Map<String,String> codeData = getInvitationsCode(OriginKeys.UAA);\n+        String codeDataString = JsonUtils.writeValueAsString(codeData);\n+        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(new ExpiringCode(\"thecode\", new Timestamp(1), codeDataString, INVITATION.name()), null);\n+        when(expiringCodeStore.generateCode(eq(codeDataString),any(), eq(INVITATION.name()))).thenReturn(new ExpiringCode(\"thenewcode\", new Timestamp(1), codeDataString, INVITATION.name()));\n+\n         doThrow(new HttpClientErrorException(BAD_REQUEST)).when(invitationsService).acceptInvitation(anyString(), anyString());\n \n         MockHttpServletRequestBuilder post = post(\"/invitations/accept.do\")\n@@ -545,19 +618,26 @@ public class InvitationsControllerTest {\n     public void testAcceptInviteWithoutMatchingPasswords() throws Exception {\n         MockHttpServletRequestBuilder post = startAcceptInviteFlow(\"a\",\"b\");\n \n-        Map<String,String> codeData = getInvitationsCode(\"test-oidc\");\n-        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(new ExpiringCode(\"thecode\", new Timestamp(1), \"{\\\"origin\\\":\\\"uaa\\\"}\", \"intent\"), null);\n+        Map<String,String> codeData = getInvitationsCode(OriginKeys.UAA);\n+        String codeDataString = JsonUtils.writeValueAsString(codeData);\n+        when(expiringCodeStore.retrieveCode(\"thecode\")).thenReturn(new ExpiringCode(\"thecode\", new Timestamp(1), codeDataString, INVITATION.name()), null);\n+        when(expiringCodeStore.retrieveCode(\"thenewcode\")).thenReturn(new ExpiringCode(\"thenewcode\", new Timestamp(1), codeDataString, INVITATION.name()), null);\n+        when(expiringCodeStore.generateCode(eq(codeDataString),any(), eq(INVITATION.name()))).thenReturn(\n+            new ExpiringCode(\"thenewcode\", new Timestamp(1), codeDataString, INVITATION.name()),\n+            new ExpiringCode(\"thenewcode2\", new Timestamp(1), codeDataString, INVITATION.name())\n+        );\n+\n+\n         IdentityProvider identityProvider = new IdentityProvider();\n         identityProvider.setType(OriginKeys.UAA);\n         when(providerProvisioning.retrieveByOrigin(\"uaa\", \"uaa\")).thenReturn(identityProvider);\n-        when(expiringCodeStore.generateCode(anyString(), anyObject(), anyString())).thenReturn(createCode(codeData));\n         mockMvc.perform(post)\n             .andExpect(status().isFound())\n             .andExpect(model().attribute(\"error_message_code\", \"form_error\"))\n-            .andExpect(model().attribute(\"code\", \"code\"))\n+            .andExpect(model().attribute(\"code\", \"thenewcode2\"))\n             .andExpect(view().name(\"redirect:accept\"));\n         verify(expiringCodeStore).retrieveCode(\"thecode\");\n-        verify(expiringCodeStore).generateCode(anyString(),anyObject(),anyString());\n+        verify(expiringCodeStore, times(2)).generateCode(anyString(),anyObject(),anyString());\n         verify(invitationsService, never()).acceptInvitation(anyString(), anyString());\n     }\n \n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/InvitationsIT.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/InvitationsIT.java\nindex 06ceb379e..0ed73dad6 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/InvitationsIT.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/InvitationsIT.java\n@@ -43,6 +43,7 @@ import org.springframework.security.oauth2.common.util.RandomValueStringGenerato\n import org.springframework.security.oauth2.provider.client.BaseClientDetails;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.web.client.DefaultResponseErrorHandler;\n import org.springframework.web.client.RestTemplate;\n \n import java.net.URL;\n@@ -117,6 +118,22 @@ public class InvitationsIT {\n         webDriver.manage().deleteAllCookies();\n     }\n \n+    @Test\n+    public void invite_fails() {\n+        RestTemplate uaaTemplate = new RestTemplate();\n+        uaaTemplate.setErrorHandler(new DefaultResponseErrorHandler() {\n+            @Override\n+            protected boolean hasError(HttpStatus statusCode) {\n+                return statusCode.is5xxServerError();\n+            }\n+        });\n+        HttpHeaders headers = new HttpHeaders();\n+        headers.setContentType(APPLICATION_JSON);\n+        HttpEntity<String> request = new HttpEntity<>(\"{\\\"emails\\\":[\\\"marissa@test.org\\\"]}\", headers);\n+        ResponseEntity<Void> response = uaaTemplate.exchange(uaaUrl + \"/invite_users/?client_id=admin&redirect_uri={uri}\", POST, request, Void.class, \"https://www.google.com\");\n+        assertThat(response.getStatusCode(), is(HttpStatus.UNAUTHORIZED));\n+    }\n+\n     @Test\n     public void testInviteUserWithClientRedirect() throws Exception {\n         String userEmail = \"user-\" + new RandomValueStringGenerator().generate() + \"@example.com\";\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/InvitationsServiceMockMvcTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/InvitationsServiceMockMvcTests.java\nindex 17dcb57ee..0af34c576 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/InvitationsServiceMockMvcTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/InvitationsServiceMockMvcTests.java\n@@ -53,15 +53,18 @@ import static org.hamcrest.Matchers.endsWith;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertThat;\n import static org.junit.Assert.assertTrue;\n import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrl;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrlPattern;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;\n \n public class InvitationsServiceMockMvcTests extends InjectedMockContextTest {\n \n@@ -226,6 +229,55 @@ public class InvitationsServiceMockMvcTests extends InjectedMockContextTest {\n             .andExpect(status().isUnprocessableEntity());\n     }\n \n+    @Test\n+    public void invalid_code() throws Exception {\n+        String email = new RandomValueStringGenerator().generate().toLowerCase()+\"@test.org\";\n+        String invalid = new RandomValueStringGenerator().generate().toLowerCase()+\"@test.org\";\n+        URL inviteLink = inviteUser(email, userInviteToken, null, clientId, OriginKeys.UAA);\n+        URL invalidLink = inviteUser(invalid, userInviteToken, null, clientId, OriginKeys.UAA);\n+\n+        assertFalse(\"User should not be verified\", queryUserForField(email, \"verified\", Boolean.class));\n+        assertEquals(OriginKeys.UAA, queryUserForField(email, OriginKeys.ORIGIN, String.class));\n+\n+        String code = extractInvitationCode(inviteLink.toString());\n+        String invalidCode = extractInvitationCode(invalidLink.toString());\n+\n+        MvcResult result = getMockMvc().perform(get(\"/invitations/accept\")\n+            .param(\"code\", code)\n+            .accept(MediaType.TEXT_HTML)\n+        )\n+            .andExpect(status().isOk())\n+            .andExpect(content().string(containsString(\"Email: \" + email)))\n+            .andReturn();\n+\n+        MockHttpSession session = (MockHttpSession) result.getRequest().getSession(false);\n+        result = getMockMvc().perform(\n+            post(\"/invitations/accept.do\")\n+                .session(session)\n+                .param(\"password\", \"s3cret\")\n+                .param(\"password_confirmation\", \"s3cret\")\n+                .param(\"code\",invalidCode)\n+                .with(csrf())\n+        )\n+            .andExpect(status().isUnprocessableEntity())\n+            .andExpect(model().attribute(\"error_message_code\", \"code_expired\"))\n+            .andExpect(view().name(\"invitations/accept_invite\"))\n+            .andReturn();\n+\n+        assertFalse(\"User should be not yet be verified\", queryUserForField(email, \"verified\", Boolean.class));\n+        assertNull(session.getAttribute(\"SPRING_SECURITY_CONTEXT\"));\n+\n+        session = (MockHttpSession) result.getRequest().getSession(false);\n+        //not logged in anymore\n+        getMockMvc().perform(\n+            get(\"/profile\")\n+                .session(session)\n+                .accept(MediaType.TEXT_HTML)\n+        )\n+            .andExpect(status().isFound())\n+            .andExpect(redirectedUrl(\"http://localhost/login\"));\n+    }\n+\n     @Test\n     public void accept_invitation_sets_your_password() throws Exception {\n         String email = new RandomValueStringGenerator().generate().toLowerCase()+\"@test.org\";\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/LoginMockMvcTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/LoginMockMvcTests.java\nindex 4b52b3cd4..96a3d2150 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/LoginMockMvcTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/LoginMockMvcTests.java\n@@ -1767,7 +1767,12 @@ public class LoginMockMvcTests extends InjectedMockContextTest {\n         inviteContext.setAuthentication(inviteToken);\n         inviteSession.setAttribute(\"SPRING_SECURITY_CONTEXT\", inviteContext);\n \n-        ExpiringCode code = getWebApplicationContext().getBean(ExpiringCodeStore.class).generateCode(\"{ \\\"origin\\\" : \\\"uaa\\\"}\", new Timestamp(System.currentTimeMillis() + 1000 * 60), null);\n+        Map<String, String> codeData = new HashMap();\n+        codeData.put(\"user_id\", ((UaaPrincipal)marissaContext.getAuthentication().getPrincipal()).getId());\n+        codeData.put(\"email\", ((UaaPrincipal)marissaContext.getAuthentication().getPrincipal()).getEmail());\n+        codeData.put(\"origin\", OriginKeys.UAA);\n+\n+        ExpiringCode code = getWebApplicationContext().getBean(ExpiringCodeStore.class).generateCode(JsonUtils.writeValueAsString(codeData), new Timestamp(System.currentTimeMillis() + 1000 * 60), null);\n \n         //logged in with valid CSRF\n         MockHttpServletRequestBuilder post = post(\"/invitations/accept.do\")\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "logical and structural changes", "source_commit": "4f942064d85454a4bcc4da04cd482d114816c14a", "source_date": "Wed May 17 13:52:05 2017 -0700", "source_tag": "4.2.0", "target_commit": "3ce42a4c75828cb58287c3c7495dde3f5261f12c", "target_date": "Wed May 17 15:50:42 2017 -0700", "target_tag": "3.6.11", "FAIL TO PASS": ["org.cloudfoundry.identity.uaa.invitations.InvitationsControllerTest > testAcceptInviteWithContraveningPassword", "org.cloudfoundry.identity.uaa.invitations.InvitationsControllerTest > invalid_principal_id", "org.cloudfoundry.identity.uaa.invitations.InvitationsControllerTest > missing_code", "org.cloudfoundry.identity.uaa.invitations.InvitationsControllerTest > testAcceptInviteWithoutMatchingPasswords", "org.cloudfoundry.identity.uaa.mock.DefaultConfigurationTestSuite > org.cloudfoundry.identity.uaa.login.InvitationsServiceMockMvcTests.invalid_code"], "PASS TO PASS": ["org.cloudfoundry.identity.uaa.util.UaaHttpRequestUtilsTest", "org.cloudfoundry.identity.uaa.mock.clients.ClientAdminEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.oauth.token.TokenKeyEndpointTests", "org.cloudfoundry.identity.uaa.user.UaaAuthorityTests", "org.cloudfoundry.identity.uaa.audit.event.EntityDeletedEventTest", "org.cloudfoundry.identity.uaa.mock.clients.ClientAdminEndpointsDocs", "org.cloudfoundry.identity.uaa.authentication.manager.DynamicLdapAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.login.UsernamePasswordExtractingAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.client.ClientMetadataAdminEndpointsDocs", "org.cloudfoundry.identity.uaa.provider.saml.idp.JdbcSamlServiceProviderProvisioningTest", "org.cloudfoundry.identity.uaa.zone.IdentityZoneSwitchingFilterTests", ":cloudfoundry-identity-uaa:compileJava", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneSwitchingFilterMockMvcTest", "org.cloudfoundry.identity.uaa.oauth.UaaOauth2ErrorHandlerTests", ":cloudfoundry-identity-server:jar", "org.cloudfoundry.identity.uaa.zone.JdbcIdentityZoneProvisioningTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserEndpointsTests", "org.cloudfoundry.identity.uaa.mock.oauth.CheckDefaultAuthoritiesMvcMockTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserLookupMockMvcTests", "org.cloudfoundry.identity.uaa.config.IdentityProviderBootstrapTest", "org.cloudfoundry.identity.uaa.mock.zones.DisableUserManagementSecurityFilterMockMvcTest", "org.cloudfoundry.identity.uaa.authentication.ClientParametersAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.security.CsrfAwareEntryPointAndDeniedHandlerTest", "org.cloudfoundry.identity.uaa.mock.DefaultDocsTestSuite", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneEndpointDocs", "org.cloudfoundry.identity.uaa.test.CreateDB", "org.cloudfoundry.identity.uaa.login.HomeControllerViewTests", "/uaa/uaa/src/test/java/org/springframework/security/ldap/server/ApacheDsSSLContainer.java", "org.cloudfoundry.identity.uaa.authentication.manager.ExternalLoginAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.login.AccountsControllerMockMvcTests", "org.cloudfoundry.identity.uaa.web.CookieBasedCsrfTokenRepositoryTests", "org.cloudfoundry.identity.uaa.account.event.PasswordChangeEventPublisherTests", "org.cloudfoundry.identity.uaa.config.IdentityZoneConfigurationTests", ":cloudfoundry-identity-model:buildInfo", "org.cloudfoundry.identity.uaa.login.EmailServiceTests", "org.cloudfoundry.identity.uaa.provider.saml.LoginSamlAuthenticationProviderTests", "org.cloudfoundry.identity.uaa.util.TokenValidationTest", "org.cloudfoundry.identity.uaa.scim.jdbc.ScimSearchQueryConverterTests", "org.cloudfoundry.identity.uaa.client.ClientAdminEndpointsTests", "org.cloudfoundry.identity.uaa.user.BCryptPasswordEncoderTest", "org.cloudfoundry.identity.uaa.util.CachingPasswordEncoderTest", ":cloudfoundry-identity-model:jar", "org.cloudfoundry.identity.uaa.mock.token.CheckTokenEndpointDocs", "org.cloudfoundry.identity.uaa.account.PasswordCheckEndpointTests", "org.cloudfoundry.identity.uaa.user.InMemoryUaaUserDatabaseTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsTests", "org.cloudfoundry.identity.uaa.config.EnvironmentMapFactoryBeanTests", "org.cloudfoundry.identity.uaa.audit.AuditEventTypeTests", "org.cloudfoundry.identity.uaa.db.TestZonifyGroupSchema_V2_4_1", "org.cloudfoundry.identity.uaa.oauth.token.KeyInfoTests", "org.cloudfoundry.identity.uaa.login.LoginMockMvcTests", "org.cloudfoundry.identity.uaa.config.YamlPropertiesFactoryBeanTests", "org.cloudfoundry.identity.uaa.mock.providers.IdentityProviderEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.login.ProfileControllerTests", "org.cloudfoundry.identity.uaa.login.LoginInfoEndpointTests", "org.cloudfoundry.identity.uaa.oauth.AccessControllerTests", "org.cloudfoundry.identity.uaa.error.UaaExceptionTests", "org.cloudfoundry.identity.uaa.util.DomainFilterTest", ":cloudfoundry-identity-model:gitInfo", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.client.ClientAdminBootstrapTests", "org.cloudfoundry.identity.uaa.provider.ldap.LdapIdentityProviderDefinitionTest", "org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationRequestManagerTests", "org.cloudfoundry.identity.uaa.oauth.approval.ApprovalTests", "org.cloudfoundry.identity.uaa.oauth.RemoteTokenServicesTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlIdentityProviderDefinitionTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.ZoneAwareIdpMetadataManagerTest", "org.cloudfoundry.identity.uaa.web.UaaSessionCookieConfigTest", "org.cloudfoundry.identity.uaa.mock.authentication.AuthzAuthenticationManagerConfigurationTests", "org.cloudfoundry.identity.uaa.zone.event.IdentityZoneModifiedEventTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpSamlAuthenticationSuccessHandlerTest", "org.cloudfoundry.identity.uaa.oauth.event.ClientAdminEventPublisherTests", "org.cloudfoundry.identity.uaa.provider.ldap.ExtendedLdapUserMapperTest", "org.cloudfoundry.identity.uaa.web.HealthzEndpointTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpWebSsoProfileImplTest", "org.cloudfoundry.identity.uaa.config.YamlMapFactoryBeanTests", "org.cloudfoundry.identity.uaa.mock.DefaultConfigurationTestSuite", "org.cloudfoundry.identity.uaa.scim.validate.UaaPasswordPolicyValidatorTests", "org.cloudfoundry.identity.uaa.login.XFrameOptionsTheories", "org.cloudfoundry.identity.uaa.provider.saml.SamlIDPRefreshMockMvcTests", "org.cloudfoundry.identity.uaa.user.UaaUserEditorTests", "org.cloudfoundry.identity.uaa.login.util.LocalUaaRestTemplateMockMvcTests", "org.cloudfoundry.identity.uaa.oauth.approval.JdbcApprovalStoreTests", "org.cloudfoundry.identity.uaa.scim.remote.RemoteScimUserProvisioningTests", "org.cloudfoundry.identity.uaa.oauth.CheckTokenEndpointTests", "org.cloudfoundry.identity.uaa.zone.IdentityZoneResolvingFilterTests", "org.cloudfoundry.identity.uaa.zone.event.IdentityProviderModifiedEventTest", "org.cloudfoundry.identity.uaa.provider.LockoutPolicyTests", "org.cloudfoundry.identity.uaa.authentication.manager.DynamicZoneAwareAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.audit.JdbcAuditServiceTests", "org.cloudfoundry.identity.uaa.mock.codestore.ExpiringCodeStoreMockMvcTests", "org.cloudfoundry.identity.uaa.util.LinkedMaskingMultiValueMapTests", "org.cloudfoundry.identity.uaa.client.JdbcClientMetadataProvisioningTest", "org.cloudfoundry.identity.uaa.client.ClientAdminEndpointsValidatorTests", "org.cloudfoundry.identity.uaa.client.OAuthClientAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.scim.endpoints.UserIdConversionEndpointsTests", ":cloudfoundry-identity-model:classes", "org.cloudfoundry.identity.uaa.invitations.InvitationsEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.scim.ScimUserTests", "org.cloudfoundry.identity.uaa.oauth.AntPathRedirectResolverTests", "org.cloudfoundry.identity.uaa.util.KeyWithCertTest", "org.cloudfoundry.identity.uaa.scim.exception.InvalidPasswordExceptionTest", "org.cloudfoundry.identity.uaa.config.YamlBindingTests", "org.cloudfoundry.identity.uaa.zone.JdbcIdentityProviderProvisioningTests", "org.cloudfoundry.identity.uaa.authentication.WhitelistLogoutHandlerTest", "org.cloudfoundry.identity.uaa.authentication.manager.AuthzAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeStoreTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsDocs", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupProvisioningTests", "org.cloudfoundry.identity.uaa.login.EmailChangeEmailServiceTest", "org.cloudfoundry.identity.uaa.oauth.UaaTokenServicesTests", "org.cloudfoundry.identity.uaa.provider.ldap.DynamicPasswordComparatorTests", "org.cloudfoundry.identity.uaa.provider.ldap.ProcessLdapPropertiesTest", "org.cloudfoundry.identity.uaa.db.RevocableTokenTableTest", ":cloudfoundry-identity-model:compileJava", ":cloudfoundry-identity-server:processTestResources", "org.cloudfoundry.identity.uaa.oauth.expression.IsSelfCheckTest", "org.cloudfoundry.identity.uaa.oauth.UserManagedAuthzApprovalHandlerTests", "org.cloudfoundry.identity.uaa.client.ClientMetadataAdminEndpointsMockMvcTest", "org.cloudfoundry.identity.uaa.invitations.InvitationsEndpointDocs", "org.cloudfoundry.identity.uaa.authentication.AuthzAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.impl.config.ScimExternalGroupsTypeResolvingFactoryBeanTest", "org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationSerializationTests", "org.cloudfoundry.identity.uaa.db.TestThatClientIdIsVchar255", "org.cloudfoundry.identity.uaa.zone.MultitenantJdbcClientDetailsServiceTests", ":cloudfoundry-identity-server:compileTestJava", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimUserBootstrapTests", "org.cloudfoundry.identity.uaa.provider.uaa.UaaIdentityProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.scim.ScimGroupMemberTests", "org.cloudfoundry.identity.uaa.login.AutologinAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.authentication.listener.UserAuthenticationSuccessListenerTests", "org.cloudfoundry.identity.uaa.error.ConvertingExceptionViewTests", "org.cloudfoundry.identity.uaa.authentication.manager.LdapLoginAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.login.ChangeEmailControllerTest", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimExternalGroupMappingsEndpointsDocs", "org.cloudfoundry.identity.uaa.mock.ldap.LdapMockMvcTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserEndpointDocs", "org.cloudfoundry.identity.uaa.login.UaaResetPasswordServiceTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.SamlServiceProviderDefinitionTest", "org.cloudfoundry.identity.uaa.provider.saml.LoginSAMLAuthenticationFailureHandlerTest", "org.cloudfoundry.identity.uaa.authentication.manager.LoginAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.util.EnsureOldLibrariesAreRemoved", ":cloudfoundry-identity-uaa:processResources", "org.cloudfoundry.identity.uaa.client.OAuth2ClientAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.mock.audit.AuditCheckMockMvcTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.config.YamlConfigurationValidatorTests", "org.cloudfoundry.identity.uaa.util.UaaTokenUtilsTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.ZoneAwareIdpMetadataGeneratorTest", "org.cloudfoundry.identity.uaa.mock.zones.DisableInternalUserManagementFilterMockMvcTests", ":cloudfoundry-identity-server:classes", "org.cloudfoundry.identity.uaa.openid.UserInfoEndpointTests", "org.cloudfoundry.identity.uaa.audit.event.ApprovalModifiedEventTest", "org.cloudfoundry.identity.uaa.db.TableAndColumnNormalizationTest", "org.cloudfoundry.identity.uaa.invitations.InvitationsAuthenticationTrustResolverTest", "org.cloudfoundry.identity.uaa.util.NullifyFieldsTest", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimUserProvisioningTests", "org.cloudfoundry.identity.uaa.audit.event.AuditListenerTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.security.X509ExpiryCheckingTrustManagerTest", ":cloudfoundry-identity-uaa:processTestResources", "org.cloudfoundry.identity.uaa.web.ExceptionReportHttpMessageConverterTest", ":cloudfoundry-identity-uaa:classes", "org.cloudfoundry.identity.uaa.provider.saml.BootstrapSamlIdentityProviderConfiguratorTests", ":cloudfoundry-identity-server:compileJava", "org.cloudfoundry.identity.uaa.authentication.ZoneAwareWhitelistLogoutHandlerTests", "org.cloudfoundry.identity.uaa.oauth.client.ClientDetailsModificationTests", "org.cloudfoundry.identity.uaa.oauth.jwt.JwtHelperTest", "org.cloudfoundry.identity.uaa.scim.ScimCoreTests", "org.cloudfoundry.identity.uaa.oauth.approval.ApprovalsAdminEndpointsTests", ":cloudfoundry-identity-server:testClasses", "org.cloudfoundry.identity.uaa.resources.jdbc.SimpleSearchQueryConverterTests", "org.cloudfoundry.identity.uaa.config.NestedMapPropertySourceTests", "org.cloudfoundry.identity.uaa.db.TestSchemaValidation", "org.cloudfoundry.identity.uaa.login.SamlLoginServerKeyManagerTests", "org.cloudfoundry.identity.uaa.security.DefaultSecurityContextAccessorTests", "org.cloudfoundry.identity.uaa.oauth.ClientInfoEndpointTests", "org.cloudfoundry.identity.uaa.login.ResetPasswordControllerTest", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupExternalMembershipManagerTests", "org.cloudfoundry.identity.uaa.web.ForwardAwareInternalResourceViewResolverTests", "org.cloudfoundry.identity.uaa.codestore.CodeStoreEndpointsTests", "org.cloudfoundry.identity.uaa.login.LoginInfoEndpointDocs", ":cloudfoundry-identity-uaa:compileTestJava", "org.cloudfoundry.identity.uaa.mock.config.HealthzShouldNotBeProtectedMockMvcTests", "org.cloudfoundry.identity.uaa.resources.jdbc.JdbcPagingListTests", "org.cloudfoundry.identity.uaa.mock.token.TokenKeyEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.user.JdbcUaaUserDatabaseTests", "org.cloudfoundry.identity.uaa.audit.JdbcFailedLoginCountingAuditServiceTests", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.oauth.ZoneEndpointsClientDetailsValidatorTests", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimGroupBootstrapTests", "org.cloudfoundry.identity.uaa.config.YamlServletProfileInitializerTests", "org.cloudfoundry.identity.uaa.login.BootstrapTests", "org.cloudfoundry.identity.uaa.resources.MessageTests", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneResolvingMockMvcTest", "org.cloudfoundry.identity.uaa.provider.saml.SamlMockMvcTests", "org.cloudfoundry.identity.uaa.mock.token.TokenMvcMockTests", "org.cloudfoundry.identity.uaa.config.EnvironmentPropertiesFactoryBeanTests", "org.cloudfoundry.identity.uaa.provider.saml.ZoneAwareMetadataGeneratorTests", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeTests", ":cloudfoundry-identity-uaa:compileTestJava/uaa/uaa/src/test/java/org/springframework/security/ldap/server/ApacheDsSSLContainer.java", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimExternalGroupBootstrapTests", "org.cloudfoundry.identity.uaa.authorization.external.LdapGroupMappingAuthorizationManagerTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlIdentityProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.login.InvitationsServiceMockMvcTests", "org.cloudfoundry.identity.uaa.BootstrapTests", "org.cloudfoundry.identity.uaa.client.SocialClientUserDetailsSourceTests", "org.cloudfoundry.identity.uaa.client.SourceTests", "org.cloudfoundry.identity.uaa.oauth.JdbcQueryableClientDetailsServiceTests", "org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcherTests", "org.cloudfoundry.identity.uaa.oauth.DisableIdTokenResponseTypeFilterTest", ":cloudfoundry-identity-model:mainOutputResourcesDir", "org.cloudfoundry.identity.uaa.authentication.SessionResetFilterTests", "org.cloudfoundry.identity.uaa.login.util.FakeJavaMailSenderTest", "org.cloudfoundry.identity.uaa.scim.endpoints.ChangeEmailEndpointsTest", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthIdentityProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.authentication.manager.ChainedAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.oauth.UaaUserApprovalHandlerTests", "org.cloudfoundry.identity.uaa.login.PasswordConfirmationValidationTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.SamlServiceProviderConfiguratorTest", "org.cloudfoundry.identity.uaa.util.UaaStringUtilsTest", "org.cloudfoundry.identity.uaa.security.web.CorsFilterTests", "org.cloudfoundry.identity.uaa.util.UaaUrlUtilsTest", "org.cloudfoundry.identity.uaa.UaaConfigurationTests", "org.cloudfoundry.identity.uaa.login.TokenEndpointDocs", "org.cloudfoundry.identity.uaa.scim.endpoints.UserInfoEndpointDocs", "org.cloudfoundry.identity.uaa.db.StoreSubDomainAsLowerCase_V2_7_3_Tests", ":cloudfoundry-identity-uaa:testClasses", "org.cloudfoundry.identity.uaa.provider.saml.SamlConfigurationBeanTest", "org.cloudfoundry.identity.uaa.oauth.RestrictUaaScopesClientValidatorTest", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupMembershipManagerTests", "org.cloudfoundry.identity.uaa.security.web.SecurityFilterChainPostProcessorTests", "org.cloudfoundry.identity.uaa.authentication.manager.ScopeAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.authentication.manager.PeriodLockoutPolicyTests", "org.cloudfoundry.identity.uaa.login.EmailAccountCreationServiceTests", "org.cloudfoundry.identity.uaa.zone.event.ServiceProviderModifiedEventTest", "org.cloudfoundry.identity.uaa.provider.saml.FixedHttpMetaDataProviderTest", "org.cloudfoundry.identity.uaa.performance.TestMySQLEmailSearch", "org.cloudfoundry.identity.uaa.scim.security.GroupRoleCheckTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlRedirectUtilsTest", "org.cloudfoundry.identity.uaa.authentication.login.RemoteAuthenticationEndpointTests", "org.cloudfoundry.identity.uaa.oauth.token.JdbcRevocableTokenProvisioningTest", ":cloudfoundry-identity-model:processResources", "org.cloudfoundry.identity.uaa.util.UaaPagingUtilsTests", "org.cloudfoundry.identity.uaa.mock.providers.IdentityProviderEndpointsDocs", "org.cloudfoundry.identity.uaa.config.IdentityZoneConfigurationBootstrapTests", "org.cloudfoundry.identity.uaa.login.NotificationsServiceTest", "org.cloudfoundry.identity.uaa.login.EmailInvitationsServiceTests", "org.cloudfoundry.identity.uaa.oauth.UaaScopesTests", "org.cloudfoundry.identity.uaa.oauth.UaaTokenStoreTests", "org.cloudfoundry.identity.uaa.authentication.manager.CheckIdpEnabledAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.login.ResetPasswordControllerMockMvcTests", "org.cloudfoundry.identity.uaa.util.UaaMapUtilsTest", "org.cloudfoundry.identity.uaa.login.ChangePasswordControllerTest", "org.cloudfoundry.identity.uaa.provider.saml.ConfigMetadataProviderTest", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.scim.endpoints.PasswordResetEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.login.AuthorizeEndpointDocs", "org.cloudfoundry.identity.uaa.scim.endpoints.UserInfoEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.mock.token.TokenKeyEndpointDocs", "org.cloudfoundry.identity.uaa.mock.approvals.ApprovalsMockMvcTests", ":cloudfoundry-identity-server:processResources", "org.cloudfoundry.identity.uaa.scim.endpoints.PasswordResetEndpointTest", "org.cloudfoundry.identity.uaa.test.UaaTestAccountsTest", "org.cloudfoundry.identity.uaa.authentication.manager.KeystoneAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.login.PasscodeMockMvcTests", "org.cloudfoundry.identity.uaa.account.PasswordChangeEndpointTests", "org.cloudfoundry.identity.uaa.mock.password.PasswordChangeEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.login.AccountsControllerTest", "org.cloudfoundry.identity.uaa.scim.endpoints.UserIdConversionEndpointDocs", "org.cloudfoundry.identity.uaa.login.UaaChangePasswordServiceTest", "org.cloudfoundry.identity.uaa.audit.LineAwareLayoutTest", "org.cloudfoundry.identity.uaa.config.PasswordPolicyTest"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_578", "original_commit_message": "[4.2.x] Fixed CVE-2023-46695 -- Fixed potential DoS in UsernameField on Windows.\nThanks MProgrammer (https://hackerone.com/mprogrammer) for the report.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex eaae0bf695..061dc81b42 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -71,7 +71,15 @@ class ReadOnlyPasswordHashField(forms.Field):\n \n class UsernameField(forms.CharField):\n     def to_python(self, value):\n-        return unicodedata.normalize(\"NFKC\", super().to_python(value))\n+        value = super().to_python(value)\n+        if self.max_length is not None and len(value) > self.max_length:\n+            # Normalization can increase the string length (e.g.\n+            # \"ﬀ\" -> \"ff\", \"½\" -> \"1⁄2\") but cannot reduce it, so there is no\n+            # point in normalizing invalid data. Moreover, Unicode\n+            # normalization is very slow on Windows and can be a DoS attack\n+            # vector.\n+            return value\n+        return unicodedata.normalize(\"NFKC\", value)\n \n     def widget_attrs(self, widget):\n         return {\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 7a80adbf31..81c56a428e 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -14,6 +14,7 @@ from django.contrib.auth.forms import (\n     SetPasswordForm,\n     UserChangeForm,\n     UserCreationForm,\n+    UsernameField,\n )\n from django.contrib.auth.models import User\n from django.contrib.auth.signals import user_login_failed\n@@ -154,6 +155,12 @@ class BaseUserCreationFormTest(TestDataMixin, TestCase):\n         self.assertNotEqual(user.username, ohm_username)\n         self.assertEqual(user.username, \"testΩ\")  # U+03A9 GREEK CAPITAL LETTER OMEGA\n \n+    def test_invalid_username_no_normalize(self):\n+        field = UsernameField(max_length=254)\n+        # Usernames are not normalized if they are too long.\n+        self.assertEqual(field.to_python(\"½\" * 255), \"½\" * 255)\n+        self.assertEqual(field.to_python(\"ﬀ\" * 254), \"ff\" * 254)\n+\n     def test_duplicate_normalized_unicode(self):\n         \"\"\"\n         To prevent almost identical usernames, visually identical but differing\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "048a9ebb6ea468426cb4e57c71572cbbd975517f", "source_date": "Wed Nov 1 06:19:20 2023 +0100", "source_tag": "4.2.7", "target_commit": "f9a7fb8466a7ba4857eaf930099b5258f3eafb2b", "target_date": "Wed Nov 1 06:30:59 2023 +0100", "target_tag": "3.2.23", "FAIL TO PASS": ["auth_tests.test_forms.UserCreationFormTest.test_invalid_username_no_normalize"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_582", "original_commit_message": "[4.1.x] Fixed CVE-2022-41323 -- Prevented locales being interpreted as regular expressions.\nThanks to Benjamin Balder Bach for the report.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9f42e2738c..9a22b0d87d 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -346,7 +346,7 @@ class LocalePrefixPattern:\n     @property\n     def regex(self):\n         # This is only used by reverse() and cached in _reverse_dict.\n-        return re.compile(self.language_prefix)\n+        return re.compile(re.escape(self.language_prefix))\n \n     @property\n     def language_prefix(self):\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex 43d95ff668..0b104ff548 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -215,6 +215,12 @@ class URLTranslationTests(URLTestCaseBase):\n                     expected_link,\n                 )\n \n+    def test_locale_not_interepreted_as_regex(self):\n+        with translation.override(\"e(\"):\n+            # Would previously error:\n+            # re.error: missing ), unterminated subpattern at position 1\n+            reverse(\"users\")\n+\n \n class URLNamespaceTests(URLTestCaseBase):\n     \"\"\"\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "9d656ea51d9ea7105c0c0785783ac29d426a7d25", "source_date": "Tue Oct 4 09:12:42 2022 +0200", "source_tag": "4.1.2", "target_commit": "5b6b257fa7ec37ff27965358800c67e2dd11c924", "target_date": "Tue Sep 27 10:17:34 2022 +0200", "target_tag": "3.2.16", "FAIL TO PASS": ["i18n.patterns.tests.URLTranslationTests.test_locale_not_interepreted_as_regex"], "PASS TO PASS": []}
{"ecosystem": "npm", "repo": "socket.io-parser", "instance_id": "socket.io-parser_71", "original_commit_message": "fix: check the format of the event name\nA packet like '2[{\"toString\":\"foo\"}]' was decoded as:\n{\ntype: EVENT,\ndata: [ { \"toString\": \"foo\" } ]\n}\nWhich would then throw an error when passed to the EventEmitter class:\n> TypeError: Cannot convert object to primitive value\n>    at Socket.emit (node:events:507:25)\n>    at .../node_modules/socket.io/lib/socket.js:531:14\nHistory of the isPayloadValid() method:\n- added in [78f9fc2](https://github.com/socketio/socket.io-parser/commit/78f9fc2999b15804b02f2c22a2b4007734a26af9) (v4.0.1, socket.io@3.0.0)\n- updated in [1c220dd](https://github.com/socketio/socket.io-parser/commit/1c220ddbf45ea4b44bc8dbf6f9ae245f672ba1b9) (v4.0.4, socket.io@3.1.0)", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/lib/index.ts b/lib/index.ts\nindex 6b77094..4319d2c 100644\n--- a/lib/index.ts\n+++ b/lib/index.ts\n@@ -275,7 +275,10 @@ export class Decoder extends Emitter<{}, {}, DecoderReservedEvents> {\n         return typeof payload === \"string\" || typeof payload === \"object\";\n       case PacketType.EVENT:\n       case PacketType.BINARY_EVENT:\n-        return Array.isArray(payload) && payload.length > 0;\n+        return (\n+          Array.isArray(payload) &&\n+          (typeof payload[0] === \"string\" || typeof payload[0] === \"number\")\n+        );\n       case PacketType.ACK:\n       case PacketType.BINARY_ACK:\n         return Array.isArray(payload);\n\n\n</patch>\n<test_patch>\ndiff --git a/test/parser.js b/test/parser.js\nindex 1b99166..c78e675 100644\n--- a/test/parser.js\n+++ b/test/parser.js\n@@ -118,6 +118,9 @@ describe(\"socket.io-parser\", () => {\n     isInvalidPayload(\"1/admin,{}\");\n     isInvalidPayload('2/admin,\"invalid');\n     isInvalidPayload(\"2/admin,{}\");\n+    isInvalidPayload('2[{\"toString\":\"foo\"}]');\n+    isInvalidPayload('2[true,\"foo\"]');\n+    isInvalidPayload('2[null,\"bar\"]');\n \n     expect(() => new Decoder().add(\"999\")).to.throwException(\n       /^unknown packet type 9$/\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "logical and structural changes", "source_commit": "3b78117bf6ba7e99d7a5cfc1ba54d0477554a7f3", "source_date": "Mon May 22 08:25:33 2023 +0200", "source_tag": "4.2.3", "target_commit": "2dc3c92622dad113b8676be06f23b1ed46b02ced", "target_date": "Mon May 22 09:56:28 2023 +0200", "target_tag": "3.4.3", "FAIL TO PASS": ["returns an error packet on parsing error"], "PASS TO PASS": ["properly handles circular objects", "encodes ArrayBuffers deep in JSON", "encodes an error", "encodes deep binary JSON with null values", "encodes an event", "encodes an ack", "decodes a bad binary packet", "encodes disconnection", "encodes connection", "encodes an ArrayBuffer", "exposes types", "encodes a TypedArray", "cleans itself up on close"]}
{"ecosystem": "npm", "repo": "socket.io-parser", "instance_id": "socket.io-parser_72", "original_commit_message": "fix: check the format of the event name\nA packet like '2[{\"toString\":\"foo\"}]' was decoded as:\n{\ntype: EVENT,\ndata: [ { \"toString\": \"foo\" } ]\n}\nWhich would then throw an error when passed to the EventEmitter class:\n> TypeError: Cannot convert object to primitive value\n>    at Socket.emit (node:events:507:25)\n>    at .../node_modules/socket.io/lib/socket.js:531:14\nHistory of the isPayloadValid() method:\n- added in [78f9fc2](https://github.com/socketio/socket.io-parser/commit/78f9fc2999b15804b02f2c22a2b4007734a26af9) (v4.0.1, socket.io@3.0.0)\n- updated in [1c220dd](https://github.com/socketio/socket.io-parser/commit/1c220ddbf45ea4b44bc8dbf6f9ae245f672ba1b9) (v4.0.4, socket.io@3.1.0)", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/lib/index.ts b/lib/index.ts\nindex 6b77094..4319d2c 100644\n--- a/lib/index.ts\n+++ b/lib/index.ts\n@@ -275,7 +275,10 @@ export class Decoder extends Emitter<{}, {}, DecoderReservedEvents> {\n         return typeof payload === \"string\" || typeof payload === \"object\";\n       case PacketType.EVENT:\n       case PacketType.BINARY_EVENT:\n-        return Array.isArray(payload) && payload.length > 0;\n+        return (\n+          Array.isArray(payload) &&\n+          (typeof payload[0] === \"string\" || typeof payload[0] === \"number\")\n+        );\n       case PacketType.ACK:\n       case PacketType.BINARY_ACK:\n         return Array.isArray(payload);\n\n\n</patch>\n<test_patch>\ndiff --git a/test/parser.js b/test/parser.js\nindex 1b99166..c78e675 100644\n--- a/test/parser.js\n+++ b/test/parser.js\n@@ -118,6 +118,9 @@ describe(\"socket.io-parser\", () => {\n     isInvalidPayload(\"1/admin,{}\");\n     isInvalidPayload('2/admin,\"invalid');\n     isInvalidPayload(\"2/admin,{}\");\n+    isInvalidPayload('2[{\"toString\":\"foo\"}]');\n+    isInvalidPayload('2[true,\"foo\"]');\n+    isInvalidPayload('2[null,\"bar\"]');\n \n     expect(() => new Decoder().add(\"999\")).to.throwException(\n       /^unknown packet type 9$/\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "logical and structural changes", "source_commit": "3b78117bf6ba7e99d7a5cfc1ba54d0477554a7f3", "source_date": "Mon May 22 08:25:33 2023 +0200", "source_tag": "4.2.3", "target_commit": "ee006607495eca4ec7262ad080dd3a91439a5ba4", "target_date": "Mon Jul 22 11:05:42 2024 +0200", "target_tag": "3.3.4", "FAIL TO PASS": ["returns an error packet on parsing error"], "PASS TO PASS": ["properly handles circular objects", "encodes ArrayBuffers deep in JSON", "encodes an error", "encodes deep binary JSON with null values", "encodes an event", "encodes an ack", "decodes a bad binary packet", "encodes disconnection", "encodes connection", "encodes an ArrayBuffer", "exposes types", "encodes a TypedArray", "cleans itself up on close"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_583", "original_commit_message": "[4.1.x] Fixed CVE-2022-41323 -- Prevented locales being interpreted as regular expressions.\nThanks to Benjamin Balder Bach for the report.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9f42e2738c..9a22b0d87d 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -346,7 +346,7 @@ class LocalePrefixPattern:\n     @property\n     def regex(self):\n         # This is only used by reverse() and cached in _reverse_dict.\n-        return re.compile(self.language_prefix)\n+        return re.compile(re.escape(self.language_prefix))\n \n     @property\n     def language_prefix(self):\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex 43d95ff668..0b104ff548 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -215,6 +215,12 @@ class URLTranslationTests(URLTestCaseBase):\n                     expected_link,\n                 )\n \n+    def test_locale_not_interepreted_as_regex(self):\n+        with translation.override(\"e(\"):\n+            # Would previously error:\n+            # re.error: missing ), unterminated subpattern at position 1\n+            reverse(\"users\")\n+\n \n class URLNamespaceTests(URLTestCaseBase):\n     \"\"\"\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "9d656ea51d9ea7105c0c0785783ac29d426a7d25", "source_date": "Tue Oct 4 09:12:42 2022 +0200", "source_tag": "4.1.2", "target_commit": "23f0093125ac2e553da6c1b2f9988eb6a3dd2ea1", "target_date": "Tue Sep 27 10:26:46 2022 +0200", "target_tag": "4.0.8", "FAIL TO PASS": ["i18n.patterns.tests.URLTranslationTests.test_locale_not_interepreted_as_regex"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_590", "original_commit_message": "[4.2.x] Fixed CVE-2023-31047, Fixed #31710 -- Prevented potential bypass of validation when uploading multiple files using one form field.\nThanks Moataz Al-Sharida and nawaik for reports.\nCo-authored-by: Shai Berger <shai@platonix.com>\nCo-authored-by: nessita <124304+nessita@users.noreply.github.com>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 9dd30095aa..3cc6fcb00c 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -413,17 +413,41 @@ class MultipleHiddenInput(HiddenInput):\n \n \n class FileInput(Input):\n+    allow_multiple_selected = False\n     input_type = \"file\"\n     needs_multipart_form = True\n     template_name = \"django/forms/widgets/file.html\"\n \n+    def __init__(self, attrs=None):\n+        if (\n+            attrs is not None\n+            and not self.allow_multiple_selected\n+            and attrs.get(\"multiple\", False)\n+        ):\n+            raise ValueError(\n+                \"%s doesn't support uploading multiple files.\"\n+                % self.__class__.__qualname__\n+            )\n+        if self.allow_multiple_selected:\n+            if attrs is None:\n+                attrs = {\"multiple\": True}\n+            else:\n+                attrs.setdefault(\"multiple\", True)\n+        super().__init__(attrs)\n+\n     def format_value(self, value):\n         \"\"\"File input never renders a value.\"\"\"\n         return\n \n     def value_from_datadict(self, data, files, name):\n         \"File widgets take data from FILES, not POST\"\n-        return files.get(name)\n+        getter = files.get\n+        if self.allow_multiple_selected:\n+            try:\n+                getter = files.getlist\n+            except AttributeError:\n+                pass\n+        return getter(name)\n \n     def value_omitted_from_data(self, data, files, name):\n         return name not in files\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/forms_tests/field_tests/test_filefield.py b/tests/forms_tests/field_tests/test_filefield.py\nindex 56aaa311e0..00c74a7c1a 100644\n--- a/tests/forms_tests/field_tests/test_filefield.py\n+++ b/tests/forms_tests/field_tests/test_filefield.py\n@@ -2,7 +2,8 @@ import pickle\n \n from django.core.exceptions import ValidationError\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.forms import FileField\n+from django.core.validators import validate_image_file_extension\n+from django.forms import FileField, FileInput\n from django.test import SimpleTestCase\n \n \n@@ -109,3 +110,68 @@ class FileFieldTest(SimpleTestCase):\n \n     def test_file_picklable(self):\n         self.assertIsInstance(pickle.loads(pickle.dumps(FileField())), FileField)\n+\n+\n+class MultipleFileInput(FileInput):\n+    allow_multiple_selected = True\n+\n+\n+class MultipleFileField(FileField):\n+    def __init__(self, *args, **kwargs):\n+        kwargs.setdefault(\"widget\", MultipleFileInput())\n+        super().__init__(*args, **kwargs)\n+\n+    def clean(self, data, initial=None):\n+        single_file_clean = super().clean\n+        if isinstance(data, (list, tuple)):\n+            result = [single_file_clean(d, initial) for d in data]\n+        else:\n+            result = single_file_clean(data, initial)\n+        return result\n+\n+\n+class MultipleFileFieldTest(SimpleTestCase):\n+    def test_file_multiple(self):\n+        f = MultipleFileField()\n+        files = [\n+            SimpleUploadedFile(\"name1\", b\"Content 1\"),\n+            SimpleUploadedFile(\"name2\", b\"Content 2\"),\n+        ]\n+        self.assertEqual(f.clean(files), files)\n+\n+    def test_file_multiple_empty(self):\n+        f = MultipleFileField()\n+        files = [\n+            SimpleUploadedFile(\"empty\", b\"\"),\n+            SimpleUploadedFile(\"nonempty\", b\"Some Content\"),\n+        ]\n+        msg = \"'The submitted file is empty.'\"\n+        with self.assertRaisesMessage(ValidationError, msg):\n+            f.clean(files)\n+        with self.assertRaisesMessage(ValidationError, msg):\n+            f.clean(files[::-1])\n+\n+    def test_file_multiple_validation(self):\n+        f = MultipleFileField(validators=[validate_image_file_extension])\n+\n+        good_files = [\n+            SimpleUploadedFile(\"image1.jpg\", b\"fake JPEG\"),\n+            SimpleUploadedFile(\"image2.png\", b\"faux image\"),\n+            SimpleUploadedFile(\"image3.bmp\", b\"fraudulent bitmap\"),\n+        ]\n+        self.assertEqual(f.clean(good_files), good_files)\n+\n+        evil_files = [\n+            SimpleUploadedFile(\"image1.sh\", b\"#!/bin/bash -c 'echo pwned!'\\n\"),\n+            SimpleUploadedFile(\"image2.png\", b\"faux image\"),\n+            SimpleUploadedFile(\"image3.jpg\", b\"fake JPEG\"),\n+        ]\n+\n+        evil_rotations = (\n+            evil_files[i:] + evil_files[:i]  # Rotate by i.\n+            for i in range(len(evil_files))\n+        )\n+        msg = \"File extension “sh” is not allowed. Allowed extensions are: \"\n+        for rotated_evil_files in evil_rotations:\n+            with self.assertRaisesMessage(ValidationError, msg):\n+                f.clean(rotated_evil_files)\n\ndiff --git a/tests/forms_tests/widget_tests/test_clearablefileinput.py b/tests/forms_tests/widget_tests/test_clearablefileinput.py\nindex 4fbaec0910..a9b0667ca9 100644\n--- a/tests/forms_tests/widget_tests/test_clearablefileinput.py\n+++ b/tests/forms_tests/widget_tests/test_clearablefileinput.py\n@@ -242,3 +242,8 @@ class ClearableFileInputTest(WidgetTest):\n             '<input type=\"file\" name=\"clearable_file\" id=\"id_clearable_file\"></div>',\n             form.render(),\n         )\n+\n+    def test_multiple_error(self):\n+        msg = \"ClearableFileInput doesn't support uploading multiple files.\"\n+        with self.assertRaisesMessage(ValueError, msg):\n+            ClearableFileInput(attrs={\"multiple\": True})\n\ndiff --git a/tests/forms_tests/widget_tests/test_fileinput.py b/tests/forms_tests/widget_tests/test_fileinput.py\nindex ea73e577ce..a49f481728 100644\n--- a/tests/forms_tests/widget_tests/test_fileinput.py\n+++ b/tests/forms_tests/widget_tests/test_fileinput.py\n@@ -1,4 +1,6 @@\n+from django.core.files.uploadedfile import SimpleUploadedFile\n from django.forms import FileField, FileInput, Form\n+from django.utils.datastructures import MultiValueDict\n \n from .base import WidgetTest\n \n@@ -48,3 +50,45 @@ class FileInputTest(WidgetTest):\n             'name=\"field\" required type=\"file\"></div>',\n             form.render(),\n         )\n+\n+    def test_multiple_error(self):\n+        msg = \"FileInput doesn't support uploading multiple files.\"\n+        with self.assertRaisesMessage(ValueError, msg):\n+            FileInput(attrs={\"multiple\": True})\n+\n+    def test_value_from_datadict_multiple(self):\n+        class MultipleFileInput(FileInput):\n+            allow_multiple_selected = True\n+\n+        file_1 = SimpleUploadedFile(\"something1.txt\", b\"content 1\")\n+        file_2 = SimpleUploadedFile(\"something2.txt\", b\"content 2\")\n+        # Uploading multiple files is allowed.\n+        widget = MultipleFileInput(attrs={\"multiple\": True})\n+        value = widget.value_from_datadict(\n+            data={\"name\": \"Test name\"},\n+            files=MultiValueDict({\"myfile\": [file_1, file_2]}),\n+            name=\"myfile\",\n+        )\n+        self.assertEqual(value, [file_1, file_2])\n+        # Uploading multiple files is not allowed.\n+        widget = FileInput()\n+        value = widget.value_from_datadict(\n+            data={\"name\": \"Test name\"},\n+            files=MultiValueDict({\"myfile\": [file_1, file_2]}),\n+            name=\"myfile\",\n+        )\n+        self.assertEqual(value, file_2)\n+\n+    def test_multiple_default(self):\n+        class MultipleFileInput(FileInput):\n+            allow_multiple_selected = True\n+\n+        tests = [\n+            (None, True),\n+            ({\"class\": \"myclass\"}, True),\n+            ({\"multiple\": False}, False),\n+        ]\n+        for attrs, expected in tests:\n+            with self.subTest(attrs=attrs):\n+                widget = MultipleFileInput(attrs=attrs)\n+                self.assertIs(widget.attrs[\"multiple\"], expected)\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "21b1b1fc03e5f9e9f8c977ee6e35618dd3b353dd", "source_date": "Wed May 3 13:43:16 2023 +0200", "source_tag": "4.2.1", "target_commit": "eed53d0011622e70b936e203005f0e6f4ac48965", "target_date": "Wed May 3 13:58:52 2023 +0200", "target_tag": "3.2.19", "FAIL TO PASS": ["forms_tests.widget_tests.test_fileinput.FileInputTest.test_value_from_datadict_multiple", "forms_tests.widget_tests.test_fileinput.FileInputTest.test_multiple_default", "forms_tests.widget_tests.test_fileinput.FileInputTest.test_multiple_error", "forms_tests.widget_tests.test_clearablefileinput.ClearableFileInputTest.test_multiple_error"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_592", "original_commit_message": "[4.2.x] Fixed CVE-2023-31047, Fixed #31710 -- Prevented potential bypass of validation when uploading multiple files using one form field.\nThanks Moataz Al-Sharida and nawaik for reports.\nCo-authored-by: Shai Berger <shai@platonix.com>\nCo-authored-by: nessita <124304+nessita@users.noreply.github.com>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 9dd30095aa..3cc6fcb00c 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -413,17 +413,41 @@ class MultipleHiddenInput(HiddenInput):\n \n \n class FileInput(Input):\n+    allow_multiple_selected = False\n     input_type = \"file\"\n     needs_multipart_form = True\n     template_name = \"django/forms/widgets/file.html\"\n \n+    def __init__(self, attrs=None):\n+        if (\n+            attrs is not None\n+            and not self.allow_multiple_selected\n+            and attrs.get(\"multiple\", False)\n+        ):\n+            raise ValueError(\n+                \"%s doesn't support uploading multiple files.\"\n+                % self.__class__.__qualname__\n+            )\n+        if self.allow_multiple_selected:\n+            if attrs is None:\n+                attrs = {\"multiple\": True}\n+            else:\n+                attrs.setdefault(\"multiple\", True)\n+        super().__init__(attrs)\n+\n     def format_value(self, value):\n         \"\"\"File input never renders a value.\"\"\"\n         return\n \n     def value_from_datadict(self, data, files, name):\n         \"File widgets take data from FILES, not POST\"\n-        return files.get(name)\n+        getter = files.get\n+        if self.allow_multiple_selected:\n+            try:\n+                getter = files.getlist\n+            except AttributeError:\n+                pass\n+        return getter(name)\n \n     def value_omitted_from_data(self, data, files, name):\n         return name not in files\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/forms_tests/field_tests/test_filefield.py b/tests/forms_tests/field_tests/test_filefield.py\nindex 56aaa311e0..00c74a7c1a 100644\n--- a/tests/forms_tests/field_tests/test_filefield.py\n+++ b/tests/forms_tests/field_tests/test_filefield.py\n@@ -2,7 +2,8 @@ import pickle\n \n from django.core.exceptions import ValidationError\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.forms import FileField\n+from django.core.validators import validate_image_file_extension\n+from django.forms import FileField, FileInput\n from django.test import SimpleTestCase\n \n \n@@ -109,3 +110,68 @@ class FileFieldTest(SimpleTestCase):\n \n     def test_file_picklable(self):\n         self.assertIsInstance(pickle.loads(pickle.dumps(FileField())), FileField)\n+\n+\n+class MultipleFileInput(FileInput):\n+    allow_multiple_selected = True\n+\n+\n+class MultipleFileField(FileField):\n+    def __init__(self, *args, **kwargs):\n+        kwargs.setdefault(\"widget\", MultipleFileInput())\n+        super().__init__(*args, **kwargs)\n+\n+    def clean(self, data, initial=None):\n+        single_file_clean = super().clean\n+        if isinstance(data, (list, tuple)):\n+            result = [single_file_clean(d, initial) for d in data]\n+        else:\n+            result = single_file_clean(data, initial)\n+        return result\n+\n+\n+class MultipleFileFieldTest(SimpleTestCase):\n+    def test_file_multiple(self):\n+        f = MultipleFileField()\n+        files = [\n+            SimpleUploadedFile(\"name1\", b\"Content 1\"),\n+            SimpleUploadedFile(\"name2\", b\"Content 2\"),\n+        ]\n+        self.assertEqual(f.clean(files), files)\n+\n+    def test_file_multiple_empty(self):\n+        f = MultipleFileField()\n+        files = [\n+            SimpleUploadedFile(\"empty\", b\"\"),\n+            SimpleUploadedFile(\"nonempty\", b\"Some Content\"),\n+        ]\n+        msg = \"'The submitted file is empty.'\"\n+        with self.assertRaisesMessage(ValidationError, msg):\n+            f.clean(files)\n+        with self.assertRaisesMessage(ValidationError, msg):\n+            f.clean(files[::-1])\n+\n+    def test_file_multiple_validation(self):\n+        f = MultipleFileField(validators=[validate_image_file_extension])\n+\n+        good_files = [\n+            SimpleUploadedFile(\"image1.jpg\", b\"fake JPEG\"),\n+            SimpleUploadedFile(\"image2.png\", b\"faux image\"),\n+            SimpleUploadedFile(\"image3.bmp\", b\"fraudulent bitmap\"),\n+        ]\n+        self.assertEqual(f.clean(good_files), good_files)\n+\n+        evil_files = [\n+            SimpleUploadedFile(\"image1.sh\", b\"#!/bin/bash -c 'echo pwned!'\\n\"),\n+            SimpleUploadedFile(\"image2.png\", b\"faux image\"),\n+            SimpleUploadedFile(\"image3.jpg\", b\"fake JPEG\"),\n+        ]\n+\n+        evil_rotations = (\n+            evil_files[i:] + evil_files[:i]  # Rotate by i.\n+            for i in range(len(evil_files))\n+        )\n+        msg = \"File extension “sh” is not allowed. Allowed extensions are: \"\n+        for rotated_evil_files in evil_rotations:\n+            with self.assertRaisesMessage(ValidationError, msg):\n+                f.clean(rotated_evil_files)\n\ndiff --git a/tests/forms_tests/widget_tests/test_clearablefileinput.py b/tests/forms_tests/widget_tests/test_clearablefileinput.py\nindex 4fbaec0910..a9b0667ca9 100644\n--- a/tests/forms_tests/widget_tests/test_clearablefileinput.py\n+++ b/tests/forms_tests/widget_tests/test_clearablefileinput.py\n@@ -242,3 +242,8 @@ class ClearableFileInputTest(WidgetTest):\n             '<input type=\"file\" name=\"clearable_file\" id=\"id_clearable_file\"></div>',\n             form.render(),\n         )\n+\n+    def test_multiple_error(self):\n+        msg = \"ClearableFileInput doesn't support uploading multiple files.\"\n+        with self.assertRaisesMessage(ValueError, msg):\n+            ClearableFileInput(attrs={\"multiple\": True})\n\ndiff --git a/tests/forms_tests/widget_tests/test_fileinput.py b/tests/forms_tests/widget_tests/test_fileinput.py\nindex ea73e577ce..a49f481728 100644\n--- a/tests/forms_tests/widget_tests/test_fileinput.py\n+++ b/tests/forms_tests/widget_tests/test_fileinput.py\n@@ -1,4 +1,6 @@\n+from django.core.files.uploadedfile import SimpleUploadedFile\n from django.forms import FileField, FileInput, Form\n+from django.utils.datastructures import MultiValueDict\n \n from .base import WidgetTest\n \n@@ -48,3 +50,45 @@ class FileInputTest(WidgetTest):\n             'name=\"field\" required type=\"file\"></div>',\n             form.render(),\n         )\n+\n+    def test_multiple_error(self):\n+        msg = \"FileInput doesn't support uploading multiple files.\"\n+        with self.assertRaisesMessage(ValueError, msg):\n+            FileInput(attrs={\"multiple\": True})\n+\n+    def test_value_from_datadict_multiple(self):\n+        class MultipleFileInput(FileInput):\n+            allow_multiple_selected = True\n+\n+        file_1 = SimpleUploadedFile(\"something1.txt\", b\"content 1\")\n+        file_2 = SimpleUploadedFile(\"something2.txt\", b\"content 2\")\n+        # Uploading multiple files is allowed.\n+        widget = MultipleFileInput(attrs={\"multiple\": True})\n+        value = widget.value_from_datadict(\n+            data={\"name\": \"Test name\"},\n+            files=MultiValueDict({\"myfile\": [file_1, file_2]}),\n+            name=\"myfile\",\n+        )\n+        self.assertEqual(value, [file_1, file_2])\n+        # Uploading multiple files is not allowed.\n+        widget = FileInput()\n+        value = widget.value_from_datadict(\n+            data={\"name\": \"Test name\"},\n+            files=MultiValueDict({\"myfile\": [file_1, file_2]}),\n+            name=\"myfile\",\n+        )\n+        self.assertEqual(value, file_2)\n+\n+    def test_multiple_default(self):\n+        class MultipleFileInput(FileInput):\n+            allow_multiple_selected = True\n+\n+        tests = [\n+            (None, True),\n+            ({\"class\": \"myclass\"}, True),\n+            ({\"multiple\": False}, False),\n+        ]\n+        for attrs, expected in tests:\n+            with self.subTest(attrs=attrs):\n+                widget = MultipleFileInput(attrs=attrs)\n+                self.assertIs(widget.attrs[\"multiple\"], expected)\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "21b1b1fc03e5f9e9f8c977ee6e35618dd3b353dd", "source_date": "Wed May 3 13:43:16 2023 +0200", "source_tag": "4.2.1", "target_commit": "e7c3a2ccc3a562328600be05068ed9149e12ce64", "target_date": "Wed May 3 13:54:21 2023 +0200", "target_tag": "4.1.9", "FAIL TO PASS": ["forms_tests.widget_tests.test_fileinput.FileInputTest.test_value_from_datadict_multiple", "forms_tests.widget_tests.test_fileinput.FileInputTest.test_multiple_error", "forms_tests.widget_tests.test_clearablefileinput.ClearableFileInputTest.test_multiple_error", "forms_tests.widget_tests.test_fileinput.FileInputTest.test_multiple_default"], "PASS TO PASS": []}
{"ecosystem": "npm", "repo": "qs", "instance_id": "qs_94", "original_commit_message": "[Fix] `parse`: ignore `__proto__` keys", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/lib/parse.js b/lib/parse.js\nindex c833315..a4ac4fa 100644\n--- a/lib/parse.js\n+++ b/lib/parse.js\n@@ -136,7 +136,7 @@ var parseObject = function (chain, val, options, valuesParsed) {\n             ) {\n                 obj = [];\n                 obj[index] = leaf;\n-            } else {\n+            } else if (cleanRoot !== '__proto__') {\n                 obj[cleanRoot] = leaf;\n             }\n         }\n\n\n</patch>\n<test_patch>\ndiff --git a/test/parse.js b/test/parse.js\nindex 7a3cfde..7d61023 100644\n--- a/test/parse.js\n+++ b/test/parse.js\n@@ -629,6 +629,66 @@ test('parse()', function (t) {\n         st.end();\n     });\n \n+    t.test('dunder proto is ignored', function (st) {\n+        var payload = 'categories[__proto__]=login&categories[__proto__]&categories[length]=42';\n+        var result = qs.parse(payload, { allowPrototypes: true });\n+\n+        st.deepEqual(\n+            result,\n+            {\n+                categories: {\n+                    length: '42'\n+                }\n+            },\n+            'silent [[Prototype]] payload'\n+        );\n+\n+        var plainResult = qs.parse(payload, { allowPrototypes: true, plainObjects: true });\n+\n+        st.deepEqual(\n+            plainResult,\n+            {\n+                __proto__: null,\n+                categories: {\n+                    __proto__: null,\n+                    length: '42'\n+                }\n+            },\n+            'silent [[Prototype]] payload: plain objects'\n+        );\n+\n+        var query = qs.parse('categories[__proto__]=cats&categories[__proto__]=dogs&categories[some][json]=toInject', { allowPrototypes: true });\n+\n+        st.notOk(Array.isArray(query.categories), 'is not an array');\n+        st.notOk(query.categories instanceof Array, 'is not instanceof an array');\n+        st.deepEqual(query.categories, { some: { json: 'toInject' } });\n+        st.equal(JSON.stringify(query.categories), '{\"some\":{\"json\":\"toInject\"}}', 'stringifies as a non-array');\n+\n+        st.deepEqual(\n+            qs.parse('foo[__proto__][hidden]=value&foo[bar]=stuffs', { allowPrototypes: true }),\n+            {\n+                foo: {\n+                    bar: 'stuffs'\n+                }\n+            },\n+            'hidden values'\n+        );\n+\n+        st.deepEqual(\n+            qs.parse('foo[__proto__][hidden]=value&foo[bar]=stuffs', { allowPrototypes: true, plainObjects: true }),\n+            {\n+                __proto__: null,\n+                foo: {\n+                    __proto__: null,\n+                    bar: 'stuffs'\n+                }\n+            },\n+            'hidden values: plain objects'\n+        );\n+\n+        st.end();\n+    });\n+\n     t.test('can return null objects', { skip: !Object.create }, function (st) {\n         var expected = Object.create(null);\n         expected.a = Object.create(null);\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "8b4cc14cda94a5c89341b77e5fe435ec6c41be2d", "source_date": "Mon Dec 27 19:15:57 2021 -0800", "source_tag": "6.10.3", "target_commit": "fc3682776670524a42e19709ec4a8138d0d7afda", "target_date": "Mon Dec 27 19:15:57 2021 -0800", "target_tag": "6.8.3", "FAIL TO PASS": ["194 is not instanceof an array", "198 hidden values: plain objects", "197 hidden values", "192 silent [[Prototype]] payload: plain objects", "195 should be deeply equivalent", "191 silent [[Prototype]] payload"], "PASS TO PASS": ["176 should be deeply equivalent", "181 should be deeply equivalent", "40 should be deeply equivalent", "184 should be deeply equivalent", "96 should be deeply equivalent", "151 should be deeply equivalent", "200 should be deeply equivalent", "5 supports keys that begin with a number", "62 should be deeply equivalent", "88 should be deeply equivalent", "117 should be deeply equivalent", "178 should be deeply equivalent", "13 should be deeply equivalent", "98 should be deeply equivalent", "93 should be deeply equivalent", "68 should be deeply equivalent", "118 should be deeply equivalent", "110 should be deeply equivalent", "41 should be deeply equivalent", "8 should be deeply equivalent", "209 should be deeply equivalent", "10 should be deeply equivalent", "148 should be deeply equivalent", "52 should be deeply equivalent", "175 should be deeply equivalent", "50 should be deeply equivalent", "9 should be deeply equivalent", "30 should be deeply equivalent", "83 should be deeply equivalent", "138 should be deeply equivalent", "205 should be deeply equivalent", "89 should be deeply equivalent", "123 should be deeply equivalent", "196 stringifies as a non-array", "172 should be deeply equivalent", "34 should be deeply equivalent", "20 should be deeply equivalent", "11 should be deeply equivalent", "127 should be deeply equivalent", "36 should be deeply equivalent", "109 array brackets: empty strings work", "21 should be deeply equivalent", "67 should be deeply equivalent", "186 should be deeply equivalent", "116 should be deeply equivalent", "141 should be deeply equivalent", "156 should be deeply equivalent", "157 should be deeply equivalent", "63 should be deeply equivalent", "37 should be deeply equivalent", "102 should be deeply equivalent", "210 should be deeply equivalent", "173 should be deeply equivalent", "32 should be deeply equivalent", "187 can add keys to objects", "76 should be deeply equivalent", "18 should be deeply equivalent", "72 should be deeply equivalent", "142 should be deeply equivalent", "57 should be deeply equivalent", "136 should be deeply equivalent", "51 should be deeply equivalent", "164 should be strictly equal", "26 should be deeply equivalent", "56 should be deeply equivalent", "155 should be deeply equivalent", "81 should be deeply equivalent", "190 can overwrite prototype with plainObjects true", "28 should be deeply equivalent", "111 should be deeply equivalent", "135 parseArrays:false, indices case is not an array", "150 should be deeply equivalent", "199 should be deeply equivalent", "84 should be deeply equivalent", "12 should be deeply equivalent", "38 should be deeply equivalent", "104 should be deeply equivalent", "99 should be deeply equivalent", "105 with arrayLimit 20 + array indices: null then empty string works", "112 should be deeply equivalent", "77 should be deeply equivalent", "206 should throw", "4 parses a simple array", "23 should be deeply equivalent", "212 should be deeply equivalent", "169 parsed is 5000 properties deep", "44 should be deeply equivalent", "7 should be deeply equivalent", "87 should be deeply equivalent", "103 should be deeply equivalent", "188 can not overwrite prototype", "59 should be deeply equivalent", "35 should be deeply equivalent", "134 should be deeply equivalent", "55 should be deeply equivalent", "95 should be deeply equivalent", "182 should be deeply equivalent", "165 should be strictly equal", "158 should be deeply equivalent", "78 should be deeply equivalent", "1 parses a single nested string", "33 should be deeply equivalent", "124 should not throw", "166 should be deeply equivalent", "54 should be deeply equivalent", "137 parseArrays:false, empty brackets case is not an array", "24 should be deeply equivalent", "58 should be deeply equivalent", "60 should be deeply equivalent", "86 should be deeply equivalent", "214 should be deeply equivalent", "22 should be deeply equivalent", "211 should be deeply equivalent", "160 should be deeply equivalent", "19 should be deeply equivalent", "45 should be deeply equivalent", "147 should be deeply equivalent", "74 should be deeply equivalent", "193 is not an array", "202 should be deeply equivalent", "140 should be deeply equivalent", "113 should be deeply equivalent", "16 should be deeply equivalent", "204 should throw", "43 should be deeply equivalent", "146 should be deeply equivalent", "149 should be deeply equivalent", "79 should be deeply equivalent", "80 should be deeply equivalent", "91 should be deeply equivalent", "143 should be deeply equivalent", "61 should be deeply equivalent", "126 should be deeply equivalent", "159 should be deeply equivalent", "163 should be strictly equal", "90 should be deeply equivalent", "174 should be deeply equivalent", "129 should be deeply equivalent", "71 should be deeply equivalent", "154 should be deeply equivalent", "107 with arrayLimit 20 + array indices: empty string then null works", "162 parsed has \"foo\" property", "170 should be deeply equivalent", "125 should be deeply equivalent", "14 should be deeply equivalent", "73 should be deeply equivalent", "218 should be deeply equivalent", "17 should be deeply equivalent", "49 should be deeply equivalent", "168 parsed has \"foo\" property", "122 should not throw", "121 should not throw", "203 should be strictly equal", "139 should be deeply equivalent", "179 should be deeply equivalent", "108 with arrayLimit 0 + array brackets: empty string then null works", "161 should not throw", "167 should not throw", "66 should be deeply equivalent", "92 should be deeply equivalent", "94 should be deeply equivalent", "131 should be deeply equivalent", "47 should be deeply equivalent", "65 should be deeply equivalent", "39 should be deeply equivalent", "213 should be deeply equivalent", "27 should be deeply equivalent", "171 result has \"a\" property", "100 should be deeply equivalent", "114 should be deeply equivalent", "215 should be deeply equivalent", "119 should be deeply equivalent", "15 should be deeply equivalent", "75 should be deeply equivalent", "152 should be deeply equivalent", "144 should be deeply equivalent", "145 should be deeply equivalent", "42 should be deeply equivalent", "97 should be deeply equivalent", "185 should be deeply equivalent", "207 should be deeply equivalent", "53 should be deeply equivalent", "3 defaults to a depth of 5", "101 should be strictly equal", "183 should be deeply equivalent", "70 should be deeply equivalent", "217 should be deeply equivalent", "115 should be deeply equivalent", "46 should be deeply equivalent", "31 should be deeply equivalent", "128 should be deeply equivalent", "130 should be deeply equivalent", "201 should be deeply equivalent", "216 should be deeply equivalent", "69 should be deeply equivalent", "64 should be deeply equivalent", "208 should be deeply equivalent", "82 should be deeply equivalent", "6 should be deeply equivalent", "48 should be deeply equivalent", "153 should be deeply equivalent", "29 should be deeply equivalent", "25 should be deeply equivalent", "120 should be deeply equivalent", "180 bare \"toString\" results in { toString: \"\" }", "2 parses a double nested string", "177 bare \"toString\" results in {}", "189 can overwrite prototype with allowPrototypes true", "132 should be deeply equivalent", "85 should be deeply equivalent", "133 should be deeply equivalent", "106 with arrayLimit 0 + array brackets: null then empty string works"]}
{"ecosystem": "npm", "repo": "qs", "instance_id": "qs_95", "original_commit_message": "[Fix] `parse`: ignore `__proto__` keys", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/lib/parse.js b/lib/parse.js\nindex c833315..a4ac4fa 100644\n--- a/lib/parse.js\n+++ b/lib/parse.js\n@@ -136,7 +136,7 @@ var parseObject = function (chain, val, options, valuesParsed) {\n             ) {\n                 obj = [];\n                 obj[index] = leaf;\n-            } else {\n+            } else if (cleanRoot !== '__proto__') {\n                 obj[cleanRoot] = leaf;\n             }\n         }\n\n\n</patch>\n<test_patch>\ndiff --git a/test/parse.js b/test/parse.js\nindex 7a3cfde..7d61023 100644\n--- a/test/parse.js\n+++ b/test/parse.js\n@@ -629,6 +629,66 @@ test('parse()', function (t) {\n         st.end();\n     });\n \n+    t.test('dunder proto is ignored', function (st) {\n+        var payload = 'categories[__proto__]=login&categories[__proto__]&categories[length]=42';\n+        var result = qs.parse(payload, { allowPrototypes: true });\n+\n+        st.deepEqual(\n+            result,\n+            {\n+                categories: {\n+                    length: '42'\n+                }\n+            },\n+            'silent [[Prototype]] payload'\n+        );\n+\n+        var plainResult = qs.parse(payload, { allowPrototypes: true, plainObjects: true });\n+\n+        st.deepEqual(\n+            plainResult,\n+            {\n+                __proto__: null,\n+                categories: {\n+                    __proto__: null,\n+                    length: '42'\n+                }\n+            },\n+            'silent [[Prototype]] payload: plain objects'\n+        );\n+\n+        var query = qs.parse('categories[__proto__]=cats&categories[__proto__]=dogs&categories[some][json]=toInject', { allowPrototypes: true });\n+\n+        st.notOk(Array.isArray(query.categories), 'is not an array');\n+        st.notOk(query.categories instanceof Array, 'is not instanceof an array');\n+        st.deepEqual(query.categories, { some: { json: 'toInject' } });\n+        st.equal(JSON.stringify(query.categories), '{\"some\":{\"json\":\"toInject\"}}', 'stringifies as a non-array');\n+\n+        st.deepEqual(\n+            qs.parse('foo[__proto__][hidden]=value&foo[bar]=stuffs', { allowPrototypes: true }),\n+            {\n+                foo: {\n+                    bar: 'stuffs'\n+                }\n+            },\n+            'hidden values'\n+        );\n+\n+        st.deepEqual(\n+            qs.parse('foo[__proto__][hidden]=value&foo[bar]=stuffs', { allowPrototypes: true, plainObjects: true }),\n+            {\n+                __proto__: null,\n+                foo: {\n+                    __proto__: null,\n+                    bar: 'stuffs'\n+                }\n+            },\n+            'hidden values: plain objects'\n+        );\n+\n+        st.end();\n+    });\n+\n     t.test('can return null objects', { skip: !Object.create }, function (st) {\n         var expected = Object.create(null);\n         expected.a = Object.create(null);\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "8b4cc14cda94a5c89341b77e5fe435ec6c41be2d", "source_date": "Mon Dec 27 19:15:57 2021 -0800", "source_tag": "6.10.3", "target_commit": "727ef5d34605108acb3513f72d5435972ed15b68", "target_date": "Mon Dec 27 19:15:57 2021 -0800", "target_tag": "6.4.1", "FAIL TO PASS": ["149 silent [[Prototype]] payload: plain objects", "151 is not instanceof an array", "155 hidden values: plain objects", "148 silent [[Prototype]] payload", "152 should be deeply equivalent", "154 hidden values"], "PASS TO PASS": ["87 with arrayLimit 20 + array indices: empty string then null works", "40 should be deeply equivalent", "135 should be deeply equivalent", "96 should be deeply equivalent", "5 supports keys that begin with a number", "62 should be deeply equivalent", "117 should be deeply equivalent", "13 should be deeply equivalent", "98 should be deeply equivalent", "93 should be deeply equivalent", "68 should be deeply equivalent", "118 should be deeply equivalent", "110 should be deeply equivalent", "41 should be deeply equivalent", "8 should be deeply equivalent", "10 should be deeply equivalent", "109 should be deeply equivalent", "89 array brackets: empty strings work", "52 should be deeply equivalent", "50 should be deeply equivalent", "9 should be deeply equivalent", "30 should be deeply equivalent", "83 should be deeply equivalent", "138 should be deeply equivalent", "34 should be deeply equivalent", "20 should be deeply equivalent", "11 should be deeply equivalent", "123 should be strictly equal", "145 can not overwrite prototype", "127 should be deeply equivalent", "36 should be deeply equivalent", "103 should not throw", "21 should be deeply equivalent", "67 should be deeply equivalent", "107 should be deeply equivalent", "86 with arrayLimit 0 + array brackets: null then empty string works", "141 should be deeply equivalent", "156 should be deeply equivalent", "157 should be deeply equivalent", "63 should be deeply equivalent", "37 should be deeply equivalent", "124 should be strictly equal", "102 should be deeply equivalent", "153 stringifies as a non-array", "32 should be deeply equivalent", "76 should be deeply equivalent", "18 should be deeply equivalent", "72 should be deeply equivalent", "142 should be deeply equivalent", "57 should be deeply equivalent", "136 should be deeply equivalent", "51 should be deeply equivalent", "26 should be deeply equivalent", "56 should be deeply equivalent", "28 should be deeply equivalent", "111 should be deeply equivalent", "84 should be deeply equivalent", "12 should be deeply equivalent", "38 should be deeply equivalent", "104 should be deeply equivalent", "99 should be deeply equivalent", "112 should be deeply equivalent", "106 should be deeply equivalent", "77 should be deeply equivalent", "81 should be strictly equal", "4 parses a simple array", "122 parsed has \"foo\" property", "23 should be deeply equivalent", "108 should be deeply equivalent", "105 should be deeply equivalent", "44 should be deeply equivalent", "7 should be deeply equivalent", "146 can overwrite prototype with allowPrototypes true", "144 can add keys to objects", "59 should be deeply equivalent", "35 should be deeply equivalent", "55 should be deeply equivalent", "95 should be deeply equivalent", "158 should be deeply equivalent", "78 should be deeply equivalent", "1 parses a single nested string", "33 should be deeply equivalent", "54 should be deeply equivalent", "85 with arrayLimit 20 + array indices: null then empty string works", "128 result has \"a\" property", "101 should not throw", "24 should be deeply equivalent", "58 should be deeply equivalent", "60 should be deeply equivalent", "22 should be deeply equivalent", "137 bare \"toString\" results in { toString: \"\" }", "19 should be deeply equivalent", "45 should be deeply equivalent", "74 should be deeply equivalent", "140 should be deeply equivalent", "113 should be deeply equivalent", "16 should be deeply equivalent", "43 should be deeply equivalent", "125 should be strictly equal", "79 should be deeply equivalent", "80 should be deeply equivalent", "91 should be deeply equivalent", "143 should be deeply equivalent", "61 should be deeply equivalent", "126 should be deeply equivalent", "159 should be deeply equivalent", "90 should be deeply equivalent", "160 should throw", "129 should be deeply equivalent", "71 should be deeply equivalent", "150 is not an array", "147 can overwrite prototype with plainObjects true", "14 should be deeply equivalent", "73 should be deeply equivalent", "17 should be deeply equivalent", "49 should be deeply equivalent", "116 parseArrays:false, empty brackets case is not an array", "134 bare \"toString\" results in {}", "121 should not throw", "139 should be deeply equivalent", "66 should be deeply equivalent", "92 should be deeply equivalent", "94 should be deeply equivalent", "100 should not throw", "131 should be deeply equivalent", "47 should be deeply equivalent", "65 should be deeply equivalent", "39 should be deeply equivalent", "27 should be deeply equivalent", "119 should be deeply equivalent", "15 should be deeply equivalent", "75 should be deeply equivalent", "42 should be deeply equivalent", "97 should be deeply equivalent", "53 should be deeply equivalent", "3 defaults to a depth of 5", "70 should be deeply equivalent", "115 should be deeply equivalent", "46 should be deeply equivalent", "31 should be deeply equivalent", "130 should be deeply equivalent", "69 should be deeply equivalent", "64 should be deeply equivalent", "82 should be deeply equivalent", "6 should be deeply equivalent", "48 should be deeply equivalent", "29 should be deeply equivalent", "88 with arrayLimit 0 + array brackets: empty string then null works", "25 should be deeply equivalent", "120 should be deeply equivalent", "2 parses a double nested string", "132 should be deeply equivalent", "114 parseArrays:false, indices case is not an array", "133 should be deeply equivalent"]}
{"ecosystem": "npm", "repo": "qs", "instance_id": "qs_96", "original_commit_message": "[Fix] `parse`: ignore `__proto__` keys", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/lib/parse.js b/lib/parse.js\nindex c833315..a4ac4fa 100644\n--- a/lib/parse.js\n+++ b/lib/parse.js\n@@ -136,7 +136,7 @@ var parseObject = function (chain, val, options, valuesParsed) {\n             ) {\n                 obj = [];\n                 obj[index] = leaf;\n-            } else {\n+            } else if (cleanRoot !== '__proto__') {\n                 obj[cleanRoot] = leaf;\n             }\n         }\n\n\n</patch>\n<test_patch>\ndiff --git a/test/parse.js b/test/parse.js\nindex 7a3cfde..7d61023 100644\n--- a/test/parse.js\n+++ b/test/parse.js\n@@ -629,6 +629,66 @@ test('parse()', function (t) {\n         st.end();\n     });\n \n+    t.test('dunder proto is ignored', function (st) {\n+        var payload = 'categories[__proto__]=login&categories[__proto__]&categories[length]=42';\n+        var result = qs.parse(payload, { allowPrototypes: true });\n+\n+        st.deepEqual(\n+            result,\n+            {\n+                categories: {\n+                    length: '42'\n+                }\n+            },\n+            'silent [[Prototype]] payload'\n+        );\n+\n+        var plainResult = qs.parse(payload, { allowPrototypes: true, plainObjects: true });\n+\n+        st.deepEqual(\n+            plainResult,\n+            {\n+                __proto__: null,\n+                categories: {\n+                    __proto__: null,\n+                    length: '42'\n+                }\n+            },\n+            'silent [[Prototype]] payload: plain objects'\n+        );\n+\n+        var query = qs.parse('categories[__proto__]=cats&categories[__proto__]=dogs&categories[some][json]=toInject', { allowPrototypes: true });\n+\n+        st.notOk(Array.isArray(query.categories), 'is not an array');\n+        st.notOk(query.categories instanceof Array, 'is not instanceof an array');\n+        st.deepEqual(query.categories, { some: { json: 'toInject' } });\n+        st.equal(JSON.stringify(query.categories), '{\"some\":{\"json\":\"toInject\"}}', 'stringifies as a non-array');\n+\n+        st.deepEqual(\n+            qs.parse('foo[__proto__][hidden]=value&foo[bar]=stuffs', { allowPrototypes: true }),\n+            {\n+                foo: {\n+                    bar: 'stuffs'\n+                }\n+            },\n+            'hidden values'\n+        );\n+\n+        st.deepEqual(\n+            qs.parse('foo[__proto__][hidden]=value&foo[bar]=stuffs', { allowPrototypes: true, plainObjects: true }),\n+            {\n+                __proto__: null,\n+                foo: {\n+                    __proto__: null,\n+                    bar: 'stuffs'\n+                }\n+            },\n+            'hidden values: plain objects'\n+        );\n+\n+        st.end();\n+    });\n+\n     t.test('can return null objects', { skip: !Object.create }, function (st) {\n         var expected = Object.create(null);\n         expected.a = Object.create(null);\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "8b4cc14cda94a5c89341b77e5fe435ec6c41be2d", "source_date": "Mon Dec 27 19:15:57 2021 -0800", "source_tag": "6.10.3", "target_commit": "ed0f5dcbef4b168a8ae299d78b1e4a2e9b1baf1f", "target_date": "Mon Dec 27 19:15:57 2021 -0800", "target_tag": "6.5.3", "FAIL TO PASS": ["156 silent [[Prototype]] payload: plain objects", "159 should be deeply equivalent", "158 is not instanceof an array", "161 hidden values", "155 silent [[Prototype]] payload", "162 hidden values: plain objects"], "PASS TO PASS": ["87 with arrayLimit 20 + array indices: empty string then null works", "40 should be deeply equivalent", "96 should be deeply equivalent", "62 should be deeply equivalent", "5 supports keys that begin with a number", "137 should be deeply equivalent", "13 should be deeply equivalent", "98 should be deeply equivalent", "168 should throw", "93 should be deeply equivalent", "68 should be deeply equivalent", "118 should be deeply equivalent", "110 should be deeply equivalent", "41 should be deeply equivalent", "8 should be deeply equivalent", "109 should be deeply equivalent", "148 should be deeply equivalent", "89 array brackets: empty strings work", "52 should be deeply equivalent", "169 should be deeply equivalent", "104 should not throw", "50 should be deeply equivalent", "9 should be deeply equivalent", "30 should be deeply equivalent", "83 should be deeply equivalent", "138 should be deeply equivalent", "123 should be deeply equivalent", "34 should be deeply equivalent", "20 should be deeply equivalent", "11 should be deeply equivalent", "36 should be deeply equivalent", "21 should be deeply equivalent", "67 should be deeply equivalent", "107 should be deeply equivalent", "86 with arrayLimit 0 + array brackets: null then empty string works", "116 should be deeply equivalent", "63 should be deeply equivalent", "37 should be deeply equivalent", "135 result has \"a\" property", "132 parsed has \"foo\" property", "121 should be deeply equivalent", "32 should be deeply equivalent", "154 can overwrite prototype with plainObjects true", "76 should be deeply equivalent", "18 should be deeply equivalent", "115 parseArrays:false, indices case is not an array", "72 should be deeply equivalent", "142 should be deeply equivalent", "57 should be deeply equivalent", "136 should be deeply equivalent", "51 should be deeply equivalent", "26 should be deeply equivalent", "56 should be deeply equivalent", "122 should be deeply equivalent", "28 should be deeply equivalent", "111 should be deeply equivalent", "150 should be deeply equivalent", "84 should be deeply equivalent", "12 should be deeply equivalent", "38 should be deeply equivalent", "153 can overwrite prototype with allowPrototypes true", "117 parseArrays:false, empty brackets case is not an array", "99 should be deeply equivalent", "112 should be deeply equivalent", "106 should be deeply equivalent", "77 should be deeply equivalent", "81 should be strictly equal", "4 parses a simple array", "23 should be deeply equivalent", "108 should be deeply equivalent", "105 should be deeply equivalent", "44 should be deeply equivalent", "7 should be deeply equivalent", "103 should be deeply equivalent", "167 should be strictly equal", "59 should be deeply equivalent", "35 should be deeply equivalent", "126 parsed has \"foo\" property", "55 should be deeply equivalent", "95 should be deeply equivalent", "134 should be deeply equivalent", "164 should be deeply equivalent", "128 should be strictly equal", "78 should be deeply equivalent", "1 parses a single nested string", "33 should be deeply equivalent", "166 should be deeply equivalent", "54 should be deeply equivalent", "85 with arrayLimit 20 + array indices: null then empty string works", "101 should not throw", "24 should be deeply equivalent", "58 should be deeply equivalent", "60 should be deeply equivalent", "129 should be strictly equal", "22 should be deeply equivalent", "127 should be strictly equal", "19 should be deeply equivalent", "45 should be deeply equivalent", "147 should be deeply equivalent", "74 should be deeply equivalent", "157 is not an array", "140 should be deeply equivalent", "113 should be deeply equivalent", "16 should be deeply equivalent", "43 should be deeply equivalent", "146 should be deeply equivalent", "149 should be deeply equivalent", "79 should be deeply equivalent", "80 should be deeply equivalent", "165 should be deeply equivalent", "160 stringifies as a non-array", "91 should be deeply equivalent", "143 should be deeply equivalent", "61 should be deeply equivalent", "163 should be deeply equivalent", "90 should be deeply equivalent", "144 bare \"toString\" results in { toString: \"\" }", "71 should be deeply equivalent", "124 should be deeply equivalent", "102 should not throw", "14 should be deeply equivalent", "73 should be deeply equivalent", "17 should be deeply equivalent", "49 should be deeply equivalent", "139 should be deeply equivalent", "66 should be deeply equivalent", "92 should be deeply equivalent", "94 should be deeply equivalent", "47 should be deeply equivalent", "65 should be deeply equivalent", "39 should be deeply equivalent", "27 should be deeply equivalent", "125 should not throw", "100 should be deeply equivalent", "114 should be deeply equivalent", "119 should be deeply equivalent", "141 bare \"toString\" results in {}", "131 should not throw", "15 should be deeply equivalent", "75 should be deeply equivalent", "145 should be deeply equivalent", "42 should be deeply equivalent", "97 should be deeply equivalent", "53 should be deeply equivalent", "3 defaults to a depth of 5", "133 parsed is 5000 properties deep", "70 should be deeply equivalent", "46 should be deeply equivalent", "31 should be deeply equivalent", "130 should be deeply equivalent", "69 should be deeply equivalent", "64 should be deeply equivalent", "82 should be deeply equivalent", "6 should be deeply equivalent", "48 should be deeply equivalent", "29 should be deeply equivalent", "88 with arrayLimit 0 + array brackets: empty string then null works", "151 can add keys to objects", "25 should be deeply equivalent", "120 should be deeply equivalent", "152 can not overwrite prototype", "2 parses a double nested string", "10 should be deeply equivalent"]}
{"ecosystem": "npm", "repo": "qs", "instance_id": "qs_97", "original_commit_message": "[Fix] `parse`: ignore `__proto__` keys", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/lib/parse.js b/lib/parse.js\nindex c833315..a4ac4fa 100644\n--- a/lib/parse.js\n+++ b/lib/parse.js\n@@ -136,7 +136,7 @@ var parseObject = function (chain, val, options, valuesParsed) {\n             ) {\n                 obj = [];\n                 obj[index] = leaf;\n-            } else {\n+            } else if (cleanRoot !== '__proto__') {\n                 obj[cleanRoot] = leaf;\n             }\n         }\n\n\n</patch>\n<test_patch>\ndiff --git a/test/parse.js b/test/parse.js\nindex 7a3cfde..7d61023 100644\n--- a/test/parse.js\n+++ b/test/parse.js\n@@ -629,6 +629,66 @@ test('parse()', function (t) {\n         st.end();\n     });\n \n+    t.test('dunder proto is ignored', function (st) {\n+        var payload = 'categories[__proto__]=login&categories[__proto__]&categories[length]=42';\n+        var result = qs.parse(payload, { allowPrototypes: true });\n+\n+        st.deepEqual(\n+            result,\n+            {\n+                categories: {\n+                    length: '42'\n+                }\n+            },\n+            'silent [[Prototype]] payload'\n+        );\n+\n+        var plainResult = qs.parse(payload, { allowPrototypes: true, plainObjects: true });\n+\n+        st.deepEqual(\n+            plainResult,\n+            {\n+                __proto__: null,\n+                categories: {\n+                    __proto__: null,\n+                    length: '42'\n+                }\n+            },\n+            'silent [[Prototype]] payload: plain objects'\n+        );\n+\n+        var query = qs.parse('categories[__proto__]=cats&categories[__proto__]=dogs&categories[some][json]=toInject', { allowPrototypes: true });\n+\n+        st.notOk(Array.isArray(query.categories), 'is not an array');\n+        st.notOk(query.categories instanceof Array, 'is not instanceof an array');\n+        st.deepEqual(query.categories, { some: { json: 'toInject' } });\n+        st.equal(JSON.stringify(query.categories), '{\"some\":{\"json\":\"toInject\"}}', 'stringifies as a non-array');\n+\n+        st.deepEqual(\n+            qs.parse('foo[__proto__][hidden]=value&foo[bar]=stuffs', { allowPrototypes: true }),\n+            {\n+                foo: {\n+                    bar: 'stuffs'\n+                }\n+            },\n+            'hidden values'\n+        );\n+\n+        st.deepEqual(\n+            qs.parse('foo[__proto__][hidden]=value&foo[bar]=stuffs', { allowPrototypes: true, plainObjects: true }),\n+            {\n+                __proto__: null,\n+                foo: {\n+                    __proto__: null,\n+                    bar: 'stuffs'\n+                }\n+            },\n+            'hidden values: plain objects'\n+        );\n+\n+        st.end();\n+    });\n+\n     t.test('can return null objects', { skip: !Object.create }, function (st) {\n         var expected = Object.create(null);\n         expected.a = Object.create(null);\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "8b4cc14cda94a5c89341b77e5fe435ec6c41be2d", "source_date": "Mon Dec 27 19:15:57 2021 -0800", "source_tag": "6.10.3", "target_commit": "4310742efbd8c03f6495f07906b45213da0a32ec", "target_date": "Mon Dec 27 19:15:57 2021 -0800", "target_tag": "6.3.3", "FAIL TO PASS": ["149 silent [[Prototype]] payload: plain objects", "151 is not instanceof an array", "155 hidden values: plain objects", "148 silent [[Prototype]] payload", "152 should be deeply equivalent", "154 hidden values"], "PASS TO PASS": ["87 with arrayLimit 20 + array indices: empty string then null works", "40 should be deeply equivalent", "135 should be deeply equivalent", "96 should be deeply equivalent", "5 supports keys that begin with a number", "62 should be deeply equivalent", "117 should be deeply equivalent", "13 should be deeply equivalent", "98 should be deeply equivalent", "93 should be deeply equivalent", "68 should be deeply equivalent", "118 should be deeply equivalent", "110 should be deeply equivalent", "41 should be deeply equivalent", "8 should be deeply equivalent", "10 should be deeply equivalent", "109 should be deeply equivalent", "89 array brackets: empty strings work", "52 should be deeply equivalent", "50 should be deeply equivalent", "9 should be deeply equivalent", "30 should be deeply equivalent", "83 should be deeply equivalent", "138 should be deeply equivalent", "34 should be deeply equivalent", "20 should be deeply equivalent", "11 should be deeply equivalent", "123 should be strictly equal", "145 can not overwrite prototype", "127 should be deeply equivalent", "36 should be deeply equivalent", "103 should not throw", "21 should be deeply equivalent", "67 should be deeply equivalent", "107 should be deeply equivalent", "86 with arrayLimit 0 + array brackets: null then empty string works", "141 should be deeply equivalent", "156 should be deeply equivalent", "157 should be deeply equivalent", "63 should be deeply equivalent", "37 should be deeply equivalent", "124 should be strictly equal", "102 should be deeply equivalent", "153 stringifies as a non-array", "32 should be deeply equivalent", "76 should be deeply equivalent", "18 should be deeply equivalent", "72 should be deeply equivalent", "142 should be deeply equivalent", "57 should be deeply equivalent", "136 should be deeply equivalent", "51 should be deeply equivalent", "26 should be deeply equivalent", "56 should be deeply equivalent", "28 should be deeply equivalent", "111 should be deeply equivalent", "84 should be deeply equivalent", "12 should be deeply equivalent", "38 should be deeply equivalent", "104 should be deeply equivalent", "99 should be deeply equivalent", "112 should be deeply equivalent", "106 should be deeply equivalent", "77 should be deeply equivalent", "81 should be strictly equal", "4 parses a simple array", "122 parsed has \"foo\" property", "23 should be deeply equivalent", "108 should be deeply equivalent", "105 should be deeply equivalent", "44 should be deeply equivalent", "7 should be deeply equivalent", "146 can overwrite prototype with allowPrototypes true", "144 can add keys to objects", "59 should be deeply equivalent", "35 should be deeply equivalent", "55 should be deeply equivalent", "95 should be deeply equivalent", "158 should be deeply equivalent", "78 should be deeply equivalent", "1 parses a single nested string", "33 should be deeply equivalent", "54 should be deeply equivalent", "85 with arrayLimit 20 + array indices: null then empty string works", "128 result has \"a\" property", "101 should not throw", "24 should be deeply equivalent", "58 should be deeply equivalent", "60 should be deeply equivalent", "22 should be deeply equivalent", "137 bare \"toString\" results in { toString: \"\" }", "19 should be deeply equivalent", "45 should be deeply equivalent", "74 should be deeply equivalent", "140 should be deeply equivalent", "113 should be deeply equivalent", "16 should be deeply equivalent", "43 should be deeply equivalent", "125 should be strictly equal", "79 should be deeply equivalent", "80 should be deeply equivalent", "91 should be deeply equivalent", "143 should be deeply equivalent", "61 should be deeply equivalent", "126 should be deeply equivalent", "159 should be deeply equivalent", "90 should be deeply equivalent", "160 should throw", "129 should be deeply equivalent", "71 should be deeply equivalent", "150 is not an array", "147 can overwrite prototype with plainObjects true", "14 should be deeply equivalent", "73 should be deeply equivalent", "17 should be deeply equivalent", "49 should be deeply equivalent", "116 parseArrays:false, empty brackets case is not an array", "134 bare \"toString\" results in {}", "121 should not throw", "139 should be deeply equivalent", "66 should be deeply equivalent", "92 should be deeply equivalent", "94 should be deeply equivalent", "100 should not throw", "131 should be deeply equivalent", "47 should be deeply equivalent", "65 should be deeply equivalent", "39 should be deeply equivalent", "27 should be deeply equivalent", "119 should be deeply equivalent", "15 should be deeply equivalent", "75 should be deeply equivalent", "42 should be deeply equivalent", "97 should be deeply equivalent", "53 should be deeply equivalent", "3 defaults to a depth of 5", "70 should be deeply equivalent", "115 should be deeply equivalent", "46 should be deeply equivalent", "31 should be deeply equivalent", "130 should be deeply equivalent", "69 should be deeply equivalent", "64 should be deeply equivalent", "82 should be deeply equivalent", "6 should be deeply equivalent", "48 should be deeply equivalent", "29 should be deeply equivalent", "88 with arrayLimit 0 + array brackets: empty string then null works", "25 should be deeply equivalent", "120 should be deeply equivalent", "2 parses a double nested string", "132 should be deeply equivalent", "114 parseArrays:false, indices case is not an array", "133 should be deeply equivalent"]}
{"ecosystem": "npm", "repo": "qs", "instance_id": "qs_98", "original_commit_message": "[Fix] `parse`: ignore `__proto__` keys", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/lib/parse.js b/lib/parse.js\nindex c833315..a4ac4fa 100644\n--- a/lib/parse.js\n+++ b/lib/parse.js\n@@ -136,7 +136,7 @@ var parseObject = function (chain, val, options, valuesParsed) {\n             ) {\n                 obj = [];\n                 obj[index] = leaf;\n-            } else {\n+            } else if (cleanRoot !== '__proto__') {\n                 obj[cleanRoot] = leaf;\n             }\n         }\n\n\n</patch>\n<test_patch>\ndiff --git a/test/parse.js b/test/parse.js\nindex 7a3cfde..7d61023 100644\n--- a/test/parse.js\n+++ b/test/parse.js\n@@ -629,6 +629,66 @@ test('parse()', function (t) {\n         st.end();\n     });\n \n+    t.test('dunder proto is ignored', function (st) {\n+        var payload = 'categories[__proto__]=login&categories[__proto__]&categories[length]=42';\n+        var result = qs.parse(payload, { allowPrototypes: true });\n+\n+        st.deepEqual(\n+            result,\n+            {\n+                categories: {\n+                    length: '42'\n+                }\n+            },\n+            'silent [[Prototype]] payload'\n+        );\n+\n+        var plainResult = qs.parse(payload, { allowPrototypes: true, plainObjects: true });\n+\n+        st.deepEqual(\n+            plainResult,\n+            {\n+                __proto__: null,\n+                categories: {\n+                    __proto__: null,\n+                    length: '42'\n+                }\n+            },\n+            'silent [[Prototype]] payload: plain objects'\n+        );\n+\n+        var query = qs.parse('categories[__proto__]=cats&categories[__proto__]=dogs&categories[some][json]=toInject', { allowPrototypes: true });\n+\n+        st.notOk(Array.isArray(query.categories), 'is not an array');\n+        st.notOk(query.categories instanceof Array, 'is not instanceof an array');\n+        st.deepEqual(query.categories, { some: { json: 'toInject' } });\n+        st.equal(JSON.stringify(query.categories), '{\"some\":{\"json\":\"toInject\"}}', 'stringifies as a non-array');\n+\n+        st.deepEqual(\n+            qs.parse('foo[__proto__][hidden]=value&foo[bar]=stuffs', { allowPrototypes: true }),\n+            {\n+                foo: {\n+                    bar: 'stuffs'\n+                }\n+            },\n+            'hidden values'\n+        );\n+\n+        st.deepEqual(\n+            qs.parse('foo[__proto__][hidden]=value&foo[bar]=stuffs', { allowPrototypes: true, plainObjects: true }),\n+            {\n+                __proto__: null,\n+                foo: {\n+                    __proto__: null,\n+                    bar: 'stuffs'\n+                }\n+            },\n+            'hidden values: plain objects'\n+        );\n+\n+        st.end();\n+    });\n+\n     t.test('can return null objects', { skip: !Object.create }, function (st) {\n         var expected = Object.create(null);\n         expected.a = Object.create(null);\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "8b4cc14cda94a5c89341b77e5fe435ec6c41be2d", "source_date": "Mon Dec 27 19:15:57 2021 -0800", "source_tag": "6.10.3", "target_commit": "e799ba57e573a30c14b67c1889c7c04d508b9105", "target_date": "Mon Dec 27 19:15:57 2021 -0800", "target_tag": "6.9.7", "FAIL TO PASS": ["194 is not instanceof an array", "198 hidden values: plain objects", "197 hidden values", "192 silent [[Prototype]] payload: plain objects", "195 should be deeply equivalent", "191 silent [[Prototype]] payload"], "PASS TO PASS": ["176 should be deeply equivalent", "181 should be deeply equivalent", "40 should be deeply equivalent", "184 should be deeply equivalent", "96 should be deeply equivalent", "151 should be deeply equivalent", "200 should be deeply equivalent", "5 supports keys that begin with a number", "62 should be deeply equivalent", "88 should be deeply equivalent", "117 should be deeply equivalent", "178 should be deeply equivalent", "13 should be deeply equivalent", "98 should be deeply equivalent", "93 should be deeply equivalent", "68 should be deeply equivalent", "118 should be deeply equivalent", "110 should be deeply equivalent", "41 should be deeply equivalent", "8 should be deeply equivalent", "209 should be deeply equivalent", "10 should be deeply equivalent", "148 should be deeply equivalent", "52 should be deeply equivalent", "175 should be deeply equivalent", "50 should be deeply equivalent", "9 should be deeply equivalent", "30 should be deeply equivalent", "83 should be deeply equivalent", "138 should be deeply equivalent", "205 should be deeply equivalent", "89 should be deeply equivalent", "123 should be deeply equivalent", "196 stringifies as a non-array", "172 should be deeply equivalent", "34 should be deeply equivalent", "20 should be deeply equivalent", "11 should be deeply equivalent", "127 should be deeply equivalent", "36 should be deeply equivalent", "109 array brackets: empty strings work", "21 should be deeply equivalent", "67 should be deeply equivalent", "186 should be deeply equivalent", "116 should be deeply equivalent", "141 should be deeply equivalent", "156 should be deeply equivalent", "157 should be deeply equivalent", "63 should be deeply equivalent", "37 should be deeply equivalent", "102 should be deeply equivalent", "210 should be deeply equivalent", "173 should be deeply equivalent", "32 should be deeply equivalent", "187 can add keys to objects", "76 should be deeply equivalent", "18 should be deeply equivalent", "72 should be deeply equivalent", "142 should be deeply equivalent", "57 should be deeply equivalent", "136 should be deeply equivalent", "51 should be deeply equivalent", "164 should be strictly equal", "26 should be deeply equivalent", "56 should be deeply equivalent", "155 should be deeply equivalent", "81 should be deeply equivalent", "190 can overwrite prototype with plainObjects true", "28 should be deeply equivalent", "111 should be deeply equivalent", "135 parseArrays:false, indices case is not an array", "150 should be deeply equivalent", "199 should be deeply equivalent", "84 should be deeply equivalent", "12 should be deeply equivalent", "38 should be deeply equivalent", "104 should be deeply equivalent", "99 should be deeply equivalent", "105 with arrayLimit 20 + array indices: null then empty string works", "112 should be deeply equivalent", "77 should be deeply equivalent", "206 should throw", "4 parses a simple array", "23 should be deeply equivalent", "212 should be deeply equivalent", "169 parsed is 5000 properties deep", "44 should be deeply equivalent", "7 should be deeply equivalent", "87 should be deeply equivalent", "103 should be deeply equivalent", "188 can not overwrite prototype", "59 should be deeply equivalent", "35 should be deeply equivalent", "134 should be deeply equivalent", "55 should be deeply equivalent", "95 should be deeply equivalent", "182 should be deeply equivalent", "165 should be strictly equal", "158 should be deeply equivalent", "78 should be deeply equivalent", "1 parses a single nested string", "33 should be deeply equivalent", "124 should not throw", "166 should be deeply equivalent", "54 should be deeply equivalent", "137 parseArrays:false, empty brackets case is not an array", "24 should be deeply equivalent", "58 should be deeply equivalent", "60 should be deeply equivalent", "86 should be deeply equivalent", "214 should be deeply equivalent", "22 should be deeply equivalent", "211 should be deeply equivalent", "160 should be deeply equivalent", "19 should be deeply equivalent", "45 should be deeply equivalent", "147 should be deeply equivalent", "74 should be deeply equivalent", "193 is not an array", "202 should be deeply equivalent", "140 should be deeply equivalent", "113 should be deeply equivalent", "16 should be deeply equivalent", "204 should throw", "43 should be deeply equivalent", "146 should be deeply equivalent", "149 should be deeply equivalent", "79 should be deeply equivalent", "80 should be deeply equivalent", "91 should be deeply equivalent", "143 should be deeply equivalent", "61 should be deeply equivalent", "126 should be deeply equivalent", "159 should be deeply equivalent", "163 should be strictly equal", "90 should be deeply equivalent", "174 should be deeply equivalent", "129 should be deeply equivalent", "71 should be deeply equivalent", "154 should be deeply equivalent", "107 with arrayLimit 20 + array indices: empty string then null works", "162 parsed has \"foo\" property", "170 should be deeply equivalent", "125 should be deeply equivalent", "14 should be deeply equivalent", "73 should be deeply equivalent", "218 should be deeply equivalent", "17 should be deeply equivalent", "49 should be deeply equivalent", "168 parsed has \"foo\" property", "122 should not throw", "121 should not throw", "203 should be strictly equal", "139 should be deeply equivalent", "179 should be deeply equivalent", "108 with arrayLimit 0 + array brackets: empty string then null works", "161 should not throw", "167 should not throw", "66 should be deeply equivalent", "92 should be deeply equivalent", "94 should be deeply equivalent", "131 should be deeply equivalent", "47 should be deeply equivalent", "65 should be deeply equivalent", "39 should be deeply equivalent", "213 should be deeply equivalent", "27 should be deeply equivalent", "171 result has \"a\" property", "100 should be deeply equivalent", "114 should be deeply equivalent", "215 should be deeply equivalent", "119 should be deeply equivalent", "15 should be deeply equivalent", "75 should be deeply equivalent", "152 should be deeply equivalent", "144 should be deeply equivalent", "145 should be deeply equivalent", "42 should be deeply equivalent", "97 should be deeply equivalent", "185 should be deeply equivalent", "207 should be deeply equivalent", "219 should be deeply equivalent", "53 should be deeply equivalent", "3 defaults to a depth of 5", "101 should be strictly equal", "183 should be deeply equivalent", "70 should be deeply equivalent", "217 should be deeply equivalent", "115 should be deeply equivalent", "46 should be deeply equivalent", "31 should be deeply equivalent", "128 should be deeply equivalent", "130 should be deeply equivalent", "201 should be deeply equivalent", "216 should be deeply equivalent", "69 should be deeply equivalent", "64 should be deeply equivalent", "208 should be deeply equivalent", "82 should be deeply equivalent", "6 should be deeply equivalent", "48 should be deeply equivalent", "153 should be deeply equivalent", "29 should be deeply equivalent", "25 should be deeply equivalent", "120 should be deeply equivalent", "180 bare \"toString\" results in { toString: \"\" }", "2 parses a double nested string", "177 bare \"toString\" results in {}", "189 can overwrite prototype with allowPrototypes true", "132 should be deeply equivalent", "85 should be deeply equivalent", "133 should be deeply equivalent", "106 with arrayLimit 0 + array brackets: null then empty string works"]}
{"ecosystem": "npm", "repo": "qs", "instance_id": "qs_99", "original_commit_message": "[Fix] `parse`: ignore `__proto__` keys", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/lib/parse.js b/lib/parse.js\nindex c833315..a4ac4fa 100644\n--- a/lib/parse.js\n+++ b/lib/parse.js\n@@ -136,7 +136,7 @@ var parseObject = function (chain, val, options, valuesParsed) {\n             ) {\n                 obj = [];\n                 obj[index] = leaf;\n-            } else {\n+            } else if (cleanRoot !== '__proto__') {\n                 obj[cleanRoot] = leaf;\n             }\n         }\n\n\n</patch>\n<test_patch>\ndiff --git a/test/parse.js b/test/parse.js\nindex 7a3cfde..7d61023 100644\n--- a/test/parse.js\n+++ b/test/parse.js\n@@ -629,6 +629,66 @@ test('parse()', function (t) {\n         st.end();\n     });\n \n+    t.test('dunder proto is ignored', function (st) {\n+        var payload = 'categories[__proto__]=login&categories[__proto__]&categories[length]=42';\n+        var result = qs.parse(payload, { allowPrototypes: true });\n+\n+        st.deepEqual(\n+            result,\n+            {\n+                categories: {\n+                    length: '42'\n+                }\n+            },\n+            'silent [[Prototype]] payload'\n+        );\n+\n+        var plainResult = qs.parse(payload, { allowPrototypes: true, plainObjects: true });\n+\n+        st.deepEqual(\n+            plainResult,\n+            {\n+                __proto__: null,\n+                categories: {\n+                    __proto__: null,\n+                    length: '42'\n+                }\n+            },\n+            'silent [[Prototype]] payload: plain objects'\n+        );\n+\n+        var query = qs.parse('categories[__proto__]=cats&categories[__proto__]=dogs&categories[some][json]=toInject', { allowPrototypes: true });\n+\n+        st.notOk(Array.isArray(query.categories), 'is not an array');\n+        st.notOk(query.categories instanceof Array, 'is not instanceof an array');\n+        st.deepEqual(query.categories, { some: { json: 'toInject' } });\n+        st.equal(JSON.stringify(query.categories), '{\"some\":{\"json\":\"toInject\"}}', 'stringifies as a non-array');\n+\n+        st.deepEqual(\n+            qs.parse('foo[__proto__][hidden]=value&foo[bar]=stuffs', { allowPrototypes: true }),\n+            {\n+                foo: {\n+                    bar: 'stuffs'\n+                }\n+            },\n+            'hidden values'\n+        );\n+\n+        st.deepEqual(\n+            qs.parse('foo[__proto__][hidden]=value&foo[bar]=stuffs', { allowPrototypes: true, plainObjects: true }),\n+            {\n+                __proto__: null,\n+                foo: {\n+                    __proto__: null,\n+                    bar: 'stuffs'\n+                }\n+            },\n+            'hidden values: plain objects'\n+        );\n+\n+        st.end();\n+    });\n+\n     t.test('can return null objects', { skip: !Object.create }, function (st) {\n         var expected = Object.create(null);\n         expected.a = Object.create(null);\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "8b4cc14cda94a5c89341b77e5fe435ec6c41be2d", "source_date": "Mon Dec 27 19:15:57 2021 -0800", "source_tag": "6.10.3", "target_commit": "73205259936317b40f447c5cdb71c5b341848e1b", "target_date": "Mon Dec 27 19:15:57 2021 -0800", "target_tag": "6.6.1", "FAIL TO PASS": ["156 silent [[Prototype]] payload: plain objects", "158 is not instanceof an array", "162 hidden values: plain objects"], "PASS TO PASS": ["55 should be equivalent", "87 with arrayLimit 20 + array indices: empty string then null works", "23 should be equivalent", "54 should be equivalent", "5 supports keys that begin with a number", "61 should be equivalent", "78 should be equivalent", "99 should be equivalent", "137 should be equivalent", "32 should be equivalent", "110 should be equivalent", "143 should be equivalent", "164 should be equivalent", "168 should throw", "64 should be equivalent", "8 should be equivalent", "80 should be equivalent", "12 should be equivalent", "53 should be equivalent", "89 array brackets: empty strings work", "119 should be equivalent", "46 should be equivalent", "109 should be equivalent", "104 should not throw", "47 should be equivalent", "95 should be equivalent", "25 should be equivalent", "84 should be equivalent", "33 should be equivalent", "108 should be equivalent", "91 should be equivalent", "68 should be equivalent", "76 should be equivalent", "18 should be equivalent", "59 should be equivalent", "73 should be equivalent", "45 should be equivalent", "98 should be equivalent", "17 should be equivalent", "127 should be equal", "122 should be equivalent", "161 hidden values", "21 should be equivalent", "90 should be equivalent", "86 with arrayLimit 0 + array brackets: null then empty string works", "135 result has \"a\" property", "182 should be equivalent", "130 should be equivalent", "180 should be equivalent", "49 should be equivalent", "146 should be equivalent", "132 parsed has \"foo\" property", "154 can overwrite prototype with plainObjects true", "181 should be equivalent", "79 should be equivalent", "115 parseArrays:false, indices case is not an array", "140 should be equivalent", "62 should be equivalent", "106 should be equivalent", "100 should be equivalent", "113 should be equivalent", "166 should be equivalent", "170 should throw", "11 should be equivalent", "81 should be equal", "149 should be equivalent", "153 can overwrite prototype with allowPrototypes true", "117 parseArrays:false, empty brackets case is not an array", "57 should be equivalent", "175 should be equivalent", "36 should be equivalent", "145 should be equivalent", "39 should be equivalent", "167 should be equal", "41 should be equivalent", "118 should be equivalent", "105 should be equivalent", "67 should be equivalent", "4 parses a simple array", "37 should be equivalent", "82 should be equivalent", "16 should be equivalent", "77 should be equivalent", "163 should be equivalent", "116 should be equivalent", "126 parsed has \"foo\" property", "66 should be equivalent", "134 should be equivalent", "174 should be equivalent", "1 parses a single nested string", "30 should be equivalent", "44 should be equivalent", "34 should be equivalent", "71 should be equivalent", "85 with arrayLimit 20 + array indices: null then empty string works", "103 should be equivalent", "101 should not throw", "65 should be equivalent", "51 should be equivalent", "172 should be equivalent", "13 should be equivalent", "128 should be equal", "142 should be equivalent", "14 should be equivalent", "92 should be equivalent", "96 should be equivalent", "69 should be equivalent", "56 should be equivalent", "136 should be equivalent", "176 should be equivalent", "43 should be equivalent", "157 is not an array", "147 should be equivalent", "7 should be equivalent", "6 should be equivalent", "63 should be equivalent", "52 should be equivalent", "83 should be equivalent", "165 should be equivalent", "42 should be equivalent", "160 stringifies as a non-array", "35 should be equivalent", "121 should be equivalent", "15 should be equivalent", "144 bare \"toString\" results in { toString: \"\" }", "26 should be equivalent", "179 should be equivalent", "112 should be equivalent", "102 should not throw", "177 should be equivalent", "24 should be equivalent", "93 should be equivalent", "74 should be equivalent", "94 should be equivalent", "50 should be equivalent", "28 should be equivalent", "114 should be equivalent", "107 should be equivalent", "150 should be equivalent", "138 should be equivalent", "29 should be equivalent", "40 should be equivalent", "70 should be equivalent", "125 should not throw", "141 bare \"toString\" results in {}", "131 should not throw", "124 should be equivalent", "31 should be equivalent", "72 should be equivalent", "75 should be equivalent", "129 should be equal", "58 should be equivalent", "20 should be equivalent", "171 should be equivalent", "159 should be equivalent", "97 should be equivalent", "3 defaults to a depth of 5", "133 parsed is 5000 properties deep", "148 should be equivalent", "139 should be equivalent", "9 should be equivalent", "22 should be equivalent", "27 should be equivalent", "38 should be equivalent", "111 should be equivalent", "173 should be equivalent", "120 should be equivalent", "178 should be equivalent", "48 should be equivalent", "19 should be equivalent", "123 should be equivalent", "88 with arrayLimit 0 + array brackets: empty string then null works", "60 should be equivalent", "151 can add keys to objects", "152 can not overwrite prototype", "169 should be equivalent", "155 silent [[Prototype]] payload", "2 parses a double nested string", "10 should be equivalent"]}
{"ecosystem": "npm", "repo": "qs", "instance_id": "qs_100", "original_commit_message": "[Fix] `parse`: ignore `__proto__` keys", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/lib/parse.js b/lib/parse.js\nindex c833315..a4ac4fa 100644\n--- a/lib/parse.js\n+++ b/lib/parse.js\n@@ -136,7 +136,7 @@ var parseObject = function (chain, val, options, valuesParsed) {\n             ) {\n                 obj = [];\n                 obj[index] = leaf;\n-            } else {\n+            } else if (cleanRoot !== '__proto__') {\n                 obj[cleanRoot] = leaf;\n             }\n         }\n\n\n</patch>\n<test_patch>\ndiff --git a/test/parse.js b/test/parse.js\nindex 7a3cfde..7d61023 100644\n--- a/test/parse.js\n+++ b/test/parse.js\n@@ -629,6 +629,66 @@ test('parse()', function (t) {\n         st.end();\n     });\n \n+    t.test('dunder proto is ignored', function (st) {\n+        var payload = 'categories[__proto__]=login&categories[__proto__]&categories[length]=42';\n+        var result = qs.parse(payload, { allowPrototypes: true });\n+\n+        st.deepEqual(\n+            result,\n+            {\n+                categories: {\n+                    length: '42'\n+                }\n+            },\n+            'silent [[Prototype]] payload'\n+        );\n+\n+        var plainResult = qs.parse(payload, { allowPrototypes: true, plainObjects: true });\n+\n+        st.deepEqual(\n+            plainResult,\n+            {\n+                __proto__: null,\n+                categories: {\n+                    __proto__: null,\n+                    length: '42'\n+                }\n+            },\n+            'silent [[Prototype]] payload: plain objects'\n+        );\n+\n+        var query = qs.parse('categories[__proto__]=cats&categories[__proto__]=dogs&categories[some][json]=toInject', { allowPrototypes: true });\n+\n+        st.notOk(Array.isArray(query.categories), 'is not an array');\n+        st.notOk(query.categories instanceof Array, 'is not instanceof an array');\n+        st.deepEqual(query.categories, { some: { json: 'toInject' } });\n+        st.equal(JSON.stringify(query.categories), '{\"some\":{\"json\":\"toInject\"}}', 'stringifies as a non-array');\n+\n+        st.deepEqual(\n+            qs.parse('foo[__proto__][hidden]=value&foo[bar]=stuffs', { allowPrototypes: true }),\n+            {\n+                foo: {\n+                    bar: 'stuffs'\n+                }\n+            },\n+            'hidden values'\n+        );\n+\n+        st.deepEqual(\n+            qs.parse('foo[__proto__][hidden]=value&foo[bar]=stuffs', { allowPrototypes: true, plainObjects: true }),\n+            {\n+                __proto__: null,\n+                foo: {\n+                    __proto__: null,\n+                    bar: 'stuffs'\n+                }\n+            },\n+            'hidden values: plain objects'\n+        );\n+\n+        st.end();\n+    });\n+\n     t.test('can return null objects', { skip: !Object.create }, function (st) {\n         var expected = Object.create(null);\n         expected.a = Object.create(null);\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "8b4cc14cda94a5c89341b77e5fe435ec6c41be2d", "source_date": "Mon Dec 27 19:15:57 2021 -0800", "source_tag": "6.10.3", "target_commit": "ba24e74dd17931f825adb52f5633e48293b584e1", "target_date": "Mon Dec 27 19:15:57 2021 -0800", "target_tag": "6.2.4", "FAIL TO PASS": ["142 silent [[Prototype]] payload", "148 hidden values", "145 is not instanceof an array", "143 silent [[Prototype]] payload: plain objects", "146 should be deeply equivalent", "149 hidden values: plain objects"], "PASS TO PASS": ["40 should be deeply equivalent", "135 should be deeply equivalent", "96 should be deeply equivalent", "151 should be deeply equivalent", "118 should be strictly equal", "5 supports keys that begin with a number", "62 should be deeply equivalent", "88 should be deeply equivalent", "137 should be deeply equivalent", "13 should be deeply equivalent", "98 should be deeply equivalent", "79 with arrayLimit 20 + array indices: null then empty string works", "93 should be deeply equivalent", "68 should be deeply equivalent", "122 result has \"a\" property", "41 should be deeply equivalent", "8 should be deeply equivalent", "10 should be deeply equivalent", "109 should be deeply equivalent", "52 should be deeply equivalent", "50 should be deeply equivalent", "9 should be deeply equivalent", "30 should be deeply equivalent", "89 should be deeply equivalent", "123 should be deeply equivalent", "34 should be deeply equivalent", "20 should be deeply equivalent", "11 should be deeply equivalent", "95 should not throw", "127 should be deeply equivalent", "36 should be deeply equivalent", "147 stringifies as a non-array", "21 should be deeply equivalent", "154 should throw", "67 should be deeply equivalent", "107 should be deeply equivalent", "63 should be deeply equivalent", "37 should be deeply equivalent", "102 should be deeply equivalent", "121 should be deeply equivalent", "32 should be deeply equivalent", "76 should be deeply equivalent", "18 should be deeply equivalent", "72 should be deeply equivalent", "57 should be deeply equivalent", "136 should be deeply equivalent", "51 should be deeply equivalent", "26 should be deeply equivalent", "56 should be deeply equivalent", "110 parseArrays:false, empty brackets case is not an array", "117 should be strictly equal", "28 should be deeply equivalent", "111 should be deeply equivalent", "150 should be deeply equivalent", "84 should be deeply equivalent", "12 should be deeply equivalent", "38 should be deeply equivalent", "104 should be deeply equivalent", "80 with arrayLimit 0 + array brackets: null then empty string works", "99 should be deeply equivalent", "112 should be deeply equivalent", "106 should be deeply equivalent", "77 should be deeply equivalent", "75 should be strictly equal", "4 parses a simple array", "23 should be deeply equivalent", "105 should be deeply equivalent", "44 should be deeply equivalent", "7 should be deeply equivalent", "87 should be deeply equivalent", "103 should be deeply equivalent", "59 should be deeply equivalent", "35 should be deeply equivalent", "134 should be deeply equivalent", "55 should be deeply equivalent", "78 should be deeply equivalent", "1 parses a single nested string", "33 should be deeply equivalent", "54 should be deeply equivalent", "116 parsed has \"foo\" property", "24 should be deeply equivalent", "58 should be deeply equivalent", "60 should be deeply equivalent", "86 should be deeply equivalent", "97 should not throw", "144 is not an array", "22 should be deeply equivalent", "81 with arrayLimit 20 + array indices: empty string then null works", "128 bare \"toString\" results in {}", "19 should be deeply equivalent", "45 should be deeply equivalent", "74 should be deeply equivalent", "113 should be deeply equivalent", "16 should be deeply equivalent", "43 should be deeply equivalent", "94 should not throw", "91 should be deeply equivalent", "61 should be deeply equivalent", "126 should be deeply equivalent", "131 bare \"toString\" results in { toString: \"\" }", "90 should be deeply equivalent", "129 should be deeply equivalent", "71 should be deeply equivalent", "124 should be deeply equivalent", "125 should be deeply equivalent", "14 should be deeply equivalent", "73 should be deeply equivalent", "138 can add keys to objects", "17 should be deeply equivalent", "49 should be deeply equivalent", "140 can overwrite prototype with allowPrototypes true", "66 should be deeply equivalent", "92 should be deeply equivalent", "47 should be deeply equivalent", "65 should be deeply equivalent", "39 should be deeply equivalent", "27 should be deeply equivalent", "139 can not overwrite prototype", "100 should be deeply equivalent", "114 should be deeply equivalent", "15 should be deeply equivalent", "152 should be deeply equivalent", "83 array brackets: empty strings work", "42 should be deeply equivalent", "101 should be deeply equivalent", "82 with arrayLimit 0 + array brackets: empty string then null works", "53 should be deeply equivalent", "3 defaults to a depth of 5", "119 should be strictly equal", "70 should be deeply equivalent", "46 should be deeply equivalent", "31 should be deeply equivalent", "130 should be deeply equivalent", "69 should be deeply equivalent", "64 should be deeply equivalent", "6 should be deeply equivalent", "48 should be deeply equivalent", "153 should be deeply equivalent", "29 should be deeply equivalent", "141 can overwrite prototype with plainObjects true", "25 should be deeply equivalent", "120 should be deeply equivalent", "115 should not throw", "2 parses a double nested string", "108 parseArrays:false, indices case is not an array", "132 should be deeply equivalent", "85 should be deeply equivalent", "133 should be deeply equivalent"]}
{"ecosystem": "npm", "repo": "qs", "instance_id": "qs_101", "original_commit_message": "[Fix] `parse`: ignore `__proto__` keys", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/lib/parse.js b/lib/parse.js\nindex c833315..a4ac4fa 100644\n--- a/lib/parse.js\n+++ b/lib/parse.js\n@@ -136,7 +136,7 @@ var parseObject = function (chain, val, options, valuesParsed) {\n             ) {\n                 obj = [];\n                 obj[index] = leaf;\n-            } else {\n+            } else if (cleanRoot !== '__proto__') {\n                 obj[cleanRoot] = leaf;\n             }\n         }\n\n\n</patch>\n<test_patch>\ndiff --git a/test/parse.js b/test/parse.js\nindex 7a3cfde..7d61023 100644\n--- a/test/parse.js\n+++ b/test/parse.js\n@@ -629,6 +629,66 @@ test('parse()', function (t) {\n         st.end();\n     });\n \n+    t.test('dunder proto is ignored', function (st) {\n+        var payload = 'categories[__proto__]=login&categories[__proto__]&categories[length]=42';\n+        var result = qs.parse(payload, { allowPrototypes: true });\n+\n+        st.deepEqual(\n+            result,\n+            {\n+                categories: {\n+                    length: '42'\n+                }\n+            },\n+            'silent [[Prototype]] payload'\n+        );\n+\n+        var plainResult = qs.parse(payload, { allowPrototypes: true, plainObjects: true });\n+\n+        st.deepEqual(\n+            plainResult,\n+            {\n+                __proto__: null,\n+                categories: {\n+                    __proto__: null,\n+                    length: '42'\n+                }\n+            },\n+            'silent [[Prototype]] payload: plain objects'\n+        );\n+\n+        var query = qs.parse('categories[__proto__]=cats&categories[__proto__]=dogs&categories[some][json]=toInject', { allowPrototypes: true });\n+\n+        st.notOk(Array.isArray(query.categories), 'is not an array');\n+        st.notOk(query.categories instanceof Array, 'is not instanceof an array');\n+        st.deepEqual(query.categories, { some: { json: 'toInject' } });\n+        st.equal(JSON.stringify(query.categories), '{\"some\":{\"json\":\"toInject\"}}', 'stringifies as a non-array');\n+\n+        st.deepEqual(\n+            qs.parse('foo[__proto__][hidden]=value&foo[bar]=stuffs', { allowPrototypes: true }),\n+            {\n+                foo: {\n+                    bar: 'stuffs'\n+                }\n+            },\n+            'hidden values'\n+        );\n+\n+        st.deepEqual(\n+            qs.parse('foo[__proto__][hidden]=value&foo[bar]=stuffs', { allowPrototypes: true, plainObjects: true }),\n+            {\n+                __proto__: null,\n+                foo: {\n+                    __proto__: null,\n+                    bar: 'stuffs'\n+                }\n+            },\n+            'hidden values: plain objects'\n+        );\n+\n+        st.end();\n+    });\n+\n     t.test('can return null objects', { skip: !Object.create }, function (st) {\n         var expected = Object.create(null);\n         expected.a = Object.create(null);\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "8b4cc14cda94a5c89341b77e5fe435ec6c41be2d", "source_date": "Mon Dec 27 19:15:57 2021 -0800", "source_tag": "6.10.3", "target_commit": "f945393cfe442fe8c6e62b4156fd35452c0686ee", "target_date": "Mon Dec 27 19:15:57 2021 -0800", "target_tag": "6.7.3", "FAIL TO PASS": ["194 is not instanceof an array", "198 hidden values: plain objects", "197 hidden values", "192 silent [[Prototype]] payload: plain objects", "195 should be deeply equivalent", "191 silent [[Prototype]] payload"], "PASS TO PASS": ["176 should be deeply equivalent", "181 should be deeply equivalent", "40 should be deeply equivalent", "184 should be deeply equivalent", "96 should be deeply equivalent", "151 should be deeply equivalent", "200 should be deeply equivalent", "5 supports keys that begin with a number", "62 should be deeply equivalent", "88 should be deeply equivalent", "117 should be deeply equivalent", "178 should be deeply equivalent", "13 should be deeply equivalent", "98 should be deeply equivalent", "93 should be deeply equivalent", "68 should be deeply equivalent", "118 should be deeply equivalent", "110 should be deeply equivalent", "41 should be deeply equivalent", "8 should be deeply equivalent", "209 should be deeply equivalent", "10 should be deeply equivalent", "148 should be deeply equivalent", "52 should be deeply equivalent", "175 should be deeply equivalent", "50 should be deeply equivalent", "9 should be deeply equivalent", "30 should be deeply equivalent", "83 should be deeply equivalent", "138 should be deeply equivalent", "205 should be deeply equivalent", "89 should be deeply equivalent", "123 should be deeply equivalent", "196 stringifies as a non-array", "172 should be deeply equivalent", "34 should be deeply equivalent", "20 should be deeply equivalent", "11 should be deeply equivalent", "127 should be deeply equivalent", "36 should be deeply equivalent", "109 array brackets: empty strings work", "21 should be deeply equivalent", "67 should be deeply equivalent", "186 should be deeply equivalent", "116 should be deeply equivalent", "141 should be deeply equivalent", "156 should be deeply equivalent", "157 should be deeply equivalent", "63 should be deeply equivalent", "37 should be deeply equivalent", "102 should be deeply equivalent", "210 should be deeply equivalent", "173 should be deeply equivalent", "32 should be deeply equivalent", "187 can add keys to objects", "76 should be deeply equivalent", "18 should be deeply equivalent", "72 should be deeply equivalent", "142 should be deeply equivalent", "57 should be deeply equivalent", "136 should be deeply equivalent", "51 should be deeply equivalent", "164 should be strictly equal", "26 should be deeply equivalent", "56 should be deeply equivalent", "155 should be deeply equivalent", "81 should be deeply equivalent", "190 can overwrite prototype with plainObjects true", "28 should be deeply equivalent", "111 should be deeply equivalent", "135 parseArrays:false, indices case is not an array", "150 should be deeply equivalent", "199 should be deeply equivalent", "84 should be deeply equivalent", "12 should be deeply equivalent", "38 should be deeply equivalent", "104 should be deeply equivalent", "99 should be deeply equivalent", "105 with arrayLimit 20 + array indices: null then empty string works", "112 should be deeply equivalent", "77 should be deeply equivalent", "206 should throw", "4 parses a simple array", "23 should be deeply equivalent", "212 should be deeply equivalent", "169 parsed is 5000 properties deep", "44 should be deeply equivalent", "7 should be deeply equivalent", "87 should be deeply equivalent", "103 should be deeply equivalent", "188 can not overwrite prototype", "59 should be deeply equivalent", "35 should be deeply equivalent", "134 should be deeply equivalent", "55 should be deeply equivalent", "95 should be deeply equivalent", "182 should be deeply equivalent", "165 should be strictly equal", "158 should be deeply equivalent", "78 should be deeply equivalent", "1 parses a single nested string", "33 should be deeply equivalent", "124 should not throw", "166 should be deeply equivalent", "54 should be deeply equivalent", "137 parseArrays:false, empty brackets case is not an array", "24 should be deeply equivalent", "58 should be deeply equivalent", "60 should be deeply equivalent", "86 should be deeply equivalent", "214 should be deeply equivalent", "22 should be deeply equivalent", "211 should be deeply equivalent", "160 should be deeply equivalent", "19 should be deeply equivalent", "45 should be deeply equivalent", "147 should be deeply equivalent", "74 should be deeply equivalent", "193 is not an array", "202 should be deeply equivalent", "140 should be deeply equivalent", "113 should be deeply equivalent", "16 should be deeply equivalent", "204 should throw", "43 should be deeply equivalent", "146 should be deeply equivalent", "149 should be deeply equivalent", "79 should be deeply equivalent", "80 should be deeply equivalent", "91 should be deeply equivalent", "143 should be deeply equivalent", "61 should be deeply equivalent", "126 should be deeply equivalent", "159 should be deeply equivalent", "163 should be strictly equal", "90 should be deeply equivalent", "174 should be deeply equivalent", "129 should be deeply equivalent", "71 should be deeply equivalent", "154 should be deeply equivalent", "107 with arrayLimit 20 + array indices: empty string then null works", "162 parsed has \"foo\" property", "170 should be deeply equivalent", "125 should be deeply equivalent", "14 should be deeply equivalent", "73 should be deeply equivalent", "218 should be deeply equivalent", "17 should be deeply equivalent", "49 should be deeply equivalent", "168 parsed has \"foo\" property", "122 should not throw", "121 should not throw", "203 should be strictly equal", "139 should be deeply equivalent", "179 should be deeply equivalent", "108 with arrayLimit 0 + array brackets: empty string then null works", "161 should not throw", "167 should not throw", "66 should be deeply equivalent", "92 should be deeply equivalent", "94 should be deeply equivalent", "131 should be deeply equivalent", "47 should be deeply equivalent", "65 should be deeply equivalent", "39 should be deeply equivalent", "213 should be deeply equivalent", "27 should be deeply equivalent", "171 result has \"a\" property", "100 should be deeply equivalent", "114 should be deeply equivalent", "215 should be deeply equivalent", "119 should be deeply equivalent", "15 should be deeply equivalent", "75 should be deeply equivalent", "152 should be deeply equivalent", "144 should be deeply equivalent", "145 should be deeply equivalent", "42 should be deeply equivalent", "97 should be deeply equivalent", "185 should be deeply equivalent", "207 should be deeply equivalent", "53 should be deeply equivalent", "3 defaults to a depth of 5", "101 should be strictly equal", "183 should be deeply equivalent", "70 should be deeply equivalent", "217 should be deeply equivalent", "115 should be deeply equivalent", "46 should be deeply equivalent", "31 should be deeply equivalent", "128 should be deeply equivalent", "130 should be deeply equivalent", "201 should be deeply equivalent", "216 should be deeply equivalent", "69 should be deeply equivalent", "64 should be deeply equivalent", "208 should be deeply equivalent", "82 should be deeply equivalent", "6 should be deeply equivalent", "48 should be deeply equivalent", "153 should be deeply equivalent", "29 should be deeply equivalent", "25 should be deeply equivalent", "120 should be deeply equivalent", "180 bare \"toString\" results in { toString: \"\" }", "2 parses a double nested string", "177 bare \"toString\" results in {}", "189 can overwrite prototype with allowPrototypes true", "132 should be deeply equivalent", "85 should be deeply equivalent", "133 should be deeply equivalent", "106 with arrayLimit 0 + array brackets: null then empty string works"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_606", "original_commit_message": "[5.0.x] Fixed CVE-2024-41991 -- Prevented potential ReDoS in django.utils.html.urlize() and AdminURLFieldWidget.\nThanks Seokchan Yoon for the report.\nCo-authored-by: Sarah Boyce <42296566+sarahboyce@users.noreply.github.com>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/contrib/admin/widgets.py b/django/contrib/admin/widgets.py\nindex ca844cddb3..b1e72b6246 100644\n--- a/django/contrib/admin/widgets.py\n+++ b/django/contrib/admin/widgets.py\n@@ -390,7 +390,7 @@ class AdminURLFieldWidget(forms.URLInput):\n         context[\"current_label\"] = _(\"Currently:\")\n         context[\"change_label\"] = _(\"Change:\")\n         context[\"widget\"][\"href\"] = (\n-            smart_urlquote(context[\"widget\"][\"value\"]) if value else \"\"\n+            smart_urlquote(context[\"widget\"][\"value\"]) if url_valid else \"\"\n         )\n         context[\"url_valid\"] = url_valid\n         return context\n\ndiff --git a/django/utils/html.py b/django/utils/html.py\nindex a4fc1ab557..a2686d065b 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -36,6 +36,8 @@ VOID_ELEMENTS = {\n     \"spacer\",\n }\n \n+MAX_URL_LENGTH = 2048\n+\n \n @keep_lazy(SafeString)\n def escape(text):\n@@ -330,9 +332,9 @@ class Urlizer:\n             # Make URL we want to point to.\n             url = None\n             nofollow_attr = ' rel=\"nofollow\"' if nofollow else \"\"\n-            if self.simple_url_re.match(middle):\n+            if len(middle) <= MAX_URL_LENGTH and self.simple_url_re.match(middle):\n                 url = smart_urlquote(html.unescape(middle))\n-            elif self.simple_url_2_re.match(middle):\n+            elif len(middle) <= MAX_URL_LENGTH and self.simple_url_2_re.match(middle):\n                 url = smart_urlquote(\"http://%s\" % html.unescape(middle))\n             elif \":\" not in middle and self.is_email_simple(middle):\n                 local, domain = middle.rsplit(\"@\", 1)\n@@ -447,6 +449,10 @@ class Urlizer:\n         except ValueError:\n             # value contains more than one @.\n             return False\n+        # Max length for domain name labels is 63 characters per RFC 1034.\n+        # Helps to avoid ReDoS vectors in the domain part.\n+        if len(p2) > 63:\n+            return False\n         # Dot must be in p2 (e.g. example.com)\n         if \".\" not in p2 or p2.startswith(\".\"):\n             return False\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex abaed86384..0008999693 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -462,7 +462,12 @@ class AdminSplitDateTimeWidgetTest(SimpleTestCase):\n class AdminURLWidgetTest(SimpleTestCase):\n     def test_get_context_validates_url(self):\n         w = widgets.AdminURLFieldWidget()\n-        for invalid in [\"\", \"/not/a/full/url/\", 'javascript:alert(\"Danger XSS!\")']:\n+        for invalid in [\n+            \"\",\n+            \"/not/a/full/url/\",\n+            'javascript:alert(\"Danger XSS!\")',\n+            \"http://\" + \"한.글.\" * 1_000_000 + \"com\",\n+        ]:\n             with self.subTest(url=invalid):\n                 self.assertFalse(w.get_context(\"name\", invalid, {})[\"url_valid\"])\n         self.assertTrue(w.get_context(\"name\", \"http://example.com\", {})[\"url_valid\"])\n\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 6050ed62b0..82dbd58f12 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -338,6 +338,15 @@ class TestUtilsHtml(SimpleTestCase):\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>!',\n             ),\n             (\"foo@example.com\", '<a href=\"mailto:foo@example.com\">foo@example.com</a>'),\n+            (\n+                \"test@\" + \"한.글.\" * 15 + \"aaa\",\n+                '<a href=\"mailto:test@'\n+                + \"xn--6q8b.xn--bj0b.\" * 15\n+                + 'aaa\">'\n+                + \"test@\"\n+                + \"한.글.\" * 15\n+                + \"aaa</a>\",\n+            ),\n         )\n         for value, output in tests:\n             with self.subTest(value=value):\n@@ -346,6 +355,10 @@ class TestUtilsHtml(SimpleTestCase):\n     def test_urlize_unchanged_inputs(self):\n         tests = (\n             (\"a\" + \"@a\" * 50000) + \"a\",  # simple_email_re catastrophic test\n+            # Unicode domain catastrophic tests.\n+            \"a@\" + \"한.글.\" * 1_000_000 + \"a\",\n+            \"http://\" + \"한.글.\" * 1_000_000 + \"com\",\n+            \"www.\" + \"한.글.\" * 1_000_000 + \"com\",\n             (\"a\" + \".\" * 1000000) + \"a\",  # trailing_punctuation catastrophic test\n             \"foo@\",\n             \"@foo.com\",\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "523da8771bce321023f490f70d71a9e973ddc927", "source_date": "Tue Aug 6 08:51:55 2024 +0200", "source_tag": "5.0.8", "target_commit": "efea1ef7e2190e3f77ca0651b5458297bc0f6a9f", "target_date": "Wed Jul 31 16:12:23 2024 +0200", "target_tag": "4.2.15", "FAIL TO PASS": ["utils_tests.test_html.TestUtilsHtml.test_urlize_unchanged_inputs"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_607", "original_commit_message": "[2.0.x] Fixed CVE-2018-6188 -- Fixed information leakage in AuthenticationForm.\nReverted 359370a8b8ca0efe99b1d4630b291ec060b69225 (refs #28645).\nThis is a security fix.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex 5a83110a4b..a5de5bf650 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -194,15 +194,6 @@ class AuthenticationForm(forms.Form):\n         if username is not None and password:\n             self.user_cache = authenticate(self.request, username=username, password=password)\n             if self.user_cache is None:\n-                # An authentication backend may reject inactive users. Check\n-                # if the user exists and is inactive, and raise the 'inactive'\n-                # error if so.\n-                try:\n-                    self.user_cache = UserModel._default_manager.get_by_natural_key(username)\n-                except UserModel.DoesNotExist:\n-                    pass\n-                else:\n-                    self.confirm_login_allowed(self.user_cache)\n                 raise forms.ValidationError(\n                     self.error_messages['invalid_login'],\n                     code='invalid_login',\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 7d8b5f7486..7690b62514 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -262,6 +262,9 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n         )\n \n \n+# To verify that the login form rejects inactive users, use an authentication\n+# backend that allows them.\n+@override_settings(AUTHENTICATION_BACKENDS=['django.contrib.auth.backends.AllowAllUsersModelBackend'])\n class AuthenticationFormTest(TestDataMixin, TestCase):\n \n     def test_invalid_username(self):\n@@ -291,6 +294,24 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertFalse(form.is_valid())\n         self.assertEqual(form.non_field_errors(), [str(form.error_messages['inactive'])])\n \n+    # Use an authentication backend that rejects inactive users.\n+    @override_settings(AUTHENTICATION_BACKENDS=['django.contrib.auth.backends.ModelBackend'])\n+    def test_inactive_user_incorrect_password(self):\n+        \"\"\"An invalid login doesn't leak the inactive status of a user.\"\"\"\n+        data = {\n+            'username': 'inactive',\n+            'password': 'incorrect',\n+        }\n+        form = AuthenticationForm(None, data)\n+        self.assertFalse(form.is_valid())\n+        self.assertEqual(\n+            form.non_field_errors(), [\n+                form.error_messages['invalid_login'] % {\n+                    'username': User._meta.get_field('username').verbose_name\n+                }\n+            ]\n+        )\n+\n     def test_login_failed(self):\n         signal_calls = []\n \n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "c37bb28677295f6edda61d8ac461014ef0d3aeb2", "source_date": "Thu Feb 1 09:13:59 2018 -0500", "source_tag": "2.0.2", "target_commit": "57b95fedad5e0b83fc9c81466b7d1751c6427aae", "target_date": "Thu Feb 1 09:18:33 2018 -0500", "target_tag": "1.11.10", "FAIL TO PASS": ["auth_tests.test_forms.AuthenticationFormTest.test_inactive_user_incorrect_password"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_614", "original_commit_message": "[1.7.x] Prevented data leakage in contrib.admin via query string manipulation.\nThis is a security fix. Disclosure following shortly.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/contrib/admin/exceptions.py b/django/contrib/admin/exceptions.py\nindex 2e094c6da1..f619bc2252 100644\n--- a/django/contrib/admin/exceptions.py\n+++ b/django/contrib/admin/exceptions.py\n@@ -4,3 +4,8 @@ from django.core.exceptions import SuspiciousOperation\n class DisallowedModelAdminLookup(SuspiciousOperation):\n     \"\"\"Invalid filter was passed to admin view via URL querystring\"\"\"\n     pass\n+\n+\n+class DisallowedModelAdminToField(SuspiciousOperation):\n+    \"\"\"Invalid to_field was passed to admin view via URL query string\"\"\"\n+    pass\n\ndiff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 192d28add6..7dd2430ced 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -11,6 +11,7 @@ from django.contrib.admin import widgets, helpers\n from django.contrib.admin import validation\n from django.contrib.admin.checks import (BaseModelAdminChecks, ModelAdminChecks,\n     InlineModelAdminChecks)\n+from django.contrib.admin.exceptions import DisallowedModelAdminToField\n from django.contrib.admin.utils import (quote, unquote, flatten_fieldsets,\n     get_deleted_objects, model_format_dict, NestedObjects,\n     lookup_needs_distinct)\n@@ -434,6 +435,24 @@ class BaseModelAdmin(six.with_metaclass(RenameBaseModelAdminMethods)):\n                 valid_lookups.append(filter_item)\n         return clean_lookup in valid_lookups\n \n+    def to_field_allowed(self, request, to_field):\n+        opts = self.model._meta\n+\n+        try:\n+            field = opts.get_field(to_field)\n+        except FieldDoesNotExist:\n+            return False\n+\n+        # Make sure at least one of the models registered for this site\n+        # references this field.\n+        registered_models = self.admin_site._registry\n+        for related_object in opts.get_all_related_objects():\n+            if (related_object.model in registered_models and\n+                    field in related_object.field.foreign_related_fields):\n+                return True\n+\n+        return False\n+\n     def has_add_permission(self, request):\n         \"\"\"\n         Returns True if the given request has permission to add an object.\n@@ -1325,6 +1344,10 @@ class ModelAdmin(BaseModelAdmin):\n     @transaction.atomic\n     def changeform_view(self, request, object_id=None, form_url='', extra_context=None):\n \n+        to_field = request.POST.get(TO_FIELD_VAR, request.GET.get(TO_FIELD_VAR))\n+        if to_field and not self.to_field_allowed(request, to_field):\n+            raise DisallowedModelAdminToField(\"The field %s cannot be referenced.\" % to_field)\n+\n         model = self.model\n         opts = model._meta\n         add = object_id is None\n@@ -1397,8 +1420,7 @@ class ModelAdmin(BaseModelAdmin):\n             original=obj,\n             is_popup=(IS_POPUP_VAR in request.POST or\n                       IS_POPUP_VAR in request.GET),\n-            to_field=request.POST.get(TO_FIELD_VAR,\n-                                      request.GET.get(TO_FIELD_VAR)),\n+            to_field=to_field,\n             media=media,\n             inline_admin_formsets=inline_formsets,\n             errors=helpers.AdminErrorList(form, formsets),\n\ndiff --git a/django/contrib/admin/views/main.py b/django/contrib/admin/views/main.py\nindex 15f5c57206..f35ac34c4f 100644\n--- a/django/contrib/admin/views/main.py\n+++ b/django/contrib/admin/views/main.py\n@@ -14,7 +14,9 @@ from django.utils.translation import ugettext, ugettext_lazy\n from django.utils.http import urlencode\n \n from django.contrib.admin import FieldListFilter\n-from django.contrib.admin.exceptions import DisallowedModelAdminLookup\n+from django.contrib.admin.exceptions import (\n+    DisallowedModelAdminLookup, DisallowedModelAdminToField,\n+)\n from django.contrib.admin.options import IncorrectLookupParameters, IS_POPUP_VAR, TO_FIELD_VAR\n from django.contrib.admin.utils import (quote, get_fields_from_path,\n     lookup_needs_distinct, prepare_lookup_value)\n@@ -89,7 +91,10 @@ class ChangeList(six.with_metaclass(RenameChangeListMethods)):\n             self.page_num = 0\n         self.show_all = ALL_VAR in request.GET\n         self.is_popup = _is_changelist_popup(request)\n-        self.to_field = request.GET.get(TO_FIELD_VAR)\n+        to_field = request.GET.get(TO_FIELD_VAR)\n+        if to_field and not model_admin.to_field_allowed(request, to_field):\n+            raise DisallowedModelAdminToField(\"The field %s cannot be referenced.\" % to_field)\n+        self.to_field = to_field\n         self.params = dict(request.GET.items())\n         if PAGE_VAR in self.params:\n             del self.params[PAGE_VAR]\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9c56e7bd41..cf5d22ebd9 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -18,6 +18,7 @@ from django.contrib.auth import get_permission_codename\n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.helpers import ACTION_CHECKBOX_NAME\n from django.contrib.admin.models import LogEntry, DELETION\n+from django.contrib.admin.options import TO_FIELD_VAR\n from django.contrib.admin.templatetags.admin_static import static\n from django.contrib.admin.templatetags.admin_urls import add_preserved_filters\n from django.contrib.admin.tests import AdminSeleniumWebDriverTestCase\n@@ -599,6 +600,36 @@ class AdminViewBasicTest(AdminViewBasicTestCase):\n         response = self.client.get(\"/test_admin/admin/admin_views/workhour/?employee__person_ptr__exact=%d\" % e1.pk)\n         self.assertEqual(response.status_code, 200)\n \n+    def test_disallowed_to_field(self):\n+        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n+            response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'missing_field'})\n+            self.assertEqual(response.status_code, 400)\n+            self.assertEqual(len(calls), 1)\n+\n+        # Specifying a field that is not refered by any other model registered\n+        # to this admin site should raise an exception.\n+        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n+            response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'name'})\n+            self.assertEqual(response.status_code, 400)\n+            self.assertEqual(len(calls), 1)\n+\n+        # Specifying a field referenced by another model should be allowed.\n+        response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'id'})\n+        self.assertEqual(response.status_code, 200)\n+\n+        # We also want to prevent the add and change view from leaking a\n+        # disallowed field value.\n+        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n+            response = self.client.post(\"/test_admin/admin/admin_views/section/add/\", {TO_FIELD_VAR: 'name'})\n+            self.assertEqual(response.status_code, 400)\n+            self.assertEqual(len(calls), 1)\n+\n+        section = Section.objects.create()\n+        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n+            response = self.client.post(\"/test_admin/admin/admin_views/section/%d/\" % section.pk, {TO_FIELD_VAR: 'name'})\n+            self.assertEqual(response.status_code, 400)\n+            self.assertEqual(len(calls), 1)\n+\n     def test_allowed_filtering_15103(self):\n         \"\"\"\n         Regressions test for ticket 15103 - filtering on fields defined in a\n@@ -2310,10 +2341,9 @@ class AdminSearchTest(TestCase):\n         \"\"\"Ensure that the to_field GET parameter is preserved when a search\n         is performed. Refs #10918.\n         \"\"\"\n-        from django.contrib.admin.views.main import TO_FIELD_VAR\n-        response = self.client.get('/test_admin/admin/auth/user/?q=joe&%s=username' % TO_FIELD_VAR)\n+        response = self.client.get('/test_admin/admin/auth/user/?q=joe&%s=id' % TO_FIELD_VAR)\n         self.assertContains(response, \"\\n1 user\\n\")\n-        self.assertContains(response, '<input type=\"hidden\" name=\"_to_field\" value=\"username\"/>', html=True)\n+        self.assertContains(response, '<input type=\"hidden\" name=\"%s\" value=\"id\"/>' % TO_FIELD_VAR, html=True)\n \n     def test_exact_matches(self):\n         response = self.client.get('/test_admin/admin/admin_views/recommendation/?q=bar')\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "logical and structural changes", "source_commit": "2b31342cdf14fc20e07c43d258f1e7334ad664a6", "source_date": "Wed Aug 20 14:42:48 2014 -0400", "source_tag": "1.7", "target_commit": "f7c494f2506250b8cb5923714360a3642ed63e0f", "target_date": "Wed Aug 20 11:43:43 2014 -0400", "target_tag": "1.6.6", "FAIL TO PASS": ["admin_views.tests.AdminViewBasicTest.test_disallowed_to_field"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_617", "original_commit_message": "[1.7.x] Prevented data leakage in contrib.admin via query string manipulation.\nThis is a security fix. Disclosure following shortly.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/contrib/admin/exceptions.py b/django/contrib/admin/exceptions.py\nindex 2e094c6da1..f619bc2252 100644\n--- a/django/contrib/admin/exceptions.py\n+++ b/django/contrib/admin/exceptions.py\n@@ -4,3 +4,8 @@ from django.core.exceptions import SuspiciousOperation\n class DisallowedModelAdminLookup(SuspiciousOperation):\n     \"\"\"Invalid filter was passed to admin view via URL querystring\"\"\"\n     pass\n+\n+\n+class DisallowedModelAdminToField(SuspiciousOperation):\n+    \"\"\"Invalid to_field was passed to admin view via URL query string\"\"\"\n+    pass\n\ndiff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 192d28add6..7dd2430ced 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -11,6 +11,7 @@ from django.contrib.admin import widgets, helpers\n from django.contrib.admin import validation\n from django.contrib.admin.checks import (BaseModelAdminChecks, ModelAdminChecks,\n     InlineModelAdminChecks)\n+from django.contrib.admin.exceptions import DisallowedModelAdminToField\n from django.contrib.admin.utils import (quote, unquote, flatten_fieldsets,\n     get_deleted_objects, model_format_dict, NestedObjects,\n     lookup_needs_distinct)\n@@ -434,6 +435,24 @@ class BaseModelAdmin(six.with_metaclass(RenameBaseModelAdminMethods)):\n                 valid_lookups.append(filter_item)\n         return clean_lookup in valid_lookups\n \n+    def to_field_allowed(self, request, to_field):\n+        opts = self.model._meta\n+\n+        try:\n+            field = opts.get_field(to_field)\n+        except FieldDoesNotExist:\n+            return False\n+\n+        # Make sure at least one of the models registered for this site\n+        # references this field.\n+        registered_models = self.admin_site._registry\n+        for related_object in opts.get_all_related_objects():\n+            if (related_object.model in registered_models and\n+                    field in related_object.field.foreign_related_fields):\n+                return True\n+\n+        return False\n+\n     def has_add_permission(self, request):\n         \"\"\"\n         Returns True if the given request has permission to add an object.\n@@ -1325,6 +1344,10 @@ class ModelAdmin(BaseModelAdmin):\n     @transaction.atomic\n     def changeform_view(self, request, object_id=None, form_url='', extra_context=None):\n \n+        to_field = request.POST.get(TO_FIELD_VAR, request.GET.get(TO_FIELD_VAR))\n+        if to_field and not self.to_field_allowed(request, to_field):\n+            raise DisallowedModelAdminToField(\"The field %s cannot be referenced.\" % to_field)\n+\n         model = self.model\n         opts = model._meta\n         add = object_id is None\n@@ -1397,8 +1420,7 @@ class ModelAdmin(BaseModelAdmin):\n             original=obj,\n             is_popup=(IS_POPUP_VAR in request.POST or\n                       IS_POPUP_VAR in request.GET),\n-            to_field=request.POST.get(TO_FIELD_VAR,\n-                                      request.GET.get(TO_FIELD_VAR)),\n+            to_field=to_field,\n             media=media,\n             inline_admin_formsets=inline_formsets,\n             errors=helpers.AdminErrorList(form, formsets),\n\ndiff --git a/django/contrib/admin/views/main.py b/django/contrib/admin/views/main.py\nindex 15f5c57206..f35ac34c4f 100644\n--- a/django/contrib/admin/views/main.py\n+++ b/django/contrib/admin/views/main.py\n@@ -14,7 +14,9 @@ from django.utils.translation import ugettext, ugettext_lazy\n from django.utils.http import urlencode\n \n from django.contrib.admin import FieldListFilter\n-from django.contrib.admin.exceptions import DisallowedModelAdminLookup\n+from django.contrib.admin.exceptions import (\n+    DisallowedModelAdminLookup, DisallowedModelAdminToField,\n+)\n from django.contrib.admin.options import IncorrectLookupParameters, IS_POPUP_VAR, TO_FIELD_VAR\n from django.contrib.admin.utils import (quote, get_fields_from_path,\n     lookup_needs_distinct, prepare_lookup_value)\n@@ -89,7 +91,10 @@ class ChangeList(six.with_metaclass(RenameChangeListMethods)):\n             self.page_num = 0\n         self.show_all = ALL_VAR in request.GET\n         self.is_popup = _is_changelist_popup(request)\n-        self.to_field = request.GET.get(TO_FIELD_VAR)\n+        to_field = request.GET.get(TO_FIELD_VAR)\n+        if to_field and not model_admin.to_field_allowed(request, to_field):\n+            raise DisallowedModelAdminToField(\"The field %s cannot be referenced.\" % to_field)\n+        self.to_field = to_field\n         self.params = dict(request.GET.items())\n         if PAGE_VAR in self.params:\n             del self.params[PAGE_VAR]\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9c56e7bd41..cf5d22ebd9 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -18,6 +18,7 @@ from django.contrib.auth import get_permission_codename\n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.helpers import ACTION_CHECKBOX_NAME\n from django.contrib.admin.models import LogEntry, DELETION\n+from django.contrib.admin.options import TO_FIELD_VAR\n from django.contrib.admin.templatetags.admin_static import static\n from django.contrib.admin.templatetags.admin_urls import add_preserved_filters\n from django.contrib.admin.tests import AdminSeleniumWebDriverTestCase\n@@ -599,6 +600,36 @@ class AdminViewBasicTest(AdminViewBasicTestCase):\n         response = self.client.get(\"/test_admin/admin/admin_views/workhour/?employee__person_ptr__exact=%d\" % e1.pk)\n         self.assertEqual(response.status_code, 200)\n \n+    def test_disallowed_to_field(self):\n+        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n+            response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'missing_field'})\n+            self.assertEqual(response.status_code, 400)\n+            self.assertEqual(len(calls), 1)\n+\n+        # Specifying a field that is not refered by any other model registered\n+        # to this admin site should raise an exception.\n+        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n+            response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'name'})\n+            self.assertEqual(response.status_code, 400)\n+            self.assertEqual(len(calls), 1)\n+\n+        # Specifying a field referenced by another model should be allowed.\n+        response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'id'})\n+        self.assertEqual(response.status_code, 200)\n+\n+        # We also want to prevent the add and change view from leaking a\n+        # disallowed field value.\n+        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n+            response = self.client.post(\"/test_admin/admin/admin_views/section/add/\", {TO_FIELD_VAR: 'name'})\n+            self.assertEqual(response.status_code, 400)\n+            self.assertEqual(len(calls), 1)\n+\n+        section = Section.objects.create()\n+        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n+            response = self.client.post(\"/test_admin/admin/admin_views/section/%d/\" % section.pk, {TO_FIELD_VAR: 'name'})\n+            self.assertEqual(response.status_code, 400)\n+            self.assertEqual(len(calls), 1)\n+\n     def test_allowed_filtering_15103(self):\n         \"\"\"\n         Regressions test for ticket 15103 - filtering on fields defined in a\n@@ -2310,10 +2341,9 @@ class AdminSearchTest(TestCase):\n         \"\"\"Ensure that the to_field GET parameter is preserved when a search\n         is performed. Refs #10918.\n         \"\"\"\n-        from django.contrib.admin.views.main import TO_FIELD_VAR\n-        response = self.client.get('/test_admin/admin/auth/user/?q=joe&%s=username' % TO_FIELD_VAR)\n+        response = self.client.get('/test_admin/admin/auth/user/?q=joe&%s=id' % TO_FIELD_VAR)\n         self.assertContains(response, \"\\n1 user\\n\")\n-        self.assertContains(response, '<input type=\"hidden\" name=\"_to_field\" value=\"username\"/>', html=True)\n+        self.assertContains(response, '<input type=\"hidden\" name=\"%s\" value=\"id\"/>' % TO_FIELD_VAR, html=True)\n \n     def test_exact_matches(self):\n         response = self.client.get('/test_admin/admin/admin_views/recommendation/?q=bar')\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "logical and structural changes", "source_commit": "2b31342cdf14fc20e07c43d258f1e7334ad664a6", "source_date": "Wed Aug 20 14:42:48 2014 -0400", "source_tag": "1.7", "target_commit": "2a446c896e7c814661fb9c4f212b071b2a7fa446", "target_date": "Wed Aug 20 11:44:02 2014 -0400", "target_tag": "1.5.9", "FAIL TO PASS": ["regressiontests.admin_views.tests.CustomModelAdminTest.test_disallowed_to_field", "regressiontests.admin_views.tests.AdminViewBasicTest.test_disallowed_to_field"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_618", "original_commit_message": "[1.7.x] Prevented data leakage in contrib.admin via query string manipulation.\nThis is a security fix. Disclosure following shortly.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/contrib/admin/exceptions.py b/django/contrib/admin/exceptions.py\nindex 2e094c6da1..f619bc2252 100644\n--- a/django/contrib/admin/exceptions.py\n+++ b/django/contrib/admin/exceptions.py\n@@ -4,3 +4,8 @@ from django.core.exceptions import SuspiciousOperation\n class DisallowedModelAdminLookup(SuspiciousOperation):\n     \"\"\"Invalid filter was passed to admin view via URL querystring\"\"\"\n     pass\n+\n+\n+class DisallowedModelAdminToField(SuspiciousOperation):\n+    \"\"\"Invalid to_field was passed to admin view via URL query string\"\"\"\n+    pass\n\ndiff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 192d28add6..7dd2430ced 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -11,6 +11,7 @@ from django.contrib.admin import widgets, helpers\n from django.contrib.admin import validation\n from django.contrib.admin.checks import (BaseModelAdminChecks, ModelAdminChecks,\n     InlineModelAdminChecks)\n+from django.contrib.admin.exceptions import DisallowedModelAdminToField\n from django.contrib.admin.utils import (quote, unquote, flatten_fieldsets,\n     get_deleted_objects, model_format_dict, NestedObjects,\n     lookup_needs_distinct)\n@@ -434,6 +435,24 @@ class BaseModelAdmin(six.with_metaclass(RenameBaseModelAdminMethods)):\n                 valid_lookups.append(filter_item)\n         return clean_lookup in valid_lookups\n \n+    def to_field_allowed(self, request, to_field):\n+        opts = self.model._meta\n+\n+        try:\n+            field = opts.get_field(to_field)\n+        except FieldDoesNotExist:\n+            return False\n+\n+        # Make sure at least one of the models registered for this site\n+        # references this field.\n+        registered_models = self.admin_site._registry\n+        for related_object in opts.get_all_related_objects():\n+            if (related_object.model in registered_models and\n+                    field in related_object.field.foreign_related_fields):\n+                return True\n+\n+        return False\n+\n     def has_add_permission(self, request):\n         \"\"\"\n         Returns True if the given request has permission to add an object.\n@@ -1325,6 +1344,10 @@ class ModelAdmin(BaseModelAdmin):\n     @transaction.atomic\n     def changeform_view(self, request, object_id=None, form_url='', extra_context=None):\n \n+        to_field = request.POST.get(TO_FIELD_VAR, request.GET.get(TO_FIELD_VAR))\n+        if to_field and not self.to_field_allowed(request, to_field):\n+            raise DisallowedModelAdminToField(\"The field %s cannot be referenced.\" % to_field)\n+\n         model = self.model\n         opts = model._meta\n         add = object_id is None\n@@ -1397,8 +1420,7 @@ class ModelAdmin(BaseModelAdmin):\n             original=obj,\n             is_popup=(IS_POPUP_VAR in request.POST or\n                       IS_POPUP_VAR in request.GET),\n-            to_field=request.POST.get(TO_FIELD_VAR,\n-                                      request.GET.get(TO_FIELD_VAR)),\n+            to_field=to_field,\n             media=media,\n             inline_admin_formsets=inline_formsets,\n             errors=helpers.AdminErrorList(form, formsets),\n\ndiff --git a/django/contrib/admin/views/main.py b/django/contrib/admin/views/main.py\nindex 15f5c57206..f35ac34c4f 100644\n--- a/django/contrib/admin/views/main.py\n+++ b/django/contrib/admin/views/main.py\n@@ -14,7 +14,9 @@ from django.utils.translation import ugettext, ugettext_lazy\n from django.utils.http import urlencode\n \n from django.contrib.admin import FieldListFilter\n-from django.contrib.admin.exceptions import DisallowedModelAdminLookup\n+from django.contrib.admin.exceptions import (\n+    DisallowedModelAdminLookup, DisallowedModelAdminToField,\n+)\n from django.contrib.admin.options import IncorrectLookupParameters, IS_POPUP_VAR, TO_FIELD_VAR\n from django.contrib.admin.utils import (quote, get_fields_from_path,\n     lookup_needs_distinct, prepare_lookup_value)\n@@ -89,7 +91,10 @@ class ChangeList(six.with_metaclass(RenameChangeListMethods)):\n             self.page_num = 0\n         self.show_all = ALL_VAR in request.GET\n         self.is_popup = _is_changelist_popup(request)\n-        self.to_field = request.GET.get(TO_FIELD_VAR)\n+        to_field = request.GET.get(TO_FIELD_VAR)\n+        if to_field and not model_admin.to_field_allowed(request, to_field):\n+            raise DisallowedModelAdminToField(\"The field %s cannot be referenced.\" % to_field)\n+        self.to_field = to_field\n         self.params = dict(request.GET.items())\n         if PAGE_VAR in self.params:\n             del self.params[PAGE_VAR]\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9c56e7bd41..cf5d22ebd9 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -18,6 +18,7 @@ from django.contrib.auth import get_permission_codename\n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.helpers import ACTION_CHECKBOX_NAME\n from django.contrib.admin.models import LogEntry, DELETION\n+from django.contrib.admin.options import TO_FIELD_VAR\n from django.contrib.admin.templatetags.admin_static import static\n from django.contrib.admin.templatetags.admin_urls import add_preserved_filters\n from django.contrib.admin.tests import AdminSeleniumWebDriverTestCase\n@@ -599,6 +600,36 @@ class AdminViewBasicTest(AdminViewBasicTestCase):\n         response = self.client.get(\"/test_admin/admin/admin_views/workhour/?employee__person_ptr__exact=%d\" % e1.pk)\n         self.assertEqual(response.status_code, 200)\n \n+    def test_disallowed_to_field(self):\n+        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n+            response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'missing_field'})\n+            self.assertEqual(response.status_code, 400)\n+            self.assertEqual(len(calls), 1)\n+\n+        # Specifying a field that is not refered by any other model registered\n+        # to this admin site should raise an exception.\n+        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n+            response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'name'})\n+            self.assertEqual(response.status_code, 400)\n+            self.assertEqual(len(calls), 1)\n+\n+        # Specifying a field referenced by another model should be allowed.\n+        response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'id'})\n+        self.assertEqual(response.status_code, 200)\n+\n+        # We also want to prevent the add and change view from leaking a\n+        # disallowed field value.\n+        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n+            response = self.client.post(\"/test_admin/admin/admin_views/section/add/\", {TO_FIELD_VAR: 'name'})\n+            self.assertEqual(response.status_code, 400)\n+            self.assertEqual(len(calls), 1)\n+\n+        section = Section.objects.create()\n+        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n+            response = self.client.post(\"/test_admin/admin/admin_views/section/%d/\" % section.pk, {TO_FIELD_VAR: 'name'})\n+            self.assertEqual(response.status_code, 400)\n+            self.assertEqual(len(calls), 1)\n+\n     def test_allowed_filtering_15103(self):\n         \"\"\"\n         Regressions test for ticket 15103 - filtering on fields defined in a\n@@ -2310,10 +2341,9 @@ class AdminSearchTest(TestCase):\n         \"\"\"Ensure that the to_field GET parameter is preserved when a search\n         is performed. Refs #10918.\n         \"\"\"\n-        from django.contrib.admin.views.main import TO_FIELD_VAR\n-        response = self.client.get('/test_admin/admin/auth/user/?q=joe&%s=username' % TO_FIELD_VAR)\n+        response = self.client.get('/test_admin/admin/auth/user/?q=joe&%s=id' % TO_FIELD_VAR)\n         self.assertContains(response, \"\\n1 user\\n\")\n-        self.assertContains(response, '<input type=\"hidden\" name=\"_to_field\" value=\"username\"/>', html=True)\n+        self.assertContains(response, '<input type=\"hidden\" name=\"%s\" value=\"id\"/>' % TO_FIELD_VAR, html=True)\n \n     def test_exact_matches(self):\n         response = self.client.get('/test_admin/admin/admin_views/recommendation/?q=bar')\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "logical and structural changes", "source_commit": "2b31342cdf14fc20e07c43d258f1e7334ad664a6", "source_date": "Wed Aug 20 14:42:48 2014 -0400", "source_tag": "1.7", "target_commit": "027bd348642007617518379f8b02546abacaa6e0", "target_date": "Mon Aug 11 16:01:41 2014 -0400", "target_tag": "1.4.14", "FAIL TO PASS": ["regressiontests.admin_views.tests.CustomModelAdminTest.test_disallowed_to_field", "regressiontests.admin_views.tests.AdminViewBasicTest.test_disallowed_to_field"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_620", "original_commit_message": "[3.2.x] Fixed CVE-2021-31542 -- Tightened path & file name sanitation in file uploads.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex 16f9d4e27b..3e68853b59 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -1,4 +1,5 @@\n import os\n+import pathlib\n from datetime import datetime\n from urllib.parse import urljoin\n \n@@ -6,6 +7,7 @@ from django.conf import settings\n from django.core.exceptions import SuspiciousFileOperation\n from django.core.files import File, locks\n from django.core.files.move import file_move_safe\n+from django.core.files.utils import validate_file_name\n from django.core.signals import setting_changed\n from django.utils import timezone\n from django.utils._os import safe_join\n@@ -74,6 +76,9 @@ class Storage:\n         available for new content to be written to.\n         \"\"\"\n         dir_name, file_name = os.path.split(name)\n+        if '..' in pathlib.PurePath(dir_name).parts:\n+            raise SuspiciousFileOperation(\"Detected path traversal attempt in '%s'\" % dir_name)\n+        validate_file_name(file_name)\n         file_root, file_ext = os.path.splitext(file_name)\n         # If the filename already exists, generate an alternative filename\n         # until it doesn't exist.\n@@ -105,6 +110,8 @@ class Storage:\n         \"\"\"\n         # `filename` may include a path as returned by FileField.upload_to.\n         dirname, filename = os.path.split(filename)\n+        if '..' in pathlib.PurePath(dirname).parts:\n+            raise SuspiciousFileOperation(\"Detected path traversal attempt in '%s'\" % dirname)\n         return os.path.normpath(os.path.join(dirname, self.get_valid_name(filename)))\n \n     def path(self, name):\n\ndiff --git a/django/core/files/uploadedfile.py b/django/core/files/uploadedfile.py\nindex 48007b8682..f452bcd9a4 100644\n--- a/django/core/files/uploadedfile.py\n+++ b/django/core/files/uploadedfile.py\n@@ -8,6 +8,7 @@ from io import BytesIO\n from django.conf import settings\n from django.core.files import temp as tempfile\n from django.core.files.base import File\n+from django.core.files.utils import validate_file_name\n \n __all__ = ('UploadedFile', 'TemporaryUploadedFile', 'InMemoryUploadedFile',\n            'SimpleUploadedFile')\n@@ -47,6 +48,8 @@ class UploadedFile(File):\n                 ext = ext[:255]\n                 name = name[:255 - len(ext)] + ext\n \n+            name = validate_file_name(name)\n+\n         self._name = name\n \n     name = property(_get_name, _set_name)\n\ndiff --git a/django/core/files/utils.py b/django/core/files/utils.py\nindex de89607175..f83cb1a3cf 100644\n--- a/django/core/files/utils.py\n+++ b/django/core/files/utils.py\n@@ -1,3 +1,19 @@\n+import os\n+\n+from django.core.exceptions import SuspiciousFileOperation\n+\n+\n+def validate_file_name(name):\n+    if name != os.path.basename(name):\n+        raise SuspiciousFileOperation(\"File name '%s' includes path elements\" % name)\n+\n+    # Remove potentially dangerous names\n+    if name in {'', '.', '..'}:\n+        raise SuspiciousFileOperation(\"Could not derive file name from '%s'\" % name)\n+\n+    return name\n+\n+\n class FileProxyMixin:\n     \"\"\"\n     A mixin class used to forward file methods to an underlaying file\n\ndiff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex d410771cf3..a2f972489f 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -6,6 +6,7 @@ from django.core import checks\n from django.core.files.base import File\n from django.core.files.images import ImageFile\n from django.core.files.storage import Storage, default_storage\n+from django.core.files.utils import validate_file_name\n from django.db.models import signals\n from django.db.models.fields import Field\n from django.db.models.query_utils import DeferredAttribute\n@@ -312,6 +313,7 @@ class FileField(Field):\n         Until the storage layer, all file paths are expected to be Unix style\n         (with forward slashes).\n         \"\"\"\n+        filename = validate_file_name(filename)\n         if callable(self.upload_to):\n             filename = self.upload_to(instance, filename)\n         else:\n\ndiff --git a/django/http/multipartparser.py b/django/http/multipartparser.py\nindex 180a533bb6..f464caa1b4 100644\n--- a/django/http/multipartparser.py\n+++ b/django/http/multipartparser.py\n@@ -9,7 +9,6 @@ import binascii\n import cgi\n import collections\n import html\n-import os\n from urllib.parse import unquote\n \n from django.conf import settings\n@@ -306,10 +305,25 @@ class MultiPartParser:\n                 break\n \n     def sanitize_file_name(self, file_name):\n+        \"\"\"\n+        Sanitize the filename of an upload.\n+\n+        Remove all possible path separators, even though that might remove more\n+        than actually required by the target system. Filenames that could\n+        potentially cause problems (current/parent dir) are also discarded.\n+\n+        It should be noted that this function could still return a \"filepath\"\n+        like \"C:some_file.txt\" which is handled later on by the storage layer.\n+        So while this function does sanitize filenames to some extent, the\n+        resulting filename should still be considered as untrusted user input.\n+        \"\"\"\n         file_name = html.unescape(file_name)\n-        # Cleanup Windows-style path separators.\n-        file_name = file_name[file_name.rfind('\\\\') + 1:].strip()\n-        return os.path.basename(file_name)\n+        file_name = file_name.rsplit('/')[-1]\n+        file_name = file_name.rsplit('\\\\')[-1]\n+\n+        if file_name in {'', '.', '..'}:\n+            return None\n+        return file_name\n \n     IE_sanitize = sanitize_file_name\n \n\ndiff --git a/django/utils/text.py b/django/utils/text.py\nindex 4d77ce7f41..baa44f279e 100644\n--- a/django/utils/text.py\n+++ b/django/utils/text.py\n@@ -5,6 +5,7 @@ import warnings\n from gzip import GzipFile\n from io import BytesIO\n \n+from django.core.exceptions import SuspiciousFileOperation\n from django.utils.deprecation import RemovedInDjango40Warning\n from django.utils.functional import SimpleLazyObject, keep_lazy_text, lazy\n from django.utils.regex_helper import _lazy_re_compile\n@@ -219,7 +220,7 @@ class Truncator(SimpleLazyObject):\n \n \n @keep_lazy_text\n-def get_valid_filename(s):\n+def get_valid_filename(name):\n     \"\"\"\n     Return the given string converted to a string that can be used for a clean\n     filename. Remove leading and trailing spaces; convert other spaces to\n@@ -228,8 +229,11 @@ def get_valid_filename(s):\n     >>> get_valid_filename(\"john's portrait in 2004.jpg\")\n     'johns_portrait_in_2004.jpg'\n     \"\"\"\n-    s = str(s).strip().replace(' ', '_')\n-    return re.sub(r'(?u)[^-\\w.]', '', s)\n+    s = str(name).strip().replace(' ', '_')\n+    s = re.sub(r'(?u)[^-\\w.]', '', s)\n+    if s in {'', '.', '..'}:\n+        raise SuspiciousFileOperation(\"Could not derive file name from '%s'\" % name)\n+    return s\n \n \n @keep_lazy_text\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/file_storage/test_generate_filename.py b/tests/file_storage/test_generate_filename.py\nindex b4222f4121..9f54f6921e 100644\n--- a/tests/file_storage/test_generate_filename.py\n+++ b/tests/file_storage/test_generate_filename.py\n@@ -1,7 +1,8 @@\n import os\n \n+from django.core.exceptions import SuspiciousFileOperation\n from django.core.files.base import ContentFile\n-from django.core.files.storage import Storage\n+from django.core.files.storage import FileSystemStorage, Storage\n from django.db.models import FileField\n from django.test import SimpleTestCase\n \n@@ -36,6 +37,44 @@ class AWSS3Storage(Storage):\n \n \n class GenerateFilenameStorageTests(SimpleTestCase):\n+    def test_storage_dangerous_paths(self):\n+        candidates = [\n+            ('/tmp/..', '..'),\n+            ('/tmp/.', '.'),\n+            ('', ''),\n+        ]\n+        s = FileSystemStorage()\n+        msg = \"Could not derive file name from '%s'\"\n+        for file_name, base_name in candidates:\n+            with self.subTest(file_name=file_name):\n+                with self.assertRaisesMessage(SuspiciousFileOperation, msg % base_name):\n+                    s.get_available_name(file_name)\n+                with self.assertRaisesMessage(SuspiciousFileOperation, msg % base_name):\n+                    s.generate_filename(file_name)\n+\n+    def test_storage_dangerous_paths_dir_name(self):\n+        file_name = '/tmp/../path'\n+        s = FileSystemStorage()\n+        msg = \"Detected path traversal attempt in '/tmp/..'\"\n+        with self.assertRaisesMessage(SuspiciousFileOperation, msg):\n+            s.get_available_name(file_name)\n+        with self.assertRaisesMessage(SuspiciousFileOperation, msg):\n+            s.generate_filename(file_name)\n+\n+    def test_filefield_dangerous_filename(self):\n+        candidates = ['..', '.', '', '???', '$.$.$']\n+        f = FileField(upload_to='some/folder/')\n+        msg = \"Could not derive file name from '%s'\"\n+        for file_name in candidates:\n+            with self.subTest(file_name=file_name):\n+                with self.assertRaisesMessage(SuspiciousFileOperation, msg % file_name):\n+                    f.generate_filename(None, file_name)\n+\n+    def test_filefield_dangerous_filename_dir(self):\n+        f = FileField(upload_to='some/folder/')\n+        msg = \"File name '/tmp/path' includes path elements\"\n+        with self.assertRaisesMessage(SuspiciousFileOperation, msg):\n+            f.generate_filename(None, '/tmp/path')\n \n     def test_filefield_generate_filename(self):\n         f = FileField(upload_to='some/folder/')\n\ndiff --git a/tests/file_uploads/tests.py b/tests/file_uploads/tests.py\nindex e8f91e2fa0..7bc8d41dac 100644\n--- a/tests/file_uploads/tests.py\n+++ b/tests/file_uploads/tests.py\n@@ -9,8 +9,9 @@ from io import BytesIO, StringIO\n from unittest import mock\n from urllib.parse import quote\n \n+from django.core.exceptions import SuspiciousFileOperation\n from django.core.files import temp as tempfile\n-from django.core.files.uploadedfile import SimpleUploadedFile\n+from django.core.files.uploadedfile import SimpleUploadedFile, UploadedFile\n from django.http.multipartparser import (\n     FILE, MultiPartParser, MultiPartParserError, Parser, parse_header,\n )\n@@ -39,6 +40,16 @@ CANDIDATE_TRAVERSAL_FILE_NAMES = [\n     '..&sol;hax0rd.txt',        # HTML entities.\n ]\n \n+CANDIDATE_INVALID_FILE_NAMES = [\n+    '/tmp/',        # Directory, *nix-style.\n+    'c:\\\\tmp\\\\',    # Directory, win-style.\n+    '/tmp/.',       # Directory dot, *nix-style.\n+    'c:\\\\tmp\\\\.',   # Directory dot, *nix-style.\n+    '/tmp/..',      # Parent directory, *nix-style.\n+    'c:\\\\tmp\\\\..',  # Parent directory, win-style.\n+    '',             # Empty filename.\n+]\n+\n \n @override_settings(MEDIA_ROOT=MEDIA_ROOT, ROOT_URLCONF='file_uploads.urls', MIDDLEWARE=[])\n class FileUploadTests(TestCase):\n@@ -53,6 +64,22 @@ class FileUploadTests(TestCase):\n         shutil.rmtree(MEDIA_ROOT)\n         super().tearDownClass()\n \n+    def test_upload_name_is_validated(self):\n+        candidates = [\n+            '/tmp/',\n+            '/tmp/..',\n+            '/tmp/.',\n+        ]\n+        if sys.platform == 'win32':\n+            candidates.extend([\n+                'c:\\\\tmp\\\\',\n+                'c:\\\\tmp\\\\..',\n+                'c:\\\\tmp\\\\.',\n+            ])\n+        for file_name in candidates:\n+            with self.subTest(file_name=file_name):\n+                self.assertRaises(SuspiciousFileOperation, UploadedFile, name=file_name)\n+\n     def test_simple_upload(self):\n         with open(__file__, 'rb') as fp:\n             post_data = {\n@@ -718,6 +745,15 @@ class MultiParserTests(SimpleTestCase):\n             with self.subTest(file_name=file_name):\n                 self.assertEqual(parser.sanitize_file_name(file_name), 'hax0rd.txt')\n \n+    def test_sanitize_invalid_file_name(self):\n+        parser = MultiPartParser({\n+            'CONTENT_TYPE': 'multipart/form-data; boundary=_foo',\n+            'CONTENT_LENGTH': '1',\n+        }, StringIO('x'), [], 'utf-8')\n+        for file_name in CANDIDATE_INVALID_FILE_NAMES:\n+            with self.subTest(file_name=file_name):\n+                self.assertIsNone(parser.sanitize_file_name(file_name))\n+\n     def test_rfc2231_parsing(self):\n         test_data = (\n             (b\"Content-Type: application/x-stuff; title*=us-ascii'en-us'This%20is%20%2A%2A%2Afun%2A%2A%2A\",\n\ndiff --git a/tests/forms_tests/field_tests/test_filefield.py b/tests/forms_tests/field_tests/test_filefield.py\nindex 261d9f4ca9..2db106e4a0 100644\n--- a/tests/forms_tests/field_tests/test_filefield.py\n+++ b/tests/forms_tests/field_tests/test_filefield.py\n@@ -21,10 +21,12 @@ class FileFieldTest(SimpleTestCase):\n             f.clean(None, '')\n         self.assertEqual('files/test2.pdf', f.clean(None, 'files/test2.pdf'))\n         no_file_msg = \"'No file was submitted. Check the encoding type on the form.'\"\n+        file = SimpleUploadedFile(None, b'')\n+        file._name = ''\n         with self.assertRaisesMessage(ValidationError, no_file_msg):\n-            f.clean(SimpleUploadedFile('', b''))\n+            f.clean(file)\n         with self.assertRaisesMessage(ValidationError, no_file_msg):\n-            f.clean(SimpleUploadedFile('', b''), '')\n+            f.clean(file, '')\n         self.assertEqual('files/test3.pdf', f.clean(None, 'files/test3.pdf'))\n         with self.assertRaisesMessage(ValidationError, no_file_msg):\n             f.clean('some content that is not a file')\n\ndiff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex 1b6bfc0b8e..d2a94fcdab 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -1,6 +1,7 @@\n import json\n import sys\n \n+from django.core.exceptions import SuspiciousFileOperation\n from django.test import SimpleTestCase, ignore_warnings\n from django.utils import text\n from django.utils.deprecation import RemovedInDjango40Warning\n@@ -255,6 +256,13 @@ class TestUtilsText(SimpleTestCase):\n         filename = \"^&'@{}[],$=!-#()%+~_123.txt\"\n         self.assertEqual(text.get_valid_filename(filename), \"-_123.txt\")\n         self.assertEqual(text.get_valid_filename(lazystr(filename)), \"-_123.txt\")\n+        msg = \"Could not derive file name from '???'\"\n+        with self.assertRaisesMessage(SuspiciousFileOperation, msg):\n+            text.get_valid_filename('???')\n+        # After sanitizing this would yield '..'.\n+        msg = \"Could not derive file name from '$.$.$'\"\n+        with self.assertRaisesMessage(SuspiciousFileOperation, msg):\n+            text.get_valid_filename('$.$.$')\n \n     def test_compress_sequence(self):\n         data = [{'key': i} for i in range(10)]\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "c98f446c188596d4ba6de71d1b77b4a6c5c2a007", "source_date": "Tue May 4 08:43:52 2021 +0200", "source_tag": "3.2.1", "target_commit": "25d84d64122c15050a0ee739e859f22ddab5ac48", "target_date": "Tue Apr 27 19:12:15 2021 +0200", "target_tag": "3.1.9", "FAIL TO PASS": ["file_storage.test_generate_filename.GenerateFilenameStorageTests.test_storage_dangerous_paths_dir_name", "file_storage.test_generate_filename.GenerateFilenameStorageTests.test_filefield_dangerous_filename", "file_storage.test_generate_filename.GenerateFilenameStorageTests.test_storage_dangerous_paths", "file_uploads.tests.MultiParserTests.test_sanitize_invalid_file_name", "utils_tests.test_text.TestUtilsText.test_get_valid_filename", "file_uploads.tests.FileUploadTests.test_upload_name_is_validated", "file_storage.test_generate_filename.GenerateFilenameStorageTests.test_filefield_dangerous_filename_dir"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_621", "original_commit_message": "[3.2.x] Fixed CVE-2021-31542 -- Tightened path & file name sanitation in file uploads.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex 16f9d4e27b..3e68853b59 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -1,4 +1,5 @@\n import os\n+import pathlib\n from datetime import datetime\n from urllib.parse import urljoin\n \n@@ -6,6 +7,7 @@ from django.conf import settings\n from django.core.exceptions import SuspiciousFileOperation\n from django.core.files import File, locks\n from django.core.files.move import file_move_safe\n+from django.core.files.utils import validate_file_name\n from django.core.signals import setting_changed\n from django.utils import timezone\n from django.utils._os import safe_join\n@@ -74,6 +76,9 @@ class Storage:\n         available for new content to be written to.\n         \"\"\"\n         dir_name, file_name = os.path.split(name)\n+        if '..' in pathlib.PurePath(dir_name).parts:\n+            raise SuspiciousFileOperation(\"Detected path traversal attempt in '%s'\" % dir_name)\n+        validate_file_name(file_name)\n         file_root, file_ext = os.path.splitext(file_name)\n         # If the filename already exists, generate an alternative filename\n         # until it doesn't exist.\n@@ -105,6 +110,8 @@ class Storage:\n         \"\"\"\n         # `filename` may include a path as returned by FileField.upload_to.\n         dirname, filename = os.path.split(filename)\n+        if '..' in pathlib.PurePath(dirname).parts:\n+            raise SuspiciousFileOperation(\"Detected path traversal attempt in '%s'\" % dirname)\n         return os.path.normpath(os.path.join(dirname, self.get_valid_name(filename)))\n \n     def path(self, name):\n\ndiff --git a/django/core/files/uploadedfile.py b/django/core/files/uploadedfile.py\nindex 48007b8682..f452bcd9a4 100644\n--- a/django/core/files/uploadedfile.py\n+++ b/django/core/files/uploadedfile.py\n@@ -8,6 +8,7 @@ from io import BytesIO\n from django.conf import settings\n from django.core.files import temp as tempfile\n from django.core.files.base import File\n+from django.core.files.utils import validate_file_name\n \n __all__ = ('UploadedFile', 'TemporaryUploadedFile', 'InMemoryUploadedFile',\n            'SimpleUploadedFile')\n@@ -47,6 +48,8 @@ class UploadedFile(File):\n                 ext = ext[:255]\n                 name = name[:255 - len(ext)] + ext\n \n+            name = validate_file_name(name)\n+\n         self._name = name\n \n     name = property(_get_name, _set_name)\n\ndiff --git a/django/core/files/utils.py b/django/core/files/utils.py\nindex de89607175..f83cb1a3cf 100644\n--- a/django/core/files/utils.py\n+++ b/django/core/files/utils.py\n@@ -1,3 +1,19 @@\n+import os\n+\n+from django.core.exceptions import SuspiciousFileOperation\n+\n+\n+def validate_file_name(name):\n+    if name != os.path.basename(name):\n+        raise SuspiciousFileOperation(\"File name '%s' includes path elements\" % name)\n+\n+    # Remove potentially dangerous names\n+    if name in {'', '.', '..'}:\n+        raise SuspiciousFileOperation(\"Could not derive file name from '%s'\" % name)\n+\n+    return name\n+\n+\n class FileProxyMixin:\n     \"\"\"\n     A mixin class used to forward file methods to an underlaying file\n\ndiff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex d410771cf3..a2f972489f 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -6,6 +6,7 @@ from django.core import checks\n from django.core.files.base import File\n from django.core.files.images import ImageFile\n from django.core.files.storage import Storage, default_storage\n+from django.core.files.utils import validate_file_name\n from django.db.models import signals\n from django.db.models.fields import Field\n from django.db.models.query_utils import DeferredAttribute\n@@ -312,6 +313,7 @@ class FileField(Field):\n         Until the storage layer, all file paths are expected to be Unix style\n         (with forward slashes).\n         \"\"\"\n+        filename = validate_file_name(filename)\n         if callable(self.upload_to):\n             filename = self.upload_to(instance, filename)\n         else:\n\ndiff --git a/django/http/multipartparser.py b/django/http/multipartparser.py\nindex 180a533bb6..f464caa1b4 100644\n--- a/django/http/multipartparser.py\n+++ b/django/http/multipartparser.py\n@@ -9,7 +9,6 @@ import binascii\n import cgi\n import collections\n import html\n-import os\n from urllib.parse import unquote\n \n from django.conf import settings\n@@ -306,10 +305,25 @@ class MultiPartParser:\n                 break\n \n     def sanitize_file_name(self, file_name):\n+        \"\"\"\n+        Sanitize the filename of an upload.\n+\n+        Remove all possible path separators, even though that might remove more\n+        than actually required by the target system. Filenames that could\n+        potentially cause problems (current/parent dir) are also discarded.\n+\n+        It should be noted that this function could still return a \"filepath\"\n+        like \"C:some_file.txt\" which is handled later on by the storage layer.\n+        So while this function does sanitize filenames to some extent, the\n+        resulting filename should still be considered as untrusted user input.\n+        \"\"\"\n         file_name = html.unescape(file_name)\n-        # Cleanup Windows-style path separators.\n-        file_name = file_name[file_name.rfind('\\\\') + 1:].strip()\n-        return os.path.basename(file_name)\n+        file_name = file_name.rsplit('/')[-1]\n+        file_name = file_name.rsplit('\\\\')[-1]\n+\n+        if file_name in {'', '.', '..'}:\n+            return None\n+        return file_name\n \n     IE_sanitize = sanitize_file_name\n \n\ndiff --git a/django/utils/text.py b/django/utils/text.py\nindex 4d77ce7f41..baa44f279e 100644\n--- a/django/utils/text.py\n+++ b/django/utils/text.py\n@@ -5,6 +5,7 @@ import warnings\n from gzip import GzipFile\n from io import BytesIO\n \n+from django.core.exceptions import SuspiciousFileOperation\n from django.utils.deprecation import RemovedInDjango40Warning\n from django.utils.functional import SimpleLazyObject, keep_lazy_text, lazy\n from django.utils.regex_helper import _lazy_re_compile\n@@ -219,7 +220,7 @@ class Truncator(SimpleLazyObject):\n \n \n @keep_lazy_text\n-def get_valid_filename(s):\n+def get_valid_filename(name):\n     \"\"\"\n     Return the given string converted to a string that can be used for a clean\n     filename. Remove leading and trailing spaces; convert other spaces to\n@@ -228,8 +229,11 @@ def get_valid_filename(s):\n     >>> get_valid_filename(\"john's portrait in 2004.jpg\")\n     'johns_portrait_in_2004.jpg'\n     \"\"\"\n-    s = str(s).strip().replace(' ', '_')\n-    return re.sub(r'(?u)[^-\\w.]', '', s)\n+    s = str(name).strip().replace(' ', '_')\n+    s = re.sub(r'(?u)[^-\\w.]', '', s)\n+    if s in {'', '.', '..'}:\n+        raise SuspiciousFileOperation(\"Could not derive file name from '%s'\" % name)\n+    return s\n \n \n @keep_lazy_text\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/file_storage/test_generate_filename.py b/tests/file_storage/test_generate_filename.py\nindex b4222f4121..9f54f6921e 100644\n--- a/tests/file_storage/test_generate_filename.py\n+++ b/tests/file_storage/test_generate_filename.py\n@@ -1,7 +1,8 @@\n import os\n \n+from django.core.exceptions import SuspiciousFileOperation\n from django.core.files.base import ContentFile\n-from django.core.files.storage import Storage\n+from django.core.files.storage import FileSystemStorage, Storage\n from django.db.models import FileField\n from django.test import SimpleTestCase\n \n@@ -36,6 +37,44 @@ class AWSS3Storage(Storage):\n \n \n class GenerateFilenameStorageTests(SimpleTestCase):\n+    def test_storage_dangerous_paths(self):\n+        candidates = [\n+            ('/tmp/..', '..'),\n+            ('/tmp/.', '.'),\n+            ('', ''),\n+        ]\n+        s = FileSystemStorage()\n+        msg = \"Could not derive file name from '%s'\"\n+        for file_name, base_name in candidates:\n+            with self.subTest(file_name=file_name):\n+                with self.assertRaisesMessage(SuspiciousFileOperation, msg % base_name):\n+                    s.get_available_name(file_name)\n+                with self.assertRaisesMessage(SuspiciousFileOperation, msg % base_name):\n+                    s.generate_filename(file_name)\n+\n+    def test_storage_dangerous_paths_dir_name(self):\n+        file_name = '/tmp/../path'\n+        s = FileSystemStorage()\n+        msg = \"Detected path traversal attempt in '/tmp/..'\"\n+        with self.assertRaisesMessage(SuspiciousFileOperation, msg):\n+            s.get_available_name(file_name)\n+        with self.assertRaisesMessage(SuspiciousFileOperation, msg):\n+            s.generate_filename(file_name)\n+\n+    def test_filefield_dangerous_filename(self):\n+        candidates = ['..', '.', '', '???', '$.$.$']\n+        f = FileField(upload_to='some/folder/')\n+        msg = \"Could not derive file name from '%s'\"\n+        for file_name in candidates:\n+            with self.subTest(file_name=file_name):\n+                with self.assertRaisesMessage(SuspiciousFileOperation, msg % file_name):\n+                    f.generate_filename(None, file_name)\n+\n+    def test_filefield_dangerous_filename_dir(self):\n+        f = FileField(upload_to='some/folder/')\n+        msg = \"File name '/tmp/path' includes path elements\"\n+        with self.assertRaisesMessage(SuspiciousFileOperation, msg):\n+            f.generate_filename(None, '/tmp/path')\n \n     def test_filefield_generate_filename(self):\n         f = FileField(upload_to='some/folder/')\n\ndiff --git a/tests/file_uploads/tests.py b/tests/file_uploads/tests.py\nindex e8f91e2fa0..7bc8d41dac 100644\n--- a/tests/file_uploads/tests.py\n+++ b/tests/file_uploads/tests.py\n@@ -9,8 +9,9 @@ from io import BytesIO, StringIO\n from unittest import mock\n from urllib.parse import quote\n \n+from django.core.exceptions import SuspiciousFileOperation\n from django.core.files import temp as tempfile\n-from django.core.files.uploadedfile import SimpleUploadedFile\n+from django.core.files.uploadedfile import SimpleUploadedFile, UploadedFile\n from django.http.multipartparser import (\n     FILE, MultiPartParser, MultiPartParserError, Parser, parse_header,\n )\n@@ -39,6 +40,16 @@ CANDIDATE_TRAVERSAL_FILE_NAMES = [\n     '..&sol;hax0rd.txt',        # HTML entities.\n ]\n \n+CANDIDATE_INVALID_FILE_NAMES = [\n+    '/tmp/',        # Directory, *nix-style.\n+    'c:\\\\tmp\\\\',    # Directory, win-style.\n+    '/tmp/.',       # Directory dot, *nix-style.\n+    'c:\\\\tmp\\\\.',   # Directory dot, *nix-style.\n+    '/tmp/..',      # Parent directory, *nix-style.\n+    'c:\\\\tmp\\\\..',  # Parent directory, win-style.\n+    '',             # Empty filename.\n+]\n+\n \n @override_settings(MEDIA_ROOT=MEDIA_ROOT, ROOT_URLCONF='file_uploads.urls', MIDDLEWARE=[])\n class FileUploadTests(TestCase):\n@@ -53,6 +64,22 @@ class FileUploadTests(TestCase):\n         shutil.rmtree(MEDIA_ROOT)\n         super().tearDownClass()\n \n+    def test_upload_name_is_validated(self):\n+        candidates = [\n+            '/tmp/',\n+            '/tmp/..',\n+            '/tmp/.',\n+        ]\n+        if sys.platform == 'win32':\n+            candidates.extend([\n+                'c:\\\\tmp\\\\',\n+                'c:\\\\tmp\\\\..',\n+                'c:\\\\tmp\\\\.',\n+            ])\n+        for file_name in candidates:\n+            with self.subTest(file_name=file_name):\n+                self.assertRaises(SuspiciousFileOperation, UploadedFile, name=file_name)\n+\n     def test_simple_upload(self):\n         with open(__file__, 'rb') as fp:\n             post_data = {\n@@ -718,6 +745,15 @@ class MultiParserTests(SimpleTestCase):\n             with self.subTest(file_name=file_name):\n                 self.assertEqual(parser.sanitize_file_name(file_name), 'hax0rd.txt')\n \n+    def test_sanitize_invalid_file_name(self):\n+        parser = MultiPartParser({\n+            'CONTENT_TYPE': 'multipart/form-data; boundary=_foo',\n+            'CONTENT_LENGTH': '1',\n+        }, StringIO('x'), [], 'utf-8')\n+        for file_name in CANDIDATE_INVALID_FILE_NAMES:\n+            with self.subTest(file_name=file_name):\n+                self.assertIsNone(parser.sanitize_file_name(file_name))\n+\n     def test_rfc2231_parsing(self):\n         test_data = (\n             (b\"Content-Type: application/x-stuff; title*=us-ascii'en-us'This%20is%20%2A%2A%2Afun%2A%2A%2A\",\n\ndiff --git a/tests/forms_tests/field_tests/test_filefield.py b/tests/forms_tests/field_tests/test_filefield.py\nindex 261d9f4ca9..2db106e4a0 100644\n--- a/tests/forms_tests/field_tests/test_filefield.py\n+++ b/tests/forms_tests/field_tests/test_filefield.py\n@@ -21,10 +21,12 @@ class FileFieldTest(SimpleTestCase):\n             f.clean(None, '')\n         self.assertEqual('files/test2.pdf', f.clean(None, 'files/test2.pdf'))\n         no_file_msg = \"'No file was submitted. Check the encoding type on the form.'\"\n+        file = SimpleUploadedFile(None, b'')\n+        file._name = ''\n         with self.assertRaisesMessage(ValidationError, no_file_msg):\n-            f.clean(SimpleUploadedFile('', b''))\n+            f.clean(file)\n         with self.assertRaisesMessage(ValidationError, no_file_msg):\n-            f.clean(SimpleUploadedFile('', b''), '')\n+            f.clean(file, '')\n         self.assertEqual('files/test3.pdf', f.clean(None, 'files/test3.pdf'))\n         with self.assertRaisesMessage(ValidationError, no_file_msg):\n             f.clean('some content that is not a file')\n\ndiff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex 1b6bfc0b8e..d2a94fcdab 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -1,6 +1,7 @@\n import json\n import sys\n \n+from django.core.exceptions import SuspiciousFileOperation\n from django.test import SimpleTestCase, ignore_warnings\n from django.utils import text\n from django.utils.deprecation import RemovedInDjango40Warning\n@@ -255,6 +256,13 @@ class TestUtilsText(SimpleTestCase):\n         filename = \"^&'@{}[],$=!-#()%+~_123.txt\"\n         self.assertEqual(text.get_valid_filename(filename), \"-_123.txt\")\n         self.assertEqual(text.get_valid_filename(lazystr(filename)), \"-_123.txt\")\n+        msg = \"Could not derive file name from '???'\"\n+        with self.assertRaisesMessage(SuspiciousFileOperation, msg):\n+            text.get_valid_filename('???')\n+        # After sanitizing this would yield '..'.\n+        msg = \"Could not derive file name from '$.$.$'\"\n+        with self.assertRaisesMessage(SuspiciousFileOperation, msg):\n+            text.get_valid_filename('$.$.$')\n \n     def test_compress_sequence(self):\n         data = [{'key': i} for i in range(10)]\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "logical and structural changes", "source_commit": "c98f446c188596d4ba6de71d1b77b4a6c5c2a007", "source_date": "Tue May 4 08:43:52 2021 +0200", "source_tag": "3.2.1", "target_commit": "04ac1624bdc2fa737188401757cf95ced122d26d", "target_date": "Tue Apr 27 19:10:08 2021 +0200", "target_tag": "2.2.21", "FAIL TO PASS": ["file_storage.test_generate_filename.GenerateFilenameStorageTests.test_storage_dangerous_paths_dir_name", "file_storage.test_generate_filename.GenerateFilenameStorageTests.test_filefield_dangerous_filename", "file_storage.test_generate_filename.GenerateFilenameStorageTests.test_storage_dangerous_paths", "file_uploads.tests.MultiParserTests.test_sanitize_invalid_file_name", "utils_tests.test_text.TestUtilsText.test_get_valid_filename", "file_uploads.tests.FileUploadTests.test_upload_name_is_validated", "file_storage.test_generate_filename.GenerateFilenameStorageTests.test_filefield_dangerous_filename_dir"], "PASS TO PASS": []}
{"ecosystem": "npm", "repo": "node-tar", "instance_id": "node-tar_130", "original_commit_message": "unpack: only reuse file fs entries if nlink = 1\nThis matches behavior in bsdtar to prevent overwriting a hardlink with\ncontents from a File archive entry.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/lib/unpack.js b/lib/unpack.js\nindex 3e1c527..1c16d5d 100644\n--- a/lib/unpack.js\n+++ b/lib/unpack.js\n@@ -12,6 +12,7 @@ const wc = require('./winchars.js')\n \n const ONENTRY = Symbol('onEntry')\n const CHECKFS = Symbol('checkFs')\n+const ISREUSABLE = Symbol('isReusable')\n const MAKEFS = Symbol('makeFs')\n const FILE = Symbol('file')\n const DIRECTORY = Symbol('directory')\n@@ -351,6 +352,17 @@ class Unpack extends Parser {\n     entry.resume()\n   }\n \n+  // Check if we can reuse an existing filesystem entry safely and\n+  // overwrite it, rather than unlinking and recreating\n+  // Windows doesn't report a useful nlink, so we just never reuse entries\n+  [ISREUSABLE] (entry, st) {\n+    return entry.type === 'File' &&\n+      !this.unlink &&\n+      st.isFile() &&\n+      st.nlink <= 1 &&\n+      process.platform !== 'win32'\n+  }\n+\n   // check if a thing is there, and if so, try to clobber it\n   [CHECKFS] (entry) {\n     this[PEND]()\n@@ -360,7 +372,7 @@ class Unpack extends Parser {\n       fs.lstat(entry.absolute, (er, st) => {\n         if (st && (this.keep || this.newer && st.mtime > entry.mtime))\n           this[SKIP](entry)\n-        else if (er || (entry.type === 'File' && !this.unlink && st.isFile()))\n+        else if (er || this[ISREUSABLE](entry, st))\n           this[MAKEFS](null, entry)\n         else if (st.isDirectory()) {\n           if (entry.type === 'Directory') {\n@@ -422,7 +434,7 @@ class UnpackSync extends Unpack {\n       const st = fs.lstatSync(entry.absolute)\n       if (this.keep || this.newer && st.mtime > entry.mtime)\n         return this[SKIP](entry)\n-      else if (entry.type === 'File' && !this.unlink && st.isFile())\n+      else if (this[ISREUSABLE](entry, st))\n         return this[MAKEFS](null, entry)\n       else {\n         try {\n\n\n</patch>\n<test_patch>\ndiff --git a/test/unpack.js b/test/unpack.js\nindex c7bf791..20ca79a 100644\n--- a/test/unpack.js\n+++ b/test/unpack.js\n@@ -2286,3 +2286,66 @@ t.test('onentry option is preserved', t => {\n \n   t.end()\n })\n+\n+t.test('do not reuse hardlinks, only nlink=1 files', t => {\n+  const basedir = path.resolve(unpackdir, 'hardlink-reuse')\n+  mkdirp.sync(basedir)\n+  t.teardown(() => rimraf.sync(basedir))\n+\n+  const now = new Date('2018-04-30T18:30:39.025Z')\n+\n+  const data = makeTar([\n+    {\n+      path: 'overwriteme',\n+      type: 'File',\n+      size: 4,\n+      mode: 0o644,\n+      mtime: now\n+    },\n+    'foo\\n',\n+    {\n+      path: 'link',\n+      linkpath: 'overwriteme',\n+      type: 'Link',\n+      mode: 0o644,\n+      mtime: now\n+    },\n+    {\n+      path: 'link',\n+      type: 'File',\n+      size: 4,\n+      mode: 0o644,\n+      mtime: now\n+    },\n+    'bar\\n',\n+    '',\n+    ''\n+  ])\n+\n+  const checks = {\n+    'link': 'bar\\n',\n+    'overwriteme': 'foo\\n'\n+  }\n+\n+  const check = t => {\n+    for (let f in checks) {\n+      t.equal(fs.readFileSync(basedir + '/' + f, 'utf8'), checks[f], f)\n+      t.equal(fs.statSync(basedir + '/' + f).nlink, 1, f)\n+    }\n+    t.end()\n+  }\n+\n+  t.test('async', t => {\n+    const u = new Unpack({ cwd: basedir })\n+    u.on('close', () => check(t))\n+    u.end(data)\n+  })\n+\n+  t.test('sync', t => {\n+    const u = new UnpackSync({ cwd: basedir })\n+    u.end(data)\n+    check(t)\n+  })\n+\n+  t.end()\n+})\n\n</test_patch>\n", "file change type": "Completely different files", "content change type": "logical and structural changes", "source_commit": "b0c58433c22f5e7fe8b1c76373f27e3f81dcd4c8", "source_date": "Mon Apr 30 11:42:36 2018 -0700", "source_tag": "4.4.2", "target_commit": "7ecef07da6a9e72cc0c4d0c9c6a8e85b6b52395d", "target_date": "Tue May 14 17:43:20 2019 -0700", "target_tag": "2.2.2", "FAIL TO PASS": ["3 should be equal"], "PASS TO PASS": ["4 cleaned!", "1 cleaned!", "2 should be equal"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_644", "original_commit_message": "[1.6.x] Added additional checks in is_safe_url to account for flexible parsing.\nThis is a security fix. Disclosure following shortly.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/utils/http.py b/django/utils/http.py\nindex 571a179830..ee7ecf10ec 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -256,6 +256,18 @@ def is_safe_url(url, host=None):\n     \"\"\"\n     if not url:\n         return False\n+    # Chrome treats \\ completely as /\n+    url = url.replace('\\\\', '/')\n+    # Chrome considers any URL with more than two slashes to be absolute, but\n+    # urlaprse is not so flexible. Treat any url with three slashes as unsafe.\n+    if url.startswith('///'):\n+        return False\n     url_info = urlparse(url)\n+    # Forbid URLs like http:///example.com - with a scheme, but without a hostname.\n+    # In that URL, example.com is not the hostname but, a path component. However,\n+    # Chrome will still consider example.com to be the hostname, so we must not\n+    # allow this syntax.\n+    if not url_info.netloc and url_info.scheme:\n+        return False\n     return (not url_info.netloc or url_info.netloc == host) and \\\n         (not url_info.scheme or url_info.scheme in ['http', 'https'])\n\n\n</patch>\n<test_patch>\ndiff --git a/django/contrib/auth/tests/test_views.py b/django/contrib/auth/tests/test_views.py\nindex 277307acd6..ac13339f9e 100644\n--- a/django/contrib/auth/tests/test_views.py\n+++ b/django/contrib/auth/tests/test_views.py\n@@ -444,8 +444,10 @@ class LoginTest(AuthViewsTestCase):\n \n         # Those URLs should not pass the security check\n         for bad_url in ('http://example.com',\n+                        'http:///example.com',\n                         'https://example.com',\n                         'ftp://exampel.com',\n+                        '///example.com',\n                         '//example.com',\n                         'javascript:alert(\"XSS\")'):\n \n@@ -467,8 +469,8 @@ class LoginTest(AuthViewsTestCase):\n                          '/view/?param=https://example.com',\n                          '/view?param=ftp://exampel.com',\n                          'view/?param=//example.com',\n-                         'https:///',\n-                         'HTTPS:///',\n+                         'https://testserver/',\n+                         'HTTPS://testserver/',\n                          '//testserver/',\n                          '/url%20with%20spaces/'):  # see ticket #12534\n             safe_url = '%(url)s?%(next)s=%(good_url)s' % {\n@@ -660,8 +662,10 @@ class LogoutTest(AuthViewsTestCase):\n \n         # Those URLs should not pass the security check\n         for bad_url in ('http://example.com',\n+                        'http:///example.com',\n                         'https://example.com',\n                         'ftp://exampel.com',\n+                        '///example.com',\n                         '//example.com',\n                         'javascript:alert(\"XSS\")'):\n             nasty_url = '%(url)s?%(next)s=%(bad_url)s' % {\n@@ -681,8 +685,8 @@ class LogoutTest(AuthViewsTestCase):\n                          '/view/?param=https://example.com',\n                          '/view?param=ftp://exampel.com',\n                          'view/?param=//example.com',\n-                         'https:///',\n-                         'HTTPS:///',\n+                         'https://testserver/',\n+                         'HTTPS://testserver/',\n                          '//testserver/',\n                          '/url%20with%20spaces/'):  # see ticket #12534\n             safe_url = '%(url)s?%(next)s=%(good_url)s' % {\n\ndiff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex 3da279d4a2..83dcd7c66a 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -91,6 +91,35 @@ class TestUtilsHttp(unittest.TestCase):\n             self.assertEqual(http.int_to_base36(n), b36)\n             self.assertEqual(http.base36_to_int(b36), n)\n \n+    def test_is_safe_url(self):\n+        for bad_url in ('http://example.com',\n+                        'http:///example.com',\n+                        'https://example.com',\n+                        'ftp://exampel.com',\n+                        r'\\\\example.com',\n+                        r'\\\\\\example.com',\n+                        r'/\\\\/example.com',\n+                        r'\\\\\\example.com',\n+                        r'\\\\example.com',\n+                        r'\\\\//example.com',\n+                        r'/\\/example.com',\n+                        r'\\/example.com',\n+                        r'/\\example.com',\n+                        'http:///example.com',\n+                        'http:/\\//example.com',\n+                        'http:\\/example.com',\n+                        'http:/\\example.com',\n+                        'javascript:alert(\"XSS\")'):\n+            self.assertFalse(http.is_safe_url(bad_url, host='testserver'), \"%s should be blocked\" % bad_url)\n+        for good_url in ('/view/?param=http://example.com',\n+                     '/view/?param=https://example.com',\n+                     '/view?param=ftp://exampel.com',\n+                     'view/?param=//example.com',\n+                     'https://testserver/',\n+                     'HTTPS://testserver/',\n+                     '//testserver/',\n+                     '/url%20with%20spaces/'):\n+            self.assertTrue(http.is_safe_url(good_url, host='testserver'), \"%s should be allowed\" % good_url)\n \n class ETagProcessingTests(unittest.TestCase):\n     def testParsing(self):\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location & namespace changes", "source_commit": "601107524523bca02376a0ddc1a06c6fdb8f22f3", "source_date": "Wed May 14 10:15:06 2014 +0200", "source_tag": "1.6.5", "target_commit": "ad32c218850ad40972dcef57beb460f8c979dd6d", "target_date": "Mon May 12 09:42:06 2014 -0400", "target_tag": "1.5.8", "FAIL TO PASS": ["django.contrib.auth.tests.views.LogoutTest.test_security_check", "regressiontests.utils.http.TestUtilsHttp.test_is_safe_url", "django.contrib.auth.tests.views.LoginTest.test_security_check"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_645", "original_commit_message": "[1.6.x] Added additional checks in is_safe_url to account for flexible parsing.\nThis is a security fix. Disclosure following shortly.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/utils/http.py b/django/utils/http.py\nindex 571a179830..ee7ecf10ec 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -256,6 +256,18 @@ def is_safe_url(url, host=None):\n     \"\"\"\n     if not url:\n         return False\n+    # Chrome treats \\ completely as /\n+    url = url.replace('\\\\', '/')\n+    # Chrome considers any URL with more than two slashes to be absolute, but\n+    # urlaprse is not so flexible. Treat any url with three slashes as unsafe.\n+    if url.startswith('///'):\n+        return False\n     url_info = urlparse(url)\n+    # Forbid URLs like http:///example.com - with a scheme, but without a hostname.\n+    # In that URL, example.com is not the hostname but, a path component. However,\n+    # Chrome will still consider example.com to be the hostname, so we must not\n+    # allow this syntax.\n+    if not url_info.netloc and url_info.scheme:\n+        return False\n     return (not url_info.netloc or url_info.netloc == host) and \\\n         (not url_info.scheme or url_info.scheme in ['http', 'https'])\n\n\n</patch>\n<test_patch>\ndiff --git a/django/contrib/auth/tests/test_views.py b/django/contrib/auth/tests/test_views.py\nindex 277307acd6..ac13339f9e 100644\n--- a/django/contrib/auth/tests/test_views.py\n+++ b/django/contrib/auth/tests/test_views.py\n@@ -444,8 +444,10 @@ class LoginTest(AuthViewsTestCase):\n \n         # Those URLs should not pass the security check\n         for bad_url in ('http://example.com',\n+                        'http:///example.com',\n                         'https://example.com',\n                         'ftp://exampel.com',\n+                        '///example.com',\n                         '//example.com',\n                         'javascript:alert(\"XSS\")'):\n \n@@ -467,8 +469,8 @@ class LoginTest(AuthViewsTestCase):\n                          '/view/?param=https://example.com',\n                          '/view?param=ftp://exampel.com',\n                          'view/?param=//example.com',\n-                         'https:///',\n-                         'HTTPS:///',\n+                         'https://testserver/',\n+                         'HTTPS://testserver/',\n                          '//testserver/',\n                          '/url%20with%20spaces/'):  # see ticket #12534\n             safe_url = '%(url)s?%(next)s=%(good_url)s' % {\n@@ -660,8 +662,10 @@ class LogoutTest(AuthViewsTestCase):\n \n         # Those URLs should not pass the security check\n         for bad_url in ('http://example.com',\n+                        'http:///example.com',\n                         'https://example.com',\n                         'ftp://exampel.com',\n+                        '///example.com',\n                         '//example.com',\n                         'javascript:alert(\"XSS\")'):\n             nasty_url = '%(url)s?%(next)s=%(bad_url)s' % {\n@@ -681,8 +685,8 @@ class LogoutTest(AuthViewsTestCase):\n                          '/view/?param=https://example.com',\n                          '/view?param=ftp://exampel.com',\n                          'view/?param=//example.com',\n-                         'https:///',\n-                         'HTTPS:///',\n+                         'https://testserver/',\n+                         'HTTPS://testserver/',\n                          '//testserver/',\n                          '/url%20with%20spaces/'):  # see ticket #12534\n             safe_url = '%(url)s?%(next)s=%(good_url)s' % {\n\ndiff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex 3da279d4a2..83dcd7c66a 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -91,6 +91,35 @@ class TestUtilsHttp(unittest.TestCase):\n             self.assertEqual(http.int_to_base36(n), b36)\n             self.assertEqual(http.base36_to_int(b36), n)\n \n+    def test_is_safe_url(self):\n+        for bad_url in ('http://example.com',\n+                        'http:///example.com',\n+                        'https://example.com',\n+                        'ftp://exampel.com',\n+                        r'\\\\example.com',\n+                        r'\\\\\\example.com',\n+                        r'/\\\\/example.com',\n+                        r'\\\\\\example.com',\n+                        r'\\\\example.com',\n+                        r'\\\\//example.com',\n+                        r'/\\/example.com',\n+                        r'\\/example.com',\n+                        r'/\\example.com',\n+                        'http:///example.com',\n+                        'http:/\\//example.com',\n+                        'http:\\/example.com',\n+                        'http:/\\example.com',\n+                        'javascript:alert(\"XSS\")'):\n+            self.assertFalse(http.is_safe_url(bad_url, host='testserver'), \"%s should be blocked\" % bad_url)\n+        for good_url in ('/view/?param=http://example.com',\n+                     '/view/?param=https://example.com',\n+                     '/view?param=ftp://exampel.com',\n+                     'view/?param=//example.com',\n+                     'https://testserver/',\n+                     'HTTPS://testserver/',\n+                     '//testserver/',\n+                     '/url%20with%20spaces/'):\n+            self.assertTrue(http.is_safe_url(good_url, host='testserver'), \"%s should be allowed\" % good_url)\n \n class ETagProcessingTests(unittest.TestCase):\n     def testParsing(self):\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location & namespace changes", "source_commit": "601107524523bca02376a0ddc1a06c6fdb8f22f3", "source_date": "Wed May 14 10:15:06 2014 +0200", "source_tag": "1.6.5", "target_commit": "7feb54bbae3f637ab3c4dd4831d4385964f574df", "target_date": "Mon May 12 09:46:40 2014 -0400", "target_tag": "1.4.13", "FAIL TO PASS": ["django.contrib.auth.tests.views.LogoutTest.test_security_check", "regressiontests.utils.http.TestUtilsHttp.test_is_safe_url", "django.contrib.auth.tests.views.LoginTest.test_security_check"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "glance", "instance_id": "glance_649", "original_commit_message": "Ensure authorization before deleting from store\nThis fixes bug 1076506.\nChange-Id: I3794c14fe523a9a27e943d73dd0248489d2b91f6", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/glance/api/v2/images.py b/glance/api/v2/images.py\nindex 04bd61bf7..8443b43fb 100644\n--- a/glance/api/v2/images.py\n+++ b/glance/api/v2/images.py\n@@ -260,19 +260,22 @@ class ImagesController(object):\n                     % locals())\n             raise webob.exc.HTTPForbidden(explanation=msg)\n \n-        status = 'deleted'\n-        if image['location']:\n-            if CONF.delayed_delete:\n-                status = 'pending_delete'\n-                self.store_api.schedule_delayed_delete_from_backend(\n-                                image['location'], id)\n-            else:\n-                self.store_api.safe_delete_from_backend(image['location'],\n-                                                        req.context, id)\n+        if image['location'] and CONF.delayed_delete:\n+            status = 'pending_delete'\n+        else:\n+            status = 'deleted'\n \n         try:\n             self.db_api.image_update(req.context, image_id, {'status': status})\n             self.db_api.image_destroy(req.context, image_id)\n+\n+            if image['location']:\n+                if CONF.delayed_delete:\n+                    self.store_api.schedule_delayed_delete_from_backend(\n+                                    image['location'], id)\n+                else:\n+                    self.store_api.safe_delete_from_backend(image['location'],\n+                                                            req.context, id)\n         except (exception.NotFound, exception.Forbidden):\n             msg = (\"Failed to find image %(image_id)s to delete\" % locals())\n             LOG.info(msg)\n\n\n</patch>\n<test_patch>\ndiff --git a/glance/tests/functional/v2/test_images.py b/glance/tests/functional/v2/test_images.py\nindex 186bc59fc..0a6b4e83a 100644\n--- a/glance/tests/functional/v2/test_images.py\n+++ b/glance/tests/functional/v2/test_images.py\n@@ -218,6 +218,12 @@ class TestImages(functional.FunctionalTest):\n         self.assertEqual(201, response.status_code)\n         image_id = json.loads(response.text)['id']\n \n+        # Upload some image data\n+        path = self._url('/v2/images/%s/file' % image_id)\n+        headers = self._headers({'Content-Type': 'application/octet-stream'})\n+        response = requests.put(path, headers=headers, data='ZZZZZ')\n+        self.assertEqual(201, response.status_code)\n+\n         # TENANT1 should see the image in their list\n         path = self._url('/v2/images')\n         response = requests.get(path, headers=self._headers())\n@@ -300,6 +306,12 @@ class TestImages(functional.FunctionalTest):\n         response = requests.delete(path, headers=headers)\n         self.assertEqual(404, response.status_code)\n \n+        # Image data should still be present after the failed delete\n+        path = self._url('/v2/images/%s/file' % image_id)\n+        response = requests.get(path, headers=self._headers())\n+        self.assertEqual(200, response.status_code)\n+        self.assertEqual(response.text, 'ZZZZZ')\n+\n         self.stop_servers()\n \n     def test_tag_lifecycle(self):\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "b591304b8980d8aca8fa6cda9ea1621aca000c88", "source_date": "Thu Nov 8 10:56:07 2012 -0800", "source_tag": "11.0.0", "target_commit": "fc0ee7623ec59c87ac6fc671e95a9798d6f2e2c3", "target_date": "Thu Nov 8 11:30:17 2012 -0800", "target_tag": "2012.2.1", "FAIL TO PASS": ["glance.tests.functional.v2.test_images.TestImages.test_permissions"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_650", "original_commit_message": "Fixed CVE-2022-28347 -- Protected QuerySet.explain(**options) against SQL injection on PostgreSQL.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/db/backends/postgresql/features.py b/django/db/backends/postgresql/features.py\nindex 5e6752b97a..8aae4caf34 100644\n--- a/django/db/backends/postgresql/features.py\n+++ b/django/db/backends/postgresql/features.py\n@@ -54,7 +54,6 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n     only_supports_unbounded_with_preceding_and_following = True\n     supports_aggregate_filter_clause = True\n     supported_explain_formats = {\"JSON\", \"TEXT\", \"XML\", \"YAML\"}\n-    validates_explain_options = False  # A query will error on invalid options.\n     supports_deferrable_unique_constraints = True\n     has_json_operators = True\n     json_key_contains_list_matching_requires_list = True\n\ndiff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\nindex 946baea212..ab451ac63f 100644\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -9,6 +9,18 @@ from django.db.models.constants import OnConflict\n class DatabaseOperations(BaseDatabaseOperations):\n     cast_char_field_without_max_length = \"varchar\"\n     explain_prefix = \"EXPLAIN\"\n+    explain_options = frozenset(\n+        [\n+            \"ANALYZE\",\n+            \"BUFFERS\",\n+            \"COSTS\",\n+            \"SETTINGS\",\n+            \"SUMMARY\",\n+            \"TIMING\",\n+            \"VERBOSE\",\n+            \"WAL\",\n+        ]\n+    )\n     cast_data_types = {\n         \"AutoField\": \"integer\",\n         \"BigAutoField\": \"bigint\",\n@@ -298,17 +310,20 @@ class DatabaseOperations(BaseDatabaseOperations):\n         return super().subtract_temporals(internal_type, lhs, rhs)\n \n     def explain_query_prefix(self, format=None, **options):\n-        prefix = super().explain_query_prefix(format)\n         extra = {}\n+        # Normalize options.\n+        if options:\n+            options = {\n+                name.upper(): \"true\" if value else \"false\"\n+                for name, value in options.items()\n+            }\n+            for valid_option in self.explain_options:\n+                value = options.pop(valid_option, None)\n+                if value is not None:\n+                    extra[valid_option.upper()] = value\n+        prefix = super().explain_query_prefix(format, **options)\n         if format:\n             extra[\"FORMAT\"] = format\n-        if options:\n-            extra.update(\n-                {\n-                    name.upper(): \"true\" if value else \"false\"\n-                    for name, value in options.items()\n-                }\n-            )\n         if extra:\n             prefix += \" (%s)\" % \", \".join(\"%s %s\" % i for i in extra.items())\n         return prefix\n\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 894aa7db4a..a55eb84a17 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -49,6 +49,10 @@ __all__ = [\"Query\", \"RawQuery\"]\n # SQL comments are forbidden in column aliases.\n FORBIDDEN_ALIAS_PATTERN = _lazy_re_compile(r\"['`\\\"\\]\\[;\\s]|--|/\\*|\\*/\")\n \n+# Inspired from\n+# https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-SYNTAX-IDENTIFIERS\n+EXPLAIN_OPTIONS_PATTERN = _lazy_re_compile(r\"[\\w\\-]+\")\n+\n \n def get_field_names_from_opts(opts):\n     if opts is None:\n@@ -589,6 +593,12 @@ class Query(BaseExpression):\n \n     def explain(self, using, format=None, **options):\n         q = self.clone()\n+        for option_name in options:\n+            if (\n+                not EXPLAIN_OPTIONS_PATTERN.fullmatch(option_name)\n+                or \"--\" in option_name\n+            ):\n+                raise ValueError(f\"Invalid option name: {option_name!r}.\")\n         q.explain_info = ExplainInfo(format, options)\n         compiler = q.get_compiler(using=using)\n         return \"\\n\".join(compiler.explain_query())\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/queries/test_explain.py b/tests/queries/test_explain.py\nindex ab845f992a..9eb4347323 100644\n--- a/tests/queries/test_explain.py\n+++ b/tests/queries/test_explain.py\n@@ -59,8 +59,8 @@ class ExplainTests(TestCase):\n \n     @skipUnlessDBFeature(\"validates_explain_options\")\n     def test_unknown_options(self):\n-        with self.assertRaisesMessage(ValueError, \"Unknown options: test, test2\"):\n-            Tag.objects.explain(test=1, test2=1)\n+        with self.assertRaisesMessage(ValueError, \"Unknown options: TEST, TEST2\"):\n+            Tag.objects.explain(**{\"TEST\": 1, \"TEST2\": 1})\n \n     def test_unknown_format(self):\n         msg = \"DOES NOT EXIST is not a recognized format.\"\n@@ -94,6 +94,35 @@ class ExplainTests(TestCase):\n                     option = \"{} {}\".format(name.upper(), \"true\" if value else \"false\")\n                     self.assertIn(option, captured_queries[0][\"sql\"])\n \n+    def test_option_sql_injection(self):\n+        qs = Tag.objects.filter(name=\"test\")\n+        options = {\"SUMMARY true) SELECT 1; --\": True}\n+        msg = \"Invalid option name: 'SUMMARY true) SELECT 1; --'\"\n+        with self.assertRaisesMessage(ValueError, msg):\n+            qs.explain(**options)\n+\n+    def test_invalid_option_names(self):\n+        qs = Tag.objects.filter(name=\"test\")\n+        tests = [\n+            'opt\"ion',\n+            \"o'ption\",\n+            \"op`tion\",\n+            \"opti on\",\n+            \"option--\",\n+            \"optio\\tn\",\n+            \"o\\nption\",\n+            \"option;\",\n+            \"你 好\",\n+            # [] are used by MSSQL.\n+            \"option[\",\n+            \"option]\",\n+        ]\n+        for invalid_option in tests:\n+            with self.subTest(invalid_option):\n+                msg = f\"Invalid option name: {invalid_option!r}\"\n+                with self.assertRaisesMessage(ValueError, msg):\n+                    qs.explain(**{invalid_option: True})\n+\n     @unittest.skipUnless(connection.vendor == \"mysql\", \"MySQL specific\")\n     def test_mysql_text_to_traditional(self):\n         # Ensure these cached properties are initialized to prevent queries for\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "logical and structural changes", "source_commit": "6723a26e59b0b5429a0c5873941e01a2e1bdbb81", "source_date": "Mon Apr 11 08:59:58 2022 +0200", "source_tag": "4.1", "target_commit": "29a6c98b4c13af82064f993f0acc6e8fafa4d3f5", "target_date": "Mon Apr 11 09:23:12 2022 +0200", "target_tag": "2.2.28", "FAIL TO PASS": ["queries.test_explain.ExplainTests.test_option_sql_injection", "queries.test_explain.ExplainTests.test_invalid_option_names"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_651", "original_commit_message": "Fixed CVE-2022-28347 -- Protected QuerySet.explain(**options) against SQL injection on PostgreSQL.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/db/backends/postgresql/features.py b/django/db/backends/postgresql/features.py\nindex 5e6752b97a..8aae4caf34 100644\n--- a/django/db/backends/postgresql/features.py\n+++ b/django/db/backends/postgresql/features.py\n@@ -54,7 +54,6 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n     only_supports_unbounded_with_preceding_and_following = True\n     supports_aggregate_filter_clause = True\n     supported_explain_formats = {\"JSON\", \"TEXT\", \"XML\", \"YAML\"}\n-    validates_explain_options = False  # A query will error on invalid options.\n     supports_deferrable_unique_constraints = True\n     has_json_operators = True\n     json_key_contains_list_matching_requires_list = True\n\ndiff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\nindex 946baea212..ab451ac63f 100644\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -9,6 +9,18 @@ from django.db.models.constants import OnConflict\n class DatabaseOperations(BaseDatabaseOperations):\n     cast_char_field_without_max_length = \"varchar\"\n     explain_prefix = \"EXPLAIN\"\n+    explain_options = frozenset(\n+        [\n+            \"ANALYZE\",\n+            \"BUFFERS\",\n+            \"COSTS\",\n+            \"SETTINGS\",\n+            \"SUMMARY\",\n+            \"TIMING\",\n+            \"VERBOSE\",\n+            \"WAL\",\n+        ]\n+    )\n     cast_data_types = {\n         \"AutoField\": \"integer\",\n         \"BigAutoField\": \"bigint\",\n@@ -298,17 +310,20 @@ class DatabaseOperations(BaseDatabaseOperations):\n         return super().subtract_temporals(internal_type, lhs, rhs)\n \n     def explain_query_prefix(self, format=None, **options):\n-        prefix = super().explain_query_prefix(format)\n         extra = {}\n+        # Normalize options.\n+        if options:\n+            options = {\n+                name.upper(): \"true\" if value else \"false\"\n+                for name, value in options.items()\n+            }\n+            for valid_option in self.explain_options:\n+                value = options.pop(valid_option, None)\n+                if value is not None:\n+                    extra[valid_option.upper()] = value\n+        prefix = super().explain_query_prefix(format, **options)\n         if format:\n             extra[\"FORMAT\"] = format\n-        if options:\n-            extra.update(\n-                {\n-                    name.upper(): \"true\" if value else \"false\"\n-                    for name, value in options.items()\n-                }\n-            )\n         if extra:\n             prefix += \" (%s)\" % \", \".join(\"%s %s\" % i for i in extra.items())\n         return prefix\n\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 894aa7db4a..a55eb84a17 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -49,6 +49,10 @@ __all__ = [\"Query\", \"RawQuery\"]\n # SQL comments are forbidden in column aliases.\n FORBIDDEN_ALIAS_PATTERN = _lazy_re_compile(r\"['`\\\"\\]\\[;\\s]|--|/\\*|\\*/\")\n \n+# Inspired from\n+# https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-SYNTAX-IDENTIFIERS\n+EXPLAIN_OPTIONS_PATTERN = _lazy_re_compile(r\"[\\w\\-]+\")\n+\n \n def get_field_names_from_opts(opts):\n     if opts is None:\n@@ -589,6 +593,12 @@ class Query(BaseExpression):\n \n     def explain(self, using, format=None, **options):\n         q = self.clone()\n+        for option_name in options:\n+            if (\n+                not EXPLAIN_OPTIONS_PATTERN.fullmatch(option_name)\n+                or \"--\" in option_name\n+            ):\n+                raise ValueError(f\"Invalid option name: {option_name!r}.\")\n         q.explain_info = ExplainInfo(format, options)\n         compiler = q.get_compiler(using=using)\n         return \"\\n\".join(compiler.explain_query())\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/queries/test_explain.py b/tests/queries/test_explain.py\nindex ab845f992a..9eb4347323 100644\n--- a/tests/queries/test_explain.py\n+++ b/tests/queries/test_explain.py\n@@ -59,8 +59,8 @@ class ExplainTests(TestCase):\n \n     @skipUnlessDBFeature(\"validates_explain_options\")\n     def test_unknown_options(self):\n-        with self.assertRaisesMessage(ValueError, \"Unknown options: test, test2\"):\n-            Tag.objects.explain(test=1, test2=1)\n+        with self.assertRaisesMessage(ValueError, \"Unknown options: TEST, TEST2\"):\n+            Tag.objects.explain(**{\"TEST\": 1, \"TEST2\": 1})\n \n     def test_unknown_format(self):\n         msg = \"DOES NOT EXIST is not a recognized format.\"\n@@ -94,6 +94,35 @@ class ExplainTests(TestCase):\n                     option = \"{} {}\".format(name.upper(), \"true\" if value else \"false\")\n                     self.assertIn(option, captured_queries[0][\"sql\"])\n \n+    def test_option_sql_injection(self):\n+        qs = Tag.objects.filter(name=\"test\")\n+        options = {\"SUMMARY true) SELECT 1; --\": True}\n+        msg = \"Invalid option name: 'SUMMARY true) SELECT 1; --'\"\n+        with self.assertRaisesMessage(ValueError, msg):\n+            qs.explain(**options)\n+\n+    def test_invalid_option_names(self):\n+        qs = Tag.objects.filter(name=\"test\")\n+        tests = [\n+            'opt\"ion',\n+            \"o'ption\",\n+            \"op`tion\",\n+            \"opti on\",\n+            \"option--\",\n+            \"optio\\tn\",\n+            \"o\\nption\",\n+            \"option;\",\n+            \"你 好\",\n+            # [] are used by MSSQL.\n+            \"option[\",\n+            \"option]\",\n+        ]\n+        for invalid_option in tests:\n+            with self.subTest(invalid_option):\n+                msg = f\"Invalid option name: {invalid_option!r}\"\n+                with self.assertRaisesMessage(ValueError, msg):\n+                    qs.explain(**{invalid_option: True})\n+\n     @unittest.skipUnless(connection.vendor == \"mysql\", \"MySQL specific\")\n     def test_mysql_text_to_traditional(self):\n         # Ensure these cached properties are initialized to prevent queries for\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "logical and structural changes", "source_commit": "6723a26e59b0b5429a0c5873941e01a2e1bdbb81", "source_date": "Mon Apr 11 08:59:58 2022 +0200", "source_tag": "4.1", "target_commit": "9e19accb6e0a00ba77d5a95a91675bf18877c72d", "target_date": "Mon Apr 11 09:12:58 2022 +0200", "target_tag": "3.2.13", "FAIL TO PASS": ["queries.test_explain.ExplainTests.test_option_sql_injection", "queries.test_explain.ExplainTests.test_invalid_option_names"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_652", "original_commit_message": "Fixed CVE-2022-28347 -- Protected QuerySet.explain(**options) against SQL injection on PostgreSQL.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/db/backends/postgresql/features.py b/django/db/backends/postgresql/features.py\nindex 5e6752b97a..8aae4caf34 100644\n--- a/django/db/backends/postgresql/features.py\n+++ b/django/db/backends/postgresql/features.py\n@@ -54,7 +54,6 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n     only_supports_unbounded_with_preceding_and_following = True\n     supports_aggregate_filter_clause = True\n     supported_explain_formats = {\"JSON\", \"TEXT\", \"XML\", \"YAML\"}\n-    validates_explain_options = False  # A query will error on invalid options.\n     supports_deferrable_unique_constraints = True\n     has_json_operators = True\n     json_key_contains_list_matching_requires_list = True\n\ndiff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\nindex 946baea212..ab451ac63f 100644\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -9,6 +9,18 @@ from django.db.models.constants import OnConflict\n class DatabaseOperations(BaseDatabaseOperations):\n     cast_char_field_without_max_length = \"varchar\"\n     explain_prefix = \"EXPLAIN\"\n+    explain_options = frozenset(\n+        [\n+            \"ANALYZE\",\n+            \"BUFFERS\",\n+            \"COSTS\",\n+            \"SETTINGS\",\n+            \"SUMMARY\",\n+            \"TIMING\",\n+            \"VERBOSE\",\n+            \"WAL\",\n+        ]\n+    )\n     cast_data_types = {\n         \"AutoField\": \"integer\",\n         \"BigAutoField\": \"bigint\",\n@@ -298,17 +310,20 @@ class DatabaseOperations(BaseDatabaseOperations):\n         return super().subtract_temporals(internal_type, lhs, rhs)\n \n     def explain_query_prefix(self, format=None, **options):\n-        prefix = super().explain_query_prefix(format)\n         extra = {}\n+        # Normalize options.\n+        if options:\n+            options = {\n+                name.upper(): \"true\" if value else \"false\"\n+                for name, value in options.items()\n+            }\n+            for valid_option in self.explain_options:\n+                value = options.pop(valid_option, None)\n+                if value is not None:\n+                    extra[valid_option.upper()] = value\n+        prefix = super().explain_query_prefix(format, **options)\n         if format:\n             extra[\"FORMAT\"] = format\n-        if options:\n-            extra.update(\n-                {\n-                    name.upper(): \"true\" if value else \"false\"\n-                    for name, value in options.items()\n-                }\n-            )\n         if extra:\n             prefix += \" (%s)\" % \", \".join(\"%s %s\" % i for i in extra.items())\n         return prefix\n\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 894aa7db4a..a55eb84a17 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -49,6 +49,10 @@ __all__ = [\"Query\", \"RawQuery\"]\n # SQL comments are forbidden in column aliases.\n FORBIDDEN_ALIAS_PATTERN = _lazy_re_compile(r\"['`\\\"\\]\\[;\\s]|--|/\\*|\\*/\")\n \n+# Inspired from\n+# https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-SYNTAX-IDENTIFIERS\n+EXPLAIN_OPTIONS_PATTERN = _lazy_re_compile(r\"[\\w\\-]+\")\n+\n \n def get_field_names_from_opts(opts):\n     if opts is None:\n@@ -589,6 +593,12 @@ class Query(BaseExpression):\n \n     def explain(self, using, format=None, **options):\n         q = self.clone()\n+        for option_name in options:\n+            if (\n+                not EXPLAIN_OPTIONS_PATTERN.fullmatch(option_name)\n+                or \"--\" in option_name\n+            ):\n+                raise ValueError(f\"Invalid option name: {option_name!r}.\")\n         q.explain_info = ExplainInfo(format, options)\n         compiler = q.get_compiler(using=using)\n         return \"\\n\".join(compiler.explain_query())\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/queries/test_explain.py b/tests/queries/test_explain.py\nindex ab845f992a..9eb4347323 100644\n--- a/tests/queries/test_explain.py\n+++ b/tests/queries/test_explain.py\n@@ -59,8 +59,8 @@ class ExplainTests(TestCase):\n \n     @skipUnlessDBFeature(\"validates_explain_options\")\n     def test_unknown_options(self):\n-        with self.assertRaisesMessage(ValueError, \"Unknown options: test, test2\"):\n-            Tag.objects.explain(test=1, test2=1)\n+        with self.assertRaisesMessage(ValueError, \"Unknown options: TEST, TEST2\"):\n+            Tag.objects.explain(**{\"TEST\": 1, \"TEST2\": 1})\n \n     def test_unknown_format(self):\n         msg = \"DOES NOT EXIST is not a recognized format.\"\n@@ -94,6 +94,35 @@ class ExplainTests(TestCase):\n                     option = \"{} {}\".format(name.upper(), \"true\" if value else \"false\")\n                     self.assertIn(option, captured_queries[0][\"sql\"])\n \n+    def test_option_sql_injection(self):\n+        qs = Tag.objects.filter(name=\"test\")\n+        options = {\"SUMMARY true) SELECT 1; --\": True}\n+        msg = \"Invalid option name: 'SUMMARY true) SELECT 1; --'\"\n+        with self.assertRaisesMessage(ValueError, msg):\n+            qs.explain(**options)\n+\n+    def test_invalid_option_names(self):\n+        qs = Tag.objects.filter(name=\"test\")\n+        tests = [\n+            'opt\"ion',\n+            \"o'ption\",\n+            \"op`tion\",\n+            \"opti on\",\n+            \"option--\",\n+            \"optio\\tn\",\n+            \"o\\nption\",\n+            \"option;\",\n+            \"你 好\",\n+            # [] are used by MSSQL.\n+            \"option[\",\n+            \"option]\",\n+        ]\n+        for invalid_option in tests:\n+            with self.subTest(invalid_option):\n+                msg = f\"Invalid option name: {invalid_option!r}\"\n+                with self.assertRaisesMessage(ValueError, msg):\n+                    qs.explain(**{invalid_option: True})\n+\n     @unittest.skipUnless(connection.vendor == \"mysql\", \"MySQL specific\")\n     def test_mysql_text_to_traditional(self):\n         # Ensure these cached properties are initialized to prevent queries for\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "6723a26e59b0b5429a0c5873941e01a2e1bdbb81", "source_date": "Mon Apr 11 08:59:58 2022 +0200", "source_tag": "4.1", "target_commit": "00b0fc50e1738c7174c495464a5ef069408a4402", "target_date": "Mon Apr 11 09:02:58 2022 +0200", "target_tag": "4.0.4", "FAIL TO PASS": ["queries.test_explain.ExplainTests.test_option_sql_injection", "queries.test_explain.ExplainTests.test_invalid_option_names"], "PASS TO PASS": []}
{"ecosystem": "npm", "repo": "socket.io-parser", "instance_id": "socket.io-parser_145", "original_commit_message": "fix: check the format of the index of each attachment\nA specially crafted packet could be incorrectly decoded.\nExample:\n```js\nconst decoder = new Decoder();\ndecoder.on(\"decoded\", (packet) => {\nconsole.log(packet.data); // prints [ 'hello', [Function: splice] ]\n})\ndecoder.add('51-[\"hello\",{\"_placeholder\":true,\"num\":\"splice\"}]');\ndecoder.add(Buffer.from(\"world\"));\n```\nAs usual, please remember not to trust user input.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/lib/binary.ts b/lib/binary.ts\nindex 65d9789..3bc41b4 100644\n--- a/lib/binary.ts\n+++ b/lib/binary.ts\n@@ -60,8 +60,16 @@ export function reconstructPacket(packet, buffers) {\n function _reconstructPacket(data, buffers) {\n   if (!data) return data;\n \n-  if (data && data._placeholder) {\n-    return buffers[data.num]; // appropriate buffer (should be natural order anyway)\n+  if (data && data._placeholder === true) {\n+    const isIndexValid =\n+      typeof data.num === \"number\" &&\n+      data.num >= 0 &&\n+      data.num < buffers.length;\n+    if (isIndexValid) {\n+      return buffers[data.num]; // appropriate buffer (should be natural order anyway)\n+    } else {\n+      throw new Error(\"illegal attachments\");\n+    }\n   } else if (Array.isArray(data)) {\n     for (let i = 0; i < data.length; i++) {\n       data[i] = _reconstructPacket(data[i], buffers);\n\ndiff --git a/lib/index.ts b/lib/index.ts\nindex 453425f..1170d17 100644\n--- a/lib/index.ts\n+++ b/lib/index.ts\n@@ -145,6 +145,9 @@ export class Decoder extends Emitter<{}, {}, DecoderReservedEvents> {\n   public add(obj: any) {\n     let packet;\n     if (typeof obj === \"string\") {\n+      if (this.reconstructor) {\n+        throw new Error(\"got plaintext data when reconstructing a packet\");\n+      }\n       packet = this.decodeString(obj);\n       if (\n         packet.type === PacketType.BINARY_EVENT ||\n\n\n</patch>\n<test_patch>\ndiff --git a/test/buffer.js b/test/buffer.js\nindex af8e1ba..367ebcd 100644\n--- a/test/buffer.js\n+++ b/test/buffer.js\n@@ -1,5 +1,6 @@\n-const { PacketType } = require(\"..\");\n+const { PacketType, Decoder } = require(\"../\");\n const helpers = require(\"./helpers.js\");\n+const expect = require(\"expect.js\");\n \n describe(\"parser\", () => {\n   it(\"encodes a Buffer\", (done) => {\n@@ -14,6 +15,18 @@ describe(\"parser\", () => {\n     );\n   });\n \n+  it(\"encodes a nested Buffer\", (done) => {\n+    helpers.test_bin(\n+      {\n+        type: PacketType.EVENT,\n+        data: [\"a\", { b: [\"c\", Buffer.from(\"abc\", \"utf8\")] }],\n+        id: 23,\n+        nsp: \"/cool\",\n+      },\n+      done\n+    );\n+  });\n+\n   it(\"encodes a binary ack with Buffer\", (done) => {\n     helpers.test_bin(\n       {\n@@ -25,4 +38,39 @@ describe(\"parser\", () => {\n       done\n     );\n   });\n+\n+  it(\"throws an error when adding an attachment with an invalid 'num' attribute (string)\", () => {\n+    const decoder = new Decoder();\n+\n+    expect(() => {\n+      decoder.add('51-[\"hello\",{\"_placeholder\":true,\"num\":\"splice\"}]');\n+      decoder.add(Buffer.from(\"world\"));\n+    }).to.throwException(/^illegal attachments$/);\n+  });\n+\n+  it(\"throws an error when adding an attachment with an invalid 'num' attribute (out-of-bound)\", () => {\n+    const decoder = new Decoder();\n+\n+    expect(() => {\n+      decoder.add('51-[\"hello\",{\"_placeholder\":true,\"num\":1}]');\n+      decoder.add(Buffer.from(\"world\"));\n+    }).to.throwException(/^illegal attachments$/);\n+  });\n+\n+  it(\"throws an error when adding an attachment without header\", () => {\n+    const decoder = new Decoder();\n+\n+    expect(() => {\n+      decoder.add(Buffer.from(\"world\"));\n+    }).to.throwException(/^got binary data when not reconstructing a packet$/);\n+  });\n+\n+  it(\"throws an error when decoding a binary event without attachments\", () => {\n+    const decoder = new Decoder();\n+\n+    expect(() => {\n+      decoder.add('51-[\"hello\",{\"_placeholder\":true,\"num\":0}]');\n+      decoder.add('2[\"hello\"]');\n+    }).to.throwException(/^got plaintext data when reconstructing a packet$/);\n+  });\n });\n\ndiff --git a/test/parser.js b/test/parser.js\nindex 426e77c..4fdd938 100644\n--- a/test/parser.js\n+++ b/test/parser.js\n@@ -146,5 +146,9 @@ describe(\"parser\", () => {\n     expect(() => new Decoder().add(\"999\")).to.throwException(\n       /^unknown packet type 9$/\n     );\n+\n+    expect(() => new Decoder().add(999)).to.throwException(\n+      /^Unknown type: 999$/\n+    );\n   });\n });\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "b5d0cb7dc56a0601a09b056beaeeb0e43b160050", "source_date": "Mon Jun 27 15:39:24 2022 +0200", "source_tag": "4.2.1", "target_commit": "04d23cecafe1b859fb03e0cbf6ba3b74dff56d14", "target_date": "Wed Nov 9 11:04:00 2022 +0100", "target_tag": "3.4.2", "FAIL TO PASS": ["throws an error when decoding a binary event without attachments", "throws an error when adding an attachment with an invalid 'num' attribute (string)", "throws an error when adding an attachment with an invalid 'num' attribute (out-of-bound)"], "PASS TO PASS": ["encodes a Buffer", "encodes a nested Buffer", "encodes a binary ack with Buffer", "throws an error when adding an attachment without header"]}
{"ecosystem": "npm", "repo": "socket.io-parser", "instance_id": "socket.io-parser_146", "original_commit_message": "fix: check the format of the index of each attachment\nA specially crafted packet could be incorrectly decoded.\nExample:\n```js\nconst decoder = new Decoder();\ndecoder.on(\"decoded\", (packet) => {\nconsole.log(packet.data); // prints [ 'hello', [Function: splice] ]\n})\ndecoder.add('51-[\"hello\",{\"_placeholder\":true,\"num\":\"splice\"}]');\ndecoder.add(Buffer.from(\"world\"));\n```\nAs usual, please remember not to trust user input.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/lib/binary.ts b/lib/binary.ts\nindex 65d9789..3bc41b4 100644\n--- a/lib/binary.ts\n+++ b/lib/binary.ts\n@@ -60,8 +60,16 @@ export function reconstructPacket(packet, buffers) {\n function _reconstructPacket(data, buffers) {\n   if (!data) return data;\n \n-  if (data && data._placeholder) {\n-    return buffers[data.num]; // appropriate buffer (should be natural order anyway)\n+  if (data && data._placeholder === true) {\n+    const isIndexValid =\n+      typeof data.num === \"number\" &&\n+      data.num >= 0 &&\n+      data.num < buffers.length;\n+    if (isIndexValid) {\n+      return buffers[data.num]; // appropriate buffer (should be natural order anyway)\n+    } else {\n+      throw new Error(\"illegal attachments\");\n+    }\n   } else if (Array.isArray(data)) {\n     for (let i = 0; i < data.length; i++) {\n       data[i] = _reconstructPacket(data[i], buffers);\n\ndiff --git a/lib/index.ts b/lib/index.ts\nindex 453425f..1170d17 100644\n--- a/lib/index.ts\n+++ b/lib/index.ts\n@@ -145,6 +145,9 @@ export class Decoder extends Emitter<{}, {}, DecoderReservedEvents> {\n   public add(obj: any) {\n     let packet;\n     if (typeof obj === \"string\") {\n+      if (this.reconstructor) {\n+        throw new Error(\"got plaintext data when reconstructing a packet\");\n+      }\n       packet = this.decodeString(obj);\n       if (\n         packet.type === PacketType.BINARY_EVENT ||\n\n\n</patch>\n<test_patch>\ndiff --git a/test/buffer.js b/test/buffer.js\nindex af8e1ba..367ebcd 100644\n--- a/test/buffer.js\n+++ b/test/buffer.js\n@@ -1,5 +1,6 @@\n-const { PacketType } = require(\"..\");\n+const { PacketType, Decoder } = require(\"../\");\n const helpers = require(\"./helpers.js\");\n+const expect = require(\"expect.js\");\n \n describe(\"parser\", () => {\n   it(\"encodes a Buffer\", (done) => {\n@@ -14,6 +15,18 @@ describe(\"parser\", () => {\n     );\n   });\n \n+  it(\"encodes a nested Buffer\", (done) => {\n+    helpers.test_bin(\n+      {\n+        type: PacketType.EVENT,\n+        data: [\"a\", { b: [\"c\", Buffer.from(\"abc\", \"utf8\")] }],\n+        id: 23,\n+        nsp: \"/cool\",\n+      },\n+      done\n+    );\n+  });\n+\n   it(\"encodes a binary ack with Buffer\", (done) => {\n     helpers.test_bin(\n       {\n@@ -25,4 +38,39 @@ describe(\"parser\", () => {\n       done\n     );\n   });\n+\n+  it(\"throws an error when adding an attachment with an invalid 'num' attribute (string)\", () => {\n+    const decoder = new Decoder();\n+\n+    expect(() => {\n+      decoder.add('51-[\"hello\",{\"_placeholder\":true,\"num\":\"splice\"}]');\n+      decoder.add(Buffer.from(\"world\"));\n+    }).to.throwException(/^illegal attachments$/);\n+  });\n+\n+  it(\"throws an error when adding an attachment with an invalid 'num' attribute (out-of-bound)\", () => {\n+    const decoder = new Decoder();\n+\n+    expect(() => {\n+      decoder.add('51-[\"hello\",{\"_placeholder\":true,\"num\":1}]');\n+      decoder.add(Buffer.from(\"world\"));\n+    }).to.throwException(/^illegal attachments$/);\n+  });\n+\n+  it(\"throws an error when adding an attachment without header\", () => {\n+    const decoder = new Decoder();\n+\n+    expect(() => {\n+      decoder.add(Buffer.from(\"world\"));\n+    }).to.throwException(/^got binary data when not reconstructing a packet$/);\n+  });\n+\n+  it(\"throws an error when decoding a binary event without attachments\", () => {\n+    const decoder = new Decoder();\n+\n+    expect(() => {\n+      decoder.add('51-[\"hello\",{\"_placeholder\":true,\"num\":0}]');\n+      decoder.add('2[\"hello\"]');\n+    }).to.throwException(/^got plaintext data when reconstructing a packet$/);\n+  });\n });\n\ndiff --git a/test/parser.js b/test/parser.js\nindex 426e77c..4fdd938 100644\n--- a/test/parser.js\n+++ b/test/parser.js\n@@ -146,5 +146,9 @@ describe(\"parser\", () => {\n     expect(() => new Decoder().add(\"999\")).to.throwException(\n       /^unknown packet type 9$/\n     );\n+\n+    expect(() => new Decoder().add(999)).to.throwException(\n+      /^Unknown type: 999$/\n+    );\n   });\n });\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "b5d0cb7dc56a0601a09b056beaeeb0e43b160050", "source_date": "Mon Jun 27 15:39:24 2022 +0200", "source_tag": "4.2.1", "target_commit": "fb21e422fc193b34347395a33e0f625bebc09983", "target_date": "Wed Nov 9 11:21:34 2022 +0100", "target_tag": "3.3.3", "FAIL TO PASS": ["throws an error when decoding a binary event without attachments", "throws an error when adding an attachment with an invalid 'num' attribute (string)", "throws an error when adding an attachment with an invalid 'num' attribute (out-of-bound)"], "PASS TO PASS": ["encodes a Buffer", "encodes a nested Buffer", "encodes a binary ack with Buffer", "throws an error when adding an attachment without header"]}
{"ecosystem": "npm", "repo": "node-tar", "instance_id": "node-tar_155", "original_commit_message": "fix: prune dirCache properly for unicode, windows\nThis prunes the dirCache in a way that catches unicode filename matches.\nIf a symbolic link is encountered on Windows, the entire dirCache is\ncleared, as 8.3 shortname collisions may result in a path escape\nvulnerability in the case of symbolic links.  If such a collision occurs\nin the case of other types of entries, it is not such a big problem,\nbecause the unpack will fail.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/lib/unpack.js b/lib/unpack.js\nindex cf10d07..0783949 100644\n--- a/lib/unpack.js\n+++ b/lib/unpack.js\n@@ -16,10 +16,12 @@ const wc = require('./winchars.js')\n const pathReservations = require('./path-reservations.js')\n const stripAbsolutePath = require('./strip-absolute-path.js')\n const normPath = require('./normalize-windows-path.js')\n+const stripSlash = require('./strip-trailing-slashes.js')\n \n const ONENTRY = Symbol('onEntry')\n const CHECKFS = Symbol('checkFs')\n const CHECKFS2 = Symbol('checkFs2')\n+const PRUNECACHE = Symbol('pruneCache')\n const ISREUSABLE = Symbol('isReusable')\n const MAKEFS = Symbol('makeFs')\n const FILE = Symbol('file')\n@@ -43,6 +45,8 @@ const GID = Symbol('gid')\n const CHECKED_CWD = Symbol('checkedCwd')\n const crypto = require('crypto')\n const getFlag = require('./get-write-flag.js')\n+const platform = process.env.TESTING_TAR_FAKE_PLATFORM || process.platform\n+const isWindows = platform === 'win32'\n \n // Unlinks on Windows are not atomic.\n //\n@@ -61,7 +65,7 @@ const getFlag = require('./get-write-flag.js')\n // See: https://github.com/npm/node-tar/issues/183\n /* istanbul ignore next */\n const unlinkFile = (path, cb) => {\n-  if (process.platform !== 'win32')\n+  if (!isWindows)\n     return fs.unlink(path, cb)\n \n   const name = path + '.DELETE.' + crypto.randomBytes(16).toString('hex')\n@@ -74,7 +78,7 @@ const unlinkFile = (path, cb) => {\n \n /* istanbul ignore next */\n const unlinkFileSync = path => {\n-  if (process.platform !== 'win32')\n+  if (!isWindows)\n     return fs.unlinkSync(path)\n \n   const name = path + '.DELETE.' + crypto.randomBytes(16).toString('hex')\n@@ -88,17 +92,33 @@ const uint32 = (a, b, c) =>\n   : b === b >>> 0 ? b\n   : c\n \n+// clear the cache if it's a case-insensitive unicode-squashing match.\n+// we can't know if the current file system is case-sensitive or supports\n+// unicode fully, so we check for similarity on the maximally compatible\n+// representation.  Err on the side of pruning, since all it's doing is\n+// preventing lstats, and it's not the end of the world if we get a false\n+// positive.\n+// Note that on windows, we always drop the entire cache whenever a\n+// symbolic link is encountered, because 8.3 filenames are impossible\n+// to reason about, and collisions are hazards rather than just failures.\n+const cacheKeyNormalize = path => stripSlash(normPath(path))\n+  .normalize('NFKD')\n+  .toLowerCase()\n+\n const pruneCache = (cache, abs) => {\n-  // clear the cache if it's a case-insensitive match, since we can't\n-  // know if the current file system is case-sensitive or not.\n-  abs = normPath(abs).toLowerCase()\n+  abs = cacheKeyNormalize(abs)\n   for (const path of cache.keys()) {\n-    const plower = path.toLowerCase()\n-    if (plower === abs || plower.toLowerCase().indexOf(abs + '/') === 0)\n+    const pnorm = cacheKeyNormalize(path)\n+    if (pnorm === abs || pnorm.indexOf(abs + '/') === 0)\n       cache.delete(path)\n   }\n }\n \n+const dropCache = cache => {\n+  for (const key of cache.keys())\n+    cache.delete(key)\n+}\n+\n class Unpack extends Parser {\n   constructor (opt) {\n     if (!opt)\n@@ -158,7 +178,7 @@ class Unpack extends Parser {\n     this.forceChown = opt.forceChown === true\n \n     // turn ><?| in filenames into 0xf000-higher encoded forms\n-    this.win32 = !!opt.win32 || process.platform === 'win32'\n+    this.win32 = !!opt.win32 || isWindows\n \n     // do not unpack over files that are newer than what's in the archive\n     this.newer = !!opt.newer\n@@ -497,7 +517,7 @@ class Unpack extends Parser {\n       !this.unlink &&\n       st.isFile() &&\n       st.nlink <= 1 &&\n-      process.platform !== 'win32'\n+      !isWindows\n   }\n \n   // check if a thing is there, and if so, try to clobber it\n@@ -509,13 +529,30 @@ class Unpack extends Parser {\n     this.reservations.reserve(paths, done => this[CHECKFS2](entry, done))\n   }\n \n-  [CHECKFS2] (entry, done) {\n+  [PRUNECACHE] (entry) {\n     // if we are not creating a directory, and the path is in the dirCache,\n     // then that means we are about to delete the directory we created\n     // previously, and it is no longer going to be a directory, and neither\n     // is any of its children.\n-    if (entry.type !== 'Directory')\n+    // If a symbolic link is encountered on Windows, all bets are off.\n+    // There is no reasonable way to sanitize the cache in such a way\n+    // we will be able to avoid having filesystem collisions.  If this\n+    // happens with a non-symlink entry, it'll just fail to unpack,\n+    // but a symlink to a directory, using an 8.3 shortname, can evade\n+    // detection and lead to arbitrary writes to anywhere on the system.\n+    if (isWindows && entry.type === 'SymbolicLink')\n+      dropCache(this.dirCache)\n+    else if (entry.type !== 'Directory')\n       pruneCache(this.dirCache, entry.absolute)\n+  }\n+\n+  [CHECKFS2] (entry, fullyDone) {\n+    this[PRUNECACHE](entry)\n+\n+    const done = er => {\n+      this[PRUNECACHE](entry)\n+      fullyDone(er)\n+    }\n \n     const checkCwd = () => {\n       this[MKDIR](this.cwd, this.dmode, er => {\n@@ -566,7 +603,13 @@ class Unpack extends Parser {\n               return afterChmod()\n             return fs.chmod(entry.absolute, entry.mode, afterChmod)\n           }\n-          // not a dir entry, have to remove it.\n+          // Not a dir entry, have to remove it.\n+          // NB: the only way to end up with an entry that is the cwd\n+          // itself, in such a way that == does not detect, is a\n+          // tricky windows absolute path with UNC or 8.3 parts (and\n+          // preservePaths:true, or else it will have been stripped).\n+          // In that case, the user has opted out of path protections\n+          // explicitly, so if they blow away the cwd, c'est la vie.\n           if (entry.absolute !== this.cwd) {\n             return fs.rmdir(entry.absolute, er =>\n               this[MAKEFS](er, entry, done))\n@@ -641,8 +684,7 @@ class UnpackSync extends Unpack {\n   }\n \n   [CHECKFS] (entry) {\n-    if (entry.type !== 'Directory')\n-      pruneCache(this.dirCache, entry.absolute)\n+    this[PRUNECACHE](entry)\n \n     if (!this[CHECKED_CWD]) {\n       const er = this[MKDIR](this.cwd, this.dmode)\n@@ -691,7 +733,7 @@ class UnpackSync extends Unpack {\n     this[MAKEFS](er, entry)\n   }\n \n-  [FILE] (entry, _) {\n+  [FILE] (entry, done) {\n     const mode = entry.mode & 0o7777 || this.fmode\n \n     const oner = er => {\n@@ -703,6 +745,7 @@ class UnpackSync extends Unpack {\n       }\n       if (er || closeError)\n         this[ONERROR](er || closeError, entry)\n+      done()\n     }\n \n     let fd\n@@ -762,11 +805,14 @@ class UnpackSync extends Unpack {\n     })\n   }\n \n-  [DIRECTORY] (entry, _) {\n+  [DIRECTORY] (entry, done) {\n     const mode = entry.mode & 0o7777 || this.dmode\n     const er = this[MKDIR](entry.absolute, mode)\n-    if (er)\n-      return this[ONERROR](er, entry)\n+    if (er) {\n+      this[ONERROR](er, entry)\n+      done()\n+      return\n+    }\n     if (entry.mtime && !this.noMtime) {\n       try {\n         fs.utimesSync(entry.absolute, entry.atime || new Date(), entry.mtime)\n@@ -777,6 +823,7 @@ class UnpackSync extends Unpack {\n         fs.chownSync(entry.absolute, this[UID](entry), this[GID](entry))\n       } catch (er) {}\n     }\n+    done()\n     entry.resume()\n   }\n \n@@ -799,9 +846,10 @@ class UnpackSync extends Unpack {\n     }\n   }\n \n-  [LINK] (entry, linkpath, link, _) {\n+  [LINK] (entry, linkpath, link, done) {\n     try {\n       fs[link + 'Sync'](linkpath, entry.absolute)\n+      done()\n       entry.resume()\n     } catch (er) {\n       return this[ONERROR](er, entry)\n\n\n</patch>\n<test_patch>\ndiff --git a/test/unpack.js b/test/unpack.js\nindex 3ebbb23..d680638 100644\n--- a/test/unpack.js\n+++ b/test/unpack.js\n@@ -3001,3 +3001,146 @@ t.test('do not hang on large files that fail to open()', t => {\n     })\n   })\n })\n+\n+t.test('dirCache pruning unicode normalized collisions', {\n+  skip: isWindows && 'symlinks not fully supported',\n+}, t => {\n+  const data = makeTar([\n+    {\n+      type: 'Directory',\n+      path: 'foo',\n+    },\n+    {\n+      type: 'File',\n+      path: 'foo/bar',\n+      size: 1,\n+    },\n+    'x',\n+    {\n+      type: 'Directory',\n+      // café\n+      path: Buffer.from([0x63, 0x61, 0x66, 0xc3, 0xa9]).toString(),\n+    },\n+    {\n+      type: 'SymbolicLink',\n+      // cafe with a `\n+      path: Buffer.from([0x63, 0x61, 0x66, 0x65, 0xcc, 0x81]).toString(),\n+      linkpath: 'foo',\n+    },\n+    {\n+      type: 'File',\n+      path: Buffer.from([0x63, 0x61, 0x66, 0xc3, 0xa9]).toString() + '/bar',\n+      size: 1,\n+    },\n+    'y',\n+    '',\n+    '',\n+  ])\n+\n+  const check = (path, dirCache, t) => {\n+    path = path.replace(/\\\\/g, '/')\n+    t.strictSame([...dirCache.entries()], [\n+      [path, true],\n+      [`${path}/foo`, true],\n+    ])\n+    t.equal(fs.readFileSync(path + '/foo/bar', 'utf8'), 'x')\n+    t.end()\n+  }\n+\n+  t.test('sync', t => {\n+    const path = t.testdir()\n+    const dirCache = new Map()\n+    new UnpackSync({ cwd: path, dirCache }).end(data)\n+    check(path, dirCache, t)\n+  })\n+  t.test('async', t => {\n+    const path = t.testdir()\n+    const dirCache = new Map()\n+    new Unpack({ cwd: path, dirCache })\n+      .on('close', () => check(path, dirCache, t))\n+      .end(data)\n+  })\n+\n+  t.end()\n+})\n+\n+t.test('dircache prune all on windows when symlink encountered', t => {\n+  if (process.platform !== 'win32') {\n+    process.env.TESTING_TAR_FAKE_PLATFORM = 'win32'\n+    t.teardown(() => {\n+      delete process.env.TESTING_TAR_FAKE_PLATFORM\n+    })\n+  }\n+  const symlinks = []\n+  const Unpack = t.mock('../lib/unpack.js', {\n+    fs: {\n+      ...fs,\n+      symlink: (target, dest, cb) => {\n+        symlinks.push(['async', target, dest])\n+        process.nextTick(cb)\n+      },\n+      symlinkSync: (target, dest) => symlinks.push(['sync', target, dest]),\n+    },\n+  })\n+  const UnpackSync = Unpack.Sync\n+\n+  const data = makeTar([\n+    {\n+      type: 'Directory',\n+      path: 'foo',\n+    },\n+    {\n+      type: 'File',\n+      path: 'foo/bar',\n+      size: 1,\n+    },\n+    'x',\n+    {\n+      type: 'Directory',\n+      // café\n+      path: Buffer.from([0x63, 0x61, 0x66, 0xc3, 0xa9]).toString(),\n+    },\n+    {\n+      type: 'SymbolicLink',\n+      // cafe with a `\n+      path: Buffer.from([0x63, 0x61, 0x66, 0x65, 0xcc, 0x81]).toString(),\n+      linkpath: 'safe/actually/but/cannot/be/too/careful',\n+    },\n+    {\n+      type: 'File',\n+      path: 'bar/baz',\n+      size: 1,\n+    },\n+    'z',\n+    '',\n+    '',\n+  ])\n+\n+  const check = (path, dirCache, t) => {\n+    // symlink blew away all dirCache entries before it\n+    path = path.replace(/\\\\/g, '/')\n+    t.strictSame([...dirCache.entries()], [\n+      [`${path}/bar`, true],\n+    ])\n+    t.equal(fs.readFileSync(`${path}/foo/bar`, 'utf8'), 'x')\n+    t.equal(fs.readFileSync(`${path}/bar/baz`, 'utf8'), 'z')\n+    t.end()\n+  }\n+\n+  t.test('sync', t => {\n+    const path = t.testdir()\n+    const dirCache = new Map()\n+    new UnpackSync({ cwd: path, dirCache }).end(data)\n+    check(path, dirCache, t)\n+  })\n+\n+  t.test('async', t => {\n+    const path = t.testdir()\n+    const dirCache = new Map()\n+    new Unpack({ cwd: path, dirCache })\n+      .on('close', () => check(path, dirCache, t))\n+      .end(data)\n+  })\n+\n+  t.end()\n+})\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "logical and structural changes", "source_commit": "3aaf19b2501bbddb145d92b3322c80dcaed3c35f", "source_date": "Thu Aug 12 13:11:24 2021 -0700", "source_tag": "6.1.9", "target_commit": "2f1bca027286c23e110b8dfc7efc10756fa3db5a", "target_date": "Thu Aug 12 13:12:11 2021 -0700", "target_tag": "4.4.18", "FAIL TO PASS": ["38 - dircache prune all on windows when symlink encountered"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "keystone", "instance_id": "keystone_672", "original_commit_message": "Ensure token expiration is maintained (bug 1079216)\nChange-Id: I95853ec36e9c4cd937cfac7e08b648e830f9efd0", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/keystone/service.py b/keystone/service.py\nindex 90b44562f..808fb91f1 100644\n--- a/keystone/service.py\n+++ b/keystone/service.py\n@@ -530,6 +530,7 @@ class TokenController(wsgi.Application):\n             self.token_api.create_token(\n                 context, token_id, dict(key=token_id,\n                                         id=token_id,\n+                                        expires=auth_token_data['expires'],\n                                         user=user_ref,\n                                         tenant=tenant_ref,\n                                         metadata=metadata_ref))\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/test_service.py b/tests/test_service.py\nindex 088d222b5..c256e7e03 100644\n--- a/tests/test_service.py\n+++ b/tests/test_service.py\n@@ -12,10 +12,12 @@\n # License for the specific language governing permissions and limitations\n # under the License.\n \n+import time\n import uuid\n \n import default_fixtures\n \n+from keystone import config\n from keystone import exception\n from keystone import identity\n from keystone import service\n@@ -24,6 +26,9 @@ from keystone.identity.backends import kvs as kvs_identity\n from keystone.openstack.common import timeutils\n \n \n+CONF = config.CONF\n+\n+\n def _build_user_auth(token=None, username=None,\n                      password=None, tenant_name=None):\n     \"\"\"Build auth dictionary.\n@@ -296,3 +301,55 @@ class AuthWithRemoteUser(TokenControllerTest):\n             self.api.authenticate,\n             {'REMOTE_USER': uuid.uuid4().hex},\n             body_dict)\n+\n+\n+class TokenExpirationTest(test.TestCase):\n+    def setUp(self):\n+        super(TokenExpirationTest, self).setUp()\n+        self.identity_api = kvs_identity.Identity()\n+        self.load_fixtures(default_fixtures)\n+        self.api = service.TokenController()\n+\n+    def _maintain_token_expiration(self):\n+        \"\"\"Token expiration should be maintained after re-auth & validation.\"\"\"\n+        r = self.api.authenticate(\n+            {},\n+            auth={\n+                'passwordCredentials': {\n+                    'username': self.user_foo['name'],\n+                    'password': self.user_foo['password']\n+                }\n+            })\n+        unscoped_token_id = r['access']['token']['id']\n+        original_expiration = r['access']['token']['expires']\n+\n+        time.sleep(0.5)\n+\n+        r = self.api.validate_token(\n+            dict(is_admin=True, query_string={}),\n+            token_id=unscoped_token_id)\n+        self.assertEqual(original_expiration, r['access']['token']['expires'])\n+\n+        time.sleep(0.5)\n+\n+        r = self.api.authenticate(\n+            {},\n+            auth={\n+                'token': {\n+                    'id': unscoped_token_id,\n+                },\n+                'tenantId': self.tenant_bar['id'],\n+            })\n+        scoped_token_id = r['access']['token']['id']\n+        self.assertEqual(original_expiration, r['access']['token']['expires'])\n+\n+        time.sleep(0.5)\n+\n+        r = self.api.validate_token(\n+            dict(is_admin=True, query_string={}),\n+            token_id=scoped_token_id)\n+        self.assertEqual(original_expiration, r['access']['token']['expires'])\n+\n+    def test_maintain_uuid_token_expiration(self):\n+        self.opt_in_group('signing', token_format='UUID')\n+        self._maintain_token_expiration()\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "38c7e46a640a94da4da89a39a5a1ea9c081f1eb5", "source_date": "Wed Nov 28 10:28:07 2012 -0500", "source_tag": "8.0.0", "target_commit": "f9d4766249a72d8f88d75dcf1575b28dd3496681", "target_date": "Wed Nov 28 16:44:42 2012 +0100", "target_tag": "2012.2.1", "FAIL TO PASS": ["test_maintain_uuid_token_expiration"], "PASS TO PASS": []}
{"ecosystem": "npm", "repo": "node-tar", "instance_id": "node-tar_162", "original_commit_message": "fix: reserve paths properly for unicode, windows\nThis updates the path reservation system such that it will properly\nawait any paths that match based on unicode normalization.\nOn windows, because 8.3 shortnames can collide in ways that are\nundetectable by any reasonable means, all unpack parallelization is\nsimply disabled.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/lib/path-reservations.js b/lib/path-reservations.js\nindex 167447a..8d0ead9 100644\n--- a/lib/path-reservations.js\n+++ b/lib/path-reservations.js\n@@ -8,8 +8,12 @@\n \n const assert = require('assert')\n const normPath = require('./normalize-windows-path.js')\n+const stripSlashes = require('./strip-trailing-slashes.js')\n const { join } = require('path')\n \n+const platform = process.env.TESTING_TAR_FAKE_PLATFORM || process.platform\n+const isWindows = platform === 'win32'\n+\n module.exports = () => {\n   // path => [function or Set]\n   // A Set object means a directory reservation\n@@ -20,10 +24,16 @@ module.exports = () => {\n   const reservations = new Map()\n \n   // return a set of parent dirs for a given path\n-  const getDirs = path =>\n-    path.split('/').slice(0, -1).reduce((set, path) =>\n-      set.length ? set.concat(normPath(join(set[set.length - 1], path)))\n-      : [path], [])\n+  // '/a/b/c/d' -> ['/', '/a', '/a/b', '/a/b/c', '/a/b/c/d']\n+  const getDirs = path => {\n+    const dirs = path.split('/').slice(0, -1).reduce((set, path) => {\n+      if (set.length)\n+        path = normPath(join(set[set.length - 1], path))\n+      set.push(path || '/')\n+      return set\n+    }, [])\n+    return dirs\n+  }\n \n   // functions currently running\n   const running = new Set()\n@@ -99,7 +109,18 @@ module.exports = () => {\n   }\n \n   const reserve = (paths, fn) => {\n-    paths = paths.map(p => normPath(join(p)).toLowerCase())\n+    // collide on matches across case and unicode normalization\n+    // On windows, thanks to the magic of 8.3 shortnames, it is fundamentally\n+    // impossible to determine whether two paths refer to the same thing on\n+    // disk, without asking the kernel for a shortname.\n+    // So, we just pretend that every path matches every other path here,\n+    // effectively removing all parallelization on windows.\n+    paths = isWindows ? ['win32 parallelization disabled'] : paths.map(p => {\n+      return stripSlashes(normPath(join(p)))\n+        .normalize('NFKD')\n+        .toLowerCase()\n+    })\n+\n     const dirs = new Set(\n       paths.map(path => getDirs(path)).reduce((a, b) => a.concat(b))\n     )\n\n\n</patch>\n<test_patch>\ndiff --git a/test/path-reservations.js b/test/path-reservations.js\nindex 9ce46b8..352fe64 100644\n--- a/test/path-reservations.js\n+++ b/test/path-reservations.js\n@@ -1,5 +1,13 @@\n const t = require('tap')\n+\n+// load up the posix and windows versions of the reserver\n+if (process.platform === 'win32')\n+  process.env.TESTING_TAR_FAKE_PLATFORM = 'posix'\n const { reserve } = require('../lib/path-reservations.js')()\n+delete process.env.TESTING_TAR_FAKE_PLATFORM\n+if (process.platform !== 'win32')\n+  process.env.TESTING_TAR_FAKE_PLATFORM = 'win32'\n+const { reserve: winReserve } = t.mock('../lib/path-reservations.js')()\n \n t.test('basic race', t => {\n   // simulate the race conditions we care about\n@@ -54,3 +62,87 @@ t.test('basic race', t => {\n   t.notOk(reserve(['a/b'], dir2), 'dir2 waits')\n   t.notOk(reserve(['a/b/x'], dir3), 'dir3 waits')\n })\n+\n+t.test('unicode shenanigans', t => {\n+  const e1 = Buffer.from([0xc3, 0xa9])\n+  const e2 = Buffer.from([0x65, 0xcc, 0x81])\n+  let didCafe1 = false\n+  const cafe1 = done => {\n+    t.equal(didCafe1, false, 'did cafe1 only once')\n+    t.equal(didCafe2, false, 'did cafe1 before cafe2')\n+    didCafe1 = true\n+    setTimeout(done)\n+  }\n+  let didCafe2 = false\n+  const cafe2 = done => {\n+    t.equal(didCafe1, true, 'did cafe1 before cafe2')\n+    t.equal(didCafe2, false, 'did cafe2 only once')\n+    didCafe2 = true\n+    done()\n+    t.end()\n+  }\n+  const cafePath1 = `c/a/f/${e1}`\n+  const cafePath2 = `c/a/f/${e2}`\n+  t.ok(reserve([cafePath1], cafe1))\n+  t.notOk(reserve([cafePath2], cafe2))\n+})\n+\n+t.test('absolute paths and trailing slash', t => {\n+  let calledA1 = false\n+  let calledA2 = false\n+  const a1 = done => {\n+    t.equal(calledA1, false, 'called a1 only once')\n+    t.equal(calledA2, false, 'called a1 before 2')\n+    calledA1 = true\n+    setTimeout(done)\n+  }\n+  const a2 = done => {\n+    t.equal(calledA1, true, 'called a1 before 2')\n+    t.equal(calledA2, false, 'called a2 only once')\n+    calledA2 = true\n+    done()\n+    if (calledR2)\n+      t.end()\n+  }\n+  let calledR1 = false\n+  let calledR2 = false\n+  const r1 = done => {\n+    t.equal(calledR1, false, 'called r1 only once')\n+    t.equal(calledR2, false, 'called r1 before 2')\n+    calledR1 = true\n+    setTimeout(done)\n+  }\n+  const r2 = done => {\n+    t.equal(calledR1, true, 'called r1 before 2')\n+    t.equal(calledR2, false, 'called r1 only once')\n+    calledR2 = true\n+    done()\n+    if (calledA2)\n+      t.end()\n+  }\n+  t.ok(reserve(['/p/a/t/h'], a1))\n+  t.notOk(reserve(['/p/a/t/h/'], a2))\n+  t.ok(reserve(['p/a/t/h'], r1))\n+  t.notOk(reserve(['p/a/t/h/'], r2))\n+})\n+\n+t.test('on windows, everything collides with everything', t => {\n+  const reserve = winReserve\n+  let called1 = false\n+  let called2 = false\n+  const f1 = done => {\n+    t.equal(called1, false, 'only call 1 once')\n+    t.equal(called2, false, 'call 1 before 2')\n+    called1 = true\n+    setTimeout(done)\n+  }\n+  const f2 = done => {\n+    t.equal(called1, true, 'call 1 before 2')\n+    t.equal(called2, false, 'only call 2 once')\n+    called2 = true\n+    done()\n+    t.end()\n+  }\n+  t.equal(reserve(['some/path'], f1), true)\n+  t.equal(reserve(['other/path'], f2), false)\n+})\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "b6162c7fafe797f856564ef37f4b82747f051455", "source_date": "Thu Aug 12 13:11:25 2021 -0700", "source_tag": "6.1.9", "target_commit": "1739408d3122af897caefd09662bce2ea477533b", "target_date": "Thu Aug 12 13:11:48 2021 -0700", "target_tag": "5.0.10", "FAIL TO PASS": ["3 - absolute paths and trailing slash", "6 - test after end() was called", "5 - test after end() was called"], "PASS TO PASS": []}
{"ecosystem": "npm", "repo": "node-tar", "instance_id": "node-tar_164", "original_commit_message": "fix: reserve paths properly for unicode, windows\nThis updates the path reservation system such that it will properly\nawait any paths that match based on unicode normalization.\nOn windows, because 8.3 shortnames can collide in ways that are\nundetectable by any reasonable means, all unpack parallelization is\nsimply disabled.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/lib/path-reservations.js b/lib/path-reservations.js\nindex 167447a..8d0ead9 100644\n--- a/lib/path-reservations.js\n+++ b/lib/path-reservations.js\n@@ -8,8 +8,12 @@\n \n const assert = require('assert')\n const normPath = require('./normalize-windows-path.js')\n+const stripSlashes = require('./strip-trailing-slashes.js')\n const { join } = require('path')\n \n+const platform = process.env.TESTING_TAR_FAKE_PLATFORM || process.platform\n+const isWindows = platform === 'win32'\n+\n module.exports = () => {\n   // path => [function or Set]\n   // A Set object means a directory reservation\n@@ -20,10 +24,16 @@ module.exports = () => {\n   const reservations = new Map()\n \n   // return a set of parent dirs for a given path\n-  const getDirs = path =>\n-    path.split('/').slice(0, -1).reduce((set, path) =>\n-      set.length ? set.concat(normPath(join(set[set.length - 1], path)))\n-      : [path], [])\n+  // '/a/b/c/d' -> ['/', '/a', '/a/b', '/a/b/c', '/a/b/c/d']\n+  const getDirs = path => {\n+    const dirs = path.split('/').slice(0, -1).reduce((set, path) => {\n+      if (set.length)\n+        path = normPath(join(set[set.length - 1], path))\n+      set.push(path || '/')\n+      return set\n+    }, [])\n+    return dirs\n+  }\n \n   // functions currently running\n   const running = new Set()\n@@ -99,7 +109,18 @@ module.exports = () => {\n   }\n \n   const reserve = (paths, fn) => {\n-    paths = paths.map(p => normPath(join(p)).toLowerCase())\n+    // collide on matches across case and unicode normalization\n+    // On windows, thanks to the magic of 8.3 shortnames, it is fundamentally\n+    // impossible to determine whether two paths refer to the same thing on\n+    // disk, without asking the kernel for a shortname.\n+    // So, we just pretend that every path matches every other path here,\n+    // effectively removing all parallelization on windows.\n+    paths = isWindows ? ['win32 parallelization disabled'] : paths.map(p => {\n+      return stripSlashes(normPath(join(p)))\n+        .normalize('NFKD')\n+        .toLowerCase()\n+    })\n+\n     const dirs = new Set(\n       paths.map(path => getDirs(path)).reduce((a, b) => a.concat(b))\n     )\n\n\n</patch>\n<test_patch>\ndiff --git a/test/path-reservations.js b/test/path-reservations.js\nindex 9ce46b8..352fe64 100644\n--- a/test/path-reservations.js\n+++ b/test/path-reservations.js\n@@ -1,5 +1,13 @@\n const t = require('tap')\n+\n+// load up the posix and windows versions of the reserver\n+if (process.platform === 'win32')\n+  process.env.TESTING_TAR_FAKE_PLATFORM = 'posix'\n const { reserve } = require('../lib/path-reservations.js')()\n+delete process.env.TESTING_TAR_FAKE_PLATFORM\n+if (process.platform !== 'win32')\n+  process.env.TESTING_TAR_FAKE_PLATFORM = 'win32'\n+const { reserve: winReserve } = t.mock('../lib/path-reservations.js')()\n \n t.test('basic race', t => {\n   // simulate the race conditions we care about\n@@ -54,3 +62,87 @@ t.test('basic race', t => {\n   t.notOk(reserve(['a/b'], dir2), 'dir2 waits')\n   t.notOk(reserve(['a/b/x'], dir3), 'dir3 waits')\n })\n+\n+t.test('unicode shenanigans', t => {\n+  const e1 = Buffer.from([0xc3, 0xa9])\n+  const e2 = Buffer.from([0x65, 0xcc, 0x81])\n+  let didCafe1 = false\n+  const cafe1 = done => {\n+    t.equal(didCafe1, false, 'did cafe1 only once')\n+    t.equal(didCafe2, false, 'did cafe1 before cafe2')\n+    didCafe1 = true\n+    setTimeout(done)\n+  }\n+  let didCafe2 = false\n+  const cafe2 = done => {\n+    t.equal(didCafe1, true, 'did cafe1 before cafe2')\n+    t.equal(didCafe2, false, 'did cafe2 only once')\n+    didCafe2 = true\n+    done()\n+    t.end()\n+  }\n+  const cafePath1 = `c/a/f/${e1}`\n+  const cafePath2 = `c/a/f/${e2}`\n+  t.ok(reserve([cafePath1], cafe1))\n+  t.notOk(reserve([cafePath2], cafe2))\n+})\n+\n+t.test('absolute paths and trailing slash', t => {\n+  let calledA1 = false\n+  let calledA2 = false\n+  const a1 = done => {\n+    t.equal(calledA1, false, 'called a1 only once')\n+    t.equal(calledA2, false, 'called a1 before 2')\n+    calledA1 = true\n+    setTimeout(done)\n+  }\n+  const a2 = done => {\n+    t.equal(calledA1, true, 'called a1 before 2')\n+    t.equal(calledA2, false, 'called a2 only once')\n+    calledA2 = true\n+    done()\n+    if (calledR2)\n+      t.end()\n+  }\n+  let calledR1 = false\n+  let calledR2 = false\n+  const r1 = done => {\n+    t.equal(calledR1, false, 'called r1 only once')\n+    t.equal(calledR2, false, 'called r1 before 2')\n+    calledR1 = true\n+    setTimeout(done)\n+  }\n+  const r2 = done => {\n+    t.equal(calledR1, true, 'called r1 before 2')\n+    t.equal(calledR2, false, 'called r1 only once')\n+    calledR2 = true\n+    done()\n+    if (calledA2)\n+      t.end()\n+  }\n+  t.ok(reserve(['/p/a/t/h'], a1))\n+  t.notOk(reserve(['/p/a/t/h/'], a2))\n+  t.ok(reserve(['p/a/t/h'], r1))\n+  t.notOk(reserve(['p/a/t/h/'], r2))\n+})\n+\n+t.test('on windows, everything collides with everything', t => {\n+  const reserve = winReserve\n+  let called1 = false\n+  let called2 = false\n+  const f1 = done => {\n+    t.equal(called1, false, 'only call 1 once')\n+    t.equal(called2, false, 'call 1 before 2')\n+    called1 = true\n+    setTimeout(done)\n+  }\n+  const f2 = done => {\n+    t.equal(called1, true, 'call 1 before 2')\n+    t.equal(called2, false, 'only call 2 once')\n+    called2 = true\n+    done()\n+    t.end()\n+  }\n+  t.equal(reserve(['some/path'], f1), true)\n+  t.equal(reserve(['other/path'], f2), false)\n+})\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "b6162c7fafe797f856564ef37f4b82747f051455", "source_date": "Thu Aug 12 13:11:25 2021 -0700", "source_tag": "6.1.9", "target_commit": "bb93ba243746f705092905da1955ac3b0509ba1e", "target_date": "Thu Aug 12 13:12:12 2021 -0700", "target_tag": "4.4.18", "FAIL TO PASS": ["3 - absolute paths and trailing slash", "6 - test after end() was called", "5 - test after end() was called"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_676", "original_commit_message": "[3.0.x] Fixed CVE-2020-13254 -- Enforced cache key validation in memcached backends.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/core/cache/__init__.py b/django/core/cache/__init__.py\nindex 735b83e94f..ed72fe88e1 100644\n--- a/django/core/cache/__init__.py\n+++ b/django/core/cache/__init__.py\n@@ -17,13 +17,13 @@ from asgiref.local import Local\n from django.conf import settings\n from django.core import signals\n from django.core.cache.backends.base import (\n-    BaseCache, CacheKeyWarning, InvalidCacheBackendError,\n+    BaseCache, CacheKeyWarning, InvalidCacheBackendError, InvalidCacheKey,\n )\n from django.utils.module_loading import import_string\n \n __all__ = [\n     'cache', 'caches', 'DEFAULT_CACHE_ALIAS', 'InvalidCacheBackendError',\n-    'CacheKeyWarning', 'BaseCache',\n+    'CacheKeyWarning', 'BaseCache', 'InvalidCacheKey',\n ]\n \n DEFAULT_CACHE_ALIAS = 'default'\n\ndiff --git a/django/core/cache/backends/base.py b/django/core/cache/backends/base.py\nindex b3a65ab40f..86a7aca575 100644\n--- a/django/core/cache/backends/base.py\n+++ b/django/core/cache/backends/base.py\n@@ -14,6 +14,10 @@ class CacheKeyWarning(RuntimeWarning):\n     pass\n \n \n+class InvalidCacheKey(ValueError):\n+    pass\n+\n+\n # Stub class to ensure not passing in a `timeout` argument results in\n # the default timeout\n DEFAULT_TIMEOUT = object()\n@@ -241,18 +245,8 @@ class BaseCache:\n         backend. This encourages (but does not force) writing backend-portable\n         cache code.\n         \"\"\"\n-        if len(key) > MEMCACHE_MAX_KEY_LENGTH:\n-            warnings.warn(\n-                'Cache key will cause errors if used with memcached: %r '\n-                '(longer than %s)' % (key, MEMCACHE_MAX_KEY_LENGTH), CacheKeyWarning\n-            )\n-        for char in key:\n-            if ord(char) < 33 or ord(char) == 127:\n-                warnings.warn(\n-                    'Cache key contains characters that will cause errors if '\n-                    'used with memcached: %r' % key, CacheKeyWarning\n-                )\n-                break\n+        for warning in memcache_key_warnings(key):\n+            warnings.warn(warning, CacheKeyWarning)\n \n     def incr_version(self, key, delta=1, version=None):\n         \"\"\"\n@@ -280,3 +274,18 @@ class BaseCache:\n     def close(self, **kwargs):\n         \"\"\"Close the cache connection\"\"\"\n         pass\n+\n+\n+def memcache_key_warnings(key):\n+    if len(key) > MEMCACHE_MAX_KEY_LENGTH:\n+        yield (\n+            'Cache key will cause errors if used with memcached: %r '\n+            '(longer than %s)' % (key, MEMCACHE_MAX_KEY_LENGTH)\n+        )\n+    for char in key:\n+        if ord(char) < 33 or ord(char) == 127:\n+            yield (\n+                'Cache key contains characters that will cause errors if '\n+                'used with memcached: %r' % key, CacheKeyWarning\n+            )\n+            break\n\ndiff --git a/django/core/cache/backends/memcached.py b/django/core/cache/backends/memcached.py\nindex 48cfb8310b..b763d1d624 100644\n--- a/django/core/cache/backends/memcached.py\n+++ b/django/core/cache/backends/memcached.py\n@@ -4,7 +4,9 @@ import pickle\n import re\n import time\n \n-from django.core.cache.backends.base import DEFAULT_TIMEOUT, BaseCache\n+from django.core.cache.backends.base import (\n+    DEFAULT_TIMEOUT, BaseCache, InvalidCacheKey, memcache_key_warnings,\n+)\n from django.utils.functional import cached_property\n \n \n@@ -64,24 +66,30 @@ class BaseMemcachedCache(BaseCache):\n \n     def add(self, key, value, timeout=DEFAULT_TIMEOUT, version=None):\n         key = self.make_key(key, version=version)\n+        self.validate_key(key)\n         return self._cache.add(key, value, self.get_backend_timeout(timeout))\n \n     def get(self, key, default=None, version=None):\n         key = self.make_key(key, version=version)\n+        self.validate_key(key)\n         return self._cache.get(key, default)\n \n     def set(self, key, value, timeout=DEFAULT_TIMEOUT, version=None):\n         key = self.make_key(key, version=version)\n+        self.validate_key(key)\n         if not self._cache.set(key, value, self.get_backend_timeout(timeout)):\n             # make sure the key doesn't keep its old value in case of failure to set (memcached's 1MB limit)\n             self._cache.delete(key)\n \n     def delete(self, key, version=None):\n         key = self.make_key(key, version=version)\n+        self.validate_key(key)\n         self._cache.delete(key)\n \n     def get_many(self, keys, version=None):\n         key_map = {self.make_key(key, version=version): key for key in keys}\n+        for key in key_map:\n+            self.validate_key(key)\n         ret = self._cache.get_multi(key_map.keys())\n         return {key_map[k]: v for k, v in ret.items()}\n \n@@ -91,6 +99,7 @@ class BaseMemcachedCache(BaseCache):\n \n     def incr(self, key, delta=1, version=None):\n         key = self.make_key(key, version=version)\n+        self.validate_key(key)\n         # memcached doesn't support a negative delta\n         if delta < 0:\n             return self._cache.decr(key, -delta)\n@@ -109,6 +118,7 @@ class BaseMemcachedCache(BaseCache):\n \n     def decr(self, key, delta=1, version=None):\n         key = self.make_key(key, version=version)\n+        self.validate_key(key)\n         # memcached doesn't support a negative delta\n         if delta < 0:\n             return self._cache.incr(key, -delta)\n@@ -130,6 +140,7 @@ class BaseMemcachedCache(BaseCache):\n         original_keys = {}\n         for key, value in data.items():\n             safe_key = self.make_key(key, version=version)\n+            self.validate_key(safe_key)\n             safe_data[safe_key] = value\n             original_keys[safe_key] = key\n         failed_keys = self._cache.set_multi(safe_data, self.get_backend_timeout(timeout))\n@@ -141,6 +152,10 @@ class BaseMemcachedCache(BaseCache):\n     def clear(self):\n         self._cache.flush_all()\n \n+    def validate_key(self, key):\n+        for warning in memcache_key_warnings(key):\n+            raise InvalidCacheKey(warning)\n+\n \n class MemcachedCache(BaseMemcachedCache):\n     \"An implementation of a cache binding using python-memcached\"\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 871b1498aa..a30e4ceeb8 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -15,7 +15,7 @@ from unittest import mock\n from django.conf import settings\n from django.core import management, signals\n from django.core.cache import (\n-    DEFAULT_CACHE_ALIAS, CacheKeyWarning, cache, caches,\n+    DEFAULT_CACHE_ALIAS, CacheKeyWarning, InvalidCacheKey, cache, caches,\n )\n from django.core.cache.utils import make_template_fragment_key\n from django.db import close_old_connections, connection, connections\n@@ -610,10 +610,10 @@ class BaseCacheTests:\n \n     def _perform_invalid_key_test(self, key, expected_warning):\n         \"\"\"\n-        All the builtin backends (except memcached, see below) should warn on\n-        keys that would be refused by memcached. This encourages portable\n-        caching code without making it too difficult to use production backends\n-        with more liberal key rules. Refs #6447.\n+        All the builtin backends should warn (except memcached that should\n+        error) on keys that would be refused by memcached. This encourages\n+        portable caching code without making it too difficult to use production\n+        backends with more liberal key rules. Refs #6447.\n         \"\"\"\n         # mimic custom ``make_key`` method being defined since the default will\n         # never show the below warnings\n@@ -1256,24 +1256,14 @@ class BaseMemcachedTests(BaseCacheTests):\n                 with self.settings(CACHES={'default': params}):\n                     self.assertEqual(cache._servers, ['server1.tld', 'server2:11211'])\n \n-    def test_invalid_key_characters(self):\n+    def _perform_invalid_key_test(self, key, expected_warning):\n         \"\"\"\n-        On memcached, we don't introduce a duplicate key validation\n-        step (for speed reasons), we just let the memcached API\n-        library raise its own exception on bad keys. Refs #6447.\n-\n-        In order to be memcached-API-library agnostic, we only assert\n-        that a generic exception of some kind is raised.\n+        Whilst other backends merely warn, memcached should raise for an\n+        invalid key.\n         \"\"\"\n-        # memcached does not allow whitespace or control characters in keys\n-        # when using the ascii protocol.\n-        with self.assertRaises(Exception):\n-            cache.set('key with spaces', 'value')\n-\n-    def test_invalid_key_length(self):\n-        # memcached limits key length to 250\n-        with self.assertRaises(Exception):\n-            cache.set('a' * 251, 'value')\n+        msg = expected_warning.replace(key, ':1:%s' % key)\n+        with self.assertRaisesMessage(InvalidCacheKey, msg):\n+            cache.set(key, 'value')\n \n     def test_default_never_expiring_timeout(self):\n         # Regression test for #22845\n@@ -1390,15 +1380,6 @@ class PyLibMCCacheTests(BaseMemcachedTests, TestCase):\n     # libmemcached manages its own connections.\n     should_disconnect_on_close = False\n \n-    # By default, pylibmc/libmemcached don't verify keys client-side and so\n-    # this test triggers a server-side bug that causes later tests to fail\n-    # (#19914). The `verify_keys` behavior option could be set to True (which\n-    # would avoid triggering the server-side bug), however this test would\n-    # still fail due to https://github.com/lericson/pylibmc/issues/219.\n-    @unittest.skip(\"triggers a memcached-server bug, causing subsequent tests to fail\")\n-    def test_invalid_key_characters(self):\n-        pass\n-\n     @override_settings(CACHES=caches_setting_for_tests(\n         base=PyLibMCCache_params,\n         exclude=memcached_excluded_caches,\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "84b2da5552e100ae3294f564f6c862fef8d0e693", "source_date": "Wed Jun 3 09:33:20 2020 +0200", "source_tag": "3.0.7", "target_commit": "07e59caa02831c4569bbebb9eb773bdd9cb4b206", "target_date": "Wed Jun 3 09:34:29 2020 +0200", "target_tag": "2.2.13", "FAIL TO PASS": ["unittest.loader._FailedTest.tests"], "PASS TO PASS": []}
{"ecosystem": "npm", "repo": "node-tar", "instance_id": "node-tar_166", "original_commit_message": "Remove paths from dirCache when no longer dirs", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/lib/unpack.js b/lib/unpack.js\nindex 216fa71..edaf783 100644\n--- a/lib/unpack.js\n+++ b/lib/unpack.js\n@@ -465,6 +465,19 @@ class Unpack extends Parser {\n   }\n \n   [CHECKFS2] (entry, done) {\n+    // if we are not creating a directory, and the path is in the dirCache,\n+    // then that means we are about to delete the directory we created\n+    // previously, and it is no longer going to be a directory, and neither\n+    // is any of its children.\n+    if (entry.type !== 'Directory') {\n+      for (const path of this.dirCache.keys()) {\n+        if (path === entry.absolute ||\n+            path.indexOf(entry.absolute + '/') === 0 ||\n+            path.indexOf(entry.absolute + '\\\\') === 0)\n+          this.dirCache.delete(path)\n+      }\n+    }\n+\n     this[MKDIR](path.dirname(entry.absolute), this.dmode, er => {\n       if (er) {\n         done()\n@@ -529,6 +542,15 @@ class Unpack extends Parser {\n \n class UnpackSync extends Unpack {\n   [CHECKFS] (entry) {\n+    if (entry.type !== 'Directory') {\n+      for (const path of this.dirCache.keys()) {\n+        if (path === entry.absolute ||\n+            path.indexOf(entry.absolute + '/') === 0 ||\n+            path.indexOf(entry.absolute + '\\\\') === 0)\n+          this.dirCache.delete(path)\n+      }\n+    }\n+\n     const er = this[MKDIR](path.dirname(entry.absolute), this.dmode, neverCalled)\n     if (er)\n       return this[ONERROR](er, entry)\n\n\n</patch>\n<test_patch>\ndiff --git a/test/unpack.js b/test/unpack.js\nindex 1b2a033..db7c8f5 100644\n--- a/test/unpack.js\n+++ b/test/unpack.js\n@@ -2605,3 +2605,56 @@ t.test('handle errors on fs.close', t => {\n     cwd: dir + '/sync', strict: true,\n   }).end(data), poop, 'sync')\n })\n+\n+t.test('drop entry from dirCache if no longer a directory', t => {\n+  const dir = path.resolve(unpackdir, 'dir-cache-error')\n+  mkdirp.sync(dir + '/sync/y')\n+  mkdirp.sync(dir + '/async/y')\n+  const data = makeTar([\n+    {\n+      path: 'x',\n+      type: 'Directory',\n+    },\n+    {\n+      path: 'x',\n+      type: 'SymbolicLink',\n+      linkpath: './y',\n+    },\n+    {\n+      path: 'x/ginkoid',\n+      type: 'File',\n+      size: 'ginkoid'.length,\n+    },\n+    'ginkoid',\n+    '',\n+    '',\n+  ])\n+  t.plan(2)\n+  const WARNINGS = {}\n+  const check = (t, path) => {\n+    t.equal(fs.statSync(path + '/x').isDirectory(), true)\n+    t.equal(fs.lstatSync(path + '/x').isSymbolicLink(), true)\n+    t.equal(fs.statSync(path + '/y').isDirectory(), true)\n+    t.strictSame(fs.readdirSync(path + '/y'), [])\n+    t.throws(() => fs.readFileSync(path + '/x/ginkoid'), { code: 'ENOENT' })\n+    t.strictSame(WARNINGS[path], [\n+      'TAR_ENTRY_ERROR',\n+      'Cannot extract through symbolic link',\n+    ])\n+    t.end()\n+  }\n+  t.test('async', t => {\n+    const path = dir + '/async'\n+    new Unpack({ cwd: path })\n+      .on('warn', (code, msg) => WARNINGS[path] = [code, msg])\n+      .on('end', () => check(t, path))\n+      .end(data)\n+  })\n+  t.test('sync', t => {\n+    const path = dir + '/sync'\n+    new UnpackSync({ cwd: path })\n+      .on('warn', (code, msg) => WARNINGS[path] = [code, msg])\n+      .end(data)\n+    check(t, path)\n+  })\n+})\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20", "source_date": "Mon Jul 26 16:10:30 2021 -0700", "source_tag": "6.1.2", "target_commit": "5987d9a41f6bfbf1ddab1098e1fdcf1a5618f571", "target_date": "Mon Jul 26 16:12:05 2021 -0700", "target_tag": "5.0.7", "FAIL TO PASS": ["36 - drop entry from dirCache if no longer a directory"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "wagtail", "instance_id": "wagtail_677", "original_commit_message": "Disallow links with unrecognised protocols in contentstate", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/wagtail/admin/rich_text/converters/contentstate.py b/wagtail/admin/rich_text/converters/contentstate.py\nindex 50b6f401a8..4853d0d490 100644\n--- a/wagtail/admin/rich_text/converters/contentstate.py\n+++ b/wagtail/admin/rich_text/converters/contentstate.py\n@@ -8,6 +8,7 @@ from draftjs_exporter.html import HTML as HTMLExporter\n \n from wagtail.admin.rich_text.converters.html_to_contentstate import HtmlToContentStateHandler\n from wagtail.core.rich_text import features as feature_registry\n+from wagtail.core.whitelist import check_url\n \n \n def link_entity(props):\n@@ -21,7 +22,7 @@ def link_entity(props):\n         link_props['linktype'] = 'page'\n         link_props['id'] = id_\n     else:\n-        link_props['href'] = props.get('url')\n+        link_props['href'] = check_url(props.get('url'))\n \n     return DOM.create_element('a', link_props, props['children'])\n \n\n\n</patch>\n<test_patch>\ndiff --git a/wagtail/admin/tests/test_contentstate.py b/wagtail/admin/tests/test_contentstate.py\nindex e74ff247de..d618c42024 100644\n--- a/wagtail/admin/tests/test_contentstate.py\n+++ b/wagtail/admin/tests/test_contentstate.py\n@@ -825,3 +825,56 @@ class TestHtmlToContentState(TestCase):\n             ],\n             'entityMap': {}\n         })\n+\n+\n+class TestContentStateToHtml(TestCase):\n+    def test_external_link(self):\n+        converter = ContentstateConverter(features=['link'])\n+        contentstate_json = json.dumps({\n+            'entityMap': {\n+                '0': {'mutability': 'MUTABLE', 'type': 'LINK', 'data': {'url': 'http://wagtail.io'}}\n+            },\n+            'blocks': [\n+                {\n+                    'inlineStyleRanges': [], 'text': 'an external link', 'depth': 0, 'type': 'unstyled', 'key': '00000',\n+                    'entityRanges': [{'offset': 3, 'length': 8, 'key': 0}]\n+                },\n+            ]\n+        })\n+\n+        result = converter.to_database_format(contentstate_json)\n+        self.assertEqual(result, '<p>an <a href=\"http://wagtail.io\">external</a> link</p>')\n+\n+    def test_local_link(self):\n+        converter = ContentstateConverter(features=['link'])\n+        contentstate_json = json.dumps({\n+            'entityMap': {\n+                '0': {'mutability': 'MUTABLE', 'type': 'LINK', 'data': {'url': '/some/local/path/'}}\n+            },\n+            'blocks': [\n+                {\n+                    'inlineStyleRanges': [], 'text': 'an external link', 'depth': 0, 'type': 'unstyled', 'key': '00000',\n+                    'entityRanges': [{'offset': 3, 'length': 8, 'key': 0}]\n+                },\n+            ]\n+        })\n+\n+        result = converter.to_database_format(contentstate_json)\n+        self.assertEqual(result, '<p>an <a href=\"/some/local/path/\">external</a> link</p>')\n+\n+    def test_reject_javascript_link(self):\n+        converter = ContentstateConverter(features=['link'])\n+        contentstate_json = json.dumps({\n+            'entityMap': {\n+                '0': {'mutability': 'MUTABLE', 'type': 'LINK', 'data': {'url': \"javascript:alert('oh no')\"}}\n+            },\n+            'blocks': [\n+                {\n+                    'inlineStyleRanges': [], 'text': 'an external link', 'depth': 0, 'type': 'unstyled', 'key': '00000',\n+                    'entityRanges': [{'offset': 3, 'length': 8, 'key': 0}]\n+                },\n+            ]\n+        })\n+\n+        result = converter.to_database_format(contentstate_json)\n+        self.assertEqual(result, '<p>an <a>external</a> link</p>')\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "915f6ed2bd7d53154103cc4424a0f18695cdad6c", "source_date": "Mon Apr 19 09:59:44 2021 +0100", "source_tag": "2.12.4", "target_commit": "5c7a60977cba478f6a35390ba98cffc2bd41c8a4", "target_date": "Mon Apr 19 10:01:14 2021 +0100", "target_tag": "2.11.7", "FAIL TO PASS": ["wagtail.admin.tests.test_contentstate.TestContentStateToHtml.test_reject_javascript_link"], "PASS TO PASS": []}
{"ecosystem": "npm", "repo": "node-tar", "instance_id": "node-tar_168", "original_commit_message": "Remove paths from dirCache when no longer dirs", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/lib/unpack.js b/lib/unpack.js\nindex 216fa71..edaf783 100644\n--- a/lib/unpack.js\n+++ b/lib/unpack.js\n@@ -465,6 +465,19 @@ class Unpack extends Parser {\n   }\n \n   [CHECKFS2] (entry, done) {\n+    // if we are not creating a directory, and the path is in the dirCache,\n+    // then that means we are about to delete the directory we created\n+    // previously, and it is no longer going to be a directory, and neither\n+    // is any of its children.\n+    if (entry.type !== 'Directory') {\n+      for (const path of this.dirCache.keys()) {\n+        if (path === entry.absolute ||\n+            path.indexOf(entry.absolute + '/') === 0 ||\n+            path.indexOf(entry.absolute + '\\\\') === 0)\n+          this.dirCache.delete(path)\n+      }\n+    }\n+\n     this[MKDIR](path.dirname(entry.absolute), this.dmode, er => {\n       if (er) {\n         done()\n@@ -529,6 +542,15 @@ class Unpack extends Parser {\n \n class UnpackSync extends Unpack {\n   [CHECKFS] (entry) {\n+    if (entry.type !== 'Directory') {\n+      for (const path of this.dirCache.keys()) {\n+        if (path === entry.absolute ||\n+            path.indexOf(entry.absolute + '/') === 0 ||\n+            path.indexOf(entry.absolute + '\\\\') === 0)\n+          this.dirCache.delete(path)\n+      }\n+    }\n+\n     const er = this[MKDIR](path.dirname(entry.absolute), this.dmode, neverCalled)\n     if (er)\n       return this[ONERROR](er, entry)\n\n\n</patch>\n<test_patch>\ndiff --git a/test/unpack.js b/test/unpack.js\nindex 1b2a033..db7c8f5 100644\n--- a/test/unpack.js\n+++ b/test/unpack.js\n@@ -2605,3 +2605,56 @@ t.test('handle errors on fs.close', t => {\n     cwd: dir + '/sync', strict: true,\n   }).end(data), poop, 'sync')\n })\n+\n+t.test('drop entry from dirCache if no longer a directory', t => {\n+  const dir = path.resolve(unpackdir, 'dir-cache-error')\n+  mkdirp.sync(dir + '/sync/y')\n+  mkdirp.sync(dir + '/async/y')\n+  const data = makeTar([\n+    {\n+      path: 'x',\n+      type: 'Directory',\n+    },\n+    {\n+      path: 'x',\n+      type: 'SymbolicLink',\n+      linkpath: './y',\n+    },\n+    {\n+      path: 'x/ginkoid',\n+      type: 'File',\n+      size: 'ginkoid'.length,\n+    },\n+    'ginkoid',\n+    '',\n+    '',\n+  ])\n+  t.plan(2)\n+  const WARNINGS = {}\n+  const check = (t, path) => {\n+    t.equal(fs.statSync(path + '/x').isDirectory(), true)\n+    t.equal(fs.lstatSync(path + '/x').isSymbolicLink(), true)\n+    t.equal(fs.statSync(path + '/y').isDirectory(), true)\n+    t.strictSame(fs.readdirSync(path + '/y'), [])\n+    t.throws(() => fs.readFileSync(path + '/x/ginkoid'), { code: 'ENOENT' })\n+    t.strictSame(WARNINGS[path], [\n+      'TAR_ENTRY_ERROR',\n+      'Cannot extract through symbolic link',\n+    ])\n+    t.end()\n+  }\n+  t.test('async', t => {\n+    const path = dir + '/async'\n+    new Unpack({ cwd: path })\n+      .on('warn', (code, msg) => WARNINGS[path] = [code, msg])\n+      .on('end', () => check(t, path))\n+      .end(data)\n+  })\n+  t.test('sync', t => {\n+    const path = dir + '/sync'\n+    new UnpackSync({ cwd: path })\n+      .on('warn', (code, msg) => WARNINGS[path] = [code, msg])\n+      .end(data)\n+    check(t, path)\n+  })\n+})\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20", "source_date": "Mon Jul 26 16:10:30 2021 -0700", "source_tag": "6.1.2", "target_commit": "46fe35083e2676e31c4e0a81639dce6da7aaa356", "target_date": "Mon Jul 26 16:18:43 2021 -0700", "target_tag": "4.4.15", "FAIL TO PASS": ["34 - drop entry from dirCache if no longer a directory"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_681", "original_commit_message": "[5.0.x] Fixed CVE-2024-39329 -- Standarized timing of verify_password() when checking unusuable passwords.\nRefs #20760.\nThanks Michael Manfre for the fix and to Adam Johnson for the review.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/contrib/auth/hashers.py b/django/contrib/auth/hashers.py\nindex b63904cd75..32abcf7fbe 100644\n--- a/django/contrib/auth/hashers.py\n+++ b/django/contrib/auth/hashers.py\n@@ -40,14 +40,20 @@ def verify_password(password, encoded, preferred=\"default\"):\n     three part encoded digest, and the second whether to regenerate the\n     password.\n     \"\"\"\n-    if password is None or not is_password_usable(encoded):\n-        return False, False\n+    fake_runtime = password is None or not is_password_usable(encoded)\n \n     preferred = get_hasher(preferred)\n     try:\n         hasher = identify_hasher(encoded)\n     except ValueError:\n         # encoded is gibberish or uses a hasher that's no longer installed.\n+        fake_runtime = True\n+\n+    if fake_runtime:\n+        # Run the default password hasher once to reduce the timing difference\n+        # between an existing user with an unusable password and a nonexistent\n+        # user or missing hasher (similar to #20760).\n+        make_password(get_random_string(UNUSABLE_PASSWORD_SUFFIX_LENGTH))\n         return False, False\n \n     hasher_changed = hasher.algorithm != preferred.algorithm\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/auth_tests/test_hashers.py b/tests/auth_tests/test_hashers.py\nindex cf2ebafa15..d5718fd79a 100644\n--- a/tests/auth_tests/test_hashers.py\n+++ b/tests/auth_tests/test_hashers.py\n@@ -565,6 +565,38 @@ class TestUtilsHashPass(SimpleTestCase):\n             check_password(\"wrong_password\", encoded)\n             self.assertEqual(hasher.harden_runtime.call_count, 1)\n \n+    def test_check_password_calls_make_password_to_fake_runtime(self):\n+        hasher = get_hasher(\"default\")\n+        cases = [\n+            (None, None, None),  # no plain text password provided\n+            (\"foo\", make_password(password=None), None),  # unusable encoded\n+            (\"letmein\", make_password(password=\"letmein\"), ValueError),  # valid encoded\n+        ]\n+        for password, encoded, hasher_side_effect in cases:\n+            with (\n+                self.subTest(encoded=encoded),\n+                mock.patch(\n+                    \"django.contrib.auth.hashers.identify_hasher\",\n+                    side_effect=hasher_side_effect,\n+                ) as mock_identify_hasher,\n+                mock.patch(\n+                    \"django.contrib.auth.hashers.make_password\"\n+                ) as mock_make_password,\n+                mock.patch(\n+                    \"django.contrib.auth.hashers.get_random_string\",\n+                    side_effect=lambda size: \"x\" * size,\n+                ),\n+                mock.patch.object(hasher, \"verify\"),\n+            ):\n+                # Ensure make_password is called to standardize timing.\n+                check_password(password, encoded)\n+                self.assertEqual(hasher.verify.call_count, 0)\n+                self.assertEqual(mock_identify_hasher.mock_calls, [mock.call(encoded)])\n+                self.assertEqual(\n+                    mock_make_password.mock_calls,\n+                    [mock.call(\"x\" * UNUSABLE_PASSWORD_SUFFIX_LENGTH)],\n+                )\n+\n     def test_encode_invalid_salt(self):\n         hasher_classes = [\n             MD5PasswordHasher,\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "07cefdee4a9d1fcd9a3a631cbd07c78defd1923b", "source_date": "Tue Jul 9 10:03:20 2024 -0300", "source_tag": "5.0.7", "target_commit": "156d3186c96e3ec2ca73b8b25dc2ef366e38df14", "target_date": "Tue Jul 9 10:40:46 2024 -0300", "target_tag": "4.2.14", "FAIL TO PASS": ["auth_tests.test_hashers.TestUtilsHashPass.test_check_password_calls_make_password_to_fake_runtime.test_check_password_calls_make_password_to_fake_runtime"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_687", "original_commit_message": "[3.2.x] Fixed CVE-2021-35042 -- Prevented SQL injection in QuerySet.order_by().\nRegression introduced in 513948735b799239f3ef8c89397592445e1a0cd5\nby marking the raw SQL column reference feature for deprecation in\nDjango 4.0 while lifting the column format validation.\nIn retrospective the validation should have been kept around and the\nuser should have been pointed at using RawSQL expressions during the\ndeprecation period.\nThe main branch is not affected because the raw SQL column reference\nsupport has been removed in 06eec3197009b88e3a633128bbcbd76eea0b46ff\nper the 4.0 deprecation life cycle.\nThanks Joel Saunders for the report.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/db/models/sql/constants.py b/django/db/models/sql/constants.py\nindex a1db61b9ff..97edf7525e 100644\n--- a/django/db/models/sql/constants.py\n+++ b/django/db/models/sql/constants.py\n@@ -1,6 +1,7 @@\n \"\"\"\n Constants specific to the SQL storage portion of the ORM.\n \"\"\"\n+from django.utils.regex_helper import _lazy_re_compile\n \n # Size of each \"chunk\" for get_iterator calls.\n # Larger values are slightly faster at the expense of more storage space.\n@@ -18,6 +19,7 @@ ORDER_DIR = {\n     'ASC': ('ASC', 'DESC'),\n     'DESC': ('DESC', 'ASC'),\n }\n+ORDER_PATTERN = _lazy_re_compile(r'[-+]?[.\\w]+$')\n \n # SQL join types.\n INNER = 'INNER JOIN'\n\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ab920c1211..f5f85a4d34 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -30,7 +30,9 @@ from django.db.models.lookups import Lookup\n from django.db.models.query_utils import (\n     Q, check_rel_lookup_compatibility, refs_expression,\n )\n-from django.db.models.sql.constants import INNER, LOUTER, ORDER_DIR, SINGLE\n+from django.db.models.sql.constants import (\n+    INNER, LOUTER, ORDER_DIR, ORDER_PATTERN, SINGLE,\n+)\n from django.db.models.sql.datastructures import (\n     BaseTable, Empty, Join, MultiJoin,\n )\n@@ -1969,7 +1971,7 @@ class Query(BaseExpression):\n         errors = []\n         for item in ordering:\n             if isinstance(item, str):\n-                if '.' in item:\n+                if '.' in item and ORDER_PATTERN.match(item):\n                     warnings.warn(\n                         'Passing column raw column aliases to order_by() is '\n                         'deprecated. Wrap %r in a RawSQL expression before '\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 877d758904..d487026e4d 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -3116,6 +3116,14 @@ class QuerySetExceptionTests(SimpleTestCase):\n         with self.assertRaisesMessage(FieldError, msg):\n             Article.objects.order_by('*')\n \n+    def test_order_by_escape_prevention(self):\n+        msg = (\n+            \"Cannot resolve keyword 'queries.name);' into field. Choices are: \"\n+            \"created, id, name\"\n+        )\n+        with self.assertRaisesMessage(FieldError, msg):\n+            Article.objects.order_by('queries.name);')\n+\n     def test_invalid_queryset_model(self):\n         msg = 'Cannot use QuerySet for \"Article\": Use a QuerySet for \"ExtraInfo\".'\n         with self.assertRaisesMessage(ValueError, msg):\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "a34a5f724c5d5adb2109374ba3989ebb7b11f81f", "source_date": "Thu Jul 1 08:29:23 2021 +0200", "source_tag": "3.2.5", "target_commit": "0bd57a879a0d54920bb9038a732645fb917040e9", "target_date": "Thu Jul 1 08:36:17 2021 +0200", "target_tag": "3.1.13", "FAIL TO PASS": ["queries.tests.QuerySetExceptionTests.test_order_by_escape_prevention"], "PASS TO PASS": []}
{"ecosystem": "maven", "repo": "quarkus", "instance_id": "quarkus_700", "original_commit_message": "Fix JAX-RS default security checks for inherited / transformed endpoints\n(cherry picked from commit 6f3d752d157cc8eb22cc86c521cd6f029f67f42f)", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/extensions/resteasy-classic/resteasy/deployment/src/main/java/io/quarkus/resteasy/deployment/RestPathAnnotationProcessor.java b/extensions/resteasy-classic/resteasy/deployment/src/main/java/io/quarkus/resteasy/deployment/RestPathAnnotationProcessor.java\nindex 5959d9e09c1..94b3a099371 100644\n--- a/extensions/resteasy-classic/resteasy/deployment/src/main/java/io/quarkus/resteasy/deployment/RestPathAnnotationProcessor.java\n+++ b/extensions/resteasy-classic/resteasy/deployment/src/main/java/io/quarkus/resteasy/deployment/RestPathAnnotationProcessor.java\n@@ -182,7 +182,7 @@ static Optional<AnnotationInstance> searchPathAnnotationOnInterfaces(CombinedInd\n      * @param resultAcc accumulator for tail-recursion\n      * @return Collection of all interfaces und their parents. Never null.\n      */\n-    private static Collection<ClassInfo> getAllClassInterfaces(\n+    static Collection<ClassInfo> getAllClassInterfaces(\n             CombinedIndexBuildItem index,\n             Collection<ClassInfo> classInfos,\n             List<ClassInfo> resultAcc) {\n\ndiff --git a/extensions/resteasy-classic/resteasy/deployment/src/main/java/io/quarkus/resteasy/deployment/ResteasyBuiltinsProcessor.java b/extensions/resteasy-classic/resteasy/deployment/src/main/java/io/quarkus/resteasy/deployment/ResteasyBuiltinsProcessor.java\nindex 2001747fbb7..e525ee2cadd 100644\n--- a/extensions/resteasy-classic/resteasy/deployment/src/main/java/io/quarkus/resteasy/deployment/ResteasyBuiltinsProcessor.java\n+++ b/extensions/resteasy-classic/resteasy/deployment/src/main/java/io/quarkus/resteasy/deployment/ResteasyBuiltinsProcessor.java\n@@ -1,17 +1,21 @@\n package io.quarkus.resteasy.deployment;\n \n import static io.quarkus.deployment.annotations.ExecutionTime.STATIC_INIT;\n+import static io.quarkus.resteasy.deployment.RestPathAnnotationProcessor.getAllClassInterfaces;\n import static io.quarkus.resteasy.deployment.RestPathAnnotationProcessor.isRestEndpointMethod;\n import static io.quarkus.security.spi.SecurityTransformerUtils.hasSecurityAnnotation;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.List;\n import java.util.Objects;\n+import java.util.function.Predicate;\n import java.util.stream.Collectors;\n \n import org.jboss.jandex.ClassInfo;\n import org.jboss.jandex.DotName;\n import org.jboss.jandex.MethodInfo;\n+import org.jboss.logging.Logger;\n \n import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n import io.quarkus.deployment.Capabilities;\n@@ -50,6 +54,7 @@\n public class ResteasyBuiltinsProcessor {\n \n     protected static final String META_INF_RESOURCES = \"META-INF/resources\";\n+    private static final Logger LOG = Logger.getLogger(ResteasyBuiltinsProcessor.class);\n \n     @BuildStep\n     void setUpDenyAllJaxRs(CombinedIndexBuildItem index,\n@@ -65,10 +70,42 @@ void setUpDenyAllJaxRs(CombinedIndexBuildItem index,\n                 ClassInfo classInfo = index.getIndex().getClassByName(DotName.createSimple(className));\n                 if (classInfo == null)\n                     throw new IllegalStateException(\"Unable to find class info for \" + className);\n-                if (!hasSecurityAnnotation(classInfo)) {\n-                    for (MethodInfo methodInfo : classInfo.methods()) {\n-                        if (isRestEndpointMethod(index, methodInfo) && !hasSecurityAnnotation(methodInfo)) {\n-                            methods.add(methodInfo);\n+                // add unannotated class endpoints as well as parent class unannotated endpoints\n+                addAllUnannotatedEndpoints(index, classInfo, methods);\n+\n+                // interface endpoints implemented on resources are already in, now we need to resolve default interface\n+                // methods as there, CDI interceptors won't work, therefore neither will our additional secured methods\n+                Collection<ClassInfo> interfaces = getAllClassInterfaces(index, List.of(classInfo), new ArrayList<>());\n+                if (!interfaces.isEmpty()) {\n+                    final List<MethodInfo> interfaceEndpoints = new ArrayList<>();\n+                    for (ClassInfo anInterface : interfaces) {\n+                        addUnannotatedEndpoints(index, anInterface, interfaceEndpoints);\n+                    }\n+                    // look for implementors as implementors on resource classes are secured by CDI interceptors\n+                    if (!interfaceEndpoints.isEmpty()) {\n+                        interfaceBlock: for (MethodInfo interfaceEndpoint : interfaceEndpoints) {\n+                            if (interfaceEndpoint.isDefault()) {\n+                                for (MethodInfo endpoint : methods) {\n+                                    boolean nameParamsMatch = endpoint.name().equals(interfaceEndpoint.name())\n+                                            && (interfaceEndpoint.parameterTypes().equals(endpoint.parameterTypes()));\n+                                    if (nameParamsMatch) {\n+                                        // whether matched method is declared on class that implements interface endpoint\n+                                        Predicate<DotName> isEndpointInterface = interfaceEndpoint.declaringClass()\n+                                                .name()::equals;\n+                                        if (endpoint.declaringClass().interfaceNames().stream().anyMatch(isEndpointInterface)) {\n+                                            continue interfaceBlock;\n+                                        }\n+                                    }\n+                                }\n+                                String configProperty = config.denyJaxRs ? \"quarkus.security.jaxrs.deny-unannotated-endpoints\"\n+                                        : \"quarkus.security.jaxrs.default-roles-allowed\";\n+                                // this is logging only as I'm a bit worried about false positives and breaking things\n+                                // for what is very much edge case\n+                                LOG.warn(\"Default interface method '\" + interfaceEndpoint\n+                                        + \"' cannot be secured with the '\" + configProperty\n+                                        + \"' configuration property. Please implement this method for CDI \"\n+                                        + \"interceptor binding to work\");\n+                            }\n                         }\n                     }\n                 }\n@@ -85,6 +122,27 @@ void setUpDenyAllJaxRs(CombinedIndexBuildItem index,\n         }\n     }\n \n+    private static void addAllUnannotatedEndpoints(CombinedIndexBuildItem index, ClassInfo classInfo,\n+            List<MethodInfo> methods) {\n+        if (classInfo == null) {\n+            return;\n+        }\n+        addUnannotatedEndpoints(index, classInfo, methods);\n+        if (classInfo.superClassType() != null && !classInfo.superClassType().name().equals(DotName.OBJECT_NAME)) {\n+            addAllUnannotatedEndpoints(index, index.getIndex().getClassByName(classInfo.superClassType().name()), methods);\n+        }\n+    }\n+\n+    private static void addUnannotatedEndpoints(CombinedIndexBuildItem index, ClassInfo classInfo, List<MethodInfo> methods) {\n+        if (!hasSecurityAnnotation(classInfo)) {\n+            for (MethodInfo methodInfo : classInfo.methods()) {\n+                if (isRestEndpointMethod(index, methodInfo) && !hasSecurityAnnotation(methodInfo)) {\n+                    methods.add(methodInfo);\n+                }\n+            }\n+        }\n+    }\n+\n     /**\n      * Install the JAX-RS security provider.\n      */\n\ndiff --git a/extensions/resteasy-reactive/quarkus-resteasy-reactive-common/deployment/src/main/java/io/quarkus/resteasy/reactive/common/deployment/ResteasyReactiveCommonProcessor.java b/extensions/resteasy-reactive/quarkus-resteasy-reactive-common/deployment/src/main/java/io/quarkus/resteasy/reactive/common/deployment/ResteasyReactiveCommonProcessor.java\nindex ff52973878d..272d25e5b98 100644\n--- a/extensions/resteasy-reactive/quarkus-resteasy-reactive-common/deployment/src/main/java/io/quarkus/resteasy/reactive/common/deployment/ResteasyReactiveCommonProcessor.java\n+++ b/extensions/resteasy-reactive/quarkus-resteasy-reactive-common/deployment/src/main/java/io/quarkus/resteasy/reactive/common/deployment/ResteasyReactiveCommonProcessor.java\n@@ -1,13 +1,9 @@\n package io.quarkus.resteasy.reactive.common.deployment;\n \n-import static io.quarkus.security.spi.SecurityTransformerUtils.hasSecurityAnnotation;\n import static org.jboss.resteasy.reactive.common.model.ResourceInterceptor.FILTER_SOURCE_METHOD_METADATA_KEY;\n-import static org.jboss.resteasy.reactive.common.processor.EndpointIndexer.collectClassEndpoints;\n \n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n@@ -76,7 +72,7 @@\n import io.quarkus.resteasy.reactive.spi.MessageBodyWriterOverrideBuildItem;\n import io.quarkus.resteasy.reactive.spi.ReaderInterceptorBuildItem;\n import io.quarkus.resteasy.reactive.spi.WriterInterceptorBuildItem;\n-import io.quarkus.security.spi.AdditionalSecuredMethodsBuildItem;\n+import io.quarkus.security.spi.DefaultSecurityCheckBuildItem;\n \n public class ResteasyReactiveCommonProcessor {\n \n@@ -134,46 +130,13 @@ void searchForProviders(Capabilities capabilities,\n     }\n \n     @BuildStep\n-    void setUpDenyAllJaxRs(\n-            CombinedIndexBuildItem index,\n-            JaxRsSecurityConfig securityConfig,\n-            Optional<ResourceScanningResultBuildItem> resteasyDeployment,\n-            BeanArchiveIndexBuildItem beanArchiveIndexBuildItem,\n-            ApplicationResultBuildItem applicationResultBuildItem,\n-            BuildProducer<AdditionalSecuredMethodsBuildItem> additionalSecuredClasses) {\n-\n-        if (resteasyDeployment.isPresent()\n-                && (securityConfig.denyJaxRs() || securityConfig.defaultRolesAllowed().isPresent())) {\n-            final List<MethodInfo> methods = new ArrayList<>();\n-            Map<DotName, String> httpAnnotationToMethod = resteasyDeployment.get().getResult().getHttpAnnotationToMethod();\n-            Set<DotName> resourceClasses = resteasyDeployment.get().getResult().getScannedResourcePaths().keySet();\n-\n-            for (DotName className : resourceClasses) {\n-                ClassInfo classInfo = index.getIndex().getClassByName(className);\n-                if (classInfo == null)\n-                    throw new IllegalStateException(\"Unable to find class info for \" + className);\n-                if (!hasSecurityAnnotation(classInfo)) {\n-                    // collect class endpoints\n-                    Collection<MethodInfo> classEndpoints = collectClassEndpoints(classInfo, httpAnnotationToMethod,\n-                            beanArchiveIndexBuildItem.getIndex(), applicationResultBuildItem.getResult());\n-\n-                    // add endpoints\n-                    for (MethodInfo classEndpoint : classEndpoints) {\n-                        if (!hasSecurityAnnotation(classEndpoint)) {\n-                            methods.add(classEndpoint);\n-                        }\n-                    }\n-                }\n-            }\n-\n-            if (!methods.isEmpty()) {\n-                if (securityConfig.denyJaxRs()) {\n-                    additionalSecuredClasses.produce(new AdditionalSecuredMethodsBuildItem(methods));\n-                } else {\n-                    additionalSecuredClasses\n-                            .produce(new AdditionalSecuredMethodsBuildItem(methods, securityConfig.defaultRolesAllowed()));\n-                }\n-            }\n+    void setUpDenyAllJaxRs(JaxRsSecurityConfig securityConfig,\n+            BuildProducer<DefaultSecurityCheckBuildItem> defaultSecurityCheckProducer) {\n+        if (securityConfig.denyJaxRs()) {\n+            defaultSecurityCheckProducer.produce(DefaultSecurityCheckBuildItem.denyAll());\n+        } else if (securityConfig.defaultRolesAllowed().isPresent()) {\n+            defaultSecurityCheckProducer\n+                    .produce(DefaultSecurityCheckBuildItem.rolesAllowed(securityConfig.defaultRolesAllowed().get()));\n         }\n     }\n \n\ndiff --git a/extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/security/EagerSecurityHandler.java b/extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/security/EagerSecurityHandler.java\nindex 00b25676a4b..f94c369070c 100644\n--- a/extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/security/EagerSecurityHandler.java\n+++ b/extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/security/EagerSecurityHandler.java\n@@ -66,9 +66,14 @@ public void handle(ResteasyReactiveRequestContext requestContext) throws Excepti\n         ResteasyReactiveResourceInfo lazyMethod = requestContext.getTarget().getLazyMethod();\n         MethodDescription methodDescription = lazyMethodToMethodDescription(lazyMethod);\n         if (check == null) {\n-            check = Arc.container().instance(SecurityCheckStorage.class).get().getSecurityCheck(methodDescription);\n+            SecurityCheckStorage storage = Arc.container().instance(SecurityCheckStorage.class).get();\n+            check = storage.getSecurityCheck(methodDescription);\n             if (check == null) {\n-                check = NULL_SENTINEL;\n+                if (storage.getDefaultSecurityCheck() == null || isRequestAlreadyChecked(requestContext)) {\n+                    check = NULL_SENTINEL;\n+                } else {\n+                    check = storage.getDefaultSecurityCheck();\n+                }\n             }\n             this.check = check;\n         }\n@@ -193,6 +198,13 @@ private void preventRepeatedSecurityChecks(ResteasyReactiveRequestContext reques\n         requestContext.setProperty(STANDARD_SECURITY_CHECK_INTERCEPTOR, methodDescription);\n     }\n \n+    private boolean isRequestAlreadyChecked(ResteasyReactiveRequestContext requestContext) {\n+        // when request has already been checked at least once (by another instance of this handler)\n+        // then default security checks, like denied access to all JAX-RS resources by default\n+        // shouldn't be applied; this doesn't mean security checks registered for methods shouldn't be applied\n+        return requestContext.getProperty(STANDARD_SECURITY_CHECK_INTERCEPTOR) != null;\n+    }\n+\n     private InjectableInstance<CurrentIdentityAssociation> getCurrentIdentityAssociation() {\n         InjectableInstance<CurrentIdentityAssociation> identityAssociation = this.currentIdentityAssociation;\n         if (identityAssociation == null) {\n\ndiff --git a/extensions/security/deployment/src/main/java/io/quarkus/security/deployment/SecurityProcessor.java b/extensions/security/deployment/src/main/java/io/quarkus/security/deployment/SecurityProcessor.java\nindex d781085f835..8aa777f640b 100644\n--- a/extensions/security/deployment/src/main/java/io/quarkus/security/deployment/SecurityProcessor.java\n+++ b/extensions/security/deployment/src/main/java/io/quarkus/security/deployment/SecurityProcessor.java\n@@ -105,6 +105,7 @@\n import io.quarkus.security.runtime.interceptor.SecurityHandler;\n import io.quarkus.security.spi.AdditionalSecuredClassesBuildItem;\n import io.quarkus.security.spi.AdditionalSecuredMethodsBuildItem;\n+import io.quarkus.security.spi.DefaultSecurityCheckBuildItem;\n import io.quarkus.security.spi.RolesAllowedConfigExpResolverBuildItem;\n import io.quarkus.security.spi.runtime.AuthorizationController;\n import io.quarkus.security.spi.runtime.DevModeDisabledAuthorizationController;\n@@ -527,6 +528,7 @@ void gatherSecurityChecks(BuildProducer<SyntheticBeanBuildItem> syntheticBeans,\n             BuildProducer<RunTimeConfigBuilderBuildItem> configBuilderProducer,\n             List<AdditionalSecuredMethodsBuildItem> additionalSecuredMethods,\n             SecurityCheckRecorder recorder,\n+            Optional<DefaultSecurityCheckBuildItem> defaultSecurityCheckBuildItem,\n             BuildProducer<ReflectiveClassBuildItem> reflectiveClassBuildItemBuildProducer,\n             List<AdditionalSecurityCheckBuildItem> additionalSecurityChecks, SecurityBuildTimeConfig config) {\n         classPredicate.produce(new ApplicationClassPredicateBuildItem(new SecurityCheckStorageAppPredicate()));\n@@ -559,6 +561,15 @@ void gatherSecurityChecks(BuildProducer<SyntheticBeanBuildItem> syntheticBeans,\n             recorder.addMethod(builder, method.declaringClass().name().toString(), method.name(), params,\n                     methodEntry.getValue());\n         }\n+\n+        if (defaultSecurityCheckBuildItem.isPresent()) {\n+            var roles = defaultSecurityCheckBuildItem.get().getRolesAllowed();\n+            if (roles == null) {\n+                recorder.registerDefaultSecurityCheck(builder, recorder.denyAll());\n+            } else {\n+                recorder.registerDefaultSecurityCheck(builder, recorder.rolesAllowed(roles.toArray(new String[0])));\n+            }\n+        }\n         recorder.create(builder);\n \n         syntheticBeans.produce(\n\ndiff --git a/extensions/security/runtime-spi/src/main/java/io/quarkus/security/spi/runtime/SecurityCheckStorage.java b/extensions/security/runtime-spi/src/main/java/io/quarkus/security/spi/runtime/SecurityCheckStorage.java\nindex 3cfeaa2b44b..2d72f5f8dc2 100644\n--- a/extensions/security/runtime-spi/src/main/java/io/quarkus/security/spi/runtime/SecurityCheckStorage.java\n+++ b/extensions/security/runtime-spi/src/main/java/io/quarkus/security/spi/runtime/SecurityCheckStorage.java\n@@ -10,4 +10,9 @@ default SecurityCheck getSecurityCheck(Method method) {\n \n     SecurityCheck getSecurityCheck(MethodDescription methodDescription);\n \n+    /**\n+     * {@link SecurityCheck} that should be applied when there is no other check applied on incoming request.\n+     */\n+    SecurityCheck getDefaultSecurityCheck();\n+\n }\n\ndiff --git a/extensions/security/runtime/src/main/java/io/quarkus/security/runtime/SecurityCheckRecorder.java b/extensions/security/runtime/src/main/java/io/quarkus/security/runtime/SecurityCheckRecorder.java\nindex 8661d06f3f4..545b3249cd9 100644\n--- a/extensions/security/runtime/src/main/java/io/quarkus/security/runtime/SecurityCheckRecorder.java\n+++ b/extensions/security/runtime/src/main/java/io/quarkus/security/runtime/SecurityCheckRecorder.java\n@@ -351,4 +351,8 @@ private Class<?> loadClass(String className) {\n             throw new RuntimeException(\"Unable to load class '\" + className + \"' for creating permission\", e);\n         }\n     }\n+\n+    public void registerDefaultSecurityCheck(RuntimeValue<SecurityCheckStorageBuilder> builder, SecurityCheck securityCheck) {\n+        builder.getValue().registerDefaultSecurityCheck(securityCheck);\n+    }\n }\n\ndiff --git a/extensions/security/runtime/src/main/java/io/quarkus/security/runtime/interceptor/SecurityCheckStorageBuilder.java b/extensions/security/runtime/src/main/java/io/quarkus/security/runtime/interceptor/SecurityCheckStorageBuilder.java\nindex 6be2f134e00..25cecdb398e 100644\n--- a/extensions/security/runtime/src/main/java/io/quarkus/security/runtime/interceptor/SecurityCheckStorageBuilder.java\n+++ b/extensions/security/runtime/src/main/java/io/quarkus/security/runtime/interceptor/SecurityCheckStorageBuilder.java\n@@ -9,6 +9,7 @@\n \n public class SecurityCheckStorageBuilder {\n     private final Map<MethodDescription, SecurityCheck> securityChecks = new HashMap<>();\n+    private SecurityCheck defaultSecurityCheck;\n \n     public void registerCheck(String className,\n             String methodName,\n@@ -17,12 +18,24 @@ public void registerCheck(String className,\n         securityChecks.put(new MethodDescription(className, methodName, parameterTypes), securityCheck);\n     }\n \n+    public void registerDefaultSecurityCheck(SecurityCheck defaultSecurityCheck) {\n+        if (this.defaultSecurityCheck != null) {\n+            throw new IllegalStateException(\"Default SecurityCheck has already been registered\");\n+        }\n+        this.defaultSecurityCheck = defaultSecurityCheck;\n+    }\n+\n     public SecurityCheckStorage create() {\n         return new SecurityCheckStorage() {\n             @Override\n             public SecurityCheck getSecurityCheck(MethodDescription methodDescription) {\n                 return securityChecks.get(methodDescription);\n             }\n+\n+            @Override\n+            public SecurityCheck getDefaultSecurityCheck() {\n+                return defaultSecurityCheck;\n+            }\n         };\n     }\n }\n\ndiff --git a/extensions/security/spi/src/main/java/io/quarkus/security/spi/DefaultSecurityCheckBuildItem.java b/extensions/security/spi/src/main/java/io/quarkus/security/spi/DefaultSecurityCheckBuildItem.java\nnew file mode 100644\nindex 00000000000..ed3dafe18de\n--- /dev/null\n+++ b/extensions/security/spi/src/main/java/io/quarkus/security/spi/DefaultSecurityCheckBuildItem.java\n@@ -0,0 +1,28 @@\n+package io.quarkus.security.spi;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import io.quarkus.builder.item.SimpleBuildItem;\n+\n+public final class DefaultSecurityCheckBuildItem extends SimpleBuildItem {\n+\n+    public final List<String> rolesAllowed;\n+\n+    private DefaultSecurityCheckBuildItem(List<String> rolesAllowed) {\n+        this.rolesAllowed = rolesAllowed;\n+    }\n+\n+    public static DefaultSecurityCheckBuildItem denyAll() {\n+        return new DefaultSecurityCheckBuildItem(null);\n+    }\n+\n+    public static DefaultSecurityCheckBuildItem rolesAllowed(List<String> rolesAllowed) {\n+        Objects.requireNonNull(rolesAllowed);\n+        return new DefaultSecurityCheckBuildItem(List.copyOf(rolesAllowed));\n+    }\n+\n+    public List<String> getRolesAllowed() {\n+        return rolesAllowed;\n+    }\n+}\n\ndiff --git a/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/EndpointIndexer.java b/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/EndpointIndexer.java\nindex 41f8bcaa557..a16267eab7b 100644\n--- a/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/EndpointIndexer.java\n+++ b/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/EndpointIndexer.java\n@@ -422,25 +422,6 @@ protected List<ResourceMethod> createEndpoints(ClassInfo currentClassInfo,\n         return ret;\n     }\n \n-    /**\n-     * Return endpoints defined directly on classInfo.\n-     *\n-     * @param classInfo resource class\n-     * @return classInfo endpoint method info\n-     */\n-    public static Collection<MethodInfo> collectClassEndpoints(ClassInfo classInfo,\n-            Map<DotName, String> httpAnnotationToMethod, IndexView index, ApplicationScanningResult applicationScanningResult) {\n-        Collection<FoundEndpoint> endpoints = collectEndpoints(classInfo, classInfo, new HashSet<>(), new HashSet<>(), true,\n-                httpAnnotationToMethod, index, applicationScanningResult, new AnnotationStore(null));\n-        Collection<MethodInfo> ret = new HashSet<>();\n-        for (FoundEndpoint endpoint : endpoints) {\n-            if (endpoint.classInfo.equals(classInfo)) {\n-                ret.add(endpoint.methodInfo);\n-            }\n-        }\n-        return ret;\n-    }\n-\n     private static List<FoundEndpoint> collectEndpoints(ClassInfo currentClassInfo, ClassInfo actualEndpointInfo,\n             Set<String> seenMethods, Set<String> existingClassNameBindings, boolean considerApplication,\n             Map<DotName, String> httpAnnotationToMethod, IndexView index, ApplicationScanningResult applicationScanningResult,\n\n</patch>\n<test_patch>\ndiff --git a/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/AbstractSecurityEventTest.java b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/AbstractSecurityEventTest.java\nindex ee7c11733af..007fbb74b41 100644\n--- a/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/AbstractSecurityEventTest.java\n+++ b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/AbstractSecurityEventTest.java\n@@ -37,7 +37,8 @@ public abstract class AbstractSecurityEventTest {\n \n     protected static final Class<?>[] TEST_CLASSES = {\n             RolesAllowedResource.class, TestIdentityProvider.class, TestIdentityController.class,\n-            UnsecuredResource.class, UnsecuredSubResource.class, EventObserver.class\n+            UnsecuredResource.class, UnsecuredSubResource.class, EventObserver.class, UnsecuredResourceInterface.class,\n+            UnsecuredParentResource.class\n     };\n \n     @Inject\n\ndiff --git a/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/DefaultRolesAllowedJaxRsTest.java b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/DefaultRolesAllowedJaxRsTest.java\nindex fb13a3d50cb..b9e18eed547 100644\n--- a/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/DefaultRolesAllowedJaxRsTest.java\n+++ b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/DefaultRolesAllowedJaxRsTest.java\n@@ -22,8 +22,8 @@ public class DefaultRolesAllowedJaxRsTest {\n     static QuarkusUnitTest runner = new QuarkusUnitTest()\n             .withApplicationRoot((jar) -> jar\n                     .addClasses(PermitAllResource.class, UnsecuredResource.class,\n-                            TestIdentityProvider.class,\n-                            TestIdentityController.class,\n+                            TestIdentityProvider.class, UnsecuredResourceInterface.class,\n+                            TestIdentityController.class, UnsecuredParentResource.class,\n                             UnsecuredSubResource.class, HelloResource.class)\n                     .addAsResource(new StringAsset(\"quarkus.security.jaxrs.default-roles-allowed = admin\\n\"),\n                             \"application.properties\"));\n@@ -41,6 +41,18 @@ public void shouldDenyUnannotated() {\n         assertStatus(path, 200, 403, 401);\n     }\n \n+    @Test\n+    public void shouldDenyUnannotatedOnParentClass() {\n+        String path = \"/unsecured/defaultSecurityParent\";\n+        assertStatus(path, 200, 403, 401);\n+    }\n+\n+    @Test\n+    public void shouldDenyUnannotatedOnInterface() {\n+        String path = \"/unsecured/defaultSecurityInterface\";\n+        assertStatus(path, 200, 403, 401);\n+    }\n+\n     @Test\n     public void shouldDenyDenyAllMethod() {\n         String path = \"/unsecured/denyAll\";\n\ndiff --git a/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/DefaultRolesAllowedStarJaxRsTest.java b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/DefaultRolesAllowedStarJaxRsTest.java\nindex 4e0fd8c7dd8..ddcc31f5ae8 100644\n--- a/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/DefaultRolesAllowedStarJaxRsTest.java\n+++ b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/DefaultRolesAllowedStarJaxRsTest.java\n@@ -17,8 +17,8 @@ public class DefaultRolesAllowedStarJaxRsTest {\n     static QuarkusUnitTest runner = new QuarkusUnitTest()\n             .withApplicationRoot((jar) -> jar\n                     .addClasses(PermitAllResource.class, UnsecuredResource.class,\n-                            TestIdentityProvider.class,\n-                            TestIdentityController.class,\n+                            TestIdentityProvider.class, UnsecuredParentResource.class,\n+                            TestIdentityController.class, UnsecuredResourceInterface.class,\n                             UnsecuredSubResource.class)\n                     .addAsResource(new StringAsset(\"quarkus.security.jaxrs.default-roles-allowed = **\\n\"),\n                             \"application.properties\"));\n\ndiff --git a/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/DenyAllJaxRsTest.java b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/DenyAllJaxRsTest.java\nindex 90cd2a9f773..8ed4d8cbf44 100644\n--- a/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/DenyAllJaxRsTest.java\n+++ b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/DenyAllJaxRsTest.java\n@@ -26,8 +26,8 @@ public class DenyAllJaxRsTest {\n     static QuarkusUnitTest runner = new QuarkusUnitTest()\n             .withApplicationRoot((jar) -> jar\n                     .addClasses(PermitAllResource.class, UnsecuredResource.class,\n-                            TestIdentityProvider.class,\n-                            TestIdentityController.class,\n+                            TestIdentityProvider.class, UnsecuredParentResource.class,\n+                            TestIdentityController.class, UnsecuredResourceInterface.class,\n                             UnsecuredSubResource.class, HelloResource.class)\n                     .addAsResource(new StringAsset(\"quarkus.security.jaxrs.deny-unannotated-endpoints = true\\n\"),\n                             \"application.properties\"));\n@@ -58,6 +58,18 @@ public void shouldDenyUnannotated() {\n         assertStatus(path, 403, 401);\n     }\n \n+    @Test\n+    public void shouldDenyUnannotatedOnParentClass() {\n+        String path = \"/unsecured/defaultSecurityParent\";\n+        assertStatus(path, 403, 401);\n+    }\n+\n+    @Test\n+    public void shouldDenyUnannotatedOnInterface() {\n+        String path = \"/unsecured/defaultSecurityInterface\";\n+        assertStatus(path, 403, 401);\n+    }\n+\n     @Test\n     public void shouldDenyDenyAllMethod() {\n         String path = \"/unsecured/denyAll\";\n\ndiff --git a/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/UnsecuredParentResource.java b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/UnsecuredParentResource.java\nnew file mode 100644\nindex 00000000000..abf5b385e9a\n--- /dev/null\n+++ b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/UnsecuredParentResource.java\n@@ -0,0 +1,14 @@\n+package io.quarkus.resteasy.test.security;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+\n+public class UnsecuredParentResource {\n+\n+    @Path(\"/defaultSecurityParent\")\n+    @GET\n+    public String defaultSecurityParent() {\n+        return \"defaultSecurityParent\";\n+    }\n+\n+}\n\ndiff --git a/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/UnsecuredResource.java b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/UnsecuredResource.java\nindex 116f041ba53..7339c9c1eda 100644\n--- a/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/UnsecuredResource.java\n+++ b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/UnsecuredResource.java\n@@ -12,13 +12,18 @@\n  * @author Michal Szynkiewicz, michal.l.szynkiewicz@gmail.com\n  */\n @Path(\"/unsecured\")\n-public class UnsecuredResource {\n+public class UnsecuredResource extends UnsecuredParentResource implements UnsecuredResourceInterface {\n     @Path(\"/defaultSecurity\")\n     @GET\n     public String defaultSecurity() {\n         return \"defaultSecurity\";\n     }\n \n+    @Override\n+    public String defaultSecurityInterface() {\n+        return UnsecuredResourceInterface.super.defaultSecurityInterface();\n+    }\n+\n     @Path(\"/permitAllPathParam/{index}\")\n     @GET\n     @PermitAll\n\ndiff --git a/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/UnsecuredResourceInterface.java b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/UnsecuredResourceInterface.java\nnew file mode 100644\nindex 00000000000..d2498d46a8c\n--- /dev/null\n+++ b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/UnsecuredResourceInterface.java\n@@ -0,0 +1,14 @@\n+package io.quarkus.resteasy.test.security;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+\n+public interface UnsecuredResourceInterface {\n+\n+    @Path(\"/defaultSecurityInterface\")\n+    @GET\n+    default String defaultSecurityInterface() {\n+        return \"defaultSecurityInterface\";\n+    }\n+\n+}\n\ndiff --git a/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/AbstractSecurityEventTest.java b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/AbstractSecurityEventTest.java\nindex cc8d3a9db71..1d3366fd222 100644\n--- a/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/AbstractSecurityEventTest.java\n+++ b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/AbstractSecurityEventTest.java\n@@ -40,7 +40,8 @@ public abstract class AbstractSecurityEventTest {\n     protected static final Class<?>[] TEST_CLASSES = {\n             RolesAllowedResource.class, RolesAllowedBlockingResource.class, TestIdentityProvider.class,\n             TestIdentityController.class, UnsecuredResource.class, UnsecuredSubResource.class, RolesAllowedService.class,\n-            RolesAllowedServiceResource.class, EventObserver.class\n+            RolesAllowedServiceResource.class, EventObserver.class, UnsecuredResourceInterface.class,\n+            UnsecuredParentResource.class\n     };\n \n     @Inject\n\ndiff --git a/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/DefaultRolesAllowedJaxRsTest.java b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/DefaultRolesAllowedJaxRsTest.java\nindex 4590ee9a9d0..ca34474ad90 100644\n--- a/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/DefaultRolesAllowedJaxRsTest.java\n+++ b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/DefaultRolesAllowedJaxRsTest.java\n@@ -18,9 +18,9 @@ public class DefaultRolesAllowedJaxRsTest {\n     static QuarkusUnitTest runner = new QuarkusUnitTest()\n             .withApplicationRoot((jar) -> jar\n                     .addClasses(PermitAllResource.class, UnsecuredResource.class,\n-                            TestIdentityProvider.class,\n+                            TestIdentityProvider.class, UnsecuredResourceInterface.class,\n                             TestIdentityController.class,\n-                            UnsecuredSubResource.class, HelloResource.class)\n+                            UnsecuredSubResource.class, HelloResource.class, UnsecuredParentResource.class)\n                     .addAsResource(new StringAsset(\"quarkus.security.jaxrs.default-roles-allowed=admin\\n\"),\n                             \"application.properties\"));\n \n@@ -37,6 +37,18 @@ public void shouldDenyUnannotated() {\n         assertStatus(path, 200, 403, 401);\n     }\n \n+    @Test\n+    public void shouldDenyUnannotatedParent() {\n+        String path = \"/unsecured/defaultSecurityParent\";\n+        assertStatus(path, 200, 403, 401);\n+    }\n+\n+    @Test\n+    public void shouldDenyUnannotatedInterface() {\n+        String path = \"/unsecured/defaultSecurityInterface\";\n+        assertStatus(path, 200, 403, 401);\n+    }\n+\n     @Test\n     public void shouldDenyDenyAllMethod() {\n         String path = \"/unsecured/denyAll\";\n\ndiff --git a/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/DefaultRolesAllowedStarJaxRsTest.java b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/DefaultRolesAllowedStarJaxRsTest.java\nindex dcad10e88e0..6f77ef2fff8 100644\n--- a/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/DefaultRolesAllowedStarJaxRsTest.java\n+++ b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/DefaultRolesAllowedStarJaxRsTest.java\n@@ -17,8 +17,8 @@ public class DefaultRolesAllowedStarJaxRsTest {\n     static QuarkusUnitTest runner = new QuarkusUnitTest()\n             .withApplicationRoot((jar) -> jar\n                     .addClasses(PermitAllResource.class, UnsecuredResource.class,\n-                            TestIdentityProvider.class,\n-                            TestIdentityController.class,\n+                            TestIdentityProvider.class, UnsecuredResourceInterface.class,\n+                            TestIdentityController.class, UnsecuredParentResource.class,\n                             UnsecuredSubResource.class)\n                     .addAsResource(new StringAsset(\"quarkus.security.jaxrs.default-roles-allowed = **\\n\"),\n                             \"application.properties\"));\n\ndiff --git a/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/DenyAllJaxRsTest.java b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/DenyAllJaxRsTest.java\nindex 2e10fb07015..76f23ddcc80 100644\n--- a/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/DenyAllJaxRsTest.java\n+++ b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/DenyAllJaxRsTest.java\n@@ -3,12 +3,25 @@\n import static io.restassured.RestAssured.given;\n import static io.restassured.RestAssured.when;\n \n+import java.lang.reflect.Modifier;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+\n import org.hamcrest.Matchers;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.resteasy.reactive.common.processor.transformation.AnnotationsTransformer;\n import org.jboss.shrinkwrap.api.asset.StringAsset;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.RegisterExtension;\n \n+import io.quarkus.builder.BuildContext;\n+import io.quarkus.builder.BuildStep;\n+import io.quarkus.resteasy.reactive.server.spi.AnnotationsTransformerBuildItem;\n import io.quarkus.security.test.utils.TestIdentityController;\n import io.quarkus.security.test.utils.TestIdentityProvider;\n import io.quarkus.test.QuarkusUnitTest;\n@@ -21,11 +34,43 @@ public class DenyAllJaxRsTest {\n     static QuarkusUnitTest runner = new QuarkusUnitTest()\n             .withApplicationRoot((jar) -> jar\n                     .addClasses(PermitAllResource.class, UnsecuredResource.class,\n-                            TestIdentityProvider.class,\n-                            TestIdentityController.class,\n-                            UnsecuredSubResource.class, HelloResource.class)\n+                            TestIdentityProvider.class, UnsecuredResourceInterface.class,\n+                            TestIdentityController.class, SpecialResource.class,\n+                            UnsecuredSubResource.class, HelloResource.class, UnsecuredParentResource.class)\n                     .addAsResource(new StringAsset(\"quarkus.security.jaxrs.deny-unannotated-endpoints = true\\n\"),\n-                            \"application.properties\"));\n+                            \"application.properties\"))\n+            .addBuildChainCustomizer(builder -> {\n+                builder.addBuildStep(new BuildStep() {\n+                    @Override\n+                    public void execute(BuildContext context) {\n+                        // Here we add an AnnotationsTransformer in order to make sure that the security layer\n+                        // uses the proper set of transformers\n+                        context.produce(\n+                                new AnnotationsTransformerBuildItem(\n+                                        AnnotationsTransformer.builder().appliesTo(AnnotationTarget.Kind.METHOD)\n+                                                .transform(transformerContext -> {\n+                                                    // This transformer auto-adds @GET and @Path if missing, thus emulating Renarde\n+                                                    MethodInfo methodInfo = transformerContext.getTarget().asMethod();\n+                                                    ClassInfo declaringClass = methodInfo.declaringClass();\n+                                                    if (declaringClass.name().toString().equals(SpecialResource.class.getName())\n+                                                            && !methodInfo.isConstructor()\n+                                                            && !Modifier.isStatic(methodInfo.flags())) {\n+                                                        if (methodInfo.declaredAnnotation(GET.class.getName()) == null) {\n+                                                            // auto-add it\n+                                                            transformerContext.transform().add(GET.class).done();\n+                                                        }\n+                                                        if (methodInfo.declaredAnnotation(Path.class.getName()) == null) {\n+                                                            // auto-add it\n+                                                            transformerContext.transform().add(Path.class,\n+                                                                    AnnotationValue.createStringValue(\"value\",\n+                                                                            methodInfo.name()))\n+                                                                    .done();\n+                                                        }\n+                                                    }\n+                                                })));\n+                    }\n+                }).produces(AnnotationsTransformerBuildItem.class).build();\n+            });\n \n     @BeforeAll\n     public static void setupUsers() {\n@@ -40,6 +85,18 @@ public void shouldDenyUnannotated() {\n         assertStatus(path, 403, 401);\n     }\n \n+    @Test\n+    public void shouldDenyUnannotatedOnParentClass() {\n+        String path = \"/unsecured/defaultSecurityParent\";\n+        assertStatus(path, 403, 401);\n+    }\n+\n+    @Test\n+    public void shouldDenyUnannotatedOnInterface() {\n+        String path = \"/unsecured/defaultSecurityInterface\";\n+        assertStatus(path, 403, 401);\n+    }\n+\n     @Test\n     public void shouldDenyUnannotatedNonBlocking() {\n         String path = \"/unsecured/defaultSecurityNonBlocking\";\n@@ -90,6 +147,14 @@ public void testServerExceptionMapper() {\n                 .body(Matchers.equalTo(\"unauthorizedExceptionMapper\"));\n     }\n \n+    @Test\n+    public void shouldDenyUnannotatedWithAnnotationTransformer() {\n+        String path = \"/special/explicit\";\n+        assertStatus(path, 403, 401);\n+        path = \"/special/implicit\";\n+        assertStatus(path, 403, 401);\n+    }\n+\n     private void assertStatus(String path, int status, int anonStatus) {\n         given().auth().preemptive()\n                 .basic(\"admin\", \"admin\").get(path)\n@@ -105,4 +170,15 @@ private void assertStatus(String path, int status, int anonStatus) {\n \n     }\n \n+    @Path(\"/special\")\n+    public static class SpecialResource {\n+        @GET\n+        public String explicit() {\n+            return \"explicit\";\n+        }\n+\n+        public String implicit() {\n+            return \"implicit\";\n+        }\n+    }\n }\n\ndiff --git a/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/UnsecuredParentResource.java b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/UnsecuredParentResource.java\nnew file mode 100644\nindex 00000000000..8250d5a9bf9\n--- /dev/null\n+++ b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/UnsecuredParentResource.java\n@@ -0,0 +1,14 @@\n+package io.quarkus.resteasy.reactive.server.test.security;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+\n+public class UnsecuredParentResource {\n+\n+    @Path(\"/defaultSecurityParent\")\n+    @GET\n+    public String defaultSecurityParent() {\n+        return \"defaultSecurityParent\";\n+    }\n+\n+}\n\ndiff --git a/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/UnsecuredResource.java b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/UnsecuredResource.java\nindex bca5025db0a..82622c3e585 100644\n--- a/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/UnsecuredResource.java\n+++ b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/UnsecuredResource.java\n@@ -12,7 +12,7 @@\n  * @author Michal Szynkiewicz, michal.l.szynkiewicz@gmail.com\n  */\n @Path(\"/unsecured\")\n-public class UnsecuredResource {\n+public class UnsecuredResource extends UnsecuredParentResource implements UnsecuredResourceInterface {\n     @Path(\"/defaultSecurity\")\n     @GET\n     public String defaultSecurity() {\n\ndiff --git a/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/UnsecuredResourceInterface.java b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/UnsecuredResourceInterface.java\nnew file mode 100644\nindex 00000000000..7be652f15ef\n--- /dev/null\n+++ b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/UnsecuredResourceInterface.java\n@@ -0,0 +1,14 @@\n+package io.quarkus.resteasy.reactive.server.test.security;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+\n+public interface UnsecuredResourceInterface {\n+\n+    @Path(\"/defaultSecurityInterface\")\n+    @GET\n+    default String defaultSecurityInterface() {\n+        return \"defaultSecurityInterface\";\n+    }\n+\n+}\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "d802748128cd1932279b7c334f3792d481814ef5", "source_date": "Fri Jan 26 19:33:04 2024 +0100", "source_tag": "3.9.0", "target_commit": "b7dd69a3012a872f2846d73072ff232e07da74dd", "target_date": "Sat Jan 20 21:29:19 2024 +0100", "target_tag": "3.2.10", "FAIL TO PASS": ["io.quarkus.resteasy.test.security.DenyAllJaxRsTest.shouldDenyUnannotatedOnParentClass", "io.quarkus.resteasy.test.security.DefaultRolesAllowedJaxRsTest.shouldDenyUnannotatedOnParentClass"], "PASS TO PASS": []}
{"ecosystem": "maven", "repo": "tomcat", "instance_id": "tomcat_1214", "original_commit_message": "Fix 66591 - Make sure every response includes a Send Headers packet", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/java/org/apache/coyote/ajp/AjpProcessor.java b/java/org/apache/coyote/ajp/AjpProcessor.java\nindex 93d671cb7f..ccf2e78ba1 100644\n--- a/java/org/apache/coyote/ajp/AjpProcessor.java\n+++ b/java/org/apache/coyote/ajp/AjpProcessor.java\n@@ -956,43 +956,47 @@ public class AjpProcessor extends AbstractProcessor {\n         responseMsgPos = -1;\n \n         int numHeaders = headers.size();\n-        for (int i = 0; i < numHeaders; i++) {\n-            if (i == 0) {\n-                // Write AJP message header\n-                responseMessage.reset();\n-                responseMessage.appendByte(Constants.JK_AJP13_SEND_HEADERS);\n-\n-                // Write HTTP response line\n-                responseMessage.appendInt(statusCode);\n-                // Reason phrase is optional but mod_jk + httpd 2.x fails with a null\n-                // reason phrase - bug 45026\n-                tmpMB.setString(Integer.toString(response.getStatus()));\n-                responseMessage.appendBytes(tmpMB);\n-\n-                // Start headers\n-                responseMessage.appendInt(numHeaders);\n-            }\n+        boolean needAjpMessageHeader = true;\n+        while (needAjpMessageHeader) {\n+            // Write AJP message header\n+            responseMessage.reset();\n+            responseMessage.appendByte(Constants.JK_AJP13_SEND_HEADERS);\n \n-            try {\n-                // Write headers\n-                MessageBytes hN = headers.getName(i);\n-                int hC = Constants.getResponseAjpIndex(hN.toString());\n-                if (hC > 0) {\n-                    responseMessage.appendInt(hC);\n-                } else {\n-                    responseMessage.appendBytes(hN);\n+            // Write HTTP response line\n+            responseMessage.appendInt(statusCode);\n+            // Reason phrase is optional but mod_jk + httpd 2.x fails with a null\n+            // reason phrase - bug 45026\n+            tmpMB.setString(Integer.toString(response.getStatus()));\n+            responseMessage.appendBytes(tmpMB);\n+\n+            // Start headers\n+            responseMessage.appendInt(numHeaders);\n+\n+            needAjpMessageHeader = false;\n+\n+            for (int i = 0; i < numHeaders; i++) {\n+                try {\n+                    // Write headers\n+                    MessageBytes hN = headers.getName(i);\n+                    int hC = Constants.getResponseAjpIndex(hN.toString());\n+                    if (hC > 0) {\n+                        responseMessage.appendInt(hC);\n+                    } else {\n+                        responseMessage.appendBytes(hN);\n+                    }\n+                    MessageBytes hV = headers.getValue(i);\n+                    responseMessage.appendBytes(hV);\n+                } catch (IllegalArgumentException iae) {\n+                    // Log the problematic header\n+                    log.warn(sm.getString(\"ajpprocessor.response.invalidHeader\", headers.getName(i), headers.getValue(i)),\n+                            iae);\n+                    // Remove the problematic header\n+                    headers.removeHeader(i);\n+                    numHeaders--;\n+                    // Restart writing of AJP message\n+                    needAjpMessageHeader = true;\n+                    break;\n                 }\n-                MessageBytes hV = headers.getValue(i);\n-                responseMessage.appendBytes(hV);\n-            } catch (IllegalArgumentException iae) {\n-                // Log the problematic header\n-                log.warn(sm.getString(\"ajpprocessor.response.invalidHeader\", headers.getName(i), headers.getValue(i)),\n-                        iae);\n-                // Remove the problematic header\n-                headers.removeHeader(i);\n-                numHeaders--;\n-                // Reset loop and start again\n-                i = -1;\n             }\n         }\n \n\n\n</patch>\n<test_patch>\ndiff --git a/test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java b/test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java\nindex 111b033e85..22b0466e6f 100644\n--- a/test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java\n+++ b/test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java\n@@ -883,6 +883,60 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {\n     }\n \n \n+    /*\n+     * https://bz.apache.org/bugzilla/show_bug.cgi?id=66591\n+     */\n+    @Test\n+    public void testNoHeaders() throws Exception {\n+\n+        Tomcat tomcat = getTomcatInstance();\n+\n+        // No file system docBase required\n+        Context ctx = tomcat.addContext(\"\", null);\n+\n+        Tomcat.addServlet(ctx, \"bug66591\", new NoHeadersServlet());\n+        ctx.addServletMappingDecoded(\"/\", \"bug66591\");\n+\n+        tomcat.start();\n+\n+        SimpleAjpClient ajpClient = new SimpleAjpClient();\n+        ajpClient.setPort(getPort());\n+        ajpClient.connect();\n+\n+        validateCpong(ajpClient.cping());\n+\n+        TesterAjpMessage forwardMessage = ajpClient.createForwardMessage();\n+        forwardMessage.end();\n+\n+        TesterAjpMessage responseHeaderMessage = ajpClient.sendMessage(forwardMessage, null);\n+\n+        // Expect 3 messages: headers, body chunk, end\n+        Map<String, List<String>> responseHeaders = validateResponseHeaders(responseHeaderMessage, 200, \"200\");\n+        Assert.assertTrue(responseHeaders.isEmpty());\n+\n+        String body = extractResponseBody(ajpClient.readMessage());\n+        Assert.assertTrue(body.isEmpty());\n+\n+        validateResponseEnd(ajpClient.readMessage(), true);\n+\n+        // Double check the connection is still open\n+        validateCpong(ajpClient.cping());\n+\n+        ajpClient.disconnect();\n+    }\n+\n+\n+    private static class NoHeadersServlet extends HttpServlet {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        @Override\n+        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+            resp.flushBuffer();\n+        }\n+    }\n+\n+\n     /**\n      * Process response header packet and checks the status. Any other data is ignored.\n      */\n@@ -943,7 +997,7 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {\n         Assert.assertEquals(0x03, message.readByte());\n \n         int len = message.readInt();\n-        Assert.assertTrue(len > 0);\n+        Assert.assertTrue(len >= 0);\n         return message.readString(len);\n     }\n \n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "739c7381aed22b7636351caf885ddc519ab6b442", "source_date": "Wed May 3 17:05:48 2023 +0100", "source_tag": "11.0.0", "target_commit": "f0742f47b98aca943097f7f88e0d1163f57527e3", "target_date": "Wed May 3 17:05:56 2023 +0100", "target_tag": "10.1.9", "FAIL TO PASS": ["testNoHeaders"], "PASS TO PASS": ["testOneHeader", "testLocalAddr", "testSecure", "testServerName", "testLargeResponse", "testRemotePort", "testRemoteHost", "testZeroLengthRequestBodyGetA", "testRemoteAddr", "testOneAttribute", "testZeroLengthRequestBodyPostB", "testInvalidHeader", "testSecret", "testSmallBody", "testUri", "testQueryString", "testProtocol", "testZeroLengthRequestBodyGetB", "testServerPort", "testKeepAlive", "test304WithBody", "testRemoteUser", "testMethod", "testLargeBody", "testMulti", "testAuthType", "testPostMultipleContentLength", "testZeroLengthRequestBodyPostA", "testPost"]}
{"ecosystem": "maven", "repo": "tomcat", "instance_id": "tomcat_1215", "original_commit_message": "Fix 66591 - Make sure every response includes a Send Headers packet", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/java/org/apache/coyote/ajp/AjpProcessor.java b/java/org/apache/coyote/ajp/AjpProcessor.java\nindex 93d671cb7f..ccf2e78ba1 100644\n--- a/java/org/apache/coyote/ajp/AjpProcessor.java\n+++ b/java/org/apache/coyote/ajp/AjpProcessor.java\n@@ -956,43 +956,47 @@ public class AjpProcessor extends AbstractProcessor {\n         responseMsgPos = -1;\n \n         int numHeaders = headers.size();\n-        for (int i = 0; i < numHeaders; i++) {\n-            if (i == 0) {\n-                // Write AJP message header\n-                responseMessage.reset();\n-                responseMessage.appendByte(Constants.JK_AJP13_SEND_HEADERS);\n-\n-                // Write HTTP response line\n-                responseMessage.appendInt(statusCode);\n-                // Reason phrase is optional but mod_jk + httpd 2.x fails with a null\n-                // reason phrase - bug 45026\n-                tmpMB.setString(Integer.toString(response.getStatus()));\n-                responseMessage.appendBytes(tmpMB);\n-\n-                // Start headers\n-                responseMessage.appendInt(numHeaders);\n-            }\n+        boolean needAjpMessageHeader = true;\n+        while (needAjpMessageHeader) {\n+            // Write AJP message header\n+            responseMessage.reset();\n+            responseMessage.appendByte(Constants.JK_AJP13_SEND_HEADERS);\n \n-            try {\n-                // Write headers\n-                MessageBytes hN = headers.getName(i);\n-                int hC = Constants.getResponseAjpIndex(hN.toString());\n-                if (hC > 0) {\n-                    responseMessage.appendInt(hC);\n-                } else {\n-                    responseMessage.appendBytes(hN);\n+            // Write HTTP response line\n+            responseMessage.appendInt(statusCode);\n+            // Reason phrase is optional but mod_jk + httpd 2.x fails with a null\n+            // reason phrase - bug 45026\n+            tmpMB.setString(Integer.toString(response.getStatus()));\n+            responseMessage.appendBytes(tmpMB);\n+\n+            // Start headers\n+            responseMessage.appendInt(numHeaders);\n+\n+            needAjpMessageHeader = false;\n+\n+            for (int i = 0; i < numHeaders; i++) {\n+                try {\n+                    // Write headers\n+                    MessageBytes hN = headers.getName(i);\n+                    int hC = Constants.getResponseAjpIndex(hN.toString());\n+                    if (hC > 0) {\n+                        responseMessage.appendInt(hC);\n+                    } else {\n+                        responseMessage.appendBytes(hN);\n+                    }\n+                    MessageBytes hV = headers.getValue(i);\n+                    responseMessage.appendBytes(hV);\n+                } catch (IllegalArgumentException iae) {\n+                    // Log the problematic header\n+                    log.warn(sm.getString(\"ajpprocessor.response.invalidHeader\", headers.getName(i), headers.getValue(i)),\n+                            iae);\n+                    // Remove the problematic header\n+                    headers.removeHeader(i);\n+                    numHeaders--;\n+                    // Restart writing of AJP message\n+                    needAjpMessageHeader = true;\n+                    break;\n                 }\n-                MessageBytes hV = headers.getValue(i);\n-                responseMessage.appendBytes(hV);\n-            } catch (IllegalArgumentException iae) {\n-                // Log the problematic header\n-                log.warn(sm.getString(\"ajpprocessor.response.invalidHeader\", headers.getName(i), headers.getValue(i)),\n-                        iae);\n-                // Remove the problematic header\n-                headers.removeHeader(i);\n-                numHeaders--;\n-                // Reset loop and start again\n-                i = -1;\n             }\n         }\n \n\n\n</patch>\n<test_patch>\ndiff --git a/test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java b/test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java\nindex 111b033e85..22b0466e6f 100644\n--- a/test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java\n+++ b/test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java\n@@ -883,6 +883,60 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {\n     }\n \n \n+    /*\n+     * https://bz.apache.org/bugzilla/show_bug.cgi?id=66591\n+     */\n+    @Test\n+    public void testNoHeaders() throws Exception {\n+\n+        Tomcat tomcat = getTomcatInstance();\n+\n+        // No file system docBase required\n+        Context ctx = tomcat.addContext(\"\", null);\n+\n+        Tomcat.addServlet(ctx, \"bug66591\", new NoHeadersServlet());\n+        ctx.addServletMappingDecoded(\"/\", \"bug66591\");\n+\n+        tomcat.start();\n+\n+        SimpleAjpClient ajpClient = new SimpleAjpClient();\n+        ajpClient.setPort(getPort());\n+        ajpClient.connect();\n+\n+        validateCpong(ajpClient.cping());\n+\n+        TesterAjpMessage forwardMessage = ajpClient.createForwardMessage();\n+        forwardMessage.end();\n+\n+        TesterAjpMessage responseHeaderMessage = ajpClient.sendMessage(forwardMessage, null);\n+\n+        // Expect 3 messages: headers, body chunk, end\n+        Map<String, List<String>> responseHeaders = validateResponseHeaders(responseHeaderMessage, 200, \"200\");\n+        Assert.assertTrue(responseHeaders.isEmpty());\n+\n+        String body = extractResponseBody(ajpClient.readMessage());\n+        Assert.assertTrue(body.isEmpty());\n+\n+        validateResponseEnd(ajpClient.readMessage(), true);\n+\n+        // Double check the connection is still open\n+        validateCpong(ajpClient.cping());\n+\n+        ajpClient.disconnect();\n+    }\n+\n+\n+    private static class NoHeadersServlet extends HttpServlet {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        @Override\n+        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+            resp.flushBuffer();\n+        }\n+    }\n+\n+\n     /**\n      * Process response header packet and checks the status. Any other data is ignored.\n      */\n@@ -943,7 +997,7 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {\n         Assert.assertEquals(0x03, message.readByte());\n \n         int len = message.readInt();\n-        Assert.assertTrue(len > 0);\n+        Assert.assertTrue(len >= 0);\n         return message.readString(len);\n     }\n \n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "739c7381aed22b7636351caf885ddc519ab6b442", "source_date": "Wed May 3 17:05:48 2023 +0100", "source_tag": "11.0.0", "target_commit": "2214c8030522aa9b2a367dfa5d9acff1a03666ae", "target_date": "Wed May 3 17:10:24 2023 +0100", "target_tag": "8.5.89", "FAIL TO PASS": ["testNoHeaders"], "PASS TO PASS": ["testOneHeader", "testLocalAddr", "testSecure", "testServerName", "testLargeResponse", "testRemotePort", "testRemoteHost", "testZeroLengthRequestBodyGetA", "testRemoteAddr", "testOneAttribute", "testZeroLengthRequestBodyPostB", "testInvalidHeader", "testSecret", "testSmallBody", "testUri", "testQueryString", "testProtocol", "testZeroLengthRequestBodyGetB", "testServerPort", "testKeepAlive", "test304WithBody", "testRemoteUser", "testMethod", "testLargeBody", "testMulti", "testAuthType", "testPostMultipleContentLength", "testZeroLengthRequestBodyPostA", "testPost"]}
{"ecosystem": "pypi", "repo": "keystone", "instance_id": "keystone_192", "original_commit_message": "Ensure tokens are added to both Trustor and Trustee indexes\nTokens are now added to both the Trustor and Trustee user-token-index\nso that bulk token revocations (e.g. password change) of the trustee\nwill work as expected. This is a backport of the basic code that was\nused in the Icehouse-vintage Dogpile Token KVS backend that resolves\nthis issue by merging the handling of memcache and KVS backends into\nthe same logic.\nChange-Id: I3e19e4a8fc1e11cef6db51d364e80061e97befa7\nCloses-Bug: #1260080", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/keystone/token/backends/kvs.py b/keystone/token/backends/kvs.py\nindex b3f991ab7..c0d6e36ac 100644\n--- a/keystone/token/backends/kvs.py\n+++ b/keystone/token/backends/kvs.py\n@@ -150,5 +150,7 @@ class Token(kvs.Base, token.Driver):\n     def flush_expired_tokens(self):\n         now = timeutils.utcnow()\n         for token, token_ref in self.db.items():\n+            if not token.startswith('revoked-token-'):\n+                continue\n             if self.is_expired(now, token_ref):\n                 self.db.delete(token)\n\ndiff --git a/keystone/token/backends/memcache.py b/keystone/token/backends/memcache.py\nindex a6fe82694..08c1c4098 100644\n--- a/keystone/token/backends/memcache.py\n+++ b/keystone/token/backends/memcache.py\n@@ -83,12 +83,33 @@ class Token(token.Driver):\n             expires_ts = utils.unixtime(data_copy['expires'])\n             kwargs['time'] = expires_ts\n         self.client.set(ptk, data_copy, **kwargs)\n-        if 'id' in data['user']:\n-            user_id = data['user']['id']\n-            user_key = self._prefix_user_id(user_id)\n-            # Append the new token_id to the token-index-list stored in the\n-            # user-key within memcache.\n-            self._update_user_list_with_cas(user_key, token_id, data_copy)\n+        user_id = data['user']['id']\n+        user_key = self._prefix_user_id(user_id)\n+        # Append the new token_id to the token-index-list stored in the\n+        # user-key within memcache.\n+        self._update_user_list_with_cas(user_key, token_id, data_copy)\n+        if CONF.trust.enabled and data.get('trust_id'):\n+            # NOTE(morganfainberg): If trusts are enabled and this is a trust\n+            # scoped token, we add the token to the trustee list as well.  This\n+            # allows password changes of the trustee to also expire the token.\n+            # There is no harm in placing the token in multiple lists, as\n+            # _list_tokens is smart enough to handle almost any case of\n+            # valid/invalid/expired for a given token.\n+            token_data = data_copy['token_data']\n+            if data_copy['token_version'] == token.provider.V2:\n+                trustee_user_id = token_data['access']['trust'][\n+                    'trustee_user_id']\n+            elif data_copy['token_version'] == token.provider.V3:\n+                trustee_user_id = token_data['OS-TRUST:trust'][\n+                    'trustee_user_id']\n+            else:\n+                raise token.provider.UnsupportedTokenVersionException(\n+                    _('Unknown token version %s') %\n+                    data_copy.get('token_version'))\n+\n+            trustee_key = self._prefix_user_id(trustee_user_id)\n+            self._update_user_list_with_cas(trustee_key, token_id, data_copy)\n+\n         return copy.deepcopy(data_copy)\n \n     def _convert_user_index_from_json(self, token_list, user_key):\n\n</patch>\n<test_patch>\ndiff --git a/keystone/tests/test_backend.py b/keystone/tests/test_backend.py\nindex e0e81ca13..1e926c855 100644\n--- a/keystone/tests/test_backend.py\n+++ b/keystone/tests/test_backend.py\n@@ -25,6 +25,7 @@ from keystone import exception\n from keystone.openstack.common import timeutils\n from keystone import tests\n from keystone.tests import default_fixtures\n+from keystone.token import provider\n \n \n CONF = config.CONF\n@@ -2645,7 +2646,8 @@ class TokenTests(object):\n                           self.token_api.delete_token, token_id)\n \n     def create_token_sample_data(self, tenant_id=None, trust_id=None,\n-                                 user_id=\"testuserid\"):\n+                                 user_id='testuserid',\n+                                 trustee_user_id='testuserid2'):\n         token_id = self._create_token_id()\n         data = {'id': token_id, 'a': 'b',\n                 'user': {'id': user_id}}\n@@ -2655,6 +2657,15 @@ class TokenTests(object):\n             data['tenant'] = None\n         if trust_id is not None:\n             data['trust_id'] = trust_id\n+            data.setdefault('access', {}).setdefault('trust', {})\n+            # Testuserid2 is used here since a trustee will be different in\n+            # the cases of impersonation and therefore should not match the\n+            # token's user_id.\n+            data['access']['trust']['trustee_user_id'] = trustee_user_id\n+        data['token_version'] = provider.V2\n+        # Issue token stores a copy of all token data at token['token_data'].\n+        # This emulates that assumption as part of the test.\n+        data['token_data'] = copy.deepcopy(data)\n         new_token = self.token_api.create_token(token_id, data)\n         return new_token['id']\n \n@@ -2907,6 +2918,39 @@ class TokenTests(object):\n         for t in self.token_api.list_revoked_tokens():\n             self.assertIn('expires', t)\n \n+    def test_token_in_trustee_and_trustor_token_list(self):\n+        self.opt_in_group('trust',\n+                          enabled=True)\n+        trustor = self.user_foo\n+        trustee = self.user_two\n+        trust_id = uuid.uuid4().hex\n+        trust_info = {'trustor_user_id': trustor['id'],\n+                      'trustee_user_id': trustee['id'],\n+                      'project_id': self.tenant_bar['id'],\n+                      'expires_at': timeutils.\n+                      parse_isotime('2031-02-18T18:10:00Z'),\n+                      'impersonation': True}\n+        self.trust_api.create_trust(trust_id, trust_info,\n+                                    roles=[{'id': 'member'},\n+                                           {'id': 'other'},\n+                                           {'id': 'browser'}])\n+\n+        token_id = self.create_token_sample_data(\n+            tenant_id=self.tenant_bar['id'],\n+            trust_id=trust_id,\n+            user_id=trustor['id'],\n+            trustee_user_id=trustee['id'])\n+\n+        # Ensure the token id exists in both the trustor and trustee token\n+        # lists\n+\n+        self.assertIn(token_id,\n+                      self.token_api.list_tokens(self.user_two['id'],\n+                                                 trust_id=trust_id))\n+        self.assertIn(token_id,\n+                      self.token_api.list_tokens(self.user_foo['id'],\n+                                                 trust_id=trust_id))\n+\n \n class TokenCacheInvalidation(object):\n     def _create_test_data(self):\n\ndiff --git a/keystone/tests/test_backend_kvs.py b/keystone/tests/test_backend_kvs.py\nindex ac9df717c..a23882c54 100644\n--- a/keystone/tests/test_backend_kvs.py\n+++ b/keystone/tests/test_backend_kvs.py\n@@ -70,6 +70,7 @@ class KvsToken(tests.TestCase, test_backend.TokenTests):\n         identity.CONF.identity.driver = (\n             'keystone.identity.backends.kvs.Identity')\n         self.load_backends()\n+        self.load_fixtures(default_fixtures)\n \n \n class KvsTrust(tests.TestCase, test_backend.TrustTests):\n\ndiff --git a/keystone/tests/test_backend_memcache.py b/keystone/tests/test_backend_memcache.py\nindex 964d5b42a..c99a6a36d 100644\n--- a/keystone/tests/test_backend_memcache.py\n+++ b/keystone/tests/test_backend_memcache.py\n@@ -26,6 +26,7 @@ from keystone import exception\n from keystone.openstack.common import jsonutils\n from keystone.openstack.common import timeutils\n from keystone import tests\n+from keystone.tests import default_fixtures\n from keystone.tests import test_backend\n from keystone.tests import test_utils\n from keystone import token\n@@ -115,6 +116,7 @@ class MemcacheToken(tests.TestCase, test_backend.TokenTests):\n     def setUp(self):\n         super(MemcacheToken, self).setUp()\n         self.load_backends()\n+        self.load_fixtures(default_fixtures)\n         fake_client = MemcacheClient()\n         self.token_man = token.Manager()\n         self.token_man.driver = token_memcache.Token(client=fake_client)\n\n\n</test_patch>\n", "file change type": "Backport omits files", "content change type": "logical and structural changes", "source_commit": "b6f0e26da0e2ab0892a5658da281a065e668637b", "source_date": "Fri Feb 21 13:36:23 2014 -0800", "source_tag": "2013.2.3", "target_commit": "a411c944af78c36f2fdb87d305ba452dc52d7ed3", "target_date": "Fri Feb 21 14:15:14 2014 -0800", "target_tag": "2013.1.5", "FAIL TO PASS": ["test_token_in_trustee_and_trustor_token_list"], "PASS TO PASS": []}
{"ecosystem": "maven", "repo": "tomcat", "instance_id": "tomcat_1216", "original_commit_message": "Fix 66591 - Make sure every response includes a Send Headers packet", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/java/org/apache/coyote/ajp/AjpProcessor.java b/java/org/apache/coyote/ajp/AjpProcessor.java\nindex 93d671cb7f..ccf2e78ba1 100644\n--- a/java/org/apache/coyote/ajp/AjpProcessor.java\n+++ b/java/org/apache/coyote/ajp/AjpProcessor.java\n@@ -956,43 +956,47 @@ public class AjpProcessor extends AbstractProcessor {\n         responseMsgPos = -1;\n \n         int numHeaders = headers.size();\n-        for (int i = 0; i < numHeaders; i++) {\n-            if (i == 0) {\n-                // Write AJP message header\n-                responseMessage.reset();\n-                responseMessage.appendByte(Constants.JK_AJP13_SEND_HEADERS);\n-\n-                // Write HTTP response line\n-                responseMessage.appendInt(statusCode);\n-                // Reason phrase is optional but mod_jk + httpd 2.x fails with a null\n-                // reason phrase - bug 45026\n-                tmpMB.setString(Integer.toString(response.getStatus()));\n-                responseMessage.appendBytes(tmpMB);\n-\n-                // Start headers\n-                responseMessage.appendInt(numHeaders);\n-            }\n+        boolean needAjpMessageHeader = true;\n+        while (needAjpMessageHeader) {\n+            // Write AJP message header\n+            responseMessage.reset();\n+            responseMessage.appendByte(Constants.JK_AJP13_SEND_HEADERS);\n \n-            try {\n-                // Write headers\n-                MessageBytes hN = headers.getName(i);\n-                int hC = Constants.getResponseAjpIndex(hN.toString());\n-                if (hC > 0) {\n-                    responseMessage.appendInt(hC);\n-                } else {\n-                    responseMessage.appendBytes(hN);\n+            // Write HTTP response line\n+            responseMessage.appendInt(statusCode);\n+            // Reason phrase is optional but mod_jk + httpd 2.x fails with a null\n+            // reason phrase - bug 45026\n+            tmpMB.setString(Integer.toString(response.getStatus()));\n+            responseMessage.appendBytes(tmpMB);\n+\n+            // Start headers\n+            responseMessage.appendInt(numHeaders);\n+\n+            needAjpMessageHeader = false;\n+\n+            for (int i = 0; i < numHeaders; i++) {\n+                try {\n+                    // Write headers\n+                    MessageBytes hN = headers.getName(i);\n+                    int hC = Constants.getResponseAjpIndex(hN.toString());\n+                    if (hC > 0) {\n+                        responseMessage.appendInt(hC);\n+                    } else {\n+                        responseMessage.appendBytes(hN);\n+                    }\n+                    MessageBytes hV = headers.getValue(i);\n+                    responseMessage.appendBytes(hV);\n+                } catch (IllegalArgumentException iae) {\n+                    // Log the problematic header\n+                    log.warn(sm.getString(\"ajpprocessor.response.invalidHeader\", headers.getName(i), headers.getValue(i)),\n+                            iae);\n+                    // Remove the problematic header\n+                    headers.removeHeader(i);\n+                    numHeaders--;\n+                    // Restart writing of AJP message\n+                    needAjpMessageHeader = true;\n+                    break;\n                 }\n-                MessageBytes hV = headers.getValue(i);\n-                responseMessage.appendBytes(hV);\n-            } catch (IllegalArgumentException iae) {\n-                // Log the problematic header\n-                log.warn(sm.getString(\"ajpprocessor.response.invalidHeader\", headers.getName(i), headers.getValue(i)),\n-                        iae);\n-                // Remove the problematic header\n-                headers.removeHeader(i);\n-                numHeaders--;\n-                // Reset loop and start again\n-                i = -1;\n             }\n         }\n \n\n\n</patch>\n<test_patch>\ndiff --git a/test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java b/test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java\nindex 111b033e85..22b0466e6f 100644\n--- a/test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java\n+++ b/test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java\n@@ -883,6 +883,60 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {\n     }\n \n \n+    /*\n+     * https://bz.apache.org/bugzilla/show_bug.cgi?id=66591\n+     */\n+    @Test\n+    public void testNoHeaders() throws Exception {\n+\n+        Tomcat tomcat = getTomcatInstance();\n+\n+        // No file system docBase required\n+        Context ctx = tomcat.addContext(\"\", null);\n+\n+        Tomcat.addServlet(ctx, \"bug66591\", new NoHeadersServlet());\n+        ctx.addServletMappingDecoded(\"/\", \"bug66591\");\n+\n+        tomcat.start();\n+\n+        SimpleAjpClient ajpClient = new SimpleAjpClient();\n+        ajpClient.setPort(getPort());\n+        ajpClient.connect();\n+\n+        validateCpong(ajpClient.cping());\n+\n+        TesterAjpMessage forwardMessage = ajpClient.createForwardMessage();\n+        forwardMessage.end();\n+\n+        TesterAjpMessage responseHeaderMessage = ajpClient.sendMessage(forwardMessage, null);\n+\n+        // Expect 3 messages: headers, body chunk, end\n+        Map<String, List<String>> responseHeaders = validateResponseHeaders(responseHeaderMessage, 200, \"200\");\n+        Assert.assertTrue(responseHeaders.isEmpty());\n+\n+        String body = extractResponseBody(ajpClient.readMessage());\n+        Assert.assertTrue(body.isEmpty());\n+\n+        validateResponseEnd(ajpClient.readMessage(), true);\n+\n+        // Double check the connection is still open\n+        validateCpong(ajpClient.cping());\n+\n+        ajpClient.disconnect();\n+    }\n+\n+\n+    private static class NoHeadersServlet extends HttpServlet {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        @Override\n+        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+            resp.flushBuffer();\n+        }\n+    }\n+\n+\n     /**\n      * Process response header packet and checks the status. Any other data is ignored.\n      */\n@@ -943,7 +997,7 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {\n         Assert.assertEquals(0x03, message.readByte());\n \n         int len = message.readInt();\n-        Assert.assertTrue(len > 0);\n+        Assert.assertTrue(len >= 0);\n         return message.readString(len);\n     }\n \n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "logical and structural changes", "source_commit": "739c7381aed22b7636351caf885ddc519ab6b442", "source_date": "Wed May 3 17:05:48 2023 +0100", "source_tag": "11.0.0", "target_commit": "2f0ca2378415f4cf0748f4bc8fa955f41f803fa5", "target_date": "Wed May 3 17:06:00 2023 +0100", "target_tag": "9.0.75", "FAIL TO PASS": ["testNoHeaders"], "PASS TO PASS": ["testOneHeader", "testLocalAddr", "testSecure", "testServerName", "testLargeResponse", "testRemotePort", "testRemoteHost", "testZeroLengthRequestBodyGetA", "testRemoteAddr", "testOneAttribute", "testZeroLengthRequestBodyPostB", "testInvalidHeader", "testSecret", "testSmallBody", "testUri", "testQueryString", "testProtocol", "testZeroLengthRequestBodyGetB", "testServerPort", "testKeepAlive", "test304WithBody", "testRemoteUser", "testMethod", "testLargeBody", "testMulti", "testAuthType", "testPostMultipleContentLength", "testZeroLengthRequestBodyPostA", "testPost"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_193", "original_commit_message": "Fixed a security issue related to password resets\nFull disclosure and new release are forthcoming", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/contrib/auth/views.py b/django/contrib/auth/views.py\nindex 747b5c0991..d27e2f5aba 100644\n--- a/django/contrib/auth/views.py\n+++ b/django/contrib/auth/views.py\n@@ -163,7 +163,7 @@ def password_reset(request, is_admin_site=False,\n                 'request': request,\n             }\n             if is_admin_site:\n-                opts = dict(opts, domain_override=request.META['HTTP_HOST'])\n+                opts = dict(opts, domain_override=request.get_host())\n             form.save(**opts)\n             return HttpResponseRedirect(post_reset_redirect)\n     else:\n\ndiff --git a/django/http/__init__.py b/django/http/__init__.py\nindex ecb39129ad..b385b450ee 100644\n--- a/django/http/__init__.py\n+++ b/django/http/__init__.py\n@@ -180,6 +180,11 @@ class HttpRequest(object):\n             server_port = str(self.META['SERVER_PORT'])\n             if server_port != ('443' if self.is_secure() else '80'):\n                 host = '%s:%s' % (host, server_port)\n+\n+        # Disallow potentially poisoned hostnames.\n+        if set(';/?@&=+$,').intersection(host):\n+            raise SuspiciousOperation('Invalid HTTP_HOST header: %s' % host)\n+\n         return host\n \n     def get_full_path(self):\n\n</patch>\n<test_patch>\ndiff --git a/django/contrib/auth/tests/urls.py b/django/contrib/auth/tests/urls.py\nindex 8f9e848aa9..4b498ceaf0 100644\n--- a/django/contrib/auth/tests/urls.py\n+++ b/django/contrib/auth/tests/urls.py\n@@ -55,6 +55,7 @@ urlpatterns = urlpatterns + patterns('',\n     (r'^logout/next_page/$', 'django.contrib.auth.views.logout', dict(next_page='/somewhere/')),\n     (r'^remote_user/$', remote_user_auth_view),\n     (r'^password_reset_from_email/$', 'django.contrib.auth.views.password_reset', dict(from_email='staffmember@example.com')),\n+    (r'^admin_password_reset/$', 'django.contrib.auth.views.password_reset', dict(is_admin_site=True)),\n     (r'^login_required/$', login_required(password_reset)),\n     (r'^login_required_login_url/$', login_required(password_reset, login_url='/somewhere/')),\n \n\ndiff --git a/django/contrib/auth/tests/views.py b/django/contrib/auth/tests/views.py\nindex 5727dc289f..bb17576d31 100644\n--- a/django/contrib/auth/tests/views.py\n+++ b/django/contrib/auth/tests/views.py\n@@ -5,6 +5,7 @@ from django.conf import global_settings, settings\n from django.contrib.sites.models import Site, RequestSite\n from django.contrib.auth.models import User\n from django.core import mail\n+from django.core.exceptions import SuspiciousOperation\n from django.core.urlresolvers import reverse, NoReverseMatch\n from django.http import QueryDict\n from django.utils.encoding import force_text\n@@ -103,6 +104,42 @@ class PasswordResetTest(AuthViewsTestCase):\n         self.assertEqual(len(mail.outbox), 1)\n         self.assertEqual(\"staffmember@example.com\", mail.outbox[0].from_email)\n \n+    def test_admin_reset(self):\n+        \"If the reset view is marked as being for admin, the HTTP_HOST header is used for a domain override.\"\n+        response = self.client.post('/admin_password_reset/',\n+            {'email': 'staffmember@example.com'},\n+            HTTP_HOST='adminsite.com'\n+        )\n+        self.assertEqual(response.status_code, 302)\n+        self.assertEqual(len(mail.outbox), 1)\n+        self.assertTrue(\"http://adminsite.com\" in mail.outbox[0].body)\n+        self.assertEqual(settings.DEFAULT_FROM_EMAIL, mail.outbox[0].from_email)\n+\n+    def test_poisoned_http_host(self):\n+        \"Poisoned HTTP_HOST headers can't be used for reset emails\"\n+        # This attack is based on the way browsers handle URLs. The colon\n+        # should be used to separate the port, but if the URL contains an @,\n+        # the colon is interpreted as part of a username for login purposes,\n+        # making 'evil.com' the request domain. Since HTTP_HOST is used to\n+        # produce a meaningful reset URL, we need to be certain that the\n+        # HTTP_HOST header isn't poisoned. This is done as a check when get_host()\n+        # is invoked, but we check here as a practical consequence.\n+        with self.assertRaises(SuspiciousOperation):\n+            self.client.post('/password_reset/',\n+                {'email': 'staffmember@example.com'},\n+                HTTP_HOST='www.example:dr.frankenstein@evil.tld'\n+            )\n+        self.assertEqual(len(mail.outbox), 0)\n+\n+    def test_poisoned_http_host_admin_site(self):\n+        \"Poisoned HTTP_HOST headers can't be used for reset emails on admin views\"\n+        with self.assertRaises(SuspiciousOperation):\n+            self.client.post('/admin_password_reset/',\n+                {'email': 'staffmember@example.com'},\n+                HTTP_HOST='www.example:dr.frankenstein@evil.tld'\n+            )\n+        self.assertEqual(len(mail.outbox), 0)\n+\n     def _test_confirm_start(self):\n         # Start by creating the email\n         response = self.client.post('/password_reset/', {'email': 'staffmember@example.com'})\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "9305c0e12d43c4df999c3301a1f0c742264a657e", "source_date": "Wed Oct 17 14:36:41 2012 -0700", "source_tag": "1.5", "target_commit": "92d3430f12171f16f566c9050c40feefb830a4a3", "target_date": "Wed Oct 17 14:40:41 2012 -0700", "target_tag": "1.4.2", "FAIL TO PASS": ["django.contrib.auth.tests.views.PasswordResetTest.test_poisoned_http_host_admin_site", "django.contrib.auth.tests.views.PasswordResetTest.test_poisoned_http_host"], "PASS TO PASS": ["django.contrib.auth.tests.decorators.LoginRequiredTestCase.testLoginRequired", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_low_level_pkbdf2", "django.contrib.auth.tests.context_processors.AuthContextProcessorTests.test_user_attrs", "django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_known_user", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_bad_algorithm", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_pkbdf2", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_upgrade", "django.contrib.auth.tests.auth_backends.NoBackendsTest.test_raises_exception", "django.contrib.auth.tests.basic.BasicTestCase.test_user", "django.contrib.auth.tests.views.LoginURLSettings.test_remote_login_url", "django.contrib.auth.tests.models.UserManagerTestCase.test_create_user_email_domain_normalize", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_unusable_password", "django.contrib.auth.tests.views.LogoutTest.test_logout_with_overridden_redirect_url", "django.contrib.auth.tests.auth_backends.AnonymousUserBackendTest.test_has_perm", "django.contrib.auth.tests.models.UserManagerTestCase.test_create_user_email_domain_normalize_with_whitespace", "django.contrib.auth.tests.tokens.TokenGeneratorTest.test_make_token", "django.contrib.auth.tests.views.LoginURLSettings.test_remote_login_url_with_next_querystring", "django.contrib.auth.tests.views.LoginTest.test_security_check", "django.contrib.auth.tests.views.LogoutTest.test_security_check", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_no_remote_user", "django.contrib.auth.tests.auth_backends.InActiveUserBackendTest.test_has_module_perms", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_invalid_user", "django.contrib.auth.tests.auth_backends.RowlevelBackendTest.test_get_group_permissions", "django.contrib.auth.tests.views.LoginURLSettings.test_standard_login_url", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_md5", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_no_remote_user", "django.contrib.auth.tests.views.LogoutTest.test_logout_with_custom_redirect_argument", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_sha1", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_known_user", "django.contrib.auth.tests.auth_backends.BackendTest.test_has_perm", "django.contrib.auth.tests.forms.AuthenticationFormTest.test_success", "django.contrib.auth.tests.models.UserManagerTestCase.test_create_user", "django.contrib.auth.tests.views.LogoutTest.test_14377", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_unknown_user", "django.contrib.auth.tests.auth_backends.BackendTest.test_get_all_superuser_permissions", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_succeeds", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_inactive_user", "django.contrib.auth.tests.forms.AuthenticationFormTest.test_inactive_user", "django.contrib.auth.tests.auth_backends.NoInActiveUserBackendTest.test_has_perm", "django.contrib.auth.tests.auth_backends.NoInActiveUserBackendTest.test_has_module_perms", "django.contrib.auth.tests.auth_backends.AnonymousUserBackendTest.test_has_perms", "django.contrib.auth.tests.basic.BasicTestCase.test_superuser", "django.contrib.auth.tests.views.PasswordResetTest.test_email_found_custom_from", "django.contrib.auth.tests.management.GetDefaultUsernameTestCase.test_simple", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_invalid", "django.contrib.auth.tests.auth_backends.RowlevelBackendTest.test_has_perm", "django.contrib.auth.tests.forms.UserCreationFormTest.test_password_verification", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_invalid_post", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_unusable", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_done_fails", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_nonexistant_email", "django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_no_remote_user", "django.contrib.auth.tests.forms.PasswordChangeFormTest.test_success", "django.contrib.auth.tests.tokens.TokenGeneratorTest.test_date_length", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_no_upgrade_on_incorrect_pass", "django.contrib.auth.tests.views.LogoutTest.test_logout_with_redirect_argument", "django.contrib.auth.tests.signals.SignalTestCase.test_logout_anonymous", "django.contrib.auth.tests.forms.UserChangeFormTest.test_username_validity", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_done_succeeds", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_unsalted_md5", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_cleaned_data", "django.contrib.auth.tests.forms.UserChangeFormTest.test_bug_14242", "django.contrib.auth.tests.views.LogoutTest.test_logout_with_next_page_specified", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_custom_email_subject", "django.contrib.auth.tests.views.PasswordResetTest.test_admin_reset", "django.contrib.auth.tests.auth_backends.BackendTest.test_custom_perms", "django.contrib.auth.tests.management.ChangepasswordManagementCommandTestCase.test_that_changepassword_command_changes_joes_password", "django.contrib.auth.tests.forms.AuthenticationFormTest.test_invalid_username", "django.contrib.auth.tests.forms.UserCreationFormTest.test_user_already_exists", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_complete", "django.contrib.auth.tests.auth_backends.BackendTest.test_has_no_object_perm", "django.contrib.auth.tests.auth_backends.AnonymousUserBackendTest.test_get_all_permissions", "django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_unknown_user", "django.contrib.auth.tests.views.LoginURLSettings.test_https_login_url", "django.contrib.auth.tests.context_processors.AuthContextProcessorTests.test_session_is_accessed", "django.contrib.auth.tests.forms.SetPasswordFormTest.test_password_verification", "django.contrib.auth.tests.models.NaturalKeysTestCase.test_user_natural_key", "django.contrib.auth.tests.forms.UserChangeFormTest.test_bug_17944_unknown_password_algorithm", "django.contrib.auth.tests.forms.AuthenticationFormTest.test_inactive_user_i18n", "django.contrib.auth.tests.decorators.LoginRequiredTestCase.testView", "django.contrib.auth.tests.forms.UserChangeFormTest.test_bug_17944_empty_password", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_last_login", "django.contrib.auth.tests.views.LoginURLSettings.test_login_url_with_querystring", "django.contrib.auth.tests.models.LoadDataWithoutNaturalKeysTestCase.test_user_is_created_and_added_to_group", "django.contrib.auth.tests.management.GetDefaultUsernameTestCase.test_existing", "django.contrib.auth.tests.views.PasswordResetTest.test_email_found", "django.contrib.auth.tests.forms.PasswordChangeFormTest.test_password_verification", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_fails_with_invalid_old_password", "django.contrib.auth.tests.models.NaturalKeysTestCase.test_group_natural_key", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_bug_5605", "django.contrib.auth.tests.models.UserManagerTestCase.test_empty_username", "django.contrib.auth.tests.views.PasswordResetTest.test_email_not_found", "django.contrib.auth.tests.forms.UserChangeFormTest.test_bug_17944_unmanageable_password", "django.contrib.auth.tests.forms.PasswordChangeFormTest.test_incorrect_password", "django.contrib.auth.tests.decorators.LoginRequiredTestCase.testLoginRequiredNextUrl", "django.contrib.auth.tests.context_processors.AuthContextProcessorTests.test_session_not_accessed", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_known_user", "django.contrib.auth.tests.forms.UserCreationFormTest.test_invalid_data", "django.contrib.auth.tests.views.AuthViewNamedURLTests.test_named_urls", "django.contrib.auth.tests.signals.SignalTestCase.test_logout", "django.contrib.auth.tests.tokens.TokenGeneratorTest.test_timeout", "django.contrib.auth.tests.context_processors.AuthContextProcessorTests.test_perms_attrs", "django.contrib.auth.tests.decorators.LoginRequiredTestCase.testCallable", "django.contrib.auth.tests.auth_backends.InActiveUserBackendTest.test_has_perm", "django.contrib.auth.tests.tokens.TokenGeneratorTest.test_10265", "django.contrib.auth.tests.models.UserManagerTestCase.test_create_user_email_domain_normalize_rfc3696", "django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_last_login", "django.contrib.auth.tests.models.LoadDataWithNaturalKeysTestCase.test_user_is_created_and_added_to_group", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_crypt", "django.contrib.auth.tests.forms.SetPasswordFormTest.test_success", "django.contrib.auth.tests.signals.SignalTestCase.test_login", "django.contrib.auth.tests.auth_backends.RowlevelBackendTest.test_get_all_permissions", "django.contrib.auth.tests.forms.UserCreationFormTest.test_both_passwords", "django.contrib.auth.tests.context_processors.AuthContextProcessorTests.test_message_attrs", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_different_passwords", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_invalid_email", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_overflow_user", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_fails_with_mismatched_passwords", "django.contrib.auth.tests.basic.BasicTestCase.test_createsuperuser_management_command", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_no_upgrade", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_last_login", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_unknown_user", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_low_level_pbkdf2_sha1", "django.contrib.auth.tests.views.LogoutTest.test_logout_default", "django.contrib.auth.tests.auth_backends.AnonymousUserBackendTest.test_has_module_perms", "django.contrib.auth.tests.basic.BasicTestCase.test_user_no_email", "django.contrib.auth.tests.management.ChangepasswordManagementCommandTestCase.test_that_max_tries_exits_1", "django.contrib.auth.tests.management.GetDefaultUsernameTestCase.test_i18n", "django.contrib.auth.tests.views.LoginTest.test_current_site_in_context_after_login", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_valid", "django.contrib.auth.tests.models.ProfileTestCase.test_site_profile_not_available", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_simple", "django.contrib.auth.tests.basic.BasicTestCase.test_anonymous_user", "django.contrib.auth.tests.forms.UserCreationFormTest.test_success", "django.contrib.auth.tests.forms.PasswordChangeFormTest.test_field_order"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_194", "original_commit_message": "Fixed a security issue related to password resets\nFull disclosure and new release are forthcoming", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/contrib/auth/views.py b/django/contrib/auth/views.py\nindex 747b5c0991..d27e2f5aba 100644\n--- a/django/contrib/auth/views.py\n+++ b/django/contrib/auth/views.py\n@@ -163,7 +163,7 @@ def password_reset(request, is_admin_site=False,\n                 'request': request,\n             }\n             if is_admin_site:\n-                opts = dict(opts, domain_override=request.META['HTTP_HOST'])\n+                opts = dict(opts, domain_override=request.get_host())\n             form.save(**opts)\n             return HttpResponseRedirect(post_reset_redirect)\n     else:\n\ndiff --git a/django/http/__init__.py b/django/http/__init__.py\nindex ecb39129ad..b385b450ee 100644\n--- a/django/http/__init__.py\n+++ b/django/http/__init__.py\n@@ -180,6 +180,11 @@ class HttpRequest(object):\n             server_port = str(self.META['SERVER_PORT'])\n             if server_port != ('443' if self.is_secure() else '80'):\n                 host = '%s:%s' % (host, server_port)\n+\n+        # Disallow potentially poisoned hostnames.\n+        if set(';/?@&=+$,').intersection(host):\n+            raise SuspiciousOperation('Invalid HTTP_HOST header: %s' % host)\n+\n         return host\n \n     def get_full_path(self):\n\n</patch>\n<test_patch>\ndiff --git a/django/contrib/auth/tests/urls.py b/django/contrib/auth/tests/urls.py\nindex 8f9e848aa9..4b498ceaf0 100644\n--- a/django/contrib/auth/tests/urls.py\n+++ b/django/contrib/auth/tests/urls.py\n@@ -55,6 +55,7 @@ urlpatterns = urlpatterns + patterns('',\n     (r'^logout/next_page/$', 'django.contrib.auth.views.logout', dict(next_page='/somewhere/')),\n     (r'^remote_user/$', remote_user_auth_view),\n     (r'^password_reset_from_email/$', 'django.contrib.auth.views.password_reset', dict(from_email='staffmember@example.com')),\n+    (r'^admin_password_reset/$', 'django.contrib.auth.views.password_reset', dict(is_admin_site=True)),\n     (r'^login_required/$', login_required(password_reset)),\n     (r'^login_required_login_url/$', login_required(password_reset, login_url='/somewhere/')),\n \n\ndiff --git a/django/contrib/auth/tests/views.py b/django/contrib/auth/tests/views.py\nindex 5727dc289f..bb17576d31 100644\n--- a/django/contrib/auth/tests/views.py\n+++ b/django/contrib/auth/tests/views.py\n@@ -5,6 +5,7 @@ from django.conf import global_settings, settings\n from django.contrib.sites.models import Site, RequestSite\n from django.contrib.auth.models import User\n from django.core import mail\n+from django.core.exceptions import SuspiciousOperation\n from django.core.urlresolvers import reverse, NoReverseMatch\n from django.http import QueryDict\n from django.utils.encoding import force_text\n@@ -103,6 +104,42 @@ class PasswordResetTest(AuthViewsTestCase):\n         self.assertEqual(len(mail.outbox), 1)\n         self.assertEqual(\"staffmember@example.com\", mail.outbox[0].from_email)\n \n+    def test_admin_reset(self):\n+        \"If the reset view is marked as being for admin, the HTTP_HOST header is used for a domain override.\"\n+        response = self.client.post('/admin_password_reset/',\n+            {'email': 'staffmember@example.com'},\n+            HTTP_HOST='adminsite.com'\n+        )\n+        self.assertEqual(response.status_code, 302)\n+        self.assertEqual(len(mail.outbox), 1)\n+        self.assertTrue(\"http://adminsite.com\" in mail.outbox[0].body)\n+        self.assertEqual(settings.DEFAULT_FROM_EMAIL, mail.outbox[0].from_email)\n+\n+    def test_poisoned_http_host(self):\n+        \"Poisoned HTTP_HOST headers can't be used for reset emails\"\n+        # This attack is based on the way browsers handle URLs. The colon\n+        # should be used to separate the port, but if the URL contains an @,\n+        # the colon is interpreted as part of a username for login purposes,\n+        # making 'evil.com' the request domain. Since HTTP_HOST is used to\n+        # produce a meaningful reset URL, we need to be certain that the\n+        # HTTP_HOST header isn't poisoned. This is done as a check when get_host()\n+        # is invoked, but we check here as a practical consequence.\n+        with self.assertRaises(SuspiciousOperation):\n+            self.client.post('/password_reset/',\n+                {'email': 'staffmember@example.com'},\n+                HTTP_HOST='www.example:dr.frankenstein@evil.tld'\n+            )\n+        self.assertEqual(len(mail.outbox), 0)\n+\n+    def test_poisoned_http_host_admin_site(self):\n+        \"Poisoned HTTP_HOST headers can't be used for reset emails on admin views\"\n+        with self.assertRaises(SuspiciousOperation):\n+            self.client.post('/admin_password_reset/',\n+                {'email': 'staffmember@example.com'},\n+                HTTP_HOST='www.example:dr.frankenstein@evil.tld'\n+            )\n+        self.assertEqual(len(mail.outbox), 0)\n+\n     def _test_confirm_start(self):\n         # Start by creating the email\n         response = self.client.post('/password_reset/', {'email': 'staffmember@example.com'})\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "9305c0e12d43c4df999c3301a1f0c742264a657e", "source_date": "Wed Oct 17 14:36:41 2012 -0700", "source_tag": "1.5", "target_commit": "b45c377f8f488955e0c7069cad3f3dd21910b071", "target_date": "Wed Oct 17 14:43:08 2012 -0700", "target_tag": "1.3.4", "FAIL TO PASS": ["django.contrib.auth.tests.views.PasswordResetTest.test_poisoned_http_host_admin_site", "django.contrib.auth.tests.views.PasswordResetTest.test_poisoned_http_host", "Poisoned HTTP_HOST headers can't be used for reset emails on admin views", "Poisoned HTTP_HOST headers can't be used for reset emails"], "PASS TO PASS": ["django.contrib.auth.tests.decorators.LoginRequiredTestCase.testLoginRequired", "django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_known_user", "django.contrib.auth.tests.auth_backends.NoBackendsTest.test_raises_exception", "django.contrib.auth.tests.views.LoginURLSettings.test_remote_login_url", "Check the creation and properties of a superuser", "django.contrib.auth.tests.views.LogoutTest.test_logout_with_overridden_redirect_url", "django.contrib.auth.tests.auth_backends.AnonymousUserBackendTest.test_has_perm", "django.contrib.auth.tests.tokens.TokenGeneratorTest.test_make_token", "django.contrib.auth.tests.views.LoginURLSettings.test_remote_login_url_with_next_querystring", "django.contrib.auth.tests.views.LoginTest.test_security_check", "django.contrib.auth.tests.views.LogoutTest.test_security_check", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_no_remote_user", "django.contrib.auth.tests.auth_backends.InActiveUserBackendTest.test_has_module_perms", "Email is sent if a valid email address is provided for password reset", "Email is sent if a valid email address is provided for password reset when a custom from_email is provided.", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_invalid_user", "django.contrib.auth.tests.auth_backends.RowlevelBackendTest.test_get_group_permissions", "django.contrib.auth.tests.views.LoginURLSettings.test_standard_login_url", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_no_remote_user", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_known_user", "Check the properties of the anonymous user", "django.contrib.auth.tests.auth_backends.BackendTest.test_has_perm", "django.contrib.auth.tests.forms.AuthenticationFormTest.test_success", "django.contrib.auth.tests.views.LogoutTest.test_14377", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_unknown_user", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_succeeds", "Error is raised if the provided email address isn't currently registered", "django.contrib.auth.tests.auth_backends.NoAnonymousUserBackendTest.test_has_module_perms", "Logout with next_page option given redirects to specified resource", "django.contrib.auth.tests.forms.AuthenticationFormTest.test_inactive_user", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_inactive_user", "django.contrib.auth.tests.auth_backends.NoInActiveUserBackendTest.test_has_perm", "django.contrib.auth.tests.auth_backends.NoInActiveUserBackendTest.test_has_module_perms", "django.contrib.auth.tests.auth_backends.AnonymousUserBackendTest.test_has_perms", "django.contrib.auth.tests.auth_backends.NoAnonymousUserBackendTest.test_has_perms", "Logout without next_page option renders the default template", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_invalid", "django.contrib.auth.tests.auth_backends.RowlevelBackendTest.test_has_perm", "django.contrib.auth.tests.forms.UserCreationFormTest.test_password_verification", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_invalid_post", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_nonexistant_email", "django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_no_remote_user", "django.contrib.auth.tests.forms.PasswordChangeFormTest.test_success", "django.contrib.auth.tests.tokens.TokenGeneratorTest.test_date_length", "django.contrib.auth.tests.signals.SignalTestCase.test_logout_anonymous", "django.contrib.auth.tests.forms.UserChangeFormTest.test_username_validity", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_cleaned_data", "django.contrib.auth.tests.forms.UserChangeFormTest.test_bug_14242", "django.contrib.auth.tests.auth_backends.BackendTest.test_custom_perms", "django.contrib.auth.tests.forms.AuthenticationFormTest.test_invalid_username", "django.contrib.auth.tests.forms.UserCreationFormTest.test_user_already_exists", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_complete", "django.contrib.auth.tests.auth_backends.NoAnonymousUserBackendTest.test_get_all_permissions", "django.contrib.auth.tests.auth_backends.AnonymousUserBackendTest.test_get_all_permissions", "django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_unknown_user", "django.contrib.auth.tests.views.LoginURLSettings.test_https_login_url", "django.contrib.auth.tests.forms.SetPasswordFormTest.test_password_verification", "Test that the order of registered permissions doesn't break", "django.contrib.auth.tests.forms.PasswordChangeFormTest.test_field_order", "django.contrib.auth.tests.decorators.LoginRequiredTestCase.testView", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_last_login", "django.contrib.auth.tests.views.LoginURLSettings.test_login_url_with_querystring", "If the reset view is marked as being for admin, the HTTP_HOST header is used for a domain override.", "django.contrib.auth.tests.forms.PasswordChangeFormTest.test_password_verification", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_fails_with_invalid_old_password", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_bug_5605", "django.contrib.auth.tests.forms.PasswordChangeFormTest.test_incorrect_password", "A superuser has all permissions. Refs #14795", "django.contrib.auth.tests.decorators.LoginRequiredTestCase.testLoginRequiredNextUrl", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_known_user", "django.contrib.auth.tests.forms.UserCreationFormTest.test_invalid_data", "django.contrib.auth.tests.signals.SignalTestCase.test_logout", "django.contrib.auth.tests.tokens.TokenGeneratorTest.test_timeout", "django.contrib.auth.tests.decorators.LoginRequiredTestCase.testCallable", "django.contrib.auth.tests.tokens.TokenGeneratorTest.test_10265", "django.contrib.auth.tests.auth_backends.InActiveUserBackendTest.test_has_perm", "django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_last_login", "django.contrib.auth.tests.forms.SetPasswordFormTest.test_success", "django.contrib.auth.tests.signals.SignalTestCase.test_login", "django.contrib.auth.tests.auth_backends.RowlevelBackendTest.test_get_all_permissions", "django.contrib.auth.tests.forms.UserCreationFormTest.test_both_passwords", "django.contrib.auth.tests.auth_backends.NoAnonymousUserBackendTest.test_has_perm", "Logout with custom query string redirects to specified resource", "Logout with query string redirects to specified resource", "django.contrib.auth.tests.tokens.TokenGeneratorTest.test_django12_hash", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_different_passwords", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_invalid_email", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_overflow_user", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_fails_with_mismatched_passwords", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_last_login", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_unknown_user", "django.contrib.auth.tests.auth_backends.AnonymousUserBackendTest.test_has_module_perms", "django.contrib.auth.tests.views.LoginTest.test_current_site_in_context_after_login", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_valid", "Check that users can be created and can set their password", "Check the operation of the createsuperuser management command", "django.contrib.auth.tests.models.ProfileTestCase.test_site_profile_not_available", "django.contrib.auth.tests.forms.UserCreationFormTest.test_success", "Regressiontest for #12462"]}
{"ecosystem": "maven", "repo": "quarkus", "instance_id": "quarkus_702", "original_commit_message": "Fix JAX-RS default security checks for inherited / transformed endpoints\n(cherry picked from commit 6f3d752d157cc8eb22cc86c521cd6f029f67f42f)", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/extensions/resteasy-classic/resteasy/deployment/src/main/java/io/quarkus/resteasy/deployment/RestPathAnnotationProcessor.java b/extensions/resteasy-classic/resteasy/deployment/src/main/java/io/quarkus/resteasy/deployment/RestPathAnnotationProcessor.java\nindex 5959d9e09c1..94b3a099371 100644\n--- a/extensions/resteasy-classic/resteasy/deployment/src/main/java/io/quarkus/resteasy/deployment/RestPathAnnotationProcessor.java\n+++ b/extensions/resteasy-classic/resteasy/deployment/src/main/java/io/quarkus/resteasy/deployment/RestPathAnnotationProcessor.java\n@@ -182,7 +182,7 @@ static Optional<AnnotationInstance> searchPathAnnotationOnInterfaces(CombinedInd\n      * @param resultAcc accumulator for tail-recursion\n      * @return Collection of all interfaces und their parents. Never null.\n      */\n-    private static Collection<ClassInfo> getAllClassInterfaces(\n+    static Collection<ClassInfo> getAllClassInterfaces(\n             CombinedIndexBuildItem index,\n             Collection<ClassInfo> classInfos,\n             List<ClassInfo> resultAcc) {\n\ndiff --git a/extensions/resteasy-classic/resteasy/deployment/src/main/java/io/quarkus/resteasy/deployment/ResteasyBuiltinsProcessor.java b/extensions/resteasy-classic/resteasy/deployment/src/main/java/io/quarkus/resteasy/deployment/ResteasyBuiltinsProcessor.java\nindex 2001747fbb7..e525ee2cadd 100644\n--- a/extensions/resteasy-classic/resteasy/deployment/src/main/java/io/quarkus/resteasy/deployment/ResteasyBuiltinsProcessor.java\n+++ b/extensions/resteasy-classic/resteasy/deployment/src/main/java/io/quarkus/resteasy/deployment/ResteasyBuiltinsProcessor.java\n@@ -1,17 +1,21 @@\n package io.quarkus.resteasy.deployment;\n \n import static io.quarkus.deployment.annotations.ExecutionTime.STATIC_INIT;\n+import static io.quarkus.resteasy.deployment.RestPathAnnotationProcessor.getAllClassInterfaces;\n import static io.quarkus.resteasy.deployment.RestPathAnnotationProcessor.isRestEndpointMethod;\n import static io.quarkus.security.spi.SecurityTransformerUtils.hasSecurityAnnotation;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.List;\n import java.util.Objects;\n+import java.util.function.Predicate;\n import java.util.stream.Collectors;\n \n import org.jboss.jandex.ClassInfo;\n import org.jboss.jandex.DotName;\n import org.jboss.jandex.MethodInfo;\n+import org.jboss.logging.Logger;\n \n import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n import io.quarkus.deployment.Capabilities;\n@@ -50,6 +54,7 @@\n public class ResteasyBuiltinsProcessor {\n \n     protected static final String META_INF_RESOURCES = \"META-INF/resources\";\n+    private static final Logger LOG = Logger.getLogger(ResteasyBuiltinsProcessor.class);\n \n     @BuildStep\n     void setUpDenyAllJaxRs(CombinedIndexBuildItem index,\n@@ -65,10 +70,42 @@ void setUpDenyAllJaxRs(CombinedIndexBuildItem index,\n                 ClassInfo classInfo = index.getIndex().getClassByName(DotName.createSimple(className));\n                 if (classInfo == null)\n                     throw new IllegalStateException(\"Unable to find class info for \" + className);\n-                if (!hasSecurityAnnotation(classInfo)) {\n-                    for (MethodInfo methodInfo : classInfo.methods()) {\n-                        if (isRestEndpointMethod(index, methodInfo) && !hasSecurityAnnotation(methodInfo)) {\n-                            methods.add(methodInfo);\n+                // add unannotated class endpoints as well as parent class unannotated endpoints\n+                addAllUnannotatedEndpoints(index, classInfo, methods);\n+\n+                // interface endpoints implemented on resources are already in, now we need to resolve default interface\n+                // methods as there, CDI interceptors won't work, therefore neither will our additional secured methods\n+                Collection<ClassInfo> interfaces = getAllClassInterfaces(index, List.of(classInfo), new ArrayList<>());\n+                if (!interfaces.isEmpty()) {\n+                    final List<MethodInfo> interfaceEndpoints = new ArrayList<>();\n+                    for (ClassInfo anInterface : interfaces) {\n+                        addUnannotatedEndpoints(index, anInterface, interfaceEndpoints);\n+                    }\n+                    // look for implementors as implementors on resource classes are secured by CDI interceptors\n+                    if (!interfaceEndpoints.isEmpty()) {\n+                        interfaceBlock: for (MethodInfo interfaceEndpoint : interfaceEndpoints) {\n+                            if (interfaceEndpoint.isDefault()) {\n+                                for (MethodInfo endpoint : methods) {\n+                                    boolean nameParamsMatch = endpoint.name().equals(interfaceEndpoint.name())\n+                                            && (interfaceEndpoint.parameterTypes().equals(endpoint.parameterTypes()));\n+                                    if (nameParamsMatch) {\n+                                        // whether matched method is declared on class that implements interface endpoint\n+                                        Predicate<DotName> isEndpointInterface = interfaceEndpoint.declaringClass()\n+                                                .name()::equals;\n+                                        if (endpoint.declaringClass().interfaceNames().stream().anyMatch(isEndpointInterface)) {\n+                                            continue interfaceBlock;\n+                                        }\n+                                    }\n+                                }\n+                                String configProperty = config.denyJaxRs ? \"quarkus.security.jaxrs.deny-unannotated-endpoints\"\n+                                        : \"quarkus.security.jaxrs.default-roles-allowed\";\n+                                // this is logging only as I'm a bit worried about false positives and breaking things\n+                                // for what is very much edge case\n+                                LOG.warn(\"Default interface method '\" + interfaceEndpoint\n+                                        + \"' cannot be secured with the '\" + configProperty\n+                                        + \"' configuration property. Please implement this method for CDI \"\n+                                        + \"interceptor binding to work\");\n+                            }\n                         }\n                     }\n                 }\n@@ -85,6 +122,27 @@ void setUpDenyAllJaxRs(CombinedIndexBuildItem index,\n         }\n     }\n \n+    private static void addAllUnannotatedEndpoints(CombinedIndexBuildItem index, ClassInfo classInfo,\n+            List<MethodInfo> methods) {\n+        if (classInfo == null) {\n+            return;\n+        }\n+        addUnannotatedEndpoints(index, classInfo, methods);\n+        if (classInfo.superClassType() != null && !classInfo.superClassType().name().equals(DotName.OBJECT_NAME)) {\n+            addAllUnannotatedEndpoints(index, index.getIndex().getClassByName(classInfo.superClassType().name()), methods);\n+        }\n+    }\n+\n+    private static void addUnannotatedEndpoints(CombinedIndexBuildItem index, ClassInfo classInfo, List<MethodInfo> methods) {\n+        if (!hasSecurityAnnotation(classInfo)) {\n+            for (MethodInfo methodInfo : classInfo.methods()) {\n+                if (isRestEndpointMethod(index, methodInfo) && !hasSecurityAnnotation(methodInfo)) {\n+                    methods.add(methodInfo);\n+                }\n+            }\n+        }\n+    }\n+\n     /**\n      * Install the JAX-RS security provider.\n      */\n\ndiff --git a/extensions/resteasy-reactive/quarkus-resteasy-reactive-common/deployment/src/main/java/io/quarkus/resteasy/reactive/common/deployment/ResteasyReactiveCommonProcessor.java b/extensions/resteasy-reactive/quarkus-resteasy-reactive-common/deployment/src/main/java/io/quarkus/resteasy/reactive/common/deployment/ResteasyReactiveCommonProcessor.java\nindex ff52973878d..272d25e5b98 100644\n--- a/extensions/resteasy-reactive/quarkus-resteasy-reactive-common/deployment/src/main/java/io/quarkus/resteasy/reactive/common/deployment/ResteasyReactiveCommonProcessor.java\n+++ b/extensions/resteasy-reactive/quarkus-resteasy-reactive-common/deployment/src/main/java/io/quarkus/resteasy/reactive/common/deployment/ResteasyReactiveCommonProcessor.java\n@@ -1,13 +1,9 @@\n package io.quarkus.resteasy.reactive.common.deployment;\n \n-import static io.quarkus.security.spi.SecurityTransformerUtils.hasSecurityAnnotation;\n import static org.jboss.resteasy.reactive.common.model.ResourceInterceptor.FILTER_SOURCE_METHOD_METADATA_KEY;\n-import static org.jboss.resteasy.reactive.common.processor.EndpointIndexer.collectClassEndpoints;\n \n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n@@ -76,7 +72,7 @@\n import io.quarkus.resteasy.reactive.spi.MessageBodyWriterOverrideBuildItem;\n import io.quarkus.resteasy.reactive.spi.ReaderInterceptorBuildItem;\n import io.quarkus.resteasy.reactive.spi.WriterInterceptorBuildItem;\n-import io.quarkus.security.spi.AdditionalSecuredMethodsBuildItem;\n+import io.quarkus.security.spi.DefaultSecurityCheckBuildItem;\n \n public class ResteasyReactiveCommonProcessor {\n \n@@ -134,46 +130,13 @@ void searchForProviders(Capabilities capabilities,\n     }\n \n     @BuildStep\n-    void setUpDenyAllJaxRs(\n-            CombinedIndexBuildItem index,\n-            JaxRsSecurityConfig securityConfig,\n-            Optional<ResourceScanningResultBuildItem> resteasyDeployment,\n-            BeanArchiveIndexBuildItem beanArchiveIndexBuildItem,\n-            ApplicationResultBuildItem applicationResultBuildItem,\n-            BuildProducer<AdditionalSecuredMethodsBuildItem> additionalSecuredClasses) {\n-\n-        if (resteasyDeployment.isPresent()\n-                && (securityConfig.denyJaxRs() || securityConfig.defaultRolesAllowed().isPresent())) {\n-            final List<MethodInfo> methods = new ArrayList<>();\n-            Map<DotName, String> httpAnnotationToMethod = resteasyDeployment.get().getResult().getHttpAnnotationToMethod();\n-            Set<DotName> resourceClasses = resteasyDeployment.get().getResult().getScannedResourcePaths().keySet();\n-\n-            for (DotName className : resourceClasses) {\n-                ClassInfo classInfo = index.getIndex().getClassByName(className);\n-                if (classInfo == null)\n-                    throw new IllegalStateException(\"Unable to find class info for \" + className);\n-                if (!hasSecurityAnnotation(classInfo)) {\n-                    // collect class endpoints\n-                    Collection<MethodInfo> classEndpoints = collectClassEndpoints(classInfo, httpAnnotationToMethod,\n-                            beanArchiveIndexBuildItem.getIndex(), applicationResultBuildItem.getResult());\n-\n-                    // add endpoints\n-                    for (MethodInfo classEndpoint : classEndpoints) {\n-                        if (!hasSecurityAnnotation(classEndpoint)) {\n-                            methods.add(classEndpoint);\n-                        }\n-                    }\n-                }\n-            }\n-\n-            if (!methods.isEmpty()) {\n-                if (securityConfig.denyJaxRs()) {\n-                    additionalSecuredClasses.produce(new AdditionalSecuredMethodsBuildItem(methods));\n-                } else {\n-                    additionalSecuredClasses\n-                            .produce(new AdditionalSecuredMethodsBuildItem(methods, securityConfig.defaultRolesAllowed()));\n-                }\n-            }\n+    void setUpDenyAllJaxRs(JaxRsSecurityConfig securityConfig,\n+            BuildProducer<DefaultSecurityCheckBuildItem> defaultSecurityCheckProducer) {\n+        if (securityConfig.denyJaxRs()) {\n+            defaultSecurityCheckProducer.produce(DefaultSecurityCheckBuildItem.denyAll());\n+        } else if (securityConfig.defaultRolesAllowed().isPresent()) {\n+            defaultSecurityCheckProducer\n+                    .produce(DefaultSecurityCheckBuildItem.rolesAllowed(securityConfig.defaultRolesAllowed().get()));\n         }\n     }\n \n\ndiff --git a/extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/security/EagerSecurityHandler.java b/extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/security/EagerSecurityHandler.java\nindex 00b25676a4b..f94c369070c 100644\n--- a/extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/security/EagerSecurityHandler.java\n+++ b/extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/security/EagerSecurityHandler.java\n@@ -66,9 +66,14 @@ public void handle(ResteasyReactiveRequestContext requestContext) throws Excepti\n         ResteasyReactiveResourceInfo lazyMethod = requestContext.getTarget().getLazyMethod();\n         MethodDescription methodDescription = lazyMethodToMethodDescription(lazyMethod);\n         if (check == null) {\n-            check = Arc.container().instance(SecurityCheckStorage.class).get().getSecurityCheck(methodDescription);\n+            SecurityCheckStorage storage = Arc.container().instance(SecurityCheckStorage.class).get();\n+            check = storage.getSecurityCheck(methodDescription);\n             if (check == null) {\n-                check = NULL_SENTINEL;\n+                if (storage.getDefaultSecurityCheck() == null || isRequestAlreadyChecked(requestContext)) {\n+                    check = NULL_SENTINEL;\n+                } else {\n+                    check = storage.getDefaultSecurityCheck();\n+                }\n             }\n             this.check = check;\n         }\n@@ -193,6 +198,13 @@ private void preventRepeatedSecurityChecks(ResteasyReactiveRequestContext reques\n         requestContext.setProperty(STANDARD_SECURITY_CHECK_INTERCEPTOR, methodDescription);\n     }\n \n+    private boolean isRequestAlreadyChecked(ResteasyReactiveRequestContext requestContext) {\n+        // when request has already been checked at least once (by another instance of this handler)\n+        // then default security checks, like denied access to all JAX-RS resources by default\n+        // shouldn't be applied; this doesn't mean security checks registered for methods shouldn't be applied\n+        return requestContext.getProperty(STANDARD_SECURITY_CHECK_INTERCEPTOR) != null;\n+    }\n+\n     private InjectableInstance<CurrentIdentityAssociation> getCurrentIdentityAssociation() {\n         InjectableInstance<CurrentIdentityAssociation> identityAssociation = this.currentIdentityAssociation;\n         if (identityAssociation == null) {\n\ndiff --git a/extensions/security/deployment/src/main/java/io/quarkus/security/deployment/SecurityProcessor.java b/extensions/security/deployment/src/main/java/io/quarkus/security/deployment/SecurityProcessor.java\nindex d781085f835..8aa777f640b 100644\n--- a/extensions/security/deployment/src/main/java/io/quarkus/security/deployment/SecurityProcessor.java\n+++ b/extensions/security/deployment/src/main/java/io/quarkus/security/deployment/SecurityProcessor.java\n@@ -105,6 +105,7 @@\n import io.quarkus.security.runtime.interceptor.SecurityHandler;\n import io.quarkus.security.spi.AdditionalSecuredClassesBuildItem;\n import io.quarkus.security.spi.AdditionalSecuredMethodsBuildItem;\n+import io.quarkus.security.spi.DefaultSecurityCheckBuildItem;\n import io.quarkus.security.spi.RolesAllowedConfigExpResolverBuildItem;\n import io.quarkus.security.spi.runtime.AuthorizationController;\n import io.quarkus.security.spi.runtime.DevModeDisabledAuthorizationController;\n@@ -527,6 +528,7 @@ void gatherSecurityChecks(BuildProducer<SyntheticBeanBuildItem> syntheticBeans,\n             BuildProducer<RunTimeConfigBuilderBuildItem> configBuilderProducer,\n             List<AdditionalSecuredMethodsBuildItem> additionalSecuredMethods,\n             SecurityCheckRecorder recorder,\n+            Optional<DefaultSecurityCheckBuildItem> defaultSecurityCheckBuildItem,\n             BuildProducer<ReflectiveClassBuildItem> reflectiveClassBuildItemBuildProducer,\n             List<AdditionalSecurityCheckBuildItem> additionalSecurityChecks, SecurityBuildTimeConfig config) {\n         classPredicate.produce(new ApplicationClassPredicateBuildItem(new SecurityCheckStorageAppPredicate()));\n@@ -559,6 +561,15 @@ void gatherSecurityChecks(BuildProducer<SyntheticBeanBuildItem> syntheticBeans,\n             recorder.addMethod(builder, method.declaringClass().name().toString(), method.name(), params,\n                     methodEntry.getValue());\n         }\n+\n+        if (defaultSecurityCheckBuildItem.isPresent()) {\n+            var roles = defaultSecurityCheckBuildItem.get().getRolesAllowed();\n+            if (roles == null) {\n+                recorder.registerDefaultSecurityCheck(builder, recorder.denyAll());\n+            } else {\n+                recorder.registerDefaultSecurityCheck(builder, recorder.rolesAllowed(roles.toArray(new String[0])));\n+            }\n+        }\n         recorder.create(builder);\n \n         syntheticBeans.produce(\n\ndiff --git a/extensions/security/runtime-spi/src/main/java/io/quarkus/security/spi/runtime/SecurityCheckStorage.java b/extensions/security/runtime-spi/src/main/java/io/quarkus/security/spi/runtime/SecurityCheckStorage.java\nindex 3cfeaa2b44b..2d72f5f8dc2 100644\n--- a/extensions/security/runtime-spi/src/main/java/io/quarkus/security/spi/runtime/SecurityCheckStorage.java\n+++ b/extensions/security/runtime-spi/src/main/java/io/quarkus/security/spi/runtime/SecurityCheckStorage.java\n@@ -10,4 +10,9 @@ default SecurityCheck getSecurityCheck(Method method) {\n \n     SecurityCheck getSecurityCheck(MethodDescription methodDescription);\n \n+    /**\n+     * {@link SecurityCheck} that should be applied when there is no other check applied on incoming request.\n+     */\n+    SecurityCheck getDefaultSecurityCheck();\n+\n }\n\ndiff --git a/extensions/security/runtime/src/main/java/io/quarkus/security/runtime/SecurityCheckRecorder.java b/extensions/security/runtime/src/main/java/io/quarkus/security/runtime/SecurityCheckRecorder.java\nindex 8661d06f3f4..545b3249cd9 100644\n--- a/extensions/security/runtime/src/main/java/io/quarkus/security/runtime/SecurityCheckRecorder.java\n+++ b/extensions/security/runtime/src/main/java/io/quarkus/security/runtime/SecurityCheckRecorder.java\n@@ -351,4 +351,8 @@ private Class<?> loadClass(String className) {\n             throw new RuntimeException(\"Unable to load class '\" + className + \"' for creating permission\", e);\n         }\n     }\n+\n+    public void registerDefaultSecurityCheck(RuntimeValue<SecurityCheckStorageBuilder> builder, SecurityCheck securityCheck) {\n+        builder.getValue().registerDefaultSecurityCheck(securityCheck);\n+    }\n }\n\ndiff --git a/extensions/security/runtime/src/main/java/io/quarkus/security/runtime/interceptor/SecurityCheckStorageBuilder.java b/extensions/security/runtime/src/main/java/io/quarkus/security/runtime/interceptor/SecurityCheckStorageBuilder.java\nindex 6be2f134e00..25cecdb398e 100644\n--- a/extensions/security/runtime/src/main/java/io/quarkus/security/runtime/interceptor/SecurityCheckStorageBuilder.java\n+++ b/extensions/security/runtime/src/main/java/io/quarkus/security/runtime/interceptor/SecurityCheckStorageBuilder.java\n@@ -9,6 +9,7 @@\n \n public class SecurityCheckStorageBuilder {\n     private final Map<MethodDescription, SecurityCheck> securityChecks = new HashMap<>();\n+    private SecurityCheck defaultSecurityCheck;\n \n     public void registerCheck(String className,\n             String methodName,\n@@ -17,12 +18,24 @@ public void registerCheck(String className,\n         securityChecks.put(new MethodDescription(className, methodName, parameterTypes), securityCheck);\n     }\n \n+    public void registerDefaultSecurityCheck(SecurityCheck defaultSecurityCheck) {\n+        if (this.defaultSecurityCheck != null) {\n+            throw new IllegalStateException(\"Default SecurityCheck has already been registered\");\n+        }\n+        this.defaultSecurityCheck = defaultSecurityCheck;\n+    }\n+\n     public SecurityCheckStorage create() {\n         return new SecurityCheckStorage() {\n             @Override\n             public SecurityCheck getSecurityCheck(MethodDescription methodDescription) {\n                 return securityChecks.get(methodDescription);\n             }\n+\n+            @Override\n+            public SecurityCheck getDefaultSecurityCheck() {\n+                return defaultSecurityCheck;\n+            }\n         };\n     }\n }\n\ndiff --git a/extensions/security/spi/src/main/java/io/quarkus/security/spi/DefaultSecurityCheckBuildItem.java b/extensions/security/spi/src/main/java/io/quarkus/security/spi/DefaultSecurityCheckBuildItem.java\nnew file mode 100644\nindex 00000000000..ed3dafe18de\n--- /dev/null\n+++ b/extensions/security/spi/src/main/java/io/quarkus/security/spi/DefaultSecurityCheckBuildItem.java\n@@ -0,0 +1,28 @@\n+package io.quarkus.security.spi;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import io.quarkus.builder.item.SimpleBuildItem;\n+\n+public final class DefaultSecurityCheckBuildItem extends SimpleBuildItem {\n+\n+    public final List<String> rolesAllowed;\n+\n+    private DefaultSecurityCheckBuildItem(List<String> rolesAllowed) {\n+        this.rolesAllowed = rolesAllowed;\n+    }\n+\n+    public static DefaultSecurityCheckBuildItem denyAll() {\n+        return new DefaultSecurityCheckBuildItem(null);\n+    }\n+\n+    public static DefaultSecurityCheckBuildItem rolesAllowed(List<String> rolesAllowed) {\n+        Objects.requireNonNull(rolesAllowed);\n+        return new DefaultSecurityCheckBuildItem(List.copyOf(rolesAllowed));\n+    }\n+\n+    public List<String> getRolesAllowed() {\n+        return rolesAllowed;\n+    }\n+}\n\ndiff --git a/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/EndpointIndexer.java b/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/EndpointIndexer.java\nindex 41f8bcaa557..a16267eab7b 100644\n--- a/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/EndpointIndexer.java\n+++ b/independent-projects/resteasy-reactive/common/processor/src/main/java/org/jboss/resteasy/reactive/common/processor/EndpointIndexer.java\n@@ -422,25 +422,6 @@ protected List<ResourceMethod> createEndpoints(ClassInfo currentClassInfo,\n         return ret;\n     }\n \n-    /**\n-     * Return endpoints defined directly on classInfo.\n-     *\n-     * @param classInfo resource class\n-     * @return classInfo endpoint method info\n-     */\n-    public static Collection<MethodInfo> collectClassEndpoints(ClassInfo classInfo,\n-            Map<DotName, String> httpAnnotationToMethod, IndexView index, ApplicationScanningResult applicationScanningResult) {\n-        Collection<FoundEndpoint> endpoints = collectEndpoints(classInfo, classInfo, new HashSet<>(), new HashSet<>(), true,\n-                httpAnnotationToMethod, index, applicationScanningResult, new AnnotationStore(null));\n-        Collection<MethodInfo> ret = new HashSet<>();\n-        for (FoundEndpoint endpoint : endpoints) {\n-            if (endpoint.classInfo.equals(classInfo)) {\n-                ret.add(endpoint.methodInfo);\n-            }\n-        }\n-        return ret;\n-    }\n-\n     private static List<FoundEndpoint> collectEndpoints(ClassInfo currentClassInfo, ClassInfo actualEndpointInfo,\n             Set<String> seenMethods, Set<String> existingClassNameBindings, boolean considerApplication,\n             Map<DotName, String> httpAnnotationToMethod, IndexView index, ApplicationScanningResult applicationScanningResult,\n\n</patch>\n<test_patch>\ndiff --git a/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/AbstractSecurityEventTest.java b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/AbstractSecurityEventTest.java\nindex ee7c11733af..007fbb74b41 100644\n--- a/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/AbstractSecurityEventTest.java\n+++ b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/AbstractSecurityEventTest.java\n@@ -37,7 +37,8 @@ public abstract class AbstractSecurityEventTest {\n \n     protected static final Class<?>[] TEST_CLASSES = {\n             RolesAllowedResource.class, TestIdentityProvider.class, TestIdentityController.class,\n-            UnsecuredResource.class, UnsecuredSubResource.class, EventObserver.class\n+            UnsecuredResource.class, UnsecuredSubResource.class, EventObserver.class, UnsecuredResourceInterface.class,\n+            UnsecuredParentResource.class\n     };\n \n     @Inject\n\ndiff --git a/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/DefaultRolesAllowedJaxRsTest.java b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/DefaultRolesAllowedJaxRsTest.java\nindex fb13a3d50cb..b9e18eed547 100644\n--- a/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/DefaultRolesAllowedJaxRsTest.java\n+++ b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/DefaultRolesAllowedJaxRsTest.java\n@@ -22,8 +22,8 @@ public class DefaultRolesAllowedJaxRsTest {\n     static QuarkusUnitTest runner = new QuarkusUnitTest()\n             .withApplicationRoot((jar) -> jar\n                     .addClasses(PermitAllResource.class, UnsecuredResource.class,\n-                            TestIdentityProvider.class,\n-                            TestIdentityController.class,\n+                            TestIdentityProvider.class, UnsecuredResourceInterface.class,\n+                            TestIdentityController.class, UnsecuredParentResource.class,\n                             UnsecuredSubResource.class, HelloResource.class)\n                     .addAsResource(new StringAsset(\"quarkus.security.jaxrs.default-roles-allowed = admin\\n\"),\n                             \"application.properties\"));\n@@ -41,6 +41,18 @@ public void shouldDenyUnannotated() {\n         assertStatus(path, 200, 403, 401);\n     }\n \n+    @Test\n+    public void shouldDenyUnannotatedOnParentClass() {\n+        String path = \"/unsecured/defaultSecurityParent\";\n+        assertStatus(path, 200, 403, 401);\n+    }\n+\n+    @Test\n+    public void shouldDenyUnannotatedOnInterface() {\n+        String path = \"/unsecured/defaultSecurityInterface\";\n+        assertStatus(path, 200, 403, 401);\n+    }\n+\n     @Test\n     public void shouldDenyDenyAllMethod() {\n         String path = \"/unsecured/denyAll\";\n\ndiff --git a/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/DefaultRolesAllowedStarJaxRsTest.java b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/DefaultRolesAllowedStarJaxRsTest.java\nindex 4e0fd8c7dd8..ddcc31f5ae8 100644\n--- a/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/DefaultRolesAllowedStarJaxRsTest.java\n+++ b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/DefaultRolesAllowedStarJaxRsTest.java\n@@ -17,8 +17,8 @@ public class DefaultRolesAllowedStarJaxRsTest {\n     static QuarkusUnitTest runner = new QuarkusUnitTest()\n             .withApplicationRoot((jar) -> jar\n                     .addClasses(PermitAllResource.class, UnsecuredResource.class,\n-                            TestIdentityProvider.class,\n-                            TestIdentityController.class,\n+                            TestIdentityProvider.class, UnsecuredParentResource.class,\n+                            TestIdentityController.class, UnsecuredResourceInterface.class,\n                             UnsecuredSubResource.class)\n                     .addAsResource(new StringAsset(\"quarkus.security.jaxrs.default-roles-allowed = **\\n\"),\n                             \"application.properties\"));\n\ndiff --git a/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/DenyAllJaxRsTest.java b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/DenyAllJaxRsTest.java\nindex 90cd2a9f773..8ed4d8cbf44 100644\n--- a/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/DenyAllJaxRsTest.java\n+++ b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/DenyAllJaxRsTest.java\n@@ -26,8 +26,8 @@ public class DenyAllJaxRsTest {\n     static QuarkusUnitTest runner = new QuarkusUnitTest()\n             .withApplicationRoot((jar) -> jar\n                     .addClasses(PermitAllResource.class, UnsecuredResource.class,\n-                            TestIdentityProvider.class,\n-                            TestIdentityController.class,\n+                            TestIdentityProvider.class, UnsecuredParentResource.class,\n+                            TestIdentityController.class, UnsecuredResourceInterface.class,\n                             UnsecuredSubResource.class, HelloResource.class)\n                     .addAsResource(new StringAsset(\"quarkus.security.jaxrs.deny-unannotated-endpoints = true\\n\"),\n                             \"application.properties\"));\n@@ -58,6 +58,18 @@ public void shouldDenyUnannotated() {\n         assertStatus(path, 403, 401);\n     }\n \n+    @Test\n+    public void shouldDenyUnannotatedOnParentClass() {\n+        String path = \"/unsecured/defaultSecurityParent\";\n+        assertStatus(path, 403, 401);\n+    }\n+\n+    @Test\n+    public void shouldDenyUnannotatedOnInterface() {\n+        String path = \"/unsecured/defaultSecurityInterface\";\n+        assertStatus(path, 403, 401);\n+    }\n+\n     @Test\n     public void shouldDenyDenyAllMethod() {\n         String path = \"/unsecured/denyAll\";\n\ndiff --git a/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/UnsecuredParentResource.java b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/UnsecuredParentResource.java\nnew file mode 100644\nindex 00000000000..abf5b385e9a\n--- /dev/null\n+++ b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/UnsecuredParentResource.java\n@@ -0,0 +1,14 @@\n+package io.quarkus.resteasy.test.security;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+\n+public class UnsecuredParentResource {\n+\n+    @Path(\"/defaultSecurityParent\")\n+    @GET\n+    public String defaultSecurityParent() {\n+        return \"defaultSecurityParent\";\n+    }\n+\n+}\n\ndiff --git a/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/UnsecuredResource.java b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/UnsecuredResource.java\nindex 116f041ba53..7339c9c1eda 100644\n--- a/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/UnsecuredResource.java\n+++ b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/UnsecuredResource.java\n@@ -12,13 +12,18 @@\n  * @author Michal Szynkiewicz, michal.l.szynkiewicz@gmail.com\n  */\n @Path(\"/unsecured\")\n-public class UnsecuredResource {\n+public class UnsecuredResource extends UnsecuredParentResource implements UnsecuredResourceInterface {\n     @Path(\"/defaultSecurity\")\n     @GET\n     public String defaultSecurity() {\n         return \"defaultSecurity\";\n     }\n \n+    @Override\n+    public String defaultSecurityInterface() {\n+        return UnsecuredResourceInterface.super.defaultSecurityInterface();\n+    }\n+\n     @Path(\"/permitAllPathParam/{index}\")\n     @GET\n     @PermitAll\n\ndiff --git a/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/UnsecuredResourceInterface.java b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/UnsecuredResourceInterface.java\nnew file mode 100644\nindex 00000000000..d2498d46a8c\n--- /dev/null\n+++ b/extensions/resteasy-classic/resteasy/deployment/src/test/java/io/quarkus/resteasy/test/security/UnsecuredResourceInterface.java\n@@ -0,0 +1,14 @@\n+package io.quarkus.resteasy.test.security;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+\n+public interface UnsecuredResourceInterface {\n+\n+    @Path(\"/defaultSecurityInterface\")\n+    @GET\n+    default String defaultSecurityInterface() {\n+        return \"defaultSecurityInterface\";\n+    }\n+\n+}\n\ndiff --git a/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/AbstractSecurityEventTest.java b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/AbstractSecurityEventTest.java\nindex cc8d3a9db71..1d3366fd222 100644\n--- a/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/AbstractSecurityEventTest.java\n+++ b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/AbstractSecurityEventTest.java\n@@ -40,7 +40,8 @@ public abstract class AbstractSecurityEventTest {\n     protected static final Class<?>[] TEST_CLASSES = {\n             RolesAllowedResource.class, RolesAllowedBlockingResource.class, TestIdentityProvider.class,\n             TestIdentityController.class, UnsecuredResource.class, UnsecuredSubResource.class, RolesAllowedService.class,\n-            RolesAllowedServiceResource.class, EventObserver.class\n+            RolesAllowedServiceResource.class, EventObserver.class, UnsecuredResourceInterface.class,\n+            UnsecuredParentResource.class\n     };\n \n     @Inject\n\ndiff --git a/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/DefaultRolesAllowedJaxRsTest.java b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/DefaultRolesAllowedJaxRsTest.java\nindex 4590ee9a9d0..ca34474ad90 100644\n--- a/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/DefaultRolesAllowedJaxRsTest.java\n+++ b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/DefaultRolesAllowedJaxRsTest.java\n@@ -18,9 +18,9 @@ public class DefaultRolesAllowedJaxRsTest {\n     static QuarkusUnitTest runner = new QuarkusUnitTest()\n             .withApplicationRoot((jar) -> jar\n                     .addClasses(PermitAllResource.class, UnsecuredResource.class,\n-                            TestIdentityProvider.class,\n+                            TestIdentityProvider.class, UnsecuredResourceInterface.class,\n                             TestIdentityController.class,\n-                            UnsecuredSubResource.class, HelloResource.class)\n+                            UnsecuredSubResource.class, HelloResource.class, UnsecuredParentResource.class)\n                     .addAsResource(new StringAsset(\"quarkus.security.jaxrs.default-roles-allowed=admin\\n\"),\n                             \"application.properties\"));\n \n@@ -37,6 +37,18 @@ public void shouldDenyUnannotated() {\n         assertStatus(path, 200, 403, 401);\n     }\n \n+    @Test\n+    public void shouldDenyUnannotatedParent() {\n+        String path = \"/unsecured/defaultSecurityParent\";\n+        assertStatus(path, 200, 403, 401);\n+    }\n+\n+    @Test\n+    public void shouldDenyUnannotatedInterface() {\n+        String path = \"/unsecured/defaultSecurityInterface\";\n+        assertStatus(path, 200, 403, 401);\n+    }\n+\n     @Test\n     public void shouldDenyDenyAllMethod() {\n         String path = \"/unsecured/denyAll\";\n\ndiff --git a/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/DefaultRolesAllowedStarJaxRsTest.java b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/DefaultRolesAllowedStarJaxRsTest.java\nindex dcad10e88e0..6f77ef2fff8 100644\n--- a/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/DefaultRolesAllowedStarJaxRsTest.java\n+++ b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/DefaultRolesAllowedStarJaxRsTest.java\n@@ -17,8 +17,8 @@ public class DefaultRolesAllowedStarJaxRsTest {\n     static QuarkusUnitTest runner = new QuarkusUnitTest()\n             .withApplicationRoot((jar) -> jar\n                     .addClasses(PermitAllResource.class, UnsecuredResource.class,\n-                            TestIdentityProvider.class,\n-                            TestIdentityController.class,\n+                            TestIdentityProvider.class, UnsecuredResourceInterface.class,\n+                            TestIdentityController.class, UnsecuredParentResource.class,\n                             UnsecuredSubResource.class)\n                     .addAsResource(new StringAsset(\"quarkus.security.jaxrs.default-roles-allowed = **\\n\"),\n                             \"application.properties\"));\n\ndiff --git a/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/DenyAllJaxRsTest.java b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/DenyAllJaxRsTest.java\nindex 2e10fb07015..76f23ddcc80 100644\n--- a/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/DenyAllJaxRsTest.java\n+++ b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/DenyAllJaxRsTest.java\n@@ -3,12 +3,25 @@\n import static io.restassured.RestAssured.given;\n import static io.restassured.RestAssured.when;\n \n+import java.lang.reflect.Modifier;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+\n import org.hamcrest.Matchers;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.resteasy.reactive.common.processor.transformation.AnnotationsTransformer;\n import org.jboss.shrinkwrap.api.asset.StringAsset;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.RegisterExtension;\n \n+import io.quarkus.builder.BuildContext;\n+import io.quarkus.builder.BuildStep;\n+import io.quarkus.resteasy.reactive.server.spi.AnnotationsTransformerBuildItem;\n import io.quarkus.security.test.utils.TestIdentityController;\n import io.quarkus.security.test.utils.TestIdentityProvider;\n import io.quarkus.test.QuarkusUnitTest;\n@@ -21,11 +34,43 @@ public class DenyAllJaxRsTest {\n     static QuarkusUnitTest runner = new QuarkusUnitTest()\n             .withApplicationRoot((jar) -> jar\n                     .addClasses(PermitAllResource.class, UnsecuredResource.class,\n-                            TestIdentityProvider.class,\n-                            TestIdentityController.class,\n-                            UnsecuredSubResource.class, HelloResource.class)\n+                            TestIdentityProvider.class, UnsecuredResourceInterface.class,\n+                            TestIdentityController.class, SpecialResource.class,\n+                            UnsecuredSubResource.class, HelloResource.class, UnsecuredParentResource.class)\n                     .addAsResource(new StringAsset(\"quarkus.security.jaxrs.deny-unannotated-endpoints = true\\n\"),\n-                            \"application.properties\"));\n+                            \"application.properties\"))\n+            .addBuildChainCustomizer(builder -> {\n+                builder.addBuildStep(new BuildStep() {\n+                    @Override\n+                    public void execute(BuildContext context) {\n+                        // Here we add an AnnotationsTransformer in order to make sure that the security layer\n+                        // uses the proper set of transformers\n+                        context.produce(\n+                                new AnnotationsTransformerBuildItem(\n+                                        AnnotationsTransformer.builder().appliesTo(AnnotationTarget.Kind.METHOD)\n+                                                .transform(transformerContext -> {\n+                                                    // This transformer auto-adds @GET and @Path if missing, thus emulating Renarde\n+                                                    MethodInfo methodInfo = transformerContext.getTarget().asMethod();\n+                                                    ClassInfo declaringClass = methodInfo.declaringClass();\n+                                                    if (declaringClass.name().toString().equals(SpecialResource.class.getName())\n+                                                            && !methodInfo.isConstructor()\n+                                                            && !Modifier.isStatic(methodInfo.flags())) {\n+                                                        if (methodInfo.declaredAnnotation(GET.class.getName()) == null) {\n+                                                            // auto-add it\n+                                                            transformerContext.transform().add(GET.class).done();\n+                                                        }\n+                                                        if (methodInfo.declaredAnnotation(Path.class.getName()) == null) {\n+                                                            // auto-add it\n+                                                            transformerContext.transform().add(Path.class,\n+                                                                    AnnotationValue.createStringValue(\"value\",\n+                                                                            methodInfo.name()))\n+                                                                    .done();\n+                                                        }\n+                                                    }\n+                                                })));\n+                    }\n+                }).produces(AnnotationsTransformerBuildItem.class).build();\n+            });\n \n     @BeforeAll\n     public static void setupUsers() {\n@@ -40,6 +85,18 @@ public void shouldDenyUnannotated() {\n         assertStatus(path, 403, 401);\n     }\n \n+    @Test\n+    public void shouldDenyUnannotatedOnParentClass() {\n+        String path = \"/unsecured/defaultSecurityParent\";\n+        assertStatus(path, 403, 401);\n+    }\n+\n+    @Test\n+    public void shouldDenyUnannotatedOnInterface() {\n+        String path = \"/unsecured/defaultSecurityInterface\";\n+        assertStatus(path, 403, 401);\n+    }\n+\n     @Test\n     public void shouldDenyUnannotatedNonBlocking() {\n         String path = \"/unsecured/defaultSecurityNonBlocking\";\n@@ -90,6 +147,14 @@ public void testServerExceptionMapper() {\n                 .body(Matchers.equalTo(\"unauthorizedExceptionMapper\"));\n     }\n \n+    @Test\n+    public void shouldDenyUnannotatedWithAnnotationTransformer() {\n+        String path = \"/special/explicit\";\n+        assertStatus(path, 403, 401);\n+        path = \"/special/implicit\";\n+        assertStatus(path, 403, 401);\n+    }\n+\n     private void assertStatus(String path, int status, int anonStatus) {\n         given().auth().preemptive()\n                 .basic(\"admin\", \"admin\").get(path)\n@@ -105,4 +170,15 @@ private void assertStatus(String path, int status, int anonStatus) {\n \n     }\n \n+    @Path(\"/special\")\n+    public static class SpecialResource {\n+        @GET\n+        public String explicit() {\n+            return \"explicit\";\n+        }\n+\n+        public String implicit() {\n+            return \"implicit\";\n+        }\n+    }\n }\n\ndiff --git a/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/UnsecuredParentResource.java b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/UnsecuredParentResource.java\nnew file mode 100644\nindex 00000000000..8250d5a9bf9\n--- /dev/null\n+++ b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/UnsecuredParentResource.java\n@@ -0,0 +1,14 @@\n+package io.quarkus.resteasy.reactive.server.test.security;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+\n+public class UnsecuredParentResource {\n+\n+    @Path(\"/defaultSecurityParent\")\n+    @GET\n+    public String defaultSecurityParent() {\n+        return \"defaultSecurityParent\";\n+    }\n+\n+}\n\ndiff --git a/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/UnsecuredResource.java b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/UnsecuredResource.java\nindex bca5025db0a..82622c3e585 100644\n--- a/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/UnsecuredResource.java\n+++ b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/UnsecuredResource.java\n@@ -12,7 +12,7 @@\n  * @author Michal Szynkiewicz, michal.l.szynkiewicz@gmail.com\n  */\n @Path(\"/unsecured\")\n-public class UnsecuredResource {\n+public class UnsecuredResource extends UnsecuredParentResource implements UnsecuredResourceInterface {\n     @Path(\"/defaultSecurity\")\n     @GET\n     public String defaultSecurity() {\n\ndiff --git a/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/UnsecuredResourceInterface.java b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/UnsecuredResourceInterface.java\nnew file mode 100644\nindex 00000000000..7be652f15ef\n--- /dev/null\n+++ b/extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/security/UnsecuredResourceInterface.java\n@@ -0,0 +1,14 @@\n+package io.quarkus.resteasy.reactive.server.test.security;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+\n+public interface UnsecuredResourceInterface {\n+\n+    @Path(\"/defaultSecurityInterface\")\n+    @GET\n+    default String defaultSecurityInterface() {\n+        return \"defaultSecurityInterface\";\n+    }\n+\n+}\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "d802748128cd1932279b7c334f3792d481814ef5", "source_date": "Fri Jan 26 19:33:04 2024 +0100", "source_tag": "3.9.0", "target_commit": "c026b1cf6f2e07cc50b65c824d922319248d9341", "target_date": "Fri Jan 26 13:43:01 2024 +0100", "target_tag": "3.7.1", "FAIL TO PASS": ["io.quarkus.resteasy.reactive.server.test.security.DefaultRolesAllowedJaxRsTest.shouldDenyUnannotatedInterface", "io.quarkus.resteasy.reactive.server.test.security.DefaultRolesAllowedJaxRsTest.shouldDenyUnannotatedParent", "io.quarkus.resteasy.reactive.server.test.security.DenyAllJaxRsTest.shouldDenyUnannotatedWithAnnotationTransformer", "io.quarkus.resteasy.reactive.server.test.security.DenyAllJaxRsTest.shouldDenyUnannotatedOnInterface", "io.quarkus.resteasy.reactive.server.test.security.DenyAllJaxRsTest.shouldDenyUnannotatedOnParentClass"], "PASS TO PASS": []}
{"ecosystem": "maven", "repo": "tomcat", "instance_id": "tomcat_1222", "original_commit_message": "Requests with invalid content-length should always be rejected", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/java/org/apache/coyote/http11/Http11InputBuffer.java b/java/org/apache/coyote/http11/Http11InputBuffer.java\nindex 6496d8c2b2..ddd7e2d1e2 100644\n--- a/java/org/apache/coyote/http11/Http11InputBuffer.java\n+++ b/java/org/apache/coyote/http11/Http11InputBuffer.java\n@@ -919,7 +919,7 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler\n                 headerData.lastSignificantChar = pos;\n                 byteBuffer.position(byteBuffer.position() - 1);\n                 // skipLine() will handle the error\n-                return skipLine();\n+                return skipLine(false);\n             }\n \n             // chr is next byte of header name. Convert to lowercase.\n@@ -930,7 +930,7 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler\n \n         // Skip the line and ignore the header\n         if (headerParsePos == HeaderParsePosition.HEADER_SKIPLINE) {\n-            return skipLine();\n+            return skipLine(false);\n         }\n \n         //\n@@ -987,15 +987,11 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler\n                         // CRLF or LF is an acceptable line terminator\n                         eol = true;\n                     } else if (prevChr == Constants.CR) {\n-                        // Invalid value\n-                        // Delete the header (it will be the most recent one)\n-                        headers.removeHeader(headers.size() - 1);\n-                        return skipLine();\n+                        // Invalid value - also need to delete header\n+                        return skipLine(true);\n                     } else if (chr != Constants.HT && HttpParser.isControl(chr)) {\n-                        // Invalid value\n-                        // Delete the header (it will be the most recent one)\n-                        headers.removeHeader(headers.size() - 1);\n-                        return skipLine();\n+                        // Invalid value - also need to delete header\n+                        return skipLine(true);\n                     } else if (chr == Constants.SP || chr == Constants.HT) {\n                         byteBuffer.put(headerData.realPos, chr);\n                         headerData.realPos++;\n@@ -1043,7 +1039,27 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler\n     }\n \n \n-    private HeaderParseStatus skipLine() throws IOException {\n+    private HeaderParseStatus skipLine(boolean deleteHeader) throws IOException {\n+        boolean rejectThisHeader = rejectIllegalHeader;\n+        // Check if rejectIllegalHeader is disabled and needs to be overridden\n+        // for this header. The header name is required to determine if this\n+        // override is required. The header name is only available once the\n+        // header has been created. If the header has been created then\n+        // deleteHeader will be true.\n+        if (!rejectThisHeader && deleteHeader) {\n+            if (headers.getName(headers.size() - 1).equalsIgnoreCase(\"content-length\")) {\n+                // Malformed content-length headers must always be rejected\n+                // RFC 9112, section 6.3, bullet 5.\n+                rejectThisHeader = true;\n+            } else {\n+                // Only need to delete the header if the request isn't going to\n+                // be rejected (it will be the most recent one)\n+                headers.removeHeader(headers.size() - 1);\n+            }\n+        }\n+\n+        // Parse the rest of the invalid header so we can construct a useful\n+        // exception and/or debug message.\n         headerParsePos = HeaderParsePosition.HEADER_SKIPLINE;\n         boolean eol = false;\n \n@@ -1069,11 +1085,11 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler\n                 headerData.lastSignificantChar = pos;\n             }\n         }\n-        if (rejectIllegalHeader || log.isDebugEnabled()) {\n+        if (rejectThisHeader || log.isDebugEnabled()) {\n             String message = sm.getString(\"iib.invalidheader\",\n                     HeaderUtil.toPrintableString(byteBuffer.array(), headerData.lineStart,\n                             headerData.lastSignificantChar - headerData.lineStart + 1));\n-            if (rejectIllegalHeader) {\n+            if (rejectThisHeader) {\n                 throw new IllegalArgumentException(message);\n             }\n             log.debug(message);\n\n\n</patch>\n<test_patch>\ndiff --git a/test/org/apache/coyote/http11/TestHttp11InputBuffer.java b/test/org/apache/coyote/http11/TestHttp11InputBuffer.java\nindex c8b10d0135..1857882478 100644\n--- a/test/org/apache/coyote/http11/TestHttp11InputBuffer.java\n+++ b/test/org/apache/coyote/http11/TestHttp11InputBuffer.java\n@@ -709,6 +709,37 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {\n     }\n \n \n+    @Test\n+    public void testInvalidContentLength01() {\n+        doTestInvalidContentLength(false);\n+    }\n+\n+\n+    @Test\n+    public void testInvalidContentLength02() {\n+        doTestInvalidContentLength(true);\n+    }\n+\n+\n+    private void doTestInvalidContentLength(boolean rejectIllegalHeader) {\n+        getTomcatInstance().getConnector().setProperty(\"rejectIllegalHeader\", Boolean.toString(rejectIllegalHeader));\n+\n+        String[] request = new String[1];\n+        request[0] =\n+                \"POST /test HTTP/1.1\" + CRLF +\n+                \"Host: localhost:8080\" + CRLF +\n+                \"Content-Length: 12\\u000734\" + CRLF +\n+                \"Connection: close\" + CRLF +\n+                CRLF;\n+\n+        InvalidClient client = new InvalidClient(request);\n+\n+        client.doRequest();\n+        Assert.assertTrue(client.getResponseLine(), client.isResponse400());\n+        Assert.assertTrue(client.isResponseBodyOK());\n+    }\n+\n+\n     /**\n      * Invalid request test client.\n      */\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "c9fe754e5d17e262dfbd3eab2a03ca96ff372dc3", "source_date": "Mon Oct 3 11:59:01 2022 +0100", "source_tag": "10.1.1", "target_commit": "4c7f4fd09d2cc1692112ef70b8ee23a7a037ae77", "target_date": "Mon Oct 3 12:42:42 2022 +0100", "target_tag": "9.0.68", "FAIL TO PASS": ["testInvalidContentLength01"], "PASS TO PASS": ["testBug51557ObsTextInValue", "testBug51557Continuation", "testBug51557Invalid", "testBug48839", "testBug51557NoColon", "testBug51557BoundaryEnd", "testBug51557CtlInValue", "testNewLinesExcessive", "testInvalidHeader01", "testNewLines", "testBug51557CtlInName", "testBug51557SeparatorsInName", "testBug54947", "testBug51557Valid", "testInvalidContentLength02", "testBug59089", "testInvalidEndOfRequestLine01", "testBug51557BoundaryStart", "testInvalidMethod", "testInvalidHttp09"]}
{"ecosystem": "maven", "repo": "tomcat", "instance_id": "tomcat_1226", "original_commit_message": "Requests with invalid content-length should always be rejected", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/java/org/apache/coyote/http11/Http11InputBuffer.java b/java/org/apache/coyote/http11/Http11InputBuffer.java\nindex 6496d8c2b2..ddd7e2d1e2 100644\n--- a/java/org/apache/coyote/http11/Http11InputBuffer.java\n+++ b/java/org/apache/coyote/http11/Http11InputBuffer.java\n@@ -919,7 +919,7 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler\n                 headerData.lastSignificantChar = pos;\n                 byteBuffer.position(byteBuffer.position() - 1);\n                 // skipLine() will handle the error\n-                return skipLine();\n+                return skipLine(false);\n             }\n \n             // chr is next byte of header name. Convert to lowercase.\n@@ -930,7 +930,7 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler\n \n         // Skip the line and ignore the header\n         if (headerParsePos == HeaderParsePosition.HEADER_SKIPLINE) {\n-            return skipLine();\n+            return skipLine(false);\n         }\n \n         //\n@@ -987,15 +987,11 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler\n                         // CRLF or LF is an acceptable line terminator\n                         eol = true;\n                     } else if (prevChr == Constants.CR) {\n-                        // Invalid value\n-                        // Delete the header (it will be the most recent one)\n-                        headers.removeHeader(headers.size() - 1);\n-                        return skipLine();\n+                        // Invalid value - also need to delete header\n+                        return skipLine(true);\n                     } else if (chr != Constants.HT && HttpParser.isControl(chr)) {\n-                        // Invalid value\n-                        // Delete the header (it will be the most recent one)\n-                        headers.removeHeader(headers.size() - 1);\n-                        return skipLine();\n+                        // Invalid value - also need to delete header\n+                        return skipLine(true);\n                     } else if (chr == Constants.SP || chr == Constants.HT) {\n                         byteBuffer.put(headerData.realPos, chr);\n                         headerData.realPos++;\n@@ -1043,7 +1039,27 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler\n     }\n \n \n-    private HeaderParseStatus skipLine() throws IOException {\n+    private HeaderParseStatus skipLine(boolean deleteHeader) throws IOException {\n+        boolean rejectThisHeader = rejectIllegalHeader;\n+        // Check if rejectIllegalHeader is disabled and needs to be overridden\n+        // for this header. The header name is required to determine if this\n+        // override is required. The header name is only available once the\n+        // header has been created. If the header has been created then\n+        // deleteHeader will be true.\n+        if (!rejectThisHeader && deleteHeader) {\n+            if (headers.getName(headers.size() - 1).equalsIgnoreCase(\"content-length\")) {\n+                // Malformed content-length headers must always be rejected\n+                // RFC 9112, section 6.3, bullet 5.\n+                rejectThisHeader = true;\n+            } else {\n+                // Only need to delete the header if the request isn't going to\n+                // be rejected (it will be the most recent one)\n+                headers.removeHeader(headers.size() - 1);\n+            }\n+        }\n+\n+        // Parse the rest of the invalid header so we can construct a useful\n+        // exception and/or debug message.\n         headerParsePos = HeaderParsePosition.HEADER_SKIPLINE;\n         boolean eol = false;\n \n@@ -1069,11 +1085,11 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler\n                 headerData.lastSignificantChar = pos;\n             }\n         }\n-        if (rejectIllegalHeader || log.isDebugEnabled()) {\n+        if (rejectThisHeader || log.isDebugEnabled()) {\n             String message = sm.getString(\"iib.invalidheader\",\n                     HeaderUtil.toPrintableString(byteBuffer.array(), headerData.lineStart,\n                             headerData.lastSignificantChar - headerData.lineStart + 1));\n-            if (rejectIllegalHeader) {\n+            if (rejectThisHeader) {\n                 throw new IllegalArgumentException(message);\n             }\n             log.debug(message);\n\n\n</patch>\n<test_patch>\ndiff --git a/test/org/apache/coyote/http11/TestHttp11InputBuffer.java b/test/org/apache/coyote/http11/TestHttp11InputBuffer.java\nindex c8b10d0135..1857882478 100644\n--- a/test/org/apache/coyote/http11/TestHttp11InputBuffer.java\n+++ b/test/org/apache/coyote/http11/TestHttp11InputBuffer.java\n@@ -709,6 +709,37 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {\n     }\n \n \n+    @Test\n+    public void testInvalidContentLength01() {\n+        doTestInvalidContentLength(false);\n+    }\n+\n+\n+    @Test\n+    public void testInvalidContentLength02() {\n+        doTestInvalidContentLength(true);\n+    }\n+\n+\n+    private void doTestInvalidContentLength(boolean rejectIllegalHeader) {\n+        getTomcatInstance().getConnector().setProperty(\"rejectIllegalHeader\", Boolean.toString(rejectIllegalHeader));\n+\n+        String[] request = new String[1];\n+        request[0] =\n+                \"POST /test HTTP/1.1\" + CRLF +\n+                \"Host: localhost:8080\" + CRLF +\n+                \"Content-Length: 12\\u000734\" + CRLF +\n+                \"Connection: close\" + CRLF +\n+                CRLF;\n+\n+        InvalidClient client = new InvalidClient(request);\n+\n+        client.doRequest();\n+        Assert.assertTrue(client.getResponseLine(), client.isResponse400());\n+        Assert.assertTrue(client.isResponseBodyOK());\n+    }\n+\n+\n     /**\n      * Invalid request test client.\n      */\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "c9fe754e5d17e262dfbd3eab2a03ca96ff372dc3", "source_date": "Mon Oct 3 11:59:01 2022 +0100", "source_tag": "10.1.1", "target_commit": "0d089a15047faf9cb3c82f80f4d28febd4798920", "target_date": "Mon Oct 3 12:42:21 2022 +0100", "target_tag": "10.0.27", "FAIL TO PASS": ["testInvalidContentLength01"], "PASS TO PASS": ["testBug51557ObsTextInValue", "testBug51557Continuation", "testBug51557Invalid", "testBug48839", "testBug51557NoColon", "testBug51557BoundaryEnd", "testNewLinesExcessive", "testInvalidHeader01", "testNewLines", "testBug51557CtlInName", "testBug51557SeparatorsInName", "testBug54947", "testBug51557Valid", "testInvalidContentLength02", "testBug59089", "testInvalidEndOfRequestLine01", "testBug51557BoundaryStart", "testInvalidMethod", "testInvalidHttp09"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_206", "original_commit_message": "[1.6.x] Fixed #23157 -- Removed O(n) algorithm when uploading duplicate file names.\nThis is a security fix. Disclosure following shortly.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex 80123781f6..b13bb35cba 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -1,12 +1,12 @@\n import os\n import errno\n-import itertools\n from datetime import datetime\n \n from django.conf import settings\n from django.core.exceptions import SuspiciousFileOperation\n from django.core.files import locks, File\n from django.core.files.move import file_move_safe\n+from django.utils.crypto import get_random_string\n from django.utils.encoding import force_text, filepath_to_uri\n from django.utils.functional import LazyObject\n from django.utils.module_loading import import_by_path\n@@ -67,13 +67,12 @@ class Storage(object):\n         \"\"\"\n         dir_name, file_name = os.path.split(name)\n         file_root, file_ext = os.path.splitext(file_name)\n-        # If the filename already exists, add an underscore and a number (before\n-        # the file extension, if one exists) to the filename until the generated\n-        # filename doesn't exist.\n-        count = itertools.count(1)\n+        # If the filename already exists, add an underscore and a random 7\n+        # character alphanumeric string (before the file extension, if one\n+        # exists) to the filename until the generated filename doesn't exist.\n         while self.exists(name):\n             # file_ext includes the dot.\n-            name = os.path.join(dir_name, \"%s_%s%s\" % (file_root, next(count), file_ext))\n+            name = os.path.join(dir_name, \"%s_%s%s\" % (file_root, get_random_string(7), file_ext))\n \n         return name\n \n\n\n</patch>\n<test_patch>\ndiff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex f92eae3f53..f9f2d6ad13 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -35,6 +35,9 @@ except ImproperlyConfigured:\n     Image = None\n \n \n+FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n+\n+\n class GetStorageClassTests(SimpleTestCase):\n \n     def test_get_filesystem_storage(self):\n@@ -430,10 +433,9 @@ class FileSaveRaceConditionTest(unittest.TestCase):\n         self.thread.start()\n         name = self.save_file('conflict')\n         self.thread.join()\n-        self.assertTrue(self.storage.exists('conflict'))\n-        self.assertTrue(self.storage.exists('conflict_1'))\n-        self.storage.delete('conflict')\n-        self.storage.delete('conflict_1')\n+        files = sorted(os.listdir(self.storage_dir))\n+        self.assertEqual(files[0], 'conflict')\n+        six.assertRegex(self, files[1], 'conflict_%s' % FILE_SUFFIX_REGEX)\n \n @unittest.skipIf(sys.platform.startswith('win'), \"Windows only partially supports umasks and chmod.\")\n class FileStoragePermissions(unittest.TestCase):\n@@ -477,9 +479,10 @@ class FileStoragePathParsing(unittest.TestCase):\n         self.storage.save('dotted.path/test', ContentFile(\"1\"))\n         self.storage.save('dotted.path/test', ContentFile(\"2\"))\n \n+        files = sorted(os.listdir(os.path.join(self.storage_dir, 'dotted.path')))\n         self.assertFalse(os.path.exists(os.path.join(self.storage_dir, 'dotted_.path')))\n-        self.assertTrue(os.path.exists(os.path.join(self.storage_dir, 'dotted.path/test')))\n-        self.assertTrue(os.path.exists(os.path.join(self.storage_dir, 'dotted.path/test_1')))\n+        self.assertEqual(files[0], 'test')\n+        six.assertRegex(self, files[1], 'test_%s' % FILE_SUFFIX_REGEX)\n \n     def test_first_character_dot(self):\n         \"\"\"\n@@ -489,8 +492,10 @@ class FileStoragePathParsing(unittest.TestCase):\n         self.storage.save('dotted.path/.test', ContentFile(\"1\"))\n         self.storage.save('dotted.path/.test', ContentFile(\"2\"))\n \n-        self.assertTrue(os.path.exists(os.path.join(self.storage_dir, 'dotted.path/.test')))\n-        self.assertTrue(os.path.exists(os.path.join(self.storage_dir, 'dotted.path/.test_1')))\n+        files = sorted(os.listdir(os.path.join(self.storage_dir, 'dotted.path')))\n+        self.assertFalse(os.path.exists(os.path.join(self.storage_dir, 'dotted_.path')))\n+        self.assertEqual(files[0], '.test')\n+        six.assertRegex(self, files[1], '.test_%s' % FILE_SUFFIX_REGEX)\n \n class DimensionClosingBug(unittest.TestCase):\n     \"\"\"\n\ndiff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 2766ed1630..abc1a2c678 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -13,12 +13,15 @@ from django.core.files.base import ContentFile\n from django.core.files.uploadedfile import SimpleUploadedFile\n from django.core.files.temp import NamedTemporaryFile\n from django.test import TestCase\n-from django.utils import unittest\n+from django.utils import six, unittest\n from django.utils.six import StringIO\n \n from .models import Storage, temp_storage, temp_storage_location\n \n \n+FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n+\n+\n class FileStorageTests(TestCase):\n     def tearDown(self):\n         shutil.rmtree(temp_storage_location)\n@@ -64,27 +67,28 @@ class FileStorageTests(TestCase):\n         # Save another file with the same name.\n         obj2 = Storage()\n         obj2.normal.save(\"django_test.txt\", ContentFile(\"more content\"))\n-        self.assertEqual(obj2.normal.name, \"tests/django_test_1.txt\")\n+        obj2_name = obj2.normal.name\n+        six.assertRegex(self, obj2_name, \"tests/django_test_%s.txt\" % FILE_SUFFIX_REGEX)\n         self.assertEqual(obj2.normal.size, 12)\n \n         # Push the objects into the cache to make sure they pickle properly\n         cache.set(\"obj1\", obj1)\n         cache.set(\"obj2\", obj2)\n-        self.assertEqual(cache.get(\"obj2\").normal.name, \"tests/django_test_1.txt\")\n+        six.assertRegex(self, cache.get(\"obj2\").normal.name, \"tests/django_test_%s.txt\" % FILE_SUFFIX_REGEX)\n \n         # Deleting an object does not delete the file it uses.\n         obj2.delete()\n         obj2.normal.save(\"django_test.txt\", ContentFile(\"more content\"))\n-        self.assertEqual(obj2.normal.name, \"tests/django_test_2.txt\")\n+        self.assertNotEqual(obj2_name, obj2.normal.name)\n+        six.assertRegex(self, obj2.normal.name, \"tests/django_test_%s.txt\" % FILE_SUFFIX_REGEX)\n \n         # Multiple files with the same name get _N appended to them.\n-        objs = [Storage() for i in range(3)]\n+        objs = [Storage() for i in range(2)]\n         for o in objs:\n             o.normal.save(\"multiple_files.txt\", ContentFile(\"Same Content\"))\n-        self.assertEqual(\n-            [o.normal.name for o in objs],\n-            [\"tests/multiple_files.txt\", \"tests/multiple_files_1.txt\", \"tests/multiple_files_2.txt\"]\n-        )\n+        names = [o.normal.name for o in objs]\n+        self.assertEqual(names[0], \"tests/multiple_files.txt\")\n+        six.assertRegex(self, names[1], \"tests/multiple_files_%s.txt\" % FILE_SUFFIX_REGEX)\n         for o in objs:\n             o.delete()\n \n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "dd0c3f4ee1a30c1a1e6055061c6ba6e58c6b54d1", "source_date": "Wed Aug 20 11:43:43 2014 -0400", "source_tag": "1.6.6", "target_commit": "26cd48e166ac4d84317c8ee6d63ac52a87e8da99", "target_date": "Wed Aug 20 11:44:02 2014 -0400", "target_tag": "1.5.9", "FAIL TO PASS": ["regressiontests.file_storage.tests.FileSaveRaceConditionTest.test_race_condition", "modeltests.files.tests.FileStorageTests.test_files", "Regression test for #9610.", "regressiontests.file_storage.tests.FileStoragePathParsing.test_directory_with_dot", "regressiontests.file_storage.tests.FileStoragePathParsing.test_first_character_dot"], "PASS TO PASS": ["regressiontests.file_storage.tests.NoNameFileTestCase.test_noname_file_default_name", "regressiontests.file_storage.tests.CustomStorageTests.test_file_access_options", "regressiontests.file_storage.tests.CustomStorageTests.test_file_accessed_time", "modeltests.files.tests.FileTests.test_context_manager", "regressiontests.file_storage.tests.FileStorageTests.test_file_url", "regressiontests.file_storage.tests.FileStorageTests.test_file_access_options", "regressiontests.file_storage.tests.FileStorageTests.test_file_path", "regressiontests.file_storage.tests.FileStorageTests.test_file_accessed_time", "regressiontests.file_storage.tests.GetStorageClassTests.test_get_nonexisting_storage_module", "modeltests.files.tests.FileTests.test_file_mode", "regressiontests.file_storage.tests.FileStorageTests.test_remove_race_handling", "regressiontests.file_storage.tests.FileStorageTests.test_listdir", "regressiontests.file_storage.tests.CustomStorageTests.test_listdir", "regressiontests.file_storage.tests.CustomStorageTests.test_remove_race_handling", "regressiontests.file_storage.tests.CustomStorageTests.test_custom_get_available_name", "regressiontests.file_storage.tests.GetStorageClassTests.test_get_invalid_storage_module", "regressiontests.file_storage.tests.FileStoragePermissions.test_file_upload_permissions", "regressiontests.file_storage.tests.CustomStorageTests.test_file_save_with_path", "regressiontests.file_storage.tests.FileStorageTests.test_file_storage_prevents_directory_traversal", "regressiontests.file_storage.tests.ContentFileTestCase.test_content_file_default_name", "regressiontests.file_storage.tests.CustomStorageTests.test_makedirs_race_handling", "regressiontests.file_storage.tests.FileStoragePermissions.test_file_upload_default_permissions", "regressiontests.file_storage.tests.FileStorageTests.test_file_modified_time", "regressiontests.file_storage.tests.CustomStorageTests.test_file_storage_prevents_directory_traversal", "regressiontests.file_storage.tests.FileLikeObjectTestCase.test_urllib2_urlopen", "regressiontests.file_storage.tests.FileStorageTests.test_file_save_with_path", "regressiontests.file_storage.tests.FileStorageTests.test_file_created_time", "regressiontests.file_storage.tests.ContentFileTestCase.test_content_file_custom_name", "regressiontests.file_storage.tests.CustomStorageTests.test_file_path", "regressiontests.file_storage.tests.CustomStorageTests.test_file_created_time", "regressiontests.file_storage.tests.GetStorageClassTests.test_get_nonexisting_storage_class", "regressiontests.file_storage.tests.CustomStorageTests.test_file_chunks_error", "regressiontests.file_storage.tests.CustomStorageTests.test_file_url", "regressiontests.file_storage.tests.CustomStorageTests.test_emtpy_location", "regressiontests.file_storage.tests.UnicodeFileNameTests.test_unicode_file_names", "regressiontests.file_storage.tests.FileStorageTests.test_file_save_without_name", "regressiontests.file_storage.tests.CustomStorageTests.test_file_save_without_name", "regressiontests.file_storage.tests.FileStorageTests.test_emtpy_location", "regressiontests.file_storage.tests.ContentFileTestCase.test_content_file_input_type", "regressiontests.file_storage.tests.FileStorageTests.test_file_chunks_error", "regressiontests.file_storage.tests.CustomStorageTests.test_file_modified_time", "regressiontests.file_storage.tests.GetStorageClassTests.test_get_filesystem_storage", "The storage backend should preserve case of filenames.", "regressiontests.file_storage.tests.NoNameFileTestCase.test_noname_file_get_size", "regressiontests.file_storage.tests.FileStorageTests.test_makedirs_race_handling", "regressiontests.file_storage.tests.ContentFileTestCase.test_content_saving"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_207", "original_commit_message": "[1.6.x] Fixed #23157 -- Removed O(n) algorithm when uploading duplicate file names.\nThis is a security fix. Disclosure following shortly.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex 80123781f6..b13bb35cba 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -1,12 +1,12 @@\n import os\n import errno\n-import itertools\n from datetime import datetime\n \n from django.conf import settings\n from django.core.exceptions import SuspiciousFileOperation\n from django.core.files import locks, File\n from django.core.files.move import file_move_safe\n+from django.utils.crypto import get_random_string\n from django.utils.encoding import force_text, filepath_to_uri\n from django.utils.functional import LazyObject\n from django.utils.module_loading import import_by_path\n@@ -67,13 +67,12 @@ class Storage(object):\n         \"\"\"\n         dir_name, file_name = os.path.split(name)\n         file_root, file_ext = os.path.splitext(file_name)\n-        # If the filename already exists, add an underscore and a number (before\n-        # the file extension, if one exists) to the filename until the generated\n-        # filename doesn't exist.\n-        count = itertools.count(1)\n+        # If the filename already exists, add an underscore and a random 7\n+        # character alphanumeric string (before the file extension, if one\n+        # exists) to the filename until the generated filename doesn't exist.\n         while self.exists(name):\n             # file_ext includes the dot.\n-            name = os.path.join(dir_name, \"%s_%s%s\" % (file_root, next(count), file_ext))\n+            name = os.path.join(dir_name, \"%s_%s%s\" % (file_root, get_random_string(7), file_ext))\n \n         return name\n \n\n\n</patch>\n<test_patch>\ndiff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex f92eae3f53..f9f2d6ad13 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -35,6 +35,9 @@ except ImproperlyConfigured:\n     Image = None\n \n \n+FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n+\n+\n class GetStorageClassTests(SimpleTestCase):\n \n     def test_get_filesystem_storage(self):\n@@ -430,10 +433,9 @@ class FileSaveRaceConditionTest(unittest.TestCase):\n         self.thread.start()\n         name = self.save_file('conflict')\n         self.thread.join()\n-        self.assertTrue(self.storage.exists('conflict'))\n-        self.assertTrue(self.storage.exists('conflict_1'))\n-        self.storage.delete('conflict')\n-        self.storage.delete('conflict_1')\n+        files = sorted(os.listdir(self.storage_dir))\n+        self.assertEqual(files[0], 'conflict')\n+        six.assertRegex(self, files[1], 'conflict_%s' % FILE_SUFFIX_REGEX)\n \n @unittest.skipIf(sys.platform.startswith('win'), \"Windows only partially supports umasks and chmod.\")\n class FileStoragePermissions(unittest.TestCase):\n@@ -477,9 +479,10 @@ class FileStoragePathParsing(unittest.TestCase):\n         self.storage.save('dotted.path/test', ContentFile(\"1\"))\n         self.storage.save('dotted.path/test', ContentFile(\"2\"))\n \n+        files = sorted(os.listdir(os.path.join(self.storage_dir, 'dotted.path')))\n         self.assertFalse(os.path.exists(os.path.join(self.storage_dir, 'dotted_.path')))\n-        self.assertTrue(os.path.exists(os.path.join(self.storage_dir, 'dotted.path/test')))\n-        self.assertTrue(os.path.exists(os.path.join(self.storage_dir, 'dotted.path/test_1')))\n+        self.assertEqual(files[0], 'test')\n+        six.assertRegex(self, files[1], 'test_%s' % FILE_SUFFIX_REGEX)\n \n     def test_first_character_dot(self):\n         \"\"\"\n@@ -489,8 +492,10 @@ class FileStoragePathParsing(unittest.TestCase):\n         self.storage.save('dotted.path/.test', ContentFile(\"1\"))\n         self.storage.save('dotted.path/.test', ContentFile(\"2\"))\n \n-        self.assertTrue(os.path.exists(os.path.join(self.storage_dir, 'dotted.path/.test')))\n-        self.assertTrue(os.path.exists(os.path.join(self.storage_dir, 'dotted.path/.test_1')))\n+        files = sorted(os.listdir(os.path.join(self.storage_dir, 'dotted.path')))\n+        self.assertFalse(os.path.exists(os.path.join(self.storage_dir, 'dotted_.path')))\n+        self.assertEqual(files[0], '.test')\n+        six.assertRegex(self, files[1], '.test_%s' % FILE_SUFFIX_REGEX)\n \n class DimensionClosingBug(unittest.TestCase):\n     \"\"\"\n\ndiff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 2766ed1630..abc1a2c678 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -13,12 +13,15 @@ from django.core.files.base import ContentFile\n from django.core.files.uploadedfile import SimpleUploadedFile\n from django.core.files.temp import NamedTemporaryFile\n from django.test import TestCase\n-from django.utils import unittest\n+from django.utils import six, unittest\n from django.utils.six import StringIO\n \n from .models import Storage, temp_storage, temp_storage_location\n \n \n+FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n+\n+\n class FileStorageTests(TestCase):\n     def tearDown(self):\n         shutil.rmtree(temp_storage_location)\n@@ -64,27 +67,28 @@ class FileStorageTests(TestCase):\n         # Save another file with the same name.\n         obj2 = Storage()\n         obj2.normal.save(\"django_test.txt\", ContentFile(\"more content\"))\n-        self.assertEqual(obj2.normal.name, \"tests/django_test_1.txt\")\n+        obj2_name = obj2.normal.name\n+        six.assertRegex(self, obj2_name, \"tests/django_test_%s.txt\" % FILE_SUFFIX_REGEX)\n         self.assertEqual(obj2.normal.size, 12)\n \n         # Push the objects into the cache to make sure they pickle properly\n         cache.set(\"obj1\", obj1)\n         cache.set(\"obj2\", obj2)\n-        self.assertEqual(cache.get(\"obj2\").normal.name, \"tests/django_test_1.txt\")\n+        six.assertRegex(self, cache.get(\"obj2\").normal.name, \"tests/django_test_%s.txt\" % FILE_SUFFIX_REGEX)\n \n         # Deleting an object does not delete the file it uses.\n         obj2.delete()\n         obj2.normal.save(\"django_test.txt\", ContentFile(\"more content\"))\n-        self.assertEqual(obj2.normal.name, \"tests/django_test_2.txt\")\n+        self.assertNotEqual(obj2_name, obj2.normal.name)\n+        six.assertRegex(self, obj2.normal.name, \"tests/django_test_%s.txt\" % FILE_SUFFIX_REGEX)\n \n         # Multiple files with the same name get _N appended to them.\n-        objs = [Storage() for i in range(3)]\n+        objs = [Storage() for i in range(2)]\n         for o in objs:\n             o.normal.save(\"multiple_files.txt\", ContentFile(\"Same Content\"))\n-        self.assertEqual(\n-            [o.normal.name for o in objs],\n-            [\"tests/multiple_files.txt\", \"tests/multiple_files_1.txt\", \"tests/multiple_files_2.txt\"]\n-        )\n+        names = [o.normal.name for o in objs]\n+        self.assertEqual(names[0], \"tests/multiple_files.txt\")\n+        six.assertRegex(self, names[1], \"tests/multiple_files_%s.txt\" % FILE_SUFFIX_REGEX)\n         for o in objs:\n             o.delete()\n \n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "dd0c3f4ee1a30c1a1e6055061c6ba6e58c6b54d1", "source_date": "Wed Aug 20 11:43:43 2014 -0400", "source_tag": "1.6.6", "target_commit": "30042d475bf084c6723c6217a21598d9247a9c41", "target_date": "Mon Aug 11 10:14:06 2014 -0400", "target_tag": "1.4.14", "FAIL TO PASS": ["regressiontests.file_storage.tests.FileSaveRaceConditionTest.test_race_condition", "Regression test for #9610.", "modeltests.files.tests.FileTests.test_files", "regressiontests.file_storage.tests.FileStoragePathParsing.test_directory_with_dot", "regressiontests.file_storage.tests.FileStoragePathParsing.test_first_character_dot"], "PASS TO PASS": ["regressiontests.file_storage.tests.CustomStorageTests.test_file_access_options", "regressiontests.file_storage.tests.CustomStorageTests.test_file_accessed_time", "regressiontests.file_storage.tests.ContentFileTestCase.test_content_file_custome_name", "modeltests.files.tests.FileTests.test_context_manager", "regressiontests.file_storage.tests.FileStorageTests.test_file_url", "regressiontests.file_storage.tests.FileStorageTests.test_file_access_options", "regressiontests.file_storage.tests.FileStorageTests.test_file_path", "regressiontests.file_storage.tests.FileStorageTests.test_file_accessed_time", "regressiontests.file_storage.tests.GetStorageClassTests.test_get_nonexisting_storage_module", "regressiontests.file_storage.tests.FileStorageTests.test_remove_race_handling", "regressiontests.file_storage.tests.FileStorageTests.test_listdir", "regressiontests.file_storage.tests.CustomStorageTests.test_listdir", "regressiontests.file_storage.tests.CustomStorageTests.test_remove_race_handling", "regressiontests.file_storage.tests.CustomStorageTests.test_custom_get_available_name", "regressiontests.file_storage.tests.GetStorageClassTests.test_get_invalid_storage_module", "regressiontests.file_storage.tests.FileStoragePermissions.test_file_upload_permissions", "regressiontests.file_storage.tests.CustomStorageTests.test_file_save_with_path", "regressiontests.file_storage.tests.FileStorageTests.test_file_storage_prevents_directory_traversal", "regressiontests.file_storage.tests.ContentFileTestCase.test_content_file_default_name", "regressiontests.file_storage.tests.CustomStorageTests.test_makedirs_race_handling", "regressiontests.file_storage.tests.FileStorageTests.test_file_modified_time", "regressiontests.file_storage.tests.CustomStorageTests.test_file_storage_prevents_directory_traversal", "regressiontests.file_storage.tests.FileStorageTests.test_file_save_with_path", "regressiontests.file_storage.tests.FileStorageTests.test_file_created_time", "regressiontests.file_storage.tests.CustomStorageTests.test_file_path", "regressiontests.file_storage.tests.CustomStorageTests.test_file_created_time", "regressiontests.file_storage.tests.GetStorageClassTests.test_get_nonexisting_storage_class", "regressiontests.file_storage.tests.CustomStorageTests.test_file_url", "regressiontests.file_storage.tests.CustomStorageTests.test_emtpy_location", "regressiontests.file_storage.tests.UnicodeFileNameTests.test_unicode_file_names", "regressiontests.file_storage.tests.FileStorageTests.test_file_save_without_name", "regressiontests.file_storage.tests.CustomStorageTests.test_file_save_without_name", "regressiontests.file_storage.tests.FileStorageTests.test_emtpy_location", "regressiontests.file_storage.tests.CustomStorageTests.test_file_modified_time", "regressiontests.file_storage.tests.GetStorageClassTests.test_get_filesystem_storage", "The storage backend should preserve case of filenames.", "regressiontests.file_storage.tests.FileStorageTests.test_makedirs_race_handling"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_1232", "original_commit_message": "Validate client ID for approvals\n[#143844261] https://www.pivotaltracker.com/story/show/143844261", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/account/ProfileController.java b/server/src/main/java/org/cloudfoundry/identity/uaa/account/ProfileController.java\nindex d4da04278..a1a2cff64 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/account/ProfileController.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/account/ProfileController.java\n@@ -12,21 +12,27 @@\n  *******************************************************************************/\n package org.cloudfoundry.identity.uaa.account;\n \n-import org.cloudfoundry.identity.uaa.authentication.UaaPrincipal;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.cloudfoundry.identity.uaa.approval.Approval;\n import org.cloudfoundry.identity.uaa.approval.ApprovalsService;\n import org.cloudfoundry.identity.uaa.approval.DescribedApproval;\n-import org.cloudfoundry.identity.uaa.oauth.client.ClientConstants;\n+import org.cloudfoundry.identity.uaa.authentication.UaaPrincipal;\n import org.cloudfoundry.identity.uaa.constants.OriginKeys;\n-import org.cloudfoundry.identity.uaa.approval.Approval;\n+import org.cloudfoundry.identity.uaa.oauth.client.ClientConstants;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.oauth2.provider.ClientDetails;\n import org.springframework.security.oauth2.provider.ClientDetailsService;\n+import org.springframework.security.oauth2.provider.NoSuchClientException;\n import org.springframework.stereotype.Controller;\n import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.servlet.View;\n+import org.springframework.web.servlet.view.RedirectView;\n \n import java.util.ArrayList;\n import java.util.Collection;\n@@ -37,6 +43,8 @@ import java.util.Map;\n @Controller\n public class ProfileController {\n \n+    protected static Log logger = LogFactory.getLog(ProfileController.class);\n+\n     private final ApprovalsService approvalsService;\n     private final ClientDetailsService clientDetailsService;\n \n@@ -108,6 +116,13 @@ public class ProfileController {\n         return \"redirect:profile\";\n     }\n \n+    @ExceptionHandler\n+    public View handleException(NoSuchClientException nsce) {\n+        logger.debug(\"Unable to find client for approvals:\"+nsce.getMessage());\n+        return new RedirectView(\"profile?error_message_code=request.invalid_parameter\", true);\n+    }\n+\n+\n     private boolean isUaaManagedUser(Authentication authentication) {\n         if (authentication.getPrincipal() instanceof UaaPrincipal) {\n             UaaPrincipal principal = (UaaPrincipal) authentication.getPrincipal();\n\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/approval/ApprovalsAdminEndpoints.java b/server/src/main/java/org/cloudfoundry/identity/uaa/approval/ApprovalsAdminEndpoints.java\nindex ccbfee612..bdaa4db55 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/approval/ApprovalsAdminEndpoints.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/approval/ApprovalsAdminEndpoints.java\n@@ -1,5 +1,5 @@\n /*******************************************************************************\n- *     Cloud Foundry \n+ *     Cloud Foundry\n  *     Copyright (c) [2009-2016] Pivotal Software, Inc. All Rights Reserved.\n  *\n  *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n@@ -12,41 +12,45 @@\n  *******************************************************************************/\n package org.cloudfoundry.identity.uaa.approval;\n \n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-import org.cloudfoundry.identity.uaa.oauth.client.ClientConstants;\n-import org.cloudfoundry.identity.uaa.web.ConvertingExceptionView;\n-import org.cloudfoundry.identity.uaa.web.ExceptionReport;\n import org.cloudfoundry.identity.uaa.error.UaaException;\n import org.cloudfoundry.identity.uaa.resources.ActionResult;\n import org.cloudfoundry.identity.uaa.security.DefaultSecurityContextAccessor;\n import org.cloudfoundry.identity.uaa.security.SecurityContextAccessor;\n import org.cloudfoundry.identity.uaa.user.UaaUserDatabase;\n import org.cloudfoundry.identity.uaa.util.UaaPagingUtils;\n+import org.cloudfoundry.identity.uaa.web.ConvertingExceptionView;\n+import org.cloudfoundry.identity.uaa.web.ExceptionReport;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.http.converter.HttpMessageConverter;\n import org.springframework.security.access.AccessDeniedException;\n import org.springframework.security.core.userdetails.UsernameNotFoundException;\n-import org.springframework.security.oauth2.provider.ClientDetails;\n import org.springframework.security.oauth2.provider.ClientDetailsService;\n+import org.springframework.security.oauth2.provider.NoSuchClientException;\n import org.springframework.security.oauth2.provider.client.BaseClientDetails;\n import org.springframework.stereotype.Controller;\n import org.springframework.util.Assert;\n import org.springframework.util.StringUtils;\n-import org.springframework.web.bind.annotation.*;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n import org.springframework.web.client.RestTemplate;\n import org.springframework.web.servlet.View;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n @Controller\n public class ApprovalsAdminEndpoints implements InitializingBean, ApprovalsControllerService {\n \n@@ -168,6 +172,7 @@ public class ApprovalsAdminEndpoints implements InitializingBean, ApprovalsContr\n     @ResponseBody\n     @Override\n     public List<Approval> updateClientApprovals(@PathVariable String clientId, @RequestBody Approval[] approvals) {\n+        clientDetailsService.loadClientByClientId(clientId);\n         String currentUserId = getCurrentUserId();\n         logger.debug(\"Updating approvals for user: \" + currentUserId);\n         approvalStore.revokeApprovals(String.format(USER_AND_CLIENT_FILTER_TEMPLATE, currentUserId, clientId));\n@@ -202,10 +207,17 @@ public class ApprovalsAdminEndpoints implements InitializingBean, ApprovalsContr\n     public ActionResult revokeApprovals(@RequestParam(required = true) String clientId) {\n         String username = getCurrentUserId();\n         logger.debug(\"Revoking all existing approvals for user: \" + username + \" and client \" + clientId);\n+        clientDetailsService.loadClientByClientId(clientId);\n         approvalStore.revokeApprovals(String.format(USER_AND_CLIENT_FILTER_TEMPLATE, username, clientId));\n         return new ActionResult(\"ok\", \"Approvals of user \" + username + \" and client \" + clientId + \" revoked\");\n     }\n \n+    @ExceptionHandler\n+    public View handleException(NoSuchClientException nsce) {\n+        logger.debug(\"Client not found:\"+nsce.getMessage());\n+        return handleException(new UaaException(nsce.getMessage(), 404));\n+    }\n+\n     @ExceptionHandler\n     public View handleException(Exception t) {\n         UaaException e = t instanceof UaaException ? (UaaException) t : new UaaException(\"Unexpected error\",\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/approval/ApprovalsAdminEndpointsTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/approval/ApprovalsAdminEndpointsTests.java\nindex d63278e0a..2ecc1e47c 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/approval/ApprovalsAdminEndpointsTests.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/approval/ApprovalsAdminEndpointsTests.java\n@@ -1,5 +1,5 @@\n /*******************************************************************************\n- *     Cloud Foundry \n+ *     Cloud Foundry\n  *     Copyright (c) [2009-2016] Pivotal Software, Inc. All Rights Reserved.\n  *\n  *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n@@ -12,30 +12,12 @@\n  *******************************************************************************/\n package org.cloudfoundry.identity.uaa.oauth.approval;\n \n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.Date;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-\n-import static org.cloudfoundry.identity.uaa.approval.Approval.ApprovalStatus.APPROVED;\n-import static org.cloudfoundry.identity.uaa.approval.Approval.ApprovalStatus.DENIED;\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.core.Is.is;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-\n import com.fasterxml.jackson.core.type.TypeReference;\n import org.cloudfoundry.identity.uaa.approval.Approval;\n+import org.cloudfoundry.identity.uaa.approval.Approval.ApprovalStatus;\n import org.cloudfoundry.identity.uaa.approval.ApprovalsAdminEndpoints;\n import org.cloudfoundry.identity.uaa.approval.JdbcApprovalStore;\n-import org.cloudfoundry.identity.uaa.oauth.client.ClientConstants;\n import org.cloudfoundry.identity.uaa.error.UaaException;\n-import org.cloudfoundry.identity.uaa.approval.Approval.ApprovalStatus;\n import org.cloudfoundry.identity.uaa.resources.jdbc.JdbcPagingListFactory;\n import org.cloudfoundry.identity.uaa.resources.jdbc.SimpleSearchQueryConverter;\n import org.cloudfoundry.identity.uaa.security.SecurityContextAccessor;\n@@ -48,14 +30,34 @@ import org.cloudfoundry.identity.uaa.user.UaaUserDatabase;\n import org.cloudfoundry.identity.uaa.util.JsonUtils;\n import org.junit.After;\n import org.junit.Before;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.security.oauth2.provider.NoSuchClientException;\n import org.springframework.security.oauth2.provider.client.BaseClientDetails;\n import org.springframework.security.oauth2.provider.client.InMemoryClientDetailsService;\n \n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.cloudfoundry.identity.uaa.approval.Approval.ApprovalStatus.APPROVED;\n+import static org.cloudfoundry.identity.uaa.approval.Approval.ApprovalStatus.DENIED;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n public class ApprovalsAdminEndpointsTests extends JdbcTestBase {\n     private UaaTestAccounts testAccounts = null;\n-    \n+\n     private JdbcApprovalStore dao;\n \n     private UaaUserDatabase userDao = null;\n@@ -64,6 +66,9 @@ public class ApprovalsAdminEndpointsTests extends JdbcTestBase {\n \n     private ApprovalsAdminEndpoints endpoints;\n \n+    @Rule\n+    public ExpectedException exception = ExpectedException.none();\n+\n     @Before\n     public void initApprovalsAdminEndpointsTests() {\n         testAccounts = UaaTestAccounts.standard(null);\n@@ -114,6 +119,21 @@ public class ApprovalsAdminEndpointsTests extends JdbcTestBase {\n         assertThat(jdbcTemplate.queryForObject(\"select count(*) from users\", Integer.class), is(0));\n     }\n \n+    @Test\n+    public void validate_client_id_on_revoke() throws Exception {\n+        exception.expect(NoSuchClientException.class);\n+        exception.expectMessage(\"No client with requested id: invalid_id\");\n+        endpoints.revokeApprovals(\"invalid_id\");\n+    }\n+\n+    @Test\n+    public void validate_client_id_on_update() throws Exception {\n+        exception.expect(NoSuchClientException.class);\n+        exception.expectMessage(\"No client with requested id: invalid_id\");\n+        endpoints.updateClientApprovals(\"invalid_id\", new Approval[0]);\n+    }\n+\n+\n     @Test\n     public void canGetApprovals() {\n         addApproval(marissa.getId(), \"c1\", \"uaa.user\", 6000, APPROVED);\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/approvals/ApprovalsMockMvcTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/approvals/ApprovalsMockMvcTests.java\nindex 36a43c5ea..9a2c30e76 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/approvals/ApprovalsMockMvcTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/approvals/ApprovalsMockMvcTests.java\n@@ -50,6 +50,7 @@ import static org.springframework.test.web.servlet.request.MockMvcRequestBuilder\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.header;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrlPattern;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n@@ -128,6 +129,37 @@ public class ApprovalsMockMvcTests extends AbstractTokenMockMvcTests {\n             .andExpect(status().isFound()); //approval page no longer showing up\n     }\n \n+    @Test\n+    public void revoke() throws Exception {\n+        test_oauth_authorize_without_csrf();\n+        MockHttpSession session = getAuthenticatedSession(user1);\n+        getMockMvc().perform(\n+            post(\"/profile\")\n+                .with(cookieCsrf())\n+                .param(\"delete\",\"true\")\n+                .param(\"clientId\", client1.getClientId())\n+                .session(session)\n+        )\n+            .andExpect(status().isFound())\n+            .andExpect(header().string(\"Location\", \"profile\"));\n+\n+    }\n+\n+    @Test\n+    public void revoke_invalid_client() throws Exception {\n+        test_oauth_authorize_without_csrf();\n+        MockHttpSession session = getAuthenticatedSession(user1);\n+        getMockMvc().perform(\n+            post(\"/profile\")\n+                .with(cookieCsrf())\n+                .param(\"delete\",\"true\")\n+                .param(\"clientId\", \"invalid_id\")\n+                .session(session)\n+        )\n+            .andExpect(status().isFound())\n+            .andExpect(header().string(\"Location\", \"profile?error_message_code=request.invalid_parameter\"));\n+    }\n+\n     @Test\n     public void test_get_approvals() throws Exception {\n         test_oauth_authorize_without_csrf();\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "5eb43757d5a3a2c9e7aae1ef3d0b9b7e2a38851e", "source_date": "Mon Apr 17 17:26:16 2017 -0700", "source_tag": "3.15.0", "target_commit": "3c456f0285e92713a0a9ce54c3e57d8636b9183c", "target_date": "Mon Apr 17 18:36:25 2017 -0700", "target_tag": "3.9.10", "FAIL TO PASS": ["org.cloudfoundry.identity.uaa.oauth.approval.ApprovalsAdminEndpointsTests > validate_client_id_on_revoke", "org.cloudfoundry.identity.uaa.oauth.approval.ApprovalsAdminEndpointsTests > validate_client_id_on_update", "org.cloudfoundry.identity.uaa.mock.DefaultConfigurationTestSuite > org.cloudfoundry.identity.uaa.mock.approvals.ApprovalsMockMvcTests.revoke_invalid_client"], "PASS TO PASS": ["org.cloudfoundry.identity.uaa.zone.event.IdentityProviderModifiedEventTest", "org.cloudfoundry.identity.uaa.oauth.approval.ApprovalTests", "org.cloudfoundry.identity.uaa.provider.ldap.LdapIdentityProviderDefinitionTest", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.ZoneAwareIdpMetadataGeneratorTest", "org.cloudfoundry.identity.uaa.provider.saml.UaaSamlIDPDocs", "org.cloudfoundry.identity.uaa.provider.saml.BootstrapSamlIdentityProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.login.XFrameOptionsTheories", "org.cloudfoundry.identity.uaa.login.LoginInfoEndpointTests", "org.cloudfoundry.identity.uaa.user.BCryptPasswordEncoderTest", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupExternalMembershipManagerTests", "org.cloudfoundry.identity.uaa.mock.token.CheckTokenEndpointDocs", ":cloudfoundry-identity-server:compileTestJava", "org.cloudfoundry.identity.uaa.login.ResetPasswordControllerTest", "org.cloudfoundry.identity.uaa.login.CurrentUserCookieDestructorTests", "org.cloudfoundry.identity.uaa.audit.event.ApprovalModifiedEventTest", "org.cloudfoundry.identity.uaa.oauth.AuthorizePromptNoneEntryPointTest", "org.cloudfoundry.identity.uaa.authentication.login.RemoteAuthenticationEndpointTests", "org.cloudfoundry.identity.uaa.authentication.UaaClientAuthenticationProviderTest", ":cloudfoundry-identity-server:processResources", "org.cloudfoundry.identity.uaa.openid.UserInfoEndpointTests", "org.cloudfoundry.identity.uaa.web.UaaSessionCookieConfigTest", "org.cloudfoundry.identity.uaa.provider.saml.SamlServiceProviderEndpointsZoneSwitchingMockMvcTests", "org.cloudfoundry.identity.uaa.provider.saml.ZoneAwareMetadataGeneratorTests", "org.cloudfoundry.identity.uaa.client.ClientAdminBootstrapTests", "org.cloudfoundry.identity.uaa.test.CreateDB", "org.cloudfoundry.identity.uaa.audit.event.AuditListenerTests", "org.cloudfoundry.identity.uaa.util.ColorHashTest", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthAuthenticationFilterTest", ":cloudfoundry-identity-uaa:testClasses", "org.cloudfoundry.identity.uaa.BootstrapTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.SamlServiceProviderDefinitionTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpWebSsoProfileImplTest", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupProvisioningTests", "org.cloudfoundry.identity.uaa.zone.IdentityZoneHolderTest", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimExternalGroupBootstrapTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.oauth.UaaTokenStoreTests", "org.cloudfoundry.identity.uaa.oauth.token.KeyInfoTests", "org.cloudfoundry.identity.uaa.authentication.manager.ScopeAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.zone.IdentityZoneResolvingFilterTests", "org.cloudfoundry.identity.uaa.authentication.WhitelistLogoutHandlerTest", "org.cloudfoundry.identity.uaa.mock.clients.ClientAdminEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.mock.DefaultDocsTestSuite", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.SamlServiceProviderConfiguratorTest", "org.cloudfoundry.identity.uaa.account.PasswordCheckEndpointTests", "org.cloudfoundry.identity.uaa.mock.token.ListUserTokenMockMvcTests", "org.cloudfoundry.identity.uaa.mock.oauth.CheckDefaultAuthoritiesMvcMockTests", ":cloudfoundry-identity-model:gitInfo", "org.cloudfoundry.identity.uaa.login.ChangePasswordControllerTest", "org.cloudfoundry.identity.uaa.config.YamlPropertiesFactoryBeanTests", "org.cloudfoundry.identity.uaa.provider.saml.FixedHttpMetaDataProviderTest", "org.cloudfoundry.identity.uaa.oauth.token.UserTokenGranterTest", "org.cloudfoundry.identity.uaa.authentication.manager.LoginAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.user.InMemoryUaaUserDatabaseTests", "org.cloudfoundry.identity.uaa.security.web.CorsFilterTests", "org.cloudfoundry.identity.uaa.util.UaaMapUtilsTest", "org.cloudfoundry.identity.uaa.provider.saml.SamlMockMvcTests", "org.cloudfoundry.identity.uaa.security.web.SecurityFilterChainPostProcessorTests", "org.cloudfoundry.identity.uaa.scim.ScimGroupMemberTests", "org.cloudfoundry.identity.uaa.zone.JdbcIdentityZoneProvisioningTests", "org.cloudfoundry.identity.uaa.codestore.CodeStoreEndpointsTests", "org.cloudfoundry.identity.uaa.login.util.LocalUaaRestTemplateMockMvcTests", "org.cloudfoundry.identity.uaa.client.ClientAdminEndpointsTests", "org.cloudfoundry.identity.uaa.login.util.FakeJavaMailSenderTest", "org.cloudfoundry.identity.uaa.scim.endpoints.PasswordResetEndpointTest", "org.cloudfoundry.identity.uaa.web.ForwardAwareInternalResourceViewResolverTests", "org.cloudfoundry.identity.uaa.web.ExceptionReportHttpMessageConverterTest", "org.cloudfoundry.identity.uaa.oauth.DisableIdTokenResponseTypeFilterTest", "org.cloudfoundry.identity.uaa.oauth.approval.JdbcApprovalStoreTests", "org.cloudfoundry.identity.uaa.authentication.UTF8ConversionFilterTests", "org.cloudfoundry.identity.uaa.mock.codestore.ExpiringCodeStoreMockMvcTests", "org.cloudfoundry.identity.uaa.db.TableAndColumnNormalizationTest", "org.cloudfoundry.identity.uaa.provider.saml.SamlIDPRefreshMockMvcTests", "org.cloudfoundry.identity.uaa.util.UaaPagingUtilsTests", "org.cloudfoundry.identity.uaa.login.InvitationsServiceMockMvcTests", "org.cloudfoundry.identity.uaa.db.RevocableTokenTableTest", "org.cloudfoundry.identity.uaa.login.SessionControllerMockMvcTests", "org.cloudfoundry.identity.uaa.authentication.listener.UserAuthenticationSuccessListenerTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsTests", "org.cloudfoundry.identity.uaa.util.TokenValidationTest", "org.cloudfoundry.identity.uaa.provider.saml.SamlRedirectUtilsTest", "org.cloudfoundry.identity.uaa.login.EmailChangeEmailServiceTest", "org.cloudfoundry.identity.uaa.util.CachingPasswordEncoderTest", "org.cloudfoundry.identity.uaa.authorization.external.LdapGroupMappingAuthorizationManagerTests", "org.cloudfoundry.identity.uaa.mock.token.TokenKeyEndpointDocs", "org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationSerializerDeserializerTest", "org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationSerializationTests", ":cloudfoundry-identity-server:compileTestJava/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", ":cloudfoundry-identity-server:testClasses", "org.cloudfoundry.identity.uaa.oauth.expression.IsSelfCheckTest", "org.cloudfoundry.identity.uaa.db.TestZonifyGroupSchema_V2_4_1", "org.cloudfoundry.identity.uaa.mock.zones.DisableUserManagementSecurityFilterMockMvcTest", "org.cloudfoundry.identity.uaa.zone.MultitenantJdbcClientDetailsServiceTests", "org.cloudfoundry.identity.uaa.login.ProfileControllerTests", "org.cloudfoundry.identity.uaa.audit.AuditEventTypeTests", "org.cloudfoundry.identity.uaa.scim.jdbc.ScimSearchQueryConverterTests", "org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcherTests", "org.cloudfoundry.identity.uaa.oauth.RestrictUaaScopesClientValidatorTest", ":cloudfoundry-identity-uaa:compileTestJava", "org.cloudfoundry.identity.uaa.login.EmailInvitationsServiceTests", "org.cloudfoundry.identity.uaa.config.IdentityZoneConfigurationBootstrapTests", "org.cloudfoundry.identity.uaa.provider.saml.ConfigMetadataProviderTest", "org.cloudfoundry.identity.uaa.scim.ScimCoreTests", "org.cloudfoundry.identity.uaa.login.AccountsControllerMockMvcTests", "org.cloudfoundry.identity.uaa.mock.ldap.LdapMockMvcTests", ":cloudfoundry-identity-model:classes", "org.cloudfoundry.identity.uaa.util.UaaStringUtilsTest", "org.cloudfoundry.identity.uaa.zone.event.IdentityZoneModifiedEventTest", "org.cloudfoundry.identity.uaa.security.DefaultSecurityContextAccessorTests", "org.cloudfoundry.identity.uaa.config.NestedMapPropertySourceTests", "org.cloudfoundry.identity.uaa.UaaConfigurationTests", "org.cloudfoundry.identity.uaa.oauth.CheckTokenEndpointTests", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimUserProvisioningTests", "org.cloudfoundry.identity.uaa.authentication.SessionResetFilterTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserEndpointsTests", "org.cloudfoundry.identity.uaa.authentication.manager.CheckIdpEnabledAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.oauth.event.ClientAdminEventPublisherTests", "org.cloudfoundry.identity.uaa.mock.token.TokenMvcMockTests", "org.cloudfoundry.identity.uaa.web.UaaSavedRequestCacheTests", "org.cloudfoundry.identity.uaa.authentication.manager.ChainedAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.mock.password.PasswordEndpointsDocs", "org.cloudfoundry.identity.uaa.impl.config.YamlServletProfileInitializerTest", "org.cloudfoundry.identity.uaa.error.ConvertingExceptionViewTests", "org.cloudfoundry.identity.uaa.scim.exception.InvalidPasswordExceptionTest", "org.cloudfoundry.identity.uaa.oauth.token.JdbcRevocableTokenProvisioningTest", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimGroupBootstrapTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsDocs", "org.cloudfoundry.identity.uaa.mock.audit.AuditCheckMockMvcTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.ZoneAwareIdpMetadataManagerTest", "org.cloudfoundry.identity.uaa.login.ResetPasswordControllerMockMvcTests", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneSwitchingFilterMockMvcTest", ":cloudfoundry-identity-model:buildInfo", "org.cloudfoundry.identity.uaa.provider.saml.SamlIdentityProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.provider.ldap.DynamicPasswordComparatorTests", "org.cloudfoundry.identity.uaa.resources.jdbc.JdbcPagingListTests", "org.cloudfoundry.identity.uaa.scim.validate.UaaPasswordPolicyValidatorTests", "org.cloudfoundry.identity.uaa.user.UaaAuthorityTests", "org.cloudfoundry.identity.uaa.config.YamlServletProfileInitializerTests", "org.cloudfoundry.identity.uaa.login.PasscodeMockMvcTests", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneEndpointDocs", "org.cloudfoundry.identity.uaa.authentication.manager.CommonLoginPolicyTest", "org.cloudfoundry.identity.uaa.util.UaaTokenUtilsTest", "org.cloudfoundry.identity.uaa.resources.MessageTests", "org.cloudfoundry.identity.uaa.login.AccountsControllerTest", "org.cloudfoundry.identity.uaa.provider.XOAuthIdentityProviderDefinitionTestx", "org.cloudfoundry.identity.uaa.authentication.manager.ExternalLoginAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.audit.JdbcAuditServiceTests", "org.cloudfoundry.identity.uaa.web.RecognizeFailureDispatcherServletTest", "org.cloudfoundry.identity.uaa.util.LinkedMaskingMultiValueMapTests", "org.cloudfoundry.identity.uaa.authentication.manager.DynamicLdapAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.config.YamlBindingTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpSamlAuthenticationSuccessHandlerTest", "org.cloudfoundry.identity.uaa.authentication.ClientParametersAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.scim.endpoints.OpenIdConnectEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.login.EmailAccountCreationServiceTests", "org.cloudfoundry.identity.uaa.client.OAuth2ClientAuthenticationFilterTests", ":cloudfoundry-identity-model:processResources", "org.cloudfoundry.identity.uaa.user.UaaUserEditorTests", "org.cloudfoundry.identity.uaa.client.SocialClientUserDetailsSourceTests", "org.cloudfoundry.identity.uaa.scim.remote.RemoteScimUserProvisioningTests", "/uaa/uaa/src/test/java/org/springframework/security/ldap/server/ApacheDsSSLContainer.java", ":cloudfoundry-identity-model:jar", "org.cloudfoundry.identity.uaa.security.CsrfAwareEntryPointAndDeniedHandlerTest", ":cloudfoundry-identity-uaa:compileTestJava/uaa/uaa/src/test/java/org/springframework/security/ldap/server/ApacheDsSSLContainer.java", "org.cloudfoundry.identity.uaa.authentication.manager.AuthzAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.login.PasswordConfirmationValidationTest", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneResolvingMockMvcTest", ":cloudfoundry-identity-server:compileJava", "org.cloudfoundry.identity.uaa.oauth.ClientInfoEndpointTests", "org.cloudfoundry.identity.uaa.provider.ldap.ProcessLdapPropertiesTest", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserEndpointDocs", ":cloudfoundry-identity-server:compileJava/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", "org.cloudfoundry.identity.uaa.login.EmailServiceTests", "org.cloudfoundry.identity.uaa.oauth.token.AddTokenGranterTests", "org.cloudfoundry.identity.uaa.config.PasswordPolicyTest", "org.cloudfoundry.identity.uaa.login.ChangeEmailControllerTest", "org.cloudfoundry.identity.uaa.account.event.PasswordChangeEventPublisherTests", "org.cloudfoundry.identity.uaa.login.BootstrapTests", "org.cloudfoundry.identity.uaa.db.StoreSubDomainAsLowerCase_V2_7_3_Tests", "org.cloudfoundry.identity.uaa.provider.saml.LoginSAMLAuthenticationFailureHandlerTest", "org.cloudfoundry.identity.uaa.authentication.AuthzAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.mock.password.PasswordChangeEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.invitations.InvitationsControllerTest", "org.cloudfoundry.identity.uaa.error.UaaExceptionTests", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimUserBootstrapTests", ":cloudfoundry-identity-uaa:classes", "org.cloudfoundry.identity.uaa.config.IdentityProviderBootstrapTest", "org.cloudfoundry.identity.uaa.account.PasswordChangeEndpointTests", ":cloudfoundry-identity-server:classes", ":cloudfoundry-identity-uaa:compileJava", "org.cloudfoundry.identity.uaa.provider.saml.LoginSamlAuthenticationProviderTests", "org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationEndpointTest", "org.cloudfoundry.identity.uaa.zone.event.ServiceProviderModifiedEventTest", "org.cloudfoundry.identity.uaa.login.AuthorizeEndpointDocs", "org.cloudfoundry.identity.uaa.test.UaaTestAccountsTest", "org.cloudfoundry.identity.uaa.scim.endpoints.OpenIdConnectEndpointsDocs", "org.cloudfoundry.identity.uaa.provider.saml.ComparableProviderTest", ":cloudfoundry-identity-model:mainOutputResourcesDir", "org.cloudfoundry.identity.uaa.db.TestThatClientIdIsVchar255", "org.cloudfoundry.identity.uaa.login.SamlLoginServerKeyManagerTests", "org.cloudfoundry.identity.uaa.invitations.InvitationsEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeStoreTests", "org.cloudfoundry.identity.uaa.security.X509ExpiryCheckingTrustManagerTest", "org.cloudfoundry.identity.uaa.mock.providers.IdentityProviderEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.mock.token.TokenKeyEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.mock.token.RefreshTokenMockMvcTests", "org.cloudfoundry.identity.uaa.mock.providers.IdentityProviderEndpointsDocs", "org.cloudfoundry.identity.uaa.scim.endpoints.PasswordResetEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.oauth.UserManagedAuthzApprovalHandlerTests", "org.cloudfoundry.identity.uaa.scim.endpoints.UserInfoEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.JdbcSamlServiceProviderProvisioningTest", "org.cloudfoundry.identity.uaa.oauth.AntPathRedirectResolverTests", "org.cloudfoundry.identity.uaa.util.UaaHttpRequestUtilsTest", "org.cloudfoundry.identity.uaa.web.HealthzEndpointTests", "/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", "/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", "org.cloudfoundry.identity.uaa.oauth.JdbcQueryableClientDetailsServiceTests", "org.cloudfoundry.identity.uaa.user.JdbcUaaUserDatabaseTests", "org.cloudfoundry.identity.uaa.mock.clients.ClientAdminEndpointsDocs", "org.cloudfoundry.identity.uaa.mock.config.HealthzShouldNotBeProtectedMockMvcTests", "org.cloudfoundry.identity.uaa.impl.config.ScimExternalGroupsTypeResolvingFactoryBeanTest", "org.cloudfoundry.identity.uaa.login.AutologinAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.invitations.InvitationsAuthenticationTrustResolverTest", "org.cloudfoundry.identity.uaa.mock.zones.DisableInternalUserManagementFilterMockMvcTests", "org.cloudfoundry.identity.uaa.account.ResetPasswordAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.scim.endpoints.UserIdConversionEndpointsTests", "org.cloudfoundry.identity.uaa.config.YamlConfigurationValidatorTests", ":cloudfoundry-identity-server:jar", "org.cloudfoundry.identity.uaa.util.DomainFilterTest", "org.cloudfoundry.identity.uaa.provider.saml.SamlIdentityProviderDefinitionTests", "org.cloudfoundry.identity.uaa.login.HomeControllerViewTests", "org.cloudfoundry.identity.uaa.oauth.token.TokenKeyEndpointTests", "org.cloudfoundry.identity.uaa.oauth.AccessControllerTests", "org.cloudfoundry.identity.uaa.util.EnsureOldLibrariesAreRemoved", "org.cloudfoundry.identity.uaa.provider.ldap.ExtendedLdapUserMapperTest", "org.cloudfoundry.identity.uaa.scim.ScimUserTests", "org.cloudfoundry.identity.uaa.config.IdentityZoneConfigurationTests", ":cloudfoundry-identity-server:processTestResources", "org.cloudfoundry.identity.uaa.authentication.manager.PeriodLockoutPolicyTests", "org.cloudfoundry.identity.uaa.scim.security.GroupRoleCheckTests", ":cloudfoundry-identity-uaa:processTestResources", "org.cloudfoundry.identity.uaa.scim.endpoints.ChangeEmailEndpointsTest", "org.cloudfoundry.identity.uaa.client.SourceTests", "org.cloudfoundry.identity.uaa.login.UaaResetPasswordServiceTests", "org.cloudfoundry.identity.uaa.config.EnvironmentPropertiesFactoryBeanTests", "org.cloudfoundry.identity.uaa.login.TokenEndpointDocs", "org.cloudfoundry.identity.uaa.account.ResetPasswordAuthenticationEntryPointTests", "org.cloudfoundry.identity.uaa.authentication.manager.LdapLoginAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.mock.ldap.LdapCertificateMockMvcTests", "org.cloudfoundry.identity.uaa.invitations.InvitationsEndpointDocs", "org.cloudfoundry.identity.uaa.login.LoginMockMvcTests", "org.cloudfoundry.identity.uaa.provider.uaa.UaaIdentityProviderConfigValidatorTest", ":cloudfoundry-identity-model:compileJava", "org.cloudfoundry.identity.uaa.scim.endpoints.UserInfoEndpointDocs", "org.cloudfoundry.identity.uaa.audit.JdbcFailedLoginCountingAuditServiceTests", "org.cloudfoundry.identity.uaa.config.YamlMapFactoryBeanTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlConfigurationBeanTest", "org.cloudfoundry.identity.uaa.util.NullifyFieldsTest", "org.cloudfoundry.identity.uaa.oauth.UaaTokenServicesTests", "org.cloudfoundry.identity.uaa.oauth.UaaOauth2ErrorHandlerTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlServiceProviderEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.login.NotificationsServiceTest", ":cloudfoundry-identity-uaa:processResources", "org.cloudfoundry.identity.uaa.authentication.manager.DynamicZoneAwareAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.db.TestSchemaValidation", "org.cloudfoundry.identity.uaa.client.OAuthClientAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationRequestManagerTests", "org.cloudfoundry.identity.uaa.oauth.UaaUserApprovalHandlerTests", "org.cloudfoundry.identity.uaa.authentication.ZoneAwareWhitelistLogoutHandlerTests", "org.cloudfoundry.identity.uaa.provider.LockoutPolicyTests", "org.cloudfoundry.identity.uaa.mock.approvals.ApprovalsMockMvcTests", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthIdentityProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.oauth.RemoteTokenServicesTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.authentication.manager.KeystoneAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupMembershipManagerTests", "org.cloudfoundry.identity.uaa.login.UsernamePasswordExtractingAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.client.ClientMetadataAdminEndpointsMockMvcTest", "org.cloudfoundry.identity.uaa.util.UaaUrlUtilsTest", "org.cloudfoundry.identity.uaa.login.AccountSavingAuthenticationSuccessHandlerTest", "org.cloudfoundry.identity.uaa.zone.IdentityZoneSwitchingFilterTests", "org.cloudfoundry.identity.uaa.client.JdbcClientMetadataProvisioningTest", "org.cloudfoundry.identity.uaa.client.ClientMetadataAdminEndpointsDocs", "org.cloudfoundry.identity.uaa.performance.TestMySQLEmailSearch", "org.cloudfoundry.identity.uaa.mock.token.UserTokenMockMvcTests", "org.cloudfoundry.identity.uaa.login.LoginInfoEndpointDocs", "org.cloudfoundry.identity.uaa.web.CookieBasedCsrfTokenRepositoryTests", "org.cloudfoundry.identity.uaa.client.ClientAdminEndpointsValidatorTests", "org.cloudfoundry.identity.uaa.web.UaaSavedRequestAwareAuthenticationSuccessHandlerTests", "org.cloudfoundry.identity.uaa.zone.JdbcIdentityProviderProvisioningTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserLookupMockMvcTests", "org.cloudfoundry.identity.uaa.util.KeyWithCertTest", "org.cloudfoundry.identity.uaa.mock.ldap.LdapProviderDefinitionDeserializeTests", "org.cloudfoundry.identity.uaa.audit.LineAwareLayoutTest", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeTests", "org.cloudfoundry.identity.uaa.oauth.client.ClientDetailsModificationTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimExternalGroupMappingsEndpointsDocs", "org.cloudfoundry.identity.uaa.oauth.UaaScopesTests", "org.cloudfoundry.identity.uaa.audit.event.EntityDeletedEventTest", "org.cloudfoundry.identity.uaa.config.EnvironmentMapFactoryBeanTests", "org.cloudfoundry.identity.uaa.login.UaaChangePasswordServiceTest", "org.cloudfoundry.identity.uaa.oauth.jwt.JwtHelperTest", "org.cloudfoundry.identity.uaa.scim.endpoints.UserIdConversionEndpointDocs", "org.cloudfoundry.identity.uaa.oauth.ZoneEndpointsClientDetailsValidatorTests"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_211", "original_commit_message": "Fixed CVE-2022-28346 -- Protected QuerySet.annotate(), aggregate(), and extra() against SQL injection in column aliases.\nThanks Splunk team: Preston Elder, Jacob Davis, Jacob Moore,\nMatt Hanson, David Briggs, and a security researcher: Danylo Dmytriiev\n(DDV_UA) for the report.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex c07a4b342a..894aa7db4a 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -40,10 +40,15 @@ from django.db.models.sql.constants import INNER, LOUTER, ORDER_DIR, SINGLE\n from django.db.models.sql.datastructures import BaseTable, Empty, Join, MultiJoin\n from django.db.models.sql.where import AND, OR, ExtraWhere, NothingNode, WhereNode\n from django.utils.functional import cached_property\n+from django.utils.regex_helper import _lazy_re_compile\n from django.utils.tree import Node\n \n __all__ = [\"Query\", \"RawQuery\"]\n \n+# Quotation marks ('\"`[]), whitespace characters, semicolons, or inline\n+# SQL comments are forbidden in column aliases.\n+FORBIDDEN_ALIAS_PATTERN = _lazy_re_compile(r\"['`\\\"\\]\\[;\\s]|--|/\\*|\\*/\")\n+\n \n def get_field_names_from_opts(opts):\n     if opts is None:\n@@ -1091,8 +1096,16 @@ class Query(BaseExpression):\n             alias = seen[int_model] = join_info.joins[-1]\n         return alias or seen[None]\n \n+    def check_alias(self, alias):\n+        if FORBIDDEN_ALIAS_PATTERN.search(alias):\n+            raise ValueError(\n+                \"Column aliases cannot contain whitespace characters, quotation marks, \"\n+                \"semicolons, or SQL comments.\"\n+            )\n+\n     def add_annotation(self, annotation, alias, is_summary=False, select=True):\n         \"\"\"Add a single annotation expression to the Query.\"\"\"\n+        self.check_alias(alias)\n         annotation = annotation.resolve_expression(\n             self, allow_joins=True, reuse=None, summarize=is_summary\n         )\n@@ -2269,6 +2282,7 @@ class Query(BaseExpression):\n             else:\n                 param_iter = iter([])\n             for name, entry in select.items():\n+                self.check_alias(name)\n                 entry = str(entry)\n                 entry_params = []\n                 pos = entry.find(\"%s\")\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 3922478bf3..61da0ebfe7 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -2048,6 +2048,15 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertEqual(len(qs), 6)\n \n+    def test_alias_sql_injection(self):\n+        crafted_alias = \"\"\"injected_name\" from \"aggregation_author\"; --\"\"\"\n+        msg = (\n+            \"Column aliases cannot contain whitespace characters, quotation marks, \"\n+            \"semicolons, or SQL comments.\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            Author.objects.aggregate(**{crafted_alias: Avg(\"age\")})\n+\n     def test_exists_extra_where_with_aggregate(self):\n         qs = Book.objects.annotate(\n             count=Count(\"id\"),\n\ndiff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex 5106a377ac..52a268c4ae 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -1076,6 +1076,40 @@ class NonAggregateAnnotationTestCase(TestCase):\n             ],\n         )\n \n+    def test_alias_sql_injection(self):\n+        crafted_alias = \"\"\"injected_name\" from \"annotations_book\"; --\"\"\"\n+        msg = (\n+            \"Column aliases cannot contain whitespace characters, quotation marks, \"\n+            \"semicolons, or SQL comments.\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            Book.objects.annotate(**{crafted_alias: Value(1)})\n+\n+    def test_alias_forbidden_chars(self):\n+        tests = [\n+            'al\"ias',\n+            \"a'lias\",\n+            \"ali`as\",\n+            \"alia s\",\n+            \"alias\\t\",\n+            \"ali\\nas\",\n+            \"alias--\",\n+            \"ali/*as\",\n+            \"alias*/\",\n+            \"alias;\",\n+            # [] are used by MSSQL.\n+            \"alias[\",\n+            \"alias]\",\n+        ]\n+        msg = (\n+            \"Column aliases cannot contain whitespace characters, quotation marks, \"\n+            \"semicolons, or SQL comments.\"\n+        )\n+        for crafted_alias in tests:\n+            with self.subTest(crafted_alias):\n+                with self.assertRaisesMessage(ValueError, msg):\n+                    Book.objects.annotate(**{crafted_alias: Value(1)})\n+\n \n class AliasTests(TestCase):\n     @classmethod\n@@ -1339,3 +1373,12 @@ class AliasTests(TestCase):\n             with self.subTest(operation=operation):\n                 with self.assertRaisesMessage(FieldError, msg):\n                     getattr(qs, operation)(\"rating_alias\")\n+\n+    def test_alias_sql_injection(self):\n+        crafted_alias = \"\"\"injected_name\" from \"annotations_book\"; --\"\"\"\n+        msg = (\n+            \"Column aliases cannot contain whitespace characters, quotation marks, \"\n+            \"semicolons, or SQL comments.\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            Book.objects.alias(**{crafted_alias: Value(1)})\n\ndiff --git a/tests/expressions/test_queryset_values.py b/tests/expressions/test_queryset_values.py\nindex 147f02fffb..0dba623167 100644\n--- a/tests/expressions/test_queryset_values.py\n+++ b/tests/expressions/test_queryset_values.py\n@@ -34,6 +34,15 @@ class ValuesExpressionsTests(TestCase):\n             [{\"salary\": 10}, {\"salary\": 20}, {\"salary\": 30}],\n         )\n \n+    def test_values_expression_alias_sql_injection(self):\n+        crafted_alias = \"\"\"injected_name\" from \"expressions_company\"; --\"\"\"\n+        msg = (\n+            \"Column aliases cannot contain whitespace characters, quotation marks, \"\n+            \"semicolons, or SQL comments.\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            Company.objects.values(**{crafted_alias: F(\"ceo__salary\")})\n+\n     def test_values_expression_group_by(self):\n         # values() applies annotate() first, so values selected are grouped by\n         # id, not firstname.\n\ndiff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex f9d2ebf98f..7b70a5ae0a 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1898,6 +1898,15 @@ class Queries5Tests(TestCase):\n             Note.objects.extra(select={\"foo\": \"'bar %%s'\"})[0].foo, \"bar %s\"\n         )\n \n+    def test_extra_select_alias_sql_injection(self):\n+        crafted_alias = \"\"\"injected_name\" from \"queries_note\"; --\"\"\"\n+        msg = (\n+            \"Column aliases cannot contain whitespace characters, quotation marks, \"\n+            \"semicolons, or SQL comments.\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            Note.objects.extra(select={crafted_alias: \"1\"})\n+\n     def test_queryset_reuse(self):\n         # Using querysets doesn't mutate aliases.\n         authors = Author.objects.filter(Q(name=\"a1\") | Q(name=\"nonexistent\"))\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "93cae5cb2f9a4ef1514cf1a41f714fef08005200", "source_date": "Mon Apr 11 08:59:33 2022 +0200", "source_tag": "4.1", "target_commit": "800828887a0509ad1162d6d407e94d8de7eafc60", "target_date": "Mon Apr 11 09:02:14 2022 +0200", "target_tag": "4.0.4", "FAIL TO PASS": ["aggregation.tests.AggregateTestCase.test_alias_sql_injection", "expressions.test_queryset_values.ValuesExpressionsTests.test_values_expression_alias_sql_injection"], "PASS TO PASS": ["aggregation.tests.AggregateTestCase.test_aggregation_default_after_annotation", "aggregation.tests.AggregateTestCase.test_aggregation_default_using_decimal_from_python", "expressions.test_queryset_values.ValuesExpressionsTests.test_values_expression", "queries.tests.RawQueriesTests.test_ticket14729", "aggregation.tests.AggregateTestCase.test_aggregate_alias", "aggregation.tests.AggregateTestCase.test_values_aggregation", "    Creating table queries_bo", "queries.tests.DisjunctiveFilterTests.test_ticket8283", "aggregation.tests.AggregateTestCase.test_reverse_fkey_annotate", "queries.tests.ExistsSql.test_exists", "aggregation.tests.AggregateTestCase.test_aggregation_default_using_date_from_database", "aggregation.tests.AggregateTestCase.test_filter_aggregate", "aggregation.tests.AggregateTestCase.test_empty_aggregate", "expressions.test_queryset_values.ValuesExpressionsTests.test_chained_values_with_expression", "Sum on a distinct() QuerySet should aggregate only the distinct items.", "    Creating table aggregation_bo", "aggregation.tests.AggregateTestCase.test_annotate_ordering", "queries.tests.NullableRelOrderingTests.test_ticket10028", "aggregation.tests.AggregateTestCase.test_exists_none_with_aggregate", "aggregation.tests.AggregateTestCase.test_aggregation_default_passed_another_aggregate", "aggregation.tests.AggregateTestCase.test_distinct_on_aggregate", "queries.tests.Exclude15786.test_ticket15786", "queries.tests.Queries3Tests.test_datetimes_invalid_field", "aggregation.tests.AggregateTestCase.test_multiple_aggregates", "aggregation.tests.AggregateTestCase.test_aggregate_in_order_by", "aggregation.tests.AggregateTestCase.test_aggregation_exists_annotation", "queries.tests.EmptyStringsAsNullTest.test_21001", "aggregation.tests.AggregateTestCase.test_aggregation_nested_subquery_outerref", "Subquery annotations and external aliases are excluded from the GROUP", "aggregation.tests.AggregateTestCase.test_complex_aggregations_require_kwarg", "queries.tests.NullableRelOrderingTests.test_join_already_in_query", "aggregation.tests.AggregateTestCase.test_aggregate_join_transform", "aggregation.tests.AggregateTestCase.test_aggregate_annotation", "aggregation.tests.AggregateTestCase.test_single_aggregate", "Subquery annotations are included in the GROUP BY if they are", "aggregation.tests.AggregateTestCase.test_aggregation_subquery_annotation_related_field", "aggregation.tests.AggregateTestCase.test_aggregation_default_using_date_from_python", "aggregation.tests.AggregateTestCase.test_aggregation_default_zero", "aggregation.tests.AggregateTestCase.test_related_aggregate", "aggregation.tests.AggregateTestCase.test_avg_decimal_field", "aggregation.tests.AggregateTestCase.test_count_distinct_expression", "aggregation.tests.AggregateTestCase.test_aggregation_default_using_time_from_python", ".dates() returns a distinct set of dates when applied to a", "Subquery annotations are excluded from the GROUP BY if they are", "aggregation.tests.AggregateTestCase.test_annotation", "aggregation.tests.AggregateTestCase.test_more_aggregation", "aggregation.tests.AggregateTestCase.test_aggregation_subquery_annotation_exists", "aggregation.tests.AggregateTestCase.test_count", "Aggregation over sliced queryset works correctly.", "Subquery annotations must be included in the GROUP BY if they use", "aggregation.tests.AggregateTestCase.test_aggregate_transform", "queries.tests.EmptyStringsAsNullTest.test_joined_exclude", "queries.tests.Queries3Tests.test_ticket22023", "queries.tests.DisjunctiveFilterTests.test_ticket7872", "aggregation.tests.AggregateTestCase.test_nonaggregate_aggregation_throws", "aggregation.tests.AggregateTestCase.test_annotate_basic", "aggregation.tests.AggregateTestCase.test_aggregate_multi_join", "Doing exclude() on a foreign model after annotate() doesn't crash.", "aggregation.tests.AggregateTestCase.test_annotate_values_aggregate", "queries.tests.IsNullTests.test_primary_key", "aggregation.tests.AggregateTestCase.test_aggregation_default_using_datetime_from_database", "aggregation.tests.AggregateTestCase.test_aggregation_default_unsupported_by_count", "queries.tests.WhereNodeTest.test_empty_full_handling_disjunction", "aggregation.tests.AggregateTestCase.test_avg_duration_field", "aggregation.tests.AggregateTestCase.test_coalesced_empty_result_set", "Can create an instance of a model with only the PK field (#17056).\"", "queries.tests.EmptyStringsAsNullTest.test_direct_exclude", "Cloning a queryset does not get out of hand. While complete", "aggregation.tests.AggregateTestCase.test_count_star", "aggregation.tests.AggregateTestCase.test_annotate_m2m", "queries.tests.SelectRelatedTests.test_tickets_3045_3288", "Subqueries do not needlessly contain ORDER BY, SELECT FOR UPDATE or", "queries.tests.EscapingTests.test_ticket_7302", "Exists annotations are included in the GROUP BY if they are", "aggregation.tests.AggregateTestCase.test_annotate_values_list", "aggregation.tests.AggregateTestCase.test_backwards_m2m_annotate", "Generating the query string doesn't alter the query's state", "aggregation.tests.AggregateTestCase.test_empty_result_optimization", "aggregation.tests.AggregateTestCase.test_decimal_max_digits_has_no_effect", "queries.tests.IsNullTests.test_to_field", "queries.tests.CustomPkTests.test_ticket7371", "If a queryset is already evaluated, it can still be used as a query arg.", "aggregation.tests.AggregateTestCase.test_annotation_expressions", "queries.tests.DoubleInSubqueryTests.test_double_subquery_in", "aggregation.tests.AggregateTestCase.test_values_annotation_with_expression", "aggregation.tests.AggregateTestCase.test_aggregation_default_not_in_aggregate", "queries.tests.WhereNodeTest.test_empty_nodes", "aggregation.tests.AggregateTestCase.test_aggregation_subquery_annotation_values_collision", "queries.tests.WhereNodeTest.test_empty_full_handling_conjunction", "An annotation not included in values() before an aggregate should be", "aggregation.tests.AggregateTestCase.test_aggregation_default_compound_expression", "queries.tests.ComparisonTests.test_ticket8597", "aggregation.tests.AggregateTestCase.test_annotate_defer", "Random() is not included in the GROUP BY when used for ordering.", "expressions.test_queryset_values.ValuesExpressionsTests.test_values_expression_group_by", "aggregation.tests.AggregateTestCase.test_aggregation_order_by_not_selected_annotation_values", "aggregation.tests.AggregateTestCase.test_arguments_must_be_expressions", "aggregation.tests.AggregateTestCase.test_aggregate_over_complex_annotation", "aggregation.tests.AggregateTestCase.test_aggregation_default_unset", "aggregation.tests.AggregateTestCase.test_combine_different_types", "aggregation.tests.AggregateTestCase.test_aggregation_default_using_datetime_from_python", "aggregation.tests.AggregateTestCase.test_annotate_values", "aggregation.tests.AggregateTestCase.test_annotate_defer_select_related", "aggregation.tests.AggregateTestCase.test_even_more_aggregate", "queries.tests.ConditionalTests.test_in_list_limit", "aggregation.tests.AggregateTestCase.test_order_of_precedence", "expressions.test_queryset_values.ValuesExpressionsTests.test_values_list_expression_flat", "aggregation.tests.AggregateTestCase.test_aggregation_default_using_decimal_from_database", "queries.tests.ForeignKeyToBaseExcludeTests.test_ticket_21787", "aggregation.tests.AggregateTestCase.test_aggregation_expressions", "aggregation.tests.AggregateTestCase.test_exists_extra_where_with_aggregate", "aggregation.tests.AggregateTestCase.test_multi_arg_aggregate", "aggregation.tests.AggregateTestCase.test_aggregation_default_integer", "queries.tests.ExistsSql.test_ticket_18414", "aggregation.tests.AggregateTestCase.test_annotate_over_annotate", "aggregation.tests.AggregateTestCase.test_add_implementation", "aggregation.tests.AggregateTestCase.test_expression_on_aggregation", "queries.tests.ConditionalTests.test_infinite_loop", "aggregation.tests.AggregateTestCase.test_aggregate_over_aggregate", "    Creating table annotations_bo", "aggregation.tests.AggregateTestCase.test_complex_values_aggregation", "aggregation.tests.AggregateTestCase.test_aggregation_default_group_by", "expressions.test_queryset_values.ValuesExpressionsTests.test_values_list_expression", "queries.tests.TestInvalidValuesRelation.test_invalid_values", "aggregation.tests.AggregateTestCase.test_sum_duration_field", "aggregation.tests.AggregateTestCase.test_fkey_aggregate", "aggregation.tests.AggregateTestCase.test_aggregation_default_expression", "aggregation.tests.AggregateTestCase.test_annotated_aggregate_over_annotated_aggregate", "An annotation included in values() before an aggregate should be", "aggregation.tests.AggregateTestCase.test_filtering", "queries.tests.Queries3Tests.test_ticket7107", "aggregation.tests.AggregateTestCase.test_nonfield_annotation", "aggregation.tests.AggregateTestCase.test_aggregation_default_using_duration_from_python", "aggregation.tests.AggregateTestCase.test_aggregation_default_using_time_from_database", "aggregation.tests.AggregateTestCase.test_aggregation_default_using_duration_from_database"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_1237", "original_commit_message": "Validate client ID for approvals\n[#143844261] https://www.pivotaltracker.com/story/show/143844261", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/account/ProfileController.java b/server/src/main/java/org/cloudfoundry/identity/uaa/account/ProfileController.java\nindex d4da04278..a1a2cff64 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/account/ProfileController.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/account/ProfileController.java\n@@ -12,21 +12,27 @@\n  *******************************************************************************/\n package org.cloudfoundry.identity.uaa.account;\n \n-import org.cloudfoundry.identity.uaa.authentication.UaaPrincipal;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.cloudfoundry.identity.uaa.approval.Approval;\n import org.cloudfoundry.identity.uaa.approval.ApprovalsService;\n import org.cloudfoundry.identity.uaa.approval.DescribedApproval;\n-import org.cloudfoundry.identity.uaa.oauth.client.ClientConstants;\n+import org.cloudfoundry.identity.uaa.authentication.UaaPrincipal;\n import org.cloudfoundry.identity.uaa.constants.OriginKeys;\n-import org.cloudfoundry.identity.uaa.approval.Approval;\n+import org.cloudfoundry.identity.uaa.oauth.client.ClientConstants;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.oauth2.provider.ClientDetails;\n import org.springframework.security.oauth2.provider.ClientDetailsService;\n+import org.springframework.security.oauth2.provider.NoSuchClientException;\n import org.springframework.stereotype.Controller;\n import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.servlet.View;\n+import org.springframework.web.servlet.view.RedirectView;\n \n import java.util.ArrayList;\n import java.util.Collection;\n@@ -37,6 +43,8 @@ import java.util.Map;\n @Controller\n public class ProfileController {\n \n+    protected static Log logger = LogFactory.getLog(ProfileController.class);\n+\n     private final ApprovalsService approvalsService;\n     private final ClientDetailsService clientDetailsService;\n \n@@ -108,6 +116,13 @@ public class ProfileController {\n         return \"redirect:profile\";\n     }\n \n+    @ExceptionHandler\n+    public View handleException(NoSuchClientException nsce) {\n+        logger.debug(\"Unable to find client for approvals:\"+nsce.getMessage());\n+        return new RedirectView(\"profile?error_message_code=request.invalid_parameter\", true);\n+    }\n+\n+\n     private boolean isUaaManagedUser(Authentication authentication) {\n         if (authentication.getPrincipal() instanceof UaaPrincipal) {\n             UaaPrincipal principal = (UaaPrincipal) authentication.getPrincipal();\n\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/approval/ApprovalsAdminEndpoints.java b/server/src/main/java/org/cloudfoundry/identity/uaa/approval/ApprovalsAdminEndpoints.java\nindex ccbfee612..bdaa4db55 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/approval/ApprovalsAdminEndpoints.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/approval/ApprovalsAdminEndpoints.java\n@@ -1,5 +1,5 @@\n /*******************************************************************************\n- *     Cloud Foundry \n+ *     Cloud Foundry\n  *     Copyright (c) [2009-2016] Pivotal Software, Inc. All Rights Reserved.\n  *\n  *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n@@ -12,41 +12,45 @@\n  *******************************************************************************/\n package org.cloudfoundry.identity.uaa.approval;\n \n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-import org.cloudfoundry.identity.uaa.oauth.client.ClientConstants;\n-import org.cloudfoundry.identity.uaa.web.ConvertingExceptionView;\n-import org.cloudfoundry.identity.uaa.web.ExceptionReport;\n import org.cloudfoundry.identity.uaa.error.UaaException;\n import org.cloudfoundry.identity.uaa.resources.ActionResult;\n import org.cloudfoundry.identity.uaa.security.DefaultSecurityContextAccessor;\n import org.cloudfoundry.identity.uaa.security.SecurityContextAccessor;\n import org.cloudfoundry.identity.uaa.user.UaaUserDatabase;\n import org.cloudfoundry.identity.uaa.util.UaaPagingUtils;\n+import org.cloudfoundry.identity.uaa.web.ConvertingExceptionView;\n+import org.cloudfoundry.identity.uaa.web.ExceptionReport;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.http.converter.HttpMessageConverter;\n import org.springframework.security.access.AccessDeniedException;\n import org.springframework.security.core.userdetails.UsernameNotFoundException;\n-import org.springframework.security.oauth2.provider.ClientDetails;\n import org.springframework.security.oauth2.provider.ClientDetailsService;\n+import org.springframework.security.oauth2.provider.NoSuchClientException;\n import org.springframework.security.oauth2.provider.client.BaseClientDetails;\n import org.springframework.stereotype.Controller;\n import org.springframework.util.Assert;\n import org.springframework.util.StringUtils;\n-import org.springframework.web.bind.annotation.*;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n import org.springframework.web.client.RestTemplate;\n import org.springframework.web.servlet.View;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n @Controller\n public class ApprovalsAdminEndpoints implements InitializingBean, ApprovalsControllerService {\n \n@@ -168,6 +172,7 @@ public class ApprovalsAdminEndpoints implements InitializingBean, ApprovalsContr\n     @ResponseBody\n     @Override\n     public List<Approval> updateClientApprovals(@PathVariable String clientId, @RequestBody Approval[] approvals) {\n+        clientDetailsService.loadClientByClientId(clientId);\n         String currentUserId = getCurrentUserId();\n         logger.debug(\"Updating approvals for user: \" + currentUserId);\n         approvalStore.revokeApprovals(String.format(USER_AND_CLIENT_FILTER_TEMPLATE, currentUserId, clientId));\n@@ -202,10 +207,17 @@ public class ApprovalsAdminEndpoints implements InitializingBean, ApprovalsContr\n     public ActionResult revokeApprovals(@RequestParam(required = true) String clientId) {\n         String username = getCurrentUserId();\n         logger.debug(\"Revoking all existing approvals for user: \" + username + \" and client \" + clientId);\n+        clientDetailsService.loadClientByClientId(clientId);\n         approvalStore.revokeApprovals(String.format(USER_AND_CLIENT_FILTER_TEMPLATE, username, clientId));\n         return new ActionResult(\"ok\", \"Approvals of user \" + username + \" and client \" + clientId + \" revoked\");\n     }\n \n+    @ExceptionHandler\n+    public View handleException(NoSuchClientException nsce) {\n+        logger.debug(\"Client not found:\"+nsce.getMessage());\n+        return handleException(new UaaException(nsce.getMessage(), 404));\n+    }\n+\n     @ExceptionHandler\n     public View handleException(Exception t) {\n         UaaException e = t instanceof UaaException ? (UaaException) t : new UaaException(\"Unexpected error\",\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/approval/ApprovalsAdminEndpointsTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/approval/ApprovalsAdminEndpointsTests.java\nindex d63278e0a..2ecc1e47c 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/approval/ApprovalsAdminEndpointsTests.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/approval/ApprovalsAdminEndpointsTests.java\n@@ -1,5 +1,5 @@\n /*******************************************************************************\n- *     Cloud Foundry \n+ *     Cloud Foundry\n  *     Copyright (c) [2009-2016] Pivotal Software, Inc. All Rights Reserved.\n  *\n  *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n@@ -12,30 +12,12 @@\n  *******************************************************************************/\n package org.cloudfoundry.identity.uaa.oauth.approval;\n \n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.Date;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-\n-import static org.cloudfoundry.identity.uaa.approval.Approval.ApprovalStatus.APPROVED;\n-import static org.cloudfoundry.identity.uaa.approval.Approval.ApprovalStatus.DENIED;\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.core.Is.is;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-\n import com.fasterxml.jackson.core.type.TypeReference;\n import org.cloudfoundry.identity.uaa.approval.Approval;\n+import org.cloudfoundry.identity.uaa.approval.Approval.ApprovalStatus;\n import org.cloudfoundry.identity.uaa.approval.ApprovalsAdminEndpoints;\n import org.cloudfoundry.identity.uaa.approval.JdbcApprovalStore;\n-import org.cloudfoundry.identity.uaa.oauth.client.ClientConstants;\n import org.cloudfoundry.identity.uaa.error.UaaException;\n-import org.cloudfoundry.identity.uaa.approval.Approval.ApprovalStatus;\n import org.cloudfoundry.identity.uaa.resources.jdbc.JdbcPagingListFactory;\n import org.cloudfoundry.identity.uaa.resources.jdbc.SimpleSearchQueryConverter;\n import org.cloudfoundry.identity.uaa.security.SecurityContextAccessor;\n@@ -48,14 +30,34 @@ import org.cloudfoundry.identity.uaa.user.UaaUserDatabase;\n import org.cloudfoundry.identity.uaa.util.JsonUtils;\n import org.junit.After;\n import org.junit.Before;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.security.oauth2.provider.NoSuchClientException;\n import org.springframework.security.oauth2.provider.client.BaseClientDetails;\n import org.springframework.security.oauth2.provider.client.InMemoryClientDetailsService;\n \n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.cloudfoundry.identity.uaa.approval.Approval.ApprovalStatus.APPROVED;\n+import static org.cloudfoundry.identity.uaa.approval.Approval.ApprovalStatus.DENIED;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n public class ApprovalsAdminEndpointsTests extends JdbcTestBase {\n     private UaaTestAccounts testAccounts = null;\n-    \n+\n     private JdbcApprovalStore dao;\n \n     private UaaUserDatabase userDao = null;\n@@ -64,6 +66,9 @@ public class ApprovalsAdminEndpointsTests extends JdbcTestBase {\n \n     private ApprovalsAdminEndpoints endpoints;\n \n+    @Rule\n+    public ExpectedException exception = ExpectedException.none();\n+\n     @Before\n     public void initApprovalsAdminEndpointsTests() {\n         testAccounts = UaaTestAccounts.standard(null);\n@@ -114,6 +119,21 @@ public class ApprovalsAdminEndpointsTests extends JdbcTestBase {\n         assertThat(jdbcTemplate.queryForObject(\"select count(*) from users\", Integer.class), is(0));\n     }\n \n+    @Test\n+    public void validate_client_id_on_revoke() throws Exception {\n+        exception.expect(NoSuchClientException.class);\n+        exception.expectMessage(\"No client with requested id: invalid_id\");\n+        endpoints.revokeApprovals(\"invalid_id\");\n+    }\n+\n+    @Test\n+    public void validate_client_id_on_update() throws Exception {\n+        exception.expect(NoSuchClientException.class);\n+        exception.expectMessage(\"No client with requested id: invalid_id\");\n+        endpoints.updateClientApprovals(\"invalid_id\", new Approval[0]);\n+    }\n+\n+\n     @Test\n     public void canGetApprovals() {\n         addApproval(marissa.getId(), \"c1\", \"uaa.user\", 6000, APPROVED);\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/approvals/ApprovalsMockMvcTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/approvals/ApprovalsMockMvcTests.java\nindex 36a43c5ea..9a2c30e76 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/approvals/ApprovalsMockMvcTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/approvals/ApprovalsMockMvcTests.java\n@@ -50,6 +50,7 @@ import static org.springframework.test.web.servlet.request.MockMvcRequestBuilder\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.header;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrlPattern;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n@@ -128,6 +129,37 @@ public class ApprovalsMockMvcTests extends AbstractTokenMockMvcTests {\n             .andExpect(status().isFound()); //approval page no longer showing up\n     }\n \n+    @Test\n+    public void revoke() throws Exception {\n+        test_oauth_authorize_without_csrf();\n+        MockHttpSession session = getAuthenticatedSession(user1);\n+        getMockMvc().perform(\n+            post(\"/profile\")\n+                .with(cookieCsrf())\n+                .param(\"delete\",\"true\")\n+                .param(\"clientId\", client1.getClientId())\n+                .session(session)\n+        )\n+            .andExpect(status().isFound())\n+            .andExpect(header().string(\"Location\", \"profile\"));\n+\n+    }\n+\n+    @Test\n+    public void revoke_invalid_client() throws Exception {\n+        test_oauth_authorize_without_csrf();\n+        MockHttpSession session = getAuthenticatedSession(user1);\n+        getMockMvc().perform(\n+            post(\"/profile\")\n+                .with(cookieCsrf())\n+                .param(\"delete\",\"true\")\n+                .param(\"clientId\", \"invalid_id\")\n+                .session(session)\n+        )\n+            .andExpect(status().isFound())\n+            .andExpect(header().string(\"Location\", \"profile?error_message_code=request.invalid_parameter\"));\n+    }\n+\n     @Test\n     public void test_get_approvals() throws Exception {\n         test_oauth_authorize_without_csrf();\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "5eb43757d5a3a2c9e7aae1ef3d0b9b7e2a38851e", "source_date": "Mon Apr 17 17:26:16 2017 -0700", "source_tag": "3.15.0", "target_commit": "24c270ce725df890727b2bd7d8a4f338a3a58b7a", "target_date": "Mon Apr 17 20:45:14 2017 -0700", "target_tag": "3.6.8", "FAIL TO PASS": ["org.cloudfoundry.identity.uaa.oauth.approval.ApprovalsAdminEndpointsTests > validate_client_id_on_revoke", "org.cloudfoundry.identity.uaa.oauth.approval.ApprovalsAdminEndpointsTests > validate_client_id_on_update", "org.cloudfoundry.identity.uaa.mock.DefaultConfigurationTestSuite > org.cloudfoundry.identity.uaa.mock.approvals.ApprovalsMockMvcTests.revoke_invalid_client"], "PASS TO PASS": ["org.cloudfoundry.identity.uaa.zone.event.IdentityProviderModifiedEventTest", "org.cloudfoundry.identity.uaa.oauth.approval.ApprovalTests", "org.cloudfoundry.identity.uaa.provider.ldap.LdapIdentityProviderDefinitionTest", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.ZoneAwareIdpMetadataGeneratorTest", "org.cloudfoundry.identity.uaa.login.LoginInfoEndpointTests", "org.cloudfoundry.identity.uaa.provider.saml.BootstrapSamlIdentityProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupExternalMembershipManagerTests", "org.cloudfoundry.identity.uaa.user.BCryptPasswordEncoderTest", "org.cloudfoundry.identity.uaa.login.XFrameOptionsTheories", "org.cloudfoundry.identity.uaa.mock.token.CheckTokenEndpointDocs", ":cloudfoundry-identity-server:compileTestJava", "org.cloudfoundry.identity.uaa.login.ResetPasswordControllerTest", "org.cloudfoundry.identity.uaa.authentication.login.RemoteAuthenticationEndpointTests", "org.cloudfoundry.identity.uaa.audit.event.ApprovalModifiedEventTest", "org.cloudfoundry.identity.uaa.provider.saml.ZoneAwareMetadataGeneratorTests", ":cloudfoundry-identity-server:processResources", "org.cloudfoundry.identity.uaa.openid.UserInfoEndpointTests", "org.cloudfoundry.identity.uaa.web.UaaSessionCookieConfigTest", "org.cloudfoundry.identity.uaa.client.ClientAdminBootstrapTests", "org.cloudfoundry.identity.uaa.test.CreateDB", "org.cloudfoundry.identity.uaa.audit.event.AuditListenerTests", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.SamlServiceProviderDefinitionTest", ":cloudfoundry-identity-uaa:testClasses", "org.cloudfoundry.identity.uaa.BootstrapTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpWebSsoProfileImplTest", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupProvisioningTests", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimExternalGroupBootstrapTests", "org.cloudfoundry.identity.uaa.oauth.UaaTokenStoreTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.zone.IdentityZoneResolvingFilterTests", "org.cloudfoundry.identity.uaa.oauth.token.KeyInfoTests", "org.cloudfoundry.identity.uaa.authentication.WhitelistLogoutHandlerTest", "org.cloudfoundry.identity.uaa.authentication.manager.ScopeAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.SamlServiceProviderConfiguratorTest", "org.cloudfoundry.identity.uaa.mock.clients.ClientAdminEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.mock.DefaultDocsTestSuite", "org.cloudfoundry.identity.uaa.account.PasswordCheckEndpointTests", "org.cloudfoundry.identity.uaa.mock.oauth.CheckDefaultAuthoritiesMvcMockTests", ":cloudfoundry-identity-model:gitInfo", "org.cloudfoundry.identity.uaa.login.ChangePasswordControllerTest", "org.cloudfoundry.identity.uaa.config.YamlPropertiesFactoryBeanTests", "org.cloudfoundry.identity.uaa.provider.saml.FixedHttpMetaDataProviderTest", "org.cloudfoundry.identity.uaa.authentication.manager.LoginAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.user.InMemoryUaaUserDatabaseTests", "org.cloudfoundry.identity.uaa.security.web.CorsFilterTests", "org.cloudfoundry.identity.uaa.util.UaaMapUtilsTest", "org.cloudfoundry.identity.uaa.provider.saml.SamlMockMvcTests", "org.cloudfoundry.identity.uaa.security.web.SecurityFilterChainPostProcessorTests", "org.cloudfoundry.identity.uaa.scim.ScimGroupMemberTests", "org.cloudfoundry.identity.uaa.zone.JdbcIdentityZoneProvisioningTests", "org.cloudfoundry.identity.uaa.client.ClientAdminEndpointsTests", "org.cloudfoundry.identity.uaa.login.util.FakeJavaMailSenderTest", "org.cloudfoundry.identity.uaa.codestore.CodeStoreEndpointsTests", "org.cloudfoundry.identity.uaa.login.util.LocalUaaRestTemplateMockMvcTests", "org.cloudfoundry.identity.uaa.scim.endpoints.PasswordResetEndpointTest", "org.cloudfoundry.identity.uaa.web.ForwardAwareInternalResourceViewResolverTests", "org.cloudfoundry.identity.uaa.web.ExceptionReportHttpMessageConverterTest", "org.cloudfoundry.identity.uaa.oauth.DisableIdTokenResponseTypeFilterTest", "org.cloudfoundry.identity.uaa.oauth.approval.JdbcApprovalStoreTests", "org.cloudfoundry.identity.uaa.mock.codestore.ExpiringCodeStoreMockMvcTests", "org.cloudfoundry.identity.uaa.db.TableAndColumnNormalizationTest", "org.cloudfoundry.identity.uaa.provider.saml.SamlIDPRefreshMockMvcTests", "org.cloudfoundry.identity.uaa.login.InvitationsServiceMockMvcTests", "org.cloudfoundry.identity.uaa.util.UaaPagingUtilsTests", "org.cloudfoundry.identity.uaa.db.RevocableTokenTableTest", "org.cloudfoundry.identity.uaa.authentication.listener.UserAuthenticationSuccessListenerTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsTests", "org.cloudfoundry.identity.uaa.util.TokenValidationTest", "org.cloudfoundry.identity.uaa.provider.saml.SamlRedirectUtilsTest", "org.cloudfoundry.identity.uaa.mock.authentication.AuthzAuthenticationManagerConfigurationTests", "org.cloudfoundry.identity.uaa.login.EmailChangeEmailServiceTest", "org.cloudfoundry.identity.uaa.util.CachingPasswordEncoderTest", "org.cloudfoundry.identity.uaa.authorization.external.LdapGroupMappingAuthorizationManagerTests", "org.cloudfoundry.identity.uaa.mock.token.TokenKeyEndpointDocs", "org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationSerializationTests", ":cloudfoundry-identity-server:testClasses", "org.cloudfoundry.identity.uaa.oauth.expression.IsSelfCheckTest", "org.cloudfoundry.identity.uaa.zone.MultitenantJdbcClientDetailsServiceTests", "org.cloudfoundry.identity.uaa.db.TestZonifyGroupSchema_V2_4_1", "org.cloudfoundry.identity.uaa.mock.zones.DisableUserManagementSecurityFilterMockMvcTest", "org.cloudfoundry.identity.uaa.login.ProfileControllerTests", "org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcherTests", "org.cloudfoundry.identity.uaa.audit.AuditEventTypeTests", "org.cloudfoundry.identity.uaa.scim.jdbc.ScimSearchQueryConverterTests", "org.cloudfoundry.identity.uaa.oauth.RestrictUaaScopesClientValidatorTest", ":cloudfoundry-identity-uaa:compileTestJava", "org.cloudfoundry.identity.uaa.login.EmailInvitationsServiceTests", "org.cloudfoundry.identity.uaa.config.IdentityZoneConfigurationBootstrapTests", "org.cloudfoundry.identity.uaa.provider.saml.ConfigMetadataProviderTest", "org.cloudfoundry.identity.uaa.scim.ScimCoreTests", "org.cloudfoundry.identity.uaa.login.AccountsControllerMockMvcTests", "org.cloudfoundry.identity.uaa.mock.ldap.LdapMockMvcTests", ":cloudfoundry-identity-model:classes", "org.cloudfoundry.identity.uaa.util.UaaStringUtilsTest", "org.cloudfoundry.identity.uaa.zone.event.IdentityZoneModifiedEventTest", "org.cloudfoundry.identity.uaa.security.DefaultSecurityContextAccessorTests", "org.cloudfoundry.identity.uaa.config.NestedMapPropertySourceTests", "org.cloudfoundry.identity.uaa.UaaConfigurationTests", "org.cloudfoundry.identity.uaa.oauth.CheckTokenEndpointTests", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimUserProvisioningTests", "org.cloudfoundry.identity.uaa.authentication.SessionResetFilterTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserEndpointsTests", "org.cloudfoundry.identity.uaa.authentication.manager.CheckIdpEnabledAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.oauth.event.ClientAdminEventPublisherTests", "org.cloudfoundry.identity.uaa.mock.token.TokenMvcMockTests", "org.cloudfoundry.identity.uaa.authentication.manager.ChainedAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.oauth.token.JdbcRevocableTokenProvisioningTest", "org.cloudfoundry.identity.uaa.error.ConvertingExceptionViewTests", "org.cloudfoundry.identity.uaa.scim.exception.InvalidPasswordExceptionTest", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimGroupBootstrapTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsDocs", "org.cloudfoundry.identity.uaa.mock.audit.AuditCheckMockMvcTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.ZoneAwareIdpMetadataManagerTest", "org.cloudfoundry.identity.uaa.login.ResetPasswordControllerMockMvcTests", ":cloudfoundry-identity-model:buildInfo", "org.cloudfoundry.identity.uaa.user.UaaAuthorityTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlIdentityProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.provider.ldap.DynamicPasswordComparatorTests", "org.cloudfoundry.identity.uaa.config.YamlServletProfileInitializerTests", "org.cloudfoundry.identity.uaa.resources.jdbc.JdbcPagingListTests", "org.cloudfoundry.identity.uaa.scim.validate.UaaPasswordPolicyValidatorTests", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneSwitchingFilterMockMvcTest", "org.cloudfoundry.identity.uaa.login.PasscodeMockMvcTests", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneEndpointDocs", "org.cloudfoundry.identity.uaa.util.UaaTokenUtilsTest", "org.cloudfoundry.identity.uaa.resources.MessageTests", "org.cloudfoundry.identity.uaa.login.AccountsControllerTest", "org.cloudfoundry.identity.uaa.authentication.manager.ExternalLoginAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.audit.JdbcAuditServiceTests", "org.cloudfoundry.identity.uaa.util.LinkedMaskingMultiValueMapTests", "org.cloudfoundry.identity.uaa.authentication.manager.DynamicLdapAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.config.YamlBindingTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpSamlAuthenticationSuccessHandlerTest", "org.cloudfoundry.identity.uaa.login.EmailAccountCreationServiceTests", "org.cloudfoundry.identity.uaa.authentication.ClientParametersAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.client.OAuth2ClientAuthenticationFilterTests", ":cloudfoundry-identity-model:processResources", "org.cloudfoundry.identity.uaa.user.UaaUserEditorTests", ":cloudfoundry-identity-model:jar", "org.cloudfoundry.identity.uaa.client.SocialClientUserDetailsSourceTests", "org.cloudfoundry.identity.uaa.scim.remote.RemoteScimUserProvisioningTests", "/uaa/uaa/src/test/java/org/springframework/security/ldap/server/ApacheDsSSLContainer.java", "org.cloudfoundry.identity.uaa.security.CsrfAwareEntryPointAndDeniedHandlerTest", ":cloudfoundry-identity-uaa:compileTestJava/uaa/uaa/src/test/java/org/springframework/security/ldap/server/ApacheDsSSLContainer.java", "org.cloudfoundry.identity.uaa.authentication.manager.AuthzAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.login.PasswordConfirmationValidationTest", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneResolvingMockMvcTest", ":cloudfoundry-identity-server:compileJava", "org.cloudfoundry.identity.uaa.oauth.ClientInfoEndpointTests", "org.cloudfoundry.identity.uaa.provider.ldap.ProcessLdapPropertiesTest", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserEndpointDocs", "org.cloudfoundry.identity.uaa.login.EmailServiceTests", "org.cloudfoundry.identity.uaa.login.ChangeEmailControllerTest", "org.cloudfoundry.identity.uaa.config.PasswordPolicyTest", "org.cloudfoundry.identity.uaa.db.StoreSubDomainAsLowerCase_V2_7_3_Tests", "org.cloudfoundry.identity.uaa.account.event.PasswordChangeEventPublisherTests", "org.cloudfoundry.identity.uaa.login.BootstrapTests", "org.cloudfoundry.identity.uaa.provider.saml.LoginSAMLAuthenticationFailureHandlerTest", "org.cloudfoundry.identity.uaa.authentication.AuthzAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.mock.password.PasswordChangeEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.invitations.InvitationsControllerTest", "org.cloudfoundry.identity.uaa.config.IdentityProviderBootstrapTest", "org.cloudfoundry.identity.uaa.account.PasswordChangeEndpointTests", ":cloudfoundry-identity-server:classes", "org.cloudfoundry.identity.uaa.error.UaaExceptionTests", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimUserBootstrapTests", "org.cloudfoundry.identity.uaa.zone.event.ServiceProviderModifiedEventTest", "org.cloudfoundry.identity.uaa.provider.saml.LoginSamlAuthenticationProviderTests", ":cloudfoundry-identity-uaa:classes", ":cloudfoundry-identity-uaa:compileJava", "org.cloudfoundry.identity.uaa.login.AuthorizeEndpointDocs", "org.cloudfoundry.identity.uaa.test.UaaTestAccountsTest", ":cloudfoundry-identity-model:mainOutputResourcesDir", "org.cloudfoundry.identity.uaa.db.TestThatClientIdIsVchar255", "org.cloudfoundry.identity.uaa.login.SamlLoginServerKeyManagerTests", "org.cloudfoundry.identity.uaa.security.X509ExpiryCheckingTrustManagerTest", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeStoreTests", "org.cloudfoundry.identity.uaa.oauth.UserManagedAuthzApprovalHandlerTests", "org.cloudfoundry.identity.uaa.invitations.InvitationsEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.mock.providers.IdentityProviderEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.mock.token.TokenKeyEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.scim.endpoints.PasswordResetEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.mock.providers.IdentityProviderEndpointsDocs", "org.cloudfoundry.identity.uaa.scim.endpoints.UserInfoEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.JdbcSamlServiceProviderProvisioningTest", "org.cloudfoundry.identity.uaa.oauth.AntPathRedirectResolverTests", "org.cloudfoundry.identity.uaa.util.UaaHttpRequestUtilsTest", "org.cloudfoundry.identity.uaa.web.HealthzEndpointTests", "org.cloudfoundry.identity.uaa.oauth.JdbcQueryableClientDetailsServiceTests", "org.cloudfoundry.identity.uaa.user.JdbcUaaUserDatabaseTests", "org.cloudfoundry.identity.uaa.mock.clients.ClientAdminEndpointsDocs", "org.cloudfoundry.identity.uaa.mock.config.HealthzShouldNotBeProtectedMockMvcTests", "org.cloudfoundry.identity.uaa.impl.config.ScimExternalGroupsTypeResolvingFactoryBeanTest", "org.cloudfoundry.identity.uaa.login.AutologinAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.invitations.InvitationsAuthenticationTrustResolverTest", "org.cloudfoundry.identity.uaa.mock.zones.DisableInternalUserManagementFilterMockMvcTests", "org.cloudfoundry.identity.uaa.scim.endpoints.UserIdConversionEndpointsTests", "org.cloudfoundry.identity.uaa.config.YamlConfigurationValidatorTests", ":cloudfoundry-identity-server:jar", "org.cloudfoundry.identity.uaa.util.DomainFilterTest", "org.cloudfoundry.identity.uaa.provider.saml.SamlIdentityProviderDefinitionTests", "org.cloudfoundry.identity.uaa.login.HomeControllerViewTests", "org.cloudfoundry.identity.uaa.oauth.token.TokenKeyEndpointTests", "org.cloudfoundry.identity.uaa.util.EnsureOldLibrariesAreRemoved", "org.cloudfoundry.identity.uaa.oauth.AccessControllerTests", "org.cloudfoundry.identity.uaa.provider.ldap.ExtendedLdapUserMapperTest", "org.cloudfoundry.identity.uaa.scim.ScimUserTests", "org.cloudfoundry.identity.uaa.config.IdentityZoneConfigurationTests", ":cloudfoundry-identity-server:processTestResources", "org.cloudfoundry.identity.uaa.authentication.manager.PeriodLockoutPolicyTests", "org.cloudfoundry.identity.uaa.scim.security.GroupRoleCheckTests", ":cloudfoundry-identity-uaa:processTestResources", "org.cloudfoundry.identity.uaa.scim.endpoints.ChangeEmailEndpointsTest", "org.cloudfoundry.identity.uaa.client.SourceTests", "org.cloudfoundry.identity.uaa.login.UaaResetPasswordServiceTests", "org.cloudfoundry.identity.uaa.config.EnvironmentPropertiesFactoryBeanTests", "org.cloudfoundry.identity.uaa.authentication.manager.LdapLoginAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.login.TokenEndpointDocs", "org.cloudfoundry.identity.uaa.invitations.InvitationsEndpointDocs", "org.cloudfoundry.identity.uaa.login.LoginMockMvcTests", ":cloudfoundry-identity-model:compileJava", "org.cloudfoundry.identity.uaa.provider.uaa.UaaIdentityProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.scim.endpoints.UserInfoEndpointDocs", "org.cloudfoundry.identity.uaa.audit.JdbcFailedLoginCountingAuditServiceTests", "org.cloudfoundry.identity.uaa.config.YamlMapFactoryBeanTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlConfigurationBeanTest", "org.cloudfoundry.identity.uaa.util.NullifyFieldsTest", "org.cloudfoundry.identity.uaa.oauth.UaaTokenServicesTests", "org.cloudfoundry.identity.uaa.oauth.UaaOauth2ErrorHandlerTests", "org.cloudfoundry.identity.uaa.login.NotificationsServiceTest", ":cloudfoundry-identity-uaa:processResources", "org.cloudfoundry.identity.uaa.authentication.manager.DynamicZoneAwareAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.db.TestSchemaValidation", "org.cloudfoundry.identity.uaa.client.OAuthClientAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.provider.LockoutPolicyTests", "org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationRequestManagerTests", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthIdentityProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.oauth.UaaUserApprovalHandlerTests", "org.cloudfoundry.identity.uaa.authentication.ZoneAwareWhitelistLogoutHandlerTests", "org.cloudfoundry.identity.uaa.mock.approvals.ApprovalsMockMvcTests", "org.cloudfoundry.identity.uaa.oauth.RemoteTokenServicesTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.authentication.manager.KeystoneAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupMembershipManagerTests", "org.cloudfoundry.identity.uaa.login.UsernamePasswordExtractingAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.client.ClientMetadataAdminEndpointsMockMvcTest", "org.cloudfoundry.identity.uaa.util.UaaUrlUtilsTest", "org.cloudfoundry.identity.uaa.zone.IdentityZoneSwitchingFilterTests", "org.cloudfoundry.identity.uaa.client.JdbcClientMetadataProvisioningTest", "org.cloudfoundry.identity.uaa.client.ClientMetadataAdminEndpointsDocs", "org.cloudfoundry.identity.uaa.performance.TestMySQLEmailSearch", "org.cloudfoundry.identity.uaa.login.LoginInfoEndpointDocs", "org.cloudfoundry.identity.uaa.client.ClientAdminEndpointsValidatorTests", "org.cloudfoundry.identity.uaa.web.CookieBasedCsrfTokenRepositoryTests", "org.cloudfoundry.identity.uaa.zone.JdbcIdentityProviderProvisioningTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserLookupMockMvcTests", "org.cloudfoundry.identity.uaa.util.KeyWithCertTest", "org.cloudfoundry.identity.uaa.audit.LineAwareLayoutTest", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeTests", "org.cloudfoundry.identity.uaa.oauth.client.ClientDetailsModificationTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimExternalGroupMappingsEndpointsDocs", "org.cloudfoundry.identity.uaa.oauth.UaaScopesTests", "org.cloudfoundry.identity.uaa.config.EnvironmentMapFactoryBeanTests", "org.cloudfoundry.identity.uaa.oauth.jwt.JwtHelperTest", "org.cloudfoundry.identity.uaa.login.UaaChangePasswordServiceTest", "org.cloudfoundry.identity.uaa.audit.event.EntityDeletedEventTest", "org.cloudfoundry.identity.uaa.scim.endpoints.UserIdConversionEndpointDocs", "org.cloudfoundry.identity.uaa.oauth.ZoneEndpointsClientDetailsValidatorTests"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_214", "original_commit_message": "Fixed CVE-2022-28346 -- Protected QuerySet.annotate(), aggregate(), and extra() against SQL injection in column aliases.\nThanks Splunk team: Preston Elder, Jacob Davis, Jacob Moore,\nMatt Hanson, David Briggs, and a security researcher: Danylo Dmytriiev\n(DDV_UA) for the report.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex c07a4b342a..894aa7db4a 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -40,10 +40,15 @@ from django.db.models.sql.constants import INNER, LOUTER, ORDER_DIR, SINGLE\n from django.db.models.sql.datastructures import BaseTable, Empty, Join, MultiJoin\n from django.db.models.sql.where import AND, OR, ExtraWhere, NothingNode, WhereNode\n from django.utils.functional import cached_property\n+from django.utils.regex_helper import _lazy_re_compile\n from django.utils.tree import Node\n \n __all__ = [\"Query\", \"RawQuery\"]\n \n+# Quotation marks ('\"`[]), whitespace characters, semicolons, or inline\n+# SQL comments are forbidden in column aliases.\n+FORBIDDEN_ALIAS_PATTERN = _lazy_re_compile(r\"['`\\\"\\]\\[;\\s]|--|/\\*|\\*/\")\n+\n \n def get_field_names_from_opts(opts):\n     if opts is None:\n@@ -1091,8 +1096,16 @@ class Query(BaseExpression):\n             alias = seen[int_model] = join_info.joins[-1]\n         return alias or seen[None]\n \n+    def check_alias(self, alias):\n+        if FORBIDDEN_ALIAS_PATTERN.search(alias):\n+            raise ValueError(\n+                \"Column aliases cannot contain whitespace characters, quotation marks, \"\n+                \"semicolons, or SQL comments.\"\n+            )\n+\n     def add_annotation(self, annotation, alias, is_summary=False, select=True):\n         \"\"\"Add a single annotation expression to the Query.\"\"\"\n+        self.check_alias(alias)\n         annotation = annotation.resolve_expression(\n             self, allow_joins=True, reuse=None, summarize=is_summary\n         )\n@@ -2269,6 +2282,7 @@ class Query(BaseExpression):\n             else:\n                 param_iter = iter([])\n             for name, entry in select.items():\n+                self.check_alias(name)\n                 entry = str(entry)\n                 entry_params = []\n                 pos = entry.find(\"%s\")\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 3922478bf3..61da0ebfe7 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -2048,6 +2048,15 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertEqual(len(qs), 6)\n \n+    def test_alias_sql_injection(self):\n+        crafted_alias = \"\"\"injected_name\" from \"aggregation_author\"; --\"\"\"\n+        msg = (\n+            \"Column aliases cannot contain whitespace characters, quotation marks, \"\n+            \"semicolons, or SQL comments.\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            Author.objects.aggregate(**{crafted_alias: Avg(\"age\")})\n+\n     def test_exists_extra_where_with_aggregate(self):\n         qs = Book.objects.annotate(\n             count=Count(\"id\"),\n\ndiff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex 5106a377ac..52a268c4ae 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -1076,6 +1076,40 @@ class NonAggregateAnnotationTestCase(TestCase):\n             ],\n         )\n \n+    def test_alias_sql_injection(self):\n+        crafted_alias = \"\"\"injected_name\" from \"annotations_book\"; --\"\"\"\n+        msg = (\n+            \"Column aliases cannot contain whitespace characters, quotation marks, \"\n+            \"semicolons, or SQL comments.\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            Book.objects.annotate(**{crafted_alias: Value(1)})\n+\n+    def test_alias_forbidden_chars(self):\n+        tests = [\n+            'al\"ias',\n+            \"a'lias\",\n+            \"ali`as\",\n+            \"alia s\",\n+            \"alias\\t\",\n+            \"ali\\nas\",\n+            \"alias--\",\n+            \"ali/*as\",\n+            \"alias*/\",\n+            \"alias;\",\n+            # [] are used by MSSQL.\n+            \"alias[\",\n+            \"alias]\",\n+        ]\n+        msg = (\n+            \"Column aliases cannot contain whitespace characters, quotation marks, \"\n+            \"semicolons, or SQL comments.\"\n+        )\n+        for crafted_alias in tests:\n+            with self.subTest(crafted_alias):\n+                with self.assertRaisesMessage(ValueError, msg):\n+                    Book.objects.annotate(**{crafted_alias: Value(1)})\n+\n \n class AliasTests(TestCase):\n     @classmethod\n@@ -1339,3 +1373,12 @@ class AliasTests(TestCase):\n             with self.subTest(operation=operation):\n                 with self.assertRaisesMessage(FieldError, msg):\n                     getattr(qs, operation)(\"rating_alias\")\n+\n+    def test_alias_sql_injection(self):\n+        crafted_alias = \"\"\"injected_name\" from \"annotations_book\"; --\"\"\"\n+        msg = (\n+            \"Column aliases cannot contain whitespace characters, quotation marks, \"\n+            \"semicolons, or SQL comments.\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            Book.objects.alias(**{crafted_alias: Value(1)})\n\ndiff --git a/tests/expressions/test_queryset_values.py b/tests/expressions/test_queryset_values.py\nindex 147f02fffb..0dba623167 100644\n--- a/tests/expressions/test_queryset_values.py\n+++ b/tests/expressions/test_queryset_values.py\n@@ -34,6 +34,15 @@ class ValuesExpressionsTests(TestCase):\n             [{\"salary\": 10}, {\"salary\": 20}, {\"salary\": 30}],\n         )\n \n+    def test_values_expression_alias_sql_injection(self):\n+        crafted_alias = \"\"\"injected_name\" from \"expressions_company\"; --\"\"\"\n+        msg = (\n+            \"Column aliases cannot contain whitespace characters, quotation marks, \"\n+            \"semicolons, or SQL comments.\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            Company.objects.values(**{crafted_alias: F(\"ceo__salary\")})\n+\n     def test_values_expression_group_by(self):\n         # values() applies annotate() first, so values selected are grouped by\n         # id, not firstname.\n\ndiff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex f9d2ebf98f..7b70a5ae0a 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1898,6 +1898,15 @@ class Queries5Tests(TestCase):\n             Note.objects.extra(select={\"foo\": \"'bar %%s'\"})[0].foo, \"bar %s\"\n         )\n \n+    def test_extra_select_alias_sql_injection(self):\n+        crafted_alias = \"\"\"injected_name\" from \"queries_note\"; --\"\"\"\n+        msg = (\n+            \"Column aliases cannot contain whitespace characters, quotation marks, \"\n+            \"semicolons, or SQL comments.\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            Note.objects.extra(select={crafted_alias: \"1\"})\n+\n     def test_queryset_reuse(self):\n         # Using querysets doesn't mutate aliases.\n         authors = Author.objects.filter(Q(name=\"a1\") | Q(name=\"nonexistent\"))\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "93cae5cb2f9a4ef1514cf1a41f714fef08005200", "source_date": "Mon Apr 11 08:59:33 2022 +0200", "source_tag": "4.1", "target_commit": "2044dac5c6968441be6f534c4139bcf48c5c7e48", "target_date": "Mon Apr 11 09:12:06 2022 +0200", "target_tag": "3.2.13", "FAIL TO PASS": ["expressions.test_queryset_values.ValuesExpressionsTests.test_values_expression_alias_sql_injection", "aggregation.tests.AggregateTestCase.test_alias_sql_injection", "queries.tests.Queries5Tests.test_extra_select_alias_sql_injection", "annotations.tests.NonAggregateAnnotationTestCase.test_alias_sql_injection", "annotations.tests.AliasTests.test_alias_sql_injection", "annotations.tests.NonAggregateAnnotationTestCase.test_alias_forbidden_chars"], "PASS TO PASS": ["queries.tests.DisjunctionPromotionTests.test_disjunction_promotion6", "annotations.tests.NonAggregateAnnotationTestCase.test_filter_annotation_with_double_f", "queries.tests.WhereNodeTest.test_empty_full_handling_conjunction", "queries.tests.CustomPkTests.test_ticket7371", "aggregation.tests.AggregateTestCase.test_annotate_defer", "queries.test_q.QTests.test_reconstruct_negated", "expressions.tests.FTests.test_hash", "queries.tests.Queries5Tests.test_ticket7045", "expressions.tests.BasicExpressionsTests.test_filtering_on_q_that_is_boolean", "queries.tests.QuerySetSupportsPythonIdioms.test_slicing_with_steps_can_be_used", "queries.tests.UnionTests.test_BAB_BACB", "queries.tests.NullableRelOrderingTests.test_join_already_in_query", "aggregation.tests.AggregateTestCase.test_aggregate_in_order_by", "annotations.tests.AliasTests.test_dates_alias", "queries.tests.Queries1Tests.test_tickets_2874_3002", "annotations.tests.NonAggregateAnnotationTestCase.test_update_with_annotation", "queries.tests.Queries4Tests.test_ticket15316_exclude_true", "queries.tests.Queries1Tests.test_ticket_10790_2", "queries.tests.Queries6Tests.test_nested_queries_sql", "expressions.tests.BasicExpressionsTests.test_subquery_references_joined_table_twice", "queries.tests.NullJoinPromotionOrTest.test_ticket_21748_complex_filter", "queries.tests.Queries1Tests.test_heterogeneous_qs_combination", "annotations.tests.NonAggregateAnnotationTestCase.test_joined_annotation", "queries.test_qs_combinators.QuerySetSetOperationTests.test_count_intersection", "queries.tests.QuerysetOrderedTests.test_annotated_default_ordering", "expressions.tests.OrderByTests.test_equal", "aggregation.tests.AggregateTestCase.test_non_grouped_annotation_not_in_group_by", "queries.tests.Queries1Tests.test_ticket7181", "queries.test_q.QTests.test_reconstruct", "annotations.tests.AliasTests.test_basic_alias_annotation", "queries.tests.Queries1Tests.test_reasonable_number_of_subq_aliases", "expressions.tests.FTimeDeltaTests.test_time_subquery_subtraction", "queries.tests.ToFieldTests.test_nested_in_subquery", "annotations.tests.NonAggregateAnnotationTestCase.test_mixed_type_annotation_date_interval", "expressions.tests.BasicExpressionsTests.test_filtering_on_rawsql_that_is_boolean", "queries.tests.CloneTests.test_evaluated_queryset_as_argument", "queries.test_query.TestQuery.test_filter_conditional_join", "queries.tests.UnionTests.test_BAB_BAC", "expressions.tests.BasicExpressionsTests.test_subquery", "queries.tests.Queries1Tests.test_ticket7813", "queries.tests.Queries4Tests.test_ticket15316_one2one_filter_false", "aggregation.tests.AggregateTestCase.test_aggregate_multi_join", "queries.tests.IsNullTests.test_to_field", "queries.tests.Queries1Tests.test_ticket2496", "queries.test_qs_combinators.QuerySetSetOperationTests.test_get_with_filters_unsupported_on_combined_qs", "queries.tests.SubqueryTests.test_distinct_ordered_sliced_subquery", "queries.tests.Queries1Tests.test_tickets_2076_7256", "queries.tests.Queries1Tests.test_ticket_20250", "annotations.tests.NonAggregateAnnotationTestCase.test_annotation_exists_aggregate_values_chaining", "expressions.tests.FTimeDeltaTests.test_mixed_comparisons2", "expressions.tests.OrderByTests.test_hash", "queries.tests.QuerysetOrderedTests.test_empty_queryset", "queries.tests.ToFieldTests.test_reverse_in", "queries.tests.ValuesQuerysetTests.test_extra_values_order_in_extra", "queries.tests.EmptyQuerySetTests.test_emptyqueryset_values", "expressions.tests.BasicExpressionsTests.test_annotation_with_nested_outerref", "expressions.tests.BasicExpressionsTests.test_case_in_filter_if_boolean_output_field", "queries.tests.Queries1Tests.test_ticket10742", "queries.test_bulk_update.BulkUpdateNoteTests.test_batch_size", "queries.tests.WeirdQuerysetSlicingTests.test_empty_sliced_subquery_exclude", "aggregation.tests.AggregateTestCase.test_ticket17424", "expressions.tests.BasicExpressionsTests.test_in_subquery", "queries.tests.Queries1Tests.test_tickets_4088_4306", "aggregation.test_filter_argument.FilteredAggregateTests.test_case_aggregate", "aggregation.tests.AggregateTestCase.test_aggregation_expressions", "expressions.tests.SimpleExpressionTests.test_hash", "expressions.tests.BasicExpressionsTests.test_outerref_mixed_case_table_name", "aggregation.tests.AggregateTestCase.test_backwards_m2m_annotate", "queries.tests.QuerySetBitwiseOperationTests.test_or_with_rhs_slice", "queries.tests.QuerysetOrderedTests.test_order_by_extra", "expressions.tests.BasicExpressionsTests.test_ticket_18375_kwarg_ordering", "aggregation.tests.AggregateTestCase.test_aggregate_alias", "expressions.tests.ExpressionsTests.test_patterns_escape", "expressions.tests.FTimeDeltaTests.test_delta_add", "queries.tests.DisjunctionPromotionTests.test_disjunction_promotion1", "queries.test_qs_combinators.QuerySetSetOperationTests.test_ordering_by_f_expression", "aggregation.tests.AggregateTestCase.test_aggregate_over_complex_annotation", "queries.tests.GeneratorExpressionTests.test_ticket10432", "expressions.tests.BasicExpressionsTests.test_subquery_filter_by_aggregate", "expressions.tests.BasicExpressionsTests.test_nested_subquery_outer_ref_with_autofield", "annotations.tests.AliasTests.test_values_alias", "expressions.tests.ExpressionsTests.test_F_reuse", "queries.tests.NullJoinPromotionOrTest.test_null_join_demotion", "queries.tests.QuerysetOrderedTests.test_annotated_ordering", "queries.tests.Queries4Tests.test_ticket14876", "queries.tests.NullJoinPromotionOrTest.test_ticket_21748", "queries.tests.ValuesQuerysetTests.test_flat_values_list", "annotations.tests.NonAggregateAnnotationTestCase.test_filter_wrong_annotation", "expressions.tests.BasicExpressionsTests.test_arithmetic", "queries.tests.SubqueryTests.test_slice_subquery_and_query", "queries.tests.JoinReuseTest.test_inverted_q_across_relations", "annotations.tests.AliasTests.test_basic_alias_f_transform_annotation", "queries.test_bulk_update.BulkUpdateTests.test_nonexistent_field", "queries.test_query.TestQuery.test_simple_query", "queries.tests.QuerySetSupportsPythonIdioms.test_slicing_cannot_combine_queries_once_sliced", "annotations.tests.AliasTests.test_alias_annotation_expression", "aggregation.tests.AggregateTestCase.test_nonfield_annotation", "queries.tests.QuerySetBitwiseOperationTests.test_or_with_lhs_slice", "queries.tests.ValuesJoinPromotionTests.test_ticket_21376", "expressions.tests.BasicExpressionsTests.test_parenthesis_priority", "queries.test_query.TestQuery.test_foreign_key", "aggregation.tests.AggregateTestCase.test_aggregation_subquery_annotation_values_collision", "queries.tests.Queries5Tests.test_ordering", "queries.tests.Queries1Tests.test_subquery_condition", "queries.test_deprecation.InvalidQueryTests.test_issubclass", "expressions.tests.ExpressionsNumericTests.test_complex_expressions", "queries.tests.Ticket21203Tests.test_ticket_21203", "aggregation.tests.AggregateTestCase.test_add_implementation", "queries.tests.Queries1Tests.test_order_by_raw_column_alias_warning", "queries.tests.SubqueryTests.test_ordered_subselect", "queries.tests.Queries4Tests.test_order_by_resetting", "expressions.tests.IterableLookupInnerExpressionsTests.test_range_lookup_allows_F_expressions_and_expressions_for_integers", "queries.tests.TestInvalidValuesRelation.test_invalid_values", "queries.tests.ToFieldTests.test_recursive_fk_reverse", "queries.test_bulk_update.BulkUpdateTests.test_field_references", "annotations.tests.NonAggregateAnnotationTestCase.test_null_annotation", "expressions.tests.ExpressionOperatorTests.test_lefthand_multiplication", "queries.test_qs_combinators.QuerySetSetOperationTests.test_exists_union", "queries.tests.Queries2Tests.test_ticket4289", "queries.test_query.TestQuery.test_non_alias_cols_query", "expressions.tests.BasicExpressionsTests.test_nested_subquery_join_outer_ref", "aggregation.tests.AggregateTestCase.test_annotation", "queries.tests.QuerySetSupportsPythonIdioms.test_can_combine_queries_using_and_and_or_operators", "aggregation.tests.AggregateTestCase.test_count_star", "annotations.tests.AliasTests.test_aggregate_alias", "queries.test_q.QTests.test_combine_negated_boolean_expression", "queries.tests.Queries1Tests.test_ticket9985", "queries.tests.Queries1Tests.test_ticket6074", "queries.test_qs_combinators.QuerySetSetOperationTests.test_union_with_extra_and_values_list", "annotations.tests.NonAggregateAnnotationTestCase.test_mti_annotations", "aggregation.tests.AggregateTestCase.test_empty_aggregate", "expressions.tests.FTimeDeltaTests.test_date_subtraction", "annotations.tests.NonAggregateAnnotationTestCase.test_values_annotation", "queries.test_bulk_update.BulkUpdateTests.test_custom_pk", "queries.test_q.QTests.test_deconstruct_boolean_expression", "queries.tests.QuerySetSupportsPythonIdioms.test_slicing_negative_indexing_not_supported_for_range", "queries.tests.Queries1Tests.test_ticket9997", "queries.tests.ValuesQuerysetTests.test_extra_values_list", "aggregation.tests.AggregateTestCase.test_annotate_m2m", "expressions.tests.FieldTransformTests.test_multiple_transforms_in_values", "queries.tests.ExcludeTest17600.test_exclude_plain_distinct", "expressions.tests.ExpressionsNumericTests.test_filter_not_equals_other_field", "queries.test_qs_combinators.QuerySetSetOperationTests.test_simple_union", "queries.tests.ValuesQuerysetTests.test_named_values_list_expression_with_default_alias", "queries.tests.UnionTests.test_A_AB", "queries.tests.QuerySetSupportsPythonIdioms.test_can_get_number_of_items_in_queryset_using_standard_len", "queries.test_q.QTests.test_combine_or_both_empty", "expressions.tests.BasicExpressionsTests.test_nested_subquery", "queries.test_explain.ExplainTests.test_unknown_format", "queries.tests.ExcludeTest17600.test_exclude_with_q_object_distinct", "aggregation.tests.AggregateTestCase.test_related_aggregate", "aggregation.tests.AggregateTestCase.test_sum_duration_field", "expressions.tests.ExpressionOperatorTests.test_lefthand_modulo", "queries.tests.EscapingTests.test_ticket_7302", "queries.test_qs_combinators.QuerySetSetOperationTests.test_union_with_values", "queries.tests.EmptyQuerySetTests.test_values_subquery", "expressions.tests.BasicExpressionsTests.test_order_by_exists", "queries.tests.JoinReuseTest.test_revfk_noreuse", "aggregation.tests.AggregateTestCase.test_aggregation_exists_annotation", "queries.tests.Queries3Tests.test_ticket8683", "queries.test_query.TestQuery.test_transform", "expressions.tests.ValueTests.test_resolve_output_field_failure", "aggregation.tests.AggregateTestCase.test_complex_aggregations_require_kwarg", "annotations.tests.NonAggregateAnnotationTestCase.test_chaining_transforms", "queries.test_bulk_update.BulkUpdateTests.test_no_fields", "aggregation.tests.AggregateTestCase.test_values_annotation_with_expression", "expressions.tests.FTests.test_not_equal_Value", "queries.tests.Queries1Tests.test_ticket_10790_8", "aggregation.tests.AggregateTestCase.test_combine_different_types", "queries.test_bulk_update.BulkUpdateTests.test_datetime_field", "queries.tests.DisjunctionPromotionTests.test_disjunction_promotion2", "queries.test_q.QTests.test_reconstruct_or", "queries.tests.WhereNodeTest.test_empty_nodes", "annotations.tests.AliasTests.test_joined_alias_annotation", "annotations.tests.NonAggregateAnnotationTestCase.test_mixed_type_annotation_numbers", "queries.tests.Ticket20955Tests.test_ticket_20955", "annotations.tests.AliasTests.test_basic_alias", "queries.tests.ToFieldTests.test_in_subquery", "expressions.tests.FTimeDeltaTests.test_date_case_subtraction", "annotations.tests.AliasTests.test_overwrite_annotation_with_alias", "queries.tests.Queries4Tests.test_combine_join_reuse", "queries.test_bulk_update.BulkUpdateTests.test_update_custom_primary_key", "queries.tests.DoubleInSubqueryTests.test_double_subquery_in", "expressions.tests.ExpressionOperatorTests.test_lefthand_subtraction", "queries.test_qs_combinators.QuerySetSetOperationTests.test_limits", "aggregation.tests.AggregateTestCase.test_annotation_expressions", "aggregation.test_filter_argument.FilteredAggregateTests.test_excluded_aggregates", "queries.test_qs_combinators.QuerySetSetOperationTests.test_union_with_empty_qs", "expressions.tests.ExpressionOperatorTests.test_lefthand_bitwise_left_shift_operator", "expressions.tests.BasicExpressionsTests.test_object_update_fk", "annotations.tests.NonAggregateAnnotationTestCase.test_custom_functions", "aggregation.tests.AggregateTestCase.test_decimal_max_digits_has_no_effect", "annotations.tests.AliasTests.test_filter_alias_with_f", "queries.tests.Queries3Tests.test_ticket7107", "annotations.tests.NonAggregateAnnotationTestCase.test_defer_annotation", "expressions.tests.ExpressionOperatorTests.test_righthand_power", "expressions.test_queryset_values.ValuesExpressionsTests.test_values_expression_group_by", "aggregation.tests.AggregateTestCase.test_dates_with_aggregation", "aggregation.test_filter_argument.FilteredAggregateTests.test_filtered_reused_subquery", "queries.tests.ExistsSql.test_ticket_18414", "queries.tests.Queries4Tests.test_order_by_reverse_fk", "expressions.tests.CombinableTests.test_and", "expressions.tests.BasicExpressionsTests.test_uuid_pk_subquery", "queries.test_qs_combinators.QuerySetSetOperationTests.test_qs_with_subcompound_qs", "annotations.tests.NonAggregateAnnotationTestCase.test_annotation_subquery_outerref_transform", "aggregation.tests.AggregateTestCase.test_more_aggregation", "aggregation.tests.AggregateTestCase.test_aggregation_nested_subquery_outerref", "aggregation.tests.AggregateTestCase.test_arguments_must_be_expressions", "queries.tests.Queries1Tests.test_ticket6981", "expressions.tests.BasicExpressionsTests.test_update", "queries.test_bulk_update.BulkUpdateTests.test_large_batch", "queries.tests.Queries1Tests.test_tickets_5324_6704", "queries.tests.ToFieldTests.test_single_object_reverse", "queries.tests.NullInExcludeTest.test_null_in_exclude_qs", "queries.tests.SubclassFKTests.test_ticket7778", "queries.tests.Queries4Tests.test_filter_reverse_non_integer_pk", "queries.test_q.QTests.test_combine_and_empty", "aggregation.tests.AggregateTestCase.test_aggregation_subquery_annotation", "expressions.tests.ExpressionOperatorTests.test_lefthand_bitwise_xor", "queries.test_bulk_update.BulkUpdateNoteTests.test_foreign_keys_do_not_lookup", "queries.tests.Queries1Tests.test_ticket4358", "annotations.tests.AliasTests.test_update_with_alias", "aggregation.test_filter_argument.FilteredAggregateTests.test_filtered_aggregate_ref_annotation", "expressions.tests.FTests.test_deconstruct", "queries.test_deprecation.InvalidQueryTests.test_type", "annotations.tests.NonAggregateAnnotationTestCase.test_filter_annotation", "queries.tests.Queries1Tests.test_avoid_infinite_loop_on_too_many_subqueries", "expressions.tests.BasicExpressionsTests.test_ticket_18375_chained_filters", "queries.tests.DisjunctionPromotionTests.test_disjunction_promotion4_demote", "expressions.tests.ReprTests.test_aggregates", "queries.tests.QuerySetExceptionTests.test_invalid_queryset_model", "expressions.tests.BasicExpressionsTests.test_annotation_with_outerref", "queries.tests.Queries1Tests.test_ticket1050", "queries.tests.Queries1Tests.test_field_with_filterable", "queries.tests.ToFieldTests.test_single_object", "queries.tests.Queries4Tests.test_ticket15316_filter_true", "expressions.tests.BasicExpressionsTests.test_pickle_expression", "expressions.test_queryset_values.ValuesExpressionsTests.test_chained_values_with_expression", "expressions.tests.IterableLookupInnerExpressionsTests.test_in_lookup_allows_F_expressions_and_expressions_for_datetimes", "queries.tests.NullJoinPromotionOrTest.test_isnull_filter_promotion", "queries.tests.NullJoinPromotionOrTest.test_ticket_21748_double_negated_and", "expressions.tests.BasicExpressionsTests.test_outerref", "expressions.tests.BasicExpressionsTests.test_subquery_eq", "queries.tests.Queries1Tests.test_error_raised_on_filter_with_dictionary", "queries.tests.TestTicket24605.test_ticket_24605", "queries.tests.WeirdQuerysetSlicingTests.test_zero_length_values_slicing", "queries.test_qs_combinators.QuerySetSetOperationTests.test_ordering_by_alias", "queries.test_q.QTests.test_combine_or_empty", "expressions.tests.ExpressionOperatorTests.test_right_hand_multiplication", "annotations.tests.NonAggregateAnnotationTestCase.test_annotation_aggregate_with_m2o", "expressions.tests.FTimeDeltaTests.test_duration_with_datetime_microseconds", "queries.tests.QuerysetOrderedTests.test_no_default_or_explicit_ordering", "queries.tests.Queries1Tests.test_ticket7098", "queries.tests.Queries4Tests.test_ticket10181", "expressions.tests.BasicExpressionsTests.test_subquery_group_by_outerref_in_filter", "queries.tests.Queries1Tests.test_ticket6154", "annotations.tests.NonAggregateAnnotationTestCase.test_annotate_with_aggregation", "aggregation.test_filter_argument.FilteredAggregateTests.test_filtered_numerical_aggregates", "expressions.tests.BasicExpressionsTests.test_filter_with_join", "expressions.tests.BasicExpressionsTests.test_nested_subquery_outer_ref_2", "queries.tests.Queries1Tests.test_exclude_in", "queries.tests.Queries1Tests.test_ticket7378", "queries.tests.Queries1Tests.test_order_by_join_unref", "annotations.tests.NonAggregateAnnotationTestCase.test_order_by_annotation", "queries.tests.Queries2Tests.test_ticket12239", "queries.test_iterator.QuerySetIteratorTests.test_default_iterator_chunk_size", "queries.tests.Queries1Tests.test_ticket3141", "queries.tests.Queries6Tests.test_ticket_11320", "queries.tests.QuerySetBitwiseOperationTests.test_or_with_both_slice", "aggregation.tests.AggregateTestCase.test_aggregation_order_by_not_selected_annotation_values", "queries.test_bulk_update.BulkUpdateTests.test_booleanfield", "queries.test_qs_combinators.QuerySetSetOperationTests.test_union_with_values_list_and_order_on_annotation", "annotations.tests.NonAggregateAnnotationTestCase.test_aggregate_over_annotation", "annotations.tests.NonAggregateAnnotationTestCase.test_annotate_exists", "expressions.tests.ValueTests.test_resolve_output_field", "queries.test_qs_combinators.QuerySetSetOperationTests.test_simple_difference", "queries.tests.Queries5Tests.test_extra_select_literal_percent_s", "queries.tests.EmptyQuerySetTests.test_ticket_19151", "expressions.tests.BasicExpressionsTests.test_exists_in_filter", "expressions.tests.ValueTests.test_update_UUIDField_using_Value", "queries.test_qs_combinators.QuerySetSetOperationTests.test_exists_difference", "queries.tests.Queries5Tests.test_ticket9848", "queries.tests.ValuesQuerysetTests.test_named_values_list_bad_field_name", "queries.tests.EmptyStringsAsNullTest.test_joined_exclude", "expressions.tests.IterableLookupInnerExpressionsTests.test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion", "expressions.tests.ValueTests.test_equal", "queries.tests.ReverseJoinTrimmingTest.test_reverse_trimming", "queries.tests.Queries1Tests.test_tickets_7204_7506", "aggregation.tests.AggregateTestCase.test_sum_distinct_aggregate", "expressions.tests.BasicExpressionsTests.test_annotate_values_filter", "queries.test_qs_combinators.QuerySetSetOperationTests.test_order_raises_on_non_selected_column", "annotations.tests.AliasTests.test_datetimes_alias", "queries.tests.JoinReuseTest.test_revo2o_reuse", "queries.tests.ExcludeTest17600.test_exclude_with_q_is_equal_to_plain_exclude_variation", "queries.tests.DisjunctionPromotionTests.test_disjunction_promotion3", "aggregation.tests.AggregateTestCase.test_annotate_values", "expressions.tests.BasicExpressionsTests.test_incorrect_joined_field_in_F_expression", "queries.tests.QuerysetOrderedTests.test_explicit_ordering", "queries.tests.IsNullTests.test_primary_key", "queries.test_iterator.QuerySetIteratorTests.test_no_chunked_reads", "queries.tests.RelatedLookupTypeTests.test_wrong_type_lookup", "queries.tests.WeirdQuerysetSlicingTests.test_empty_resultset_sql", "expressions.tests.ExpressionOperatorTests.test_lefthand_bitwise_right_shift_operator", "aggregation.tests.AggregateTestCase.test_multi_arg_aggregate", "queries.tests.Queries1Tests.test_ticket_10790_7", "expressions.tests.FTests.test_deepcopy", "expressions.tests.BasicExpressionsTests.test_new_object_create", "annotations.tests.AliasTests.test_basic_alias_f_annotation", "expressions.tests.FTimeDeltaTests.test_query_clone", "queries.tests.Queries1Tests.test_common_mixed_case_foreign_keys", "queries.test_bulk_update.BulkUpdateNoteTests.test_unsaved_models", "queries.tests.UnionTests.test_AB_ACB", "aggregation.tests.AggregateTestCase.test_group_by_subquery_annotation", "queries.test_iterator.QuerySetIteratorTests.test_iterator_invalid_chunk_size", "queries.test_qs_combinators.QuerySetSetOperationTests.test_union_distinct", "queries.test_qs_combinators.QuerySetSetOperationTests.test_unsupported_operations_on_combined_qs", "queries.tests.Queries1Tests.test_tickets_1878_2939", "annotations.tests.NonAggregateAnnotationTestCase.test_decimal_annotation", "expressions.tests.CombinableTests.test_or", "queries.tests.Queries6Tests.test_ticket3739", "aggregation.tests.AggregateTestCase.test_avg_duration_field", "aggregation.tests.AggregateTestCase.test_aggregate_over_aggregate", "queries.tests.ToFieldTests.test_in_query", "expressions.tests.FTimeDeltaTests.test_duration_expressions", "queries.tests.RelabelCloneTest.test_ticket_19964", "queries.tests.SelectRelatedTests.test_tickets_3045_3288", "queries.tests.JoinReuseTest.test_fk_reuse", "queries.test_qs_combinators.QuerySetSetOperationTests.test_simple_intersection", "annotations.tests.NonAggregateAnnotationTestCase.test_annotation_in_f_grouped_by_annotation", "queries.tests.ValuesJoinPromotionTests.test_values_no_promotion_for_existing", "queries.test_bulk_update.BulkUpdateTests.test_inherited_fields", "aggregation.test_filter_argument.FilteredAggregateTests.test_filtered_aggregate_on_annotate", "aggregation.tests.AggregateTestCase.test_grouped_annotation_in_group_by", "queries.tests.Queries1Tests.test_ticket4510", "queries.tests.ProxyQueryCleanupTest.test_evaluated_proxy_count", "expressions.tests.BasicExpressionsTests.test_annotations_within_subquery", "queries.tests.ValuesQuerysetTests.test_extra_multiple_select_params_values_order_by", "queries.test_query.TestQuery.test_filter_non_conditional", "queries.test_qs_combinators.QuerySetSetOperationTests.test_combining_multiple_models", "aggregation.test_filter_argument.FilteredAggregateTests.test_filtered_aggregate_ref_multiple_subquery_annotation", "queries.tests.DisjunctionPromotionTests.test_disjunction_promotion_fexpression", "aggregation.tests.AggregateTestCase.test_expression_on_aggregation", "annotations.tests.NonAggregateAnnotationTestCase.test_order_by_aggregate", "expressions.tests.IterableLookupInnerExpressionsTests.test_expressions_in_lookups_join_choice", "queries.tests.Queries4Tests.test_combine_or_filter_reuse", "queries.tests.SubqueryTests.test_sliced_delete", "annotations.tests.NonAggregateAnnotationTestCase.test_annotation_reverse_m2m", "queries.tests.RawQueriesTests.test_ticket14729", "queries.tests.Queries1Tests.test_negate_field", "expressions.tests.BasicExpressionsTests.test_subquery_in_filter", "queries.tests.Queries3Tests.test_ticket22023", "expressions.tests.BasicExpressionsTests.test_boolean_expression_combined", "aggregation.test_filter_argument.FilteredAggregateTests.test_sum_star_exception", "expressions.tests.FTimeDeltaTests.test_multiple_query_compilation", "queries.tests.WeirdQuerysetSlicingTests.test_tickets_7698_10202", "expressions.tests.FTests.test_equal", "queries.tests.DisjunctionPromotionTests.test_disjunction_promotion4", "queries.tests.Queries1Tests.test_ticket3037", "queries.tests.Queries1Tests.test_ticket_10790_3", "expressions.tests.BasicExpressionsTests.test_subquery_filter_by_lazy", "queries.test_qs_combinators.QuerySetSetOperationTests.test_union_multiple_models_with_values_list_and_order", "queries.tests.JoinReuseTest.test_fk_reuse_select_related", "queries.tests.Queries6Tests.test_distinct_ordered_sliced_subquery_aggregation", "queries.test_bulk_update.BulkUpdateTests.test_ipaddressfield", "queries.tests.QuerySetExceptionTests.test_invalid_order_by", "queries.tests.QuerySetExceptionTests.test_iter_exceptions", "expressions.tests.FTimeDeltaTests.test_time_subtraction", "aggregation.tests.AggregateTestCase.test_annotated_aggregate_over_annotated_aggregate", "expressions.tests.ValueTests.test_update_TimeField_using_Value", "expressions.tests.BasicExpressionsTests.test_update_with_fk", "expressions.tests.BasicExpressionsTests.test_update_with_none", "annotations.tests.NonAggregateAnnotationTestCase.test_filter_annotation_with_f", "queries.tests.NullJoinPromotionOrTest.test_ticket_21366", "aggregation.tests.AggregateTestCase.test_ticket12886", "queries.tests.UnionTests.test_A_AB2", "queries.tests.Queries1Tests.test_tickets_5321_7070", "queries.tests.ComparisonTests.test_ticket8597", "queries.test_q.QTests.test_deconstruct_negated", "queries.test_iterator.QuerySetIteratorTests.test_iterator_chunk_size", "annotations.tests.AliasTests.test_overwrite_alias_with_annotation", "queries.test_bulk_update.BulkUpdateTests.test_custom_db_columns", "expressions.tests.FTimeDeltaTests.test_delta_subtract", "queries.tests.QuerySetSupportsPythonIdioms.test_can_get_items_using_index_and_slice_notation", "queries.tests.UnionTests.test_BA_BCA__BAB_BAC_BCA", "queries.tests.Queries1Tests.test_ticket2400", "expressions.tests.ExpressionOperatorTests.test_right_hand_division", "annotations.tests.AliasTests.test_filter_alias_with_double_f", "expressions.tests.ExpressionOperatorTests.test_right_hand_modulo", "aggregation.tests.AggregateTestCase.test_filtering", "queries.tests.ReverseM2MCustomPkTests.test_ticket_21879", "expressions.tests.BasicExpressionsTests.test_object_create_with_aggregate", "aggregation.tests.AggregateTestCase.test_aggregation_subquery_annotation_related_field", "aggregation.tests.AggregateTestCase.test_aggregation_random_ordering", "queries.tests.Ticket14056Tests.test_ticket_14056", "queries.test_qs_combinators.QuerySetSetOperationTests.test_get_difference", "queries.tests.Queries2Tests.test_ticket7759", "expressions.tests.FTimeDeltaTests.test_date_comparison", "queries.test_qs_combinators.QuerySetSetOperationTests.test_union_with_values_list_on_annotated_and_unannotated", "queries.tests.QuerySetSupportsPythonIdioms.test_slicing_without_step_is_lazy", "expressions.tests.FTimeDeltaTests.test_delta_update", "expressions.tests.BasicExpressionsTests.test_ticket_11722_iexact_lookup", "queries.test_q.QTests.test_reconstruct_and", "queries.tests.Queries1Tests.test_tickets_2080_3592", "aggregation.tests.AggregateTestCase.test_count_distinct_expression", "aggregation.tests.AggregateTestCase.test_ticket11881", "queries.tests.Queries5Tests.test_ticket7256", "queries.tests.ExcludeTests.test_exclude_multivalued_exists", "queries.test_bulk_update.BulkUpdateNoteTests.test_functions", "queries.tests.ExistsSql.test_exists", "expressions.tests.BasicExpressionsTests.test_incorrect_field_in_F_expression", "aggregation.tests.AggregateTestCase.test_annotate_ordering", "queries.test_bulk_update.BulkUpdateTests.test_invalid_batch_size", "aggregation.test_filter_argument.FilteredAggregateTests.test_related_aggregates_m2m", "queries.tests.ManyToManyExcludeTest.test_exclude_many_to_many", "queries.tests.EmptyStringsAsNullTest.test_direct_exclude", "queries.test_q.QTests.test_combine_and_both_empty", "queries.tests.Queries1Tests.test_exclude", "queries.tests.ValuesQuerysetTests.test_named_values_list_without_fields", "queries.test_bulk_update.BulkUpdateNoteTests.test_set_mixed_fields_to_null", "queries.tests.QuerySetSupportsPythonIdioms.test_slicing_can_slice_again_after_slicing", "queries.test_qs_combinators.QuerySetSetOperationTests.test_unsupported_ordering_slicing_raises_db_error", "annotations.tests.NonAggregateAnnotationTestCase.test_chaining_annotation_filter_with_m2m", "expressions.tests.SimpleExpressionTests.test_equal", "expressions.tests.ExpressionsNumericTests.test_decimal_expression", "queries.tests.Ticket12807Tests.test_ticket_12807", "annotations.tests.AliasTests.test_filter_alias_agg_with_double_f", "expressions.tests.BasicExpressionsTests.test_ticket_18375_join_reuse", "annotations.tests.NonAggregateAnnotationTestCase.test_empty_expression_annotation", "annotations.tests.AliasTests.test_order_by_alias", "queries.tests.Queries1Tests.test_ticket1801", "queries.tests.NullInExcludeTest.test_double_exclude", "aggregation.test_filter_argument.FilteredAggregateTests.test_filtered_aggregate_ref_subquery_annotation", "queries.tests.ValuesQuerysetTests.test_named_values_list_flat", "aggregation.test_filter_argument.FilteredAggregateTests.test_related_aggregates_m2m_and_fk", "queries.tests.QuerySetBitwiseOperationTests.test_subquery_aliases", "expressions.tests.ValueTests.test_raise_empty_expressionlist", "expressions.test_queryset_values.ValuesExpressionsTests.test_values_list_expression_flat", "expressions.tests.BasicExpressionsTests.test_filtering_on_annotate_that_uses_q", "expressions.tests.ExpressionWrapperTests.test_empty_group_by", "expressions.tests.FTimeDeltaTests.test_exclude", "queries.tests.ConditionalTests.test_infinite_loop", "annotations.tests.NonAggregateAnnotationTestCase.test_annotation_subquery_and_aggregate_values_chaining", "expressions.tests.ExpressionsTests.test_insensitive_patterns_escape", "queries.test_qs_combinators.QuerySetSetOperationTests.test_get_intersection", "queries.tests.QuerySetSupportsPythonIdioms.test_slicing_negative_indexing_not_supported_for_single_element", "annotations.tests.NonAggregateAnnotationTestCase.test_q_expression_annotation_with_aggregation", "expressions.tests.BasicExpressionsTests.test_object_update", "queries.test_bulk_update.BulkUpdateTests.test_update_primary_key", "annotations.tests.NonAggregateAnnotationTestCase.test_basic_f_annotation", "queries.tests.ExcludeTest17600.test_exclude_with_q_object_no_distinct", "queries.tests.Queries1Tests.test_ticket8439", "queries.test_qs_combinators.QuerySetSetOperationTests.test_count_difference", "annotations.tests.NonAggregateAnnotationTestCase.test_filter_agg_with_double_f", "expressions.tests.BasicExpressionsTests.test_boolean_expression_combined_with_empty_Q", "annotations.tests.AliasTests.test_alias_after_annotation", "queries.test_deprecation.InvalidQueryTests.test_isinstance", "queries.tests.Queries1Tests.test_ticket7277", "queries.test_q.QTests.test_deconstruct_nested", "queries.test_qs_combinators.QuerySetSetOperationTests.test_intersection_with_empty_qs", "aggregation.tests.AggregateTestCase.test_reverse_fkey_annotate", "queries.tests.Queries1Tests.test_nested_exclude", "queries.tests.QuerySetSupportsPythonIdioms.test_invalid_index", "annotations.tests.NonAggregateAnnotationTestCase.test_annotation_with_m2m", "queries.test_qs_combinators.QuerySetSetOperationTests.test_exists_union_empty_result", "queries.tests.Queries1Tests.test_ticket7155", "queries.test_qs_combinators.QuerySetSetOperationTests.test_ordering", "queries.tests.Queries1Tests.test_ticket17429", "aggregation.tests.AggregateTestCase.test_aggregation_subquery_annotation_values", "annotations.tests.AliasTests.test_defer_only_alias", "annotations.tests.NonAggregateAnnotationTestCase.test_raw_sql_with_inherited_field", "queries.tests.Queries4Tests.test_ticket7095", "queries.test_query.TestQuery.test_iterable_lookup_value", "expressions.tests.BasicExpressionsTests.test_aggregate_subquery_annotation", "queries.test_bulk_update.BulkUpdateTests.test_falsey_pk_value", "queries.test_bulk_update.BulkUpdateTests.test_only_concrete_fields_allowed", "queries.tests.Queries4Tests.test_ticket15316_exclude_false", "expressions.tests.BasicExpressionsTests.test_exist_single_field_output_field", "expressions.tests.ExpressionOperatorTests.test_lefthand_addition", "expressions.test_deprecation.GetGroupByColsTest.test_missing_alias", "expressions.tests.ExpressionsNumericTests.test_fill_with_value_from_same_object", "expressions.tests.ReprTests.test_filtered_aggregates", "queries.tests.Queries1Tests.test_ticket4464", "aggregation.tests.AggregateTestCase.test_annotate_defer_select_related", "queries.tests.Queries1Tests.test_excluded_intermediary_m2m_table_joined", "queries.tests.ExcludeTests.test_exclude_with_circular_fk_relation", "queries.tests.Queries4Tests.test_ticket15316_one2one_filter_true", "annotations.tests.NonAggregateAnnotationTestCase.test_joined_transformed_annotation", "queries.tests.Exclude15786.test_ticket15786", "queries.tests.Queries4Tests.test_ticket15316_filter_false", "queries.tests.EmptyStringPromotionTests.test_empty_string_promotion", "queries.test_qs_combinators.QuerySetSetOperationTests.test_ordering_by_f_expression_and_alias", "expressions.tests.FTimeDeltaTests.test_datetime_subtraction_microseconds", "expressions.tests.ValueTests.test_deconstruct", "aggregation.tests.AggregateTestCase.test_annotate_over_annotate", "queries.tests.RelatedLookupTypeTests.test_correct_lookup", "aggregation.tests.AggregateTestCase.test_multiple_aggregates", "queries.tests.DisjunctiveFilterTests.test_ticket7872", "expressions.tests.BasicExpressionsTests.test_filter_inter_attribute", "queries.test_bulk_update.BulkUpdateTests.test_empty_objects", "expressions.tests.CombinableTests.test_negation", "aggregation.test_filter_argument.FilteredAggregateTests.test_plain_annotate", "annotations.tests.NonAggregateAnnotationTestCase.test_values_with_pk_annotation", "expressions.tests.ExpressionsNumericTests.test_increment_value", "queries.tests.ToFieldTests.test_recursive_fk", "queries.tests.EmptyStringsAsNullTest.test_21001", "expressions.tests.ExpressionOperatorTests.test_lefthand_transformed_field_bitwise_or", "expressions.tests.CombinableTests.test_reversed_or", "queries.tests.Queries1Tests.test_ticket_10790_5", "expressions.tests.CombinedExpressionTests.test_resolve_output_field", "queries.tests.DisjunctionPromotionTests.test_disjunction_promotion_select_related", "queries.tests.QuerySetSupportsPythonIdioms.test_slicing_cannot_reorder_queryset_once_sliced", "expressions.tests.BasicExpressionsTests.test_object_update_unsaved_objects", "queries.tests.ValuesQuerysetTests.test_extra_values_order_twice", "queries.tests.DefaultValuesInsertTest.test_no_extra_params", "expressions.tests.ExpressionOperatorTests.test_lefthand_bitwise_and", "queries.tests.Queries1Tests.test_ticket7323", "queries.test_q.QTests.test_deconstruct", "aggregation.tests.AggregateTestCase.test_distinct_on_aggregate", "queries.tests.ConditionalTests.test_in_list_limit", "queries.tests.Queries1Tests.test_ticket7791", "annotations.tests.AliasTests.test_order_by_alias_aggregate", "queries.tests.Queries4Tests.test_ticket15316_one2one_exclude_false", "expressions.tests.ValueTests.test_hash", "queries.test_bulk_update.BulkUpdateNoteTests.test_simple", "queries.tests.ValuesQuerysetTests.test_extra_values_order_multiple", "aggregation.test_filter_argument.FilteredAggregateTests.test_double_filtered_aggregates", "queries.tests.JoinReuseTest.test_fk_reuse_order_by", "queries.tests.ExcludeTests.test_to_field", "queries.tests.Queries1Tests.test_ticket_10790_6", "queries.tests.ValuesQuerysetTests.test_named_values_list_with_fields", "queries.tests.Queries4Tests.test_ticket11811", "queries.test_query.TestQuery.test_complex_query", "annotations.tests.NonAggregateAnnotationTestCase.test_combined_annotation_commutative", "queries.tests.ExcludeTest17600.test_exclude_plain", "annotations.tests.NonAggregateAnnotationTestCase.test_column_field_ordering_with_deferred", "queries.tests.Queries1Tests.test_ticket10205", "queries.tests.Queries6Tests.test_multiple_columns_with_the_same_name_slice", "queries.tests.Queries1Tests.test_ticket9926", "aggregation.tests.AggregateTestCase.test_avg_decimal_field", "aggregation.tests.AggregateTestCase.test_aggregate_join_transform", "aggregation.tests.AggregateTestCase.test_annotate_values_list", "expressions.tests.BasicExpressionsTests.test_annotate_values_aggregate", "expressions.tests.ReprTests.test_distinct_aggregates", "queries.tests.Queries1Tests.test_deferred_load_qs_pickling", "queries.tests.Queries6Tests.test_parallel_iterators", "aggregation.tests.AggregateTestCase.test_group_by_exists_annotation", "expressions.tests.BasicExpressionsTests.test_annotate_values_count", "aggregation.tests.AggregateTestCase.test_values_aggregation", "queries.tests.Queries1Tests.test_ticket7076", "expressions.tests.BasicExpressionsTests.test_order_by_multiline_sql", "queries.test_explain.ExplainTests.test_unknown_options", "expressions.tests.FTimeDeltaTests.test_datetime_subtraction", "queries.test_bulk_update.BulkUpdateNoteTests.test_set_field_to_null", "queries.tests.QuerySetBitwiseOperationTests.test_or_with_both_slice_and_ordering", "queries.tests.ManyToManyExcludeTest.test_ticket_12823", "queries.tests.Ticket22429Tests.test_ticket_22429", "queries.tests.Queries4Tests.test_ticket24525", "queries.tests.QuerysetOrderedTests.test_annotated_values_default_ordering", "queries.tests.Queries1Tests.test_ticket2091", "queries.tests.Queries1Tests.test_tickets_6180_6203", "aggregation.tests.AggregateTestCase.test_fkey_aggregate", "queries.test_query.TestQuery.test_multiple_fields", "expressions.tests.FieldTransformTests.test_month_aggregation", "queries.test_qs_combinators.QuerySetSetOperationTests.test_count_union", "expressions.tests.ValueTests.test_deconstruct_output_field", "annotations.tests.NonAggregateAnnotationTestCase.test_filter_decimal_annotation", "expressions.tests.IterableLookupInnerExpressionsTests.test_range_lookup_namedtuple", "queries.test_qs_combinators.QuerySetSetOperationTests.test_intersection_with_values", "aggregation.tests.AggregateTestCase.test_aggregate_annotation", "annotations.tests.NonAggregateAnnotationTestCase.test_combined_expression_annotation_with_aggregation", "queries.tests.DisjunctionPromotionTests.test_disjunction_promotion5_demote", "annotations.tests.AliasTests.test_alias_default_alias_expression", "aggregation.tests.AggregateTestCase.test_count", "aggregation.tests.AggregateTestCase.test_even_more_aggregate", "queries.tests.WhereNodeTest.test_empty_full_handling_disjunction", "expressions.tests.FTimeDeltaTests.test_durationfield_add", "queries.test_qs_combinators.QuerySetSetOperationTests.test_difference_with_values", "queries.tests.ValuesQuerysetTests.test_flat_extra_values_list", "queries.tests.JoinReuseTest.test_fk_reuse_disjunction", "queries.tests.Queries1Tests.test_ticket_10790_4", "queries.tests.NullableRelOrderingTests.test_ticket10028", "queries.tests.ValuesQuerysetTests.test_named_values_pickle", "expressions.tests.FTimeDeltaTests.test_negative_timedelta_update", "queries.tests.DisjunctionPromotionTests.test_disjunction_promotion7", "expressions.test_queryset_values.ValuesExpressionsTests.test_values_expression", "queries.test_query.TestQuery.test_negated_nullable", "queries.tests.Ticket20788Tests.test_ticket_20788", "queries.tests.Queries6Tests.test_tickets_8921_9188", "queries.test_query.TestQuery.test_filter_conditional", "aggregation.tests.AggregateTestCase.test_annotate_basic", "queries.test_q.QTests.test_combine_not_q_object", "queries.test_qs_combinators.QuerySetSetOperationTests.test_get_union", "expressions.tests.FTimeDeltaTests.test_duration_with_datetime", "queries.test_qs_combinators.QuerySetSetOperationTests.test_union_none", "queries.test_q.QTests.test_deconstruct_or", "expressions.tests.ExpressionOperatorTests.test_lefthand_bitwise_xor_null", "expressions.tests.IterableLookupInnerExpressionsTests.test_in_lookup_allows_F_expressions_and_expressions_for_integers", "queries.tests.Queries1Tests.test_ticket2306", "queries.test_query.TestQuery.test_foreign_key_exclusive", "expressions.tests.ValueTests.test_equal_output_field", "annotations.tests.NonAggregateAnnotationTestCase.test_annotation_filter_with_subquery", "queries.tests.WeirdQuerysetSlicingTests.test_empty_sliced_subquery", "queries.tests.QuerySetSupportsPythonIdioms.test_slicing_with_tests_is_not_lazy", "expressions.tests.ReprTests.test_functions", "annotations.tests.AliasTests.test_alias_annotate_with_aggregation", "expressions.tests.BasicExpressionsTests.test_order_of_operations", "expressions.test_queryset_values.ValuesExpressionsTests.test_values_list_expression", "queries.tests.Queries1Tests.test_ticket2253", "queries.tests.ExcludeTests.test_exclude_reverse_fk_field_ref", "queries.test_q.QTests.test_deconstruct_multiple_kwargs", "queries.tests.Ticket20101Tests.test_ticket_20101", "queries.test_query.TestQuery.test_foreign_key_f", "queries.tests.Ticket18785Tests.test_ticket_18785", "expressions.tests.FTimeDeltaTests.test_datetime_subquery_subtraction", "queries.tests.Queries1Tests.test_order_by_rawsql", "queries.tests.ValuesJoinPromotionTests.test_non_nullable_fk_not_promoted", "annotations.tests.NonAggregateAnnotationTestCase.test_custom_transform_annotation", "queries.tests.Queries1Tests.test_double_exclude", "aggregation.tests.AggregateTestCase.test_single_aggregate", "annotations.tests.NonAggregateAnnotationTestCase.test_arguments_must_be_expressions", "queries.test_bulk_update.BulkUpdateTests.test_json_field", "queries.tests.DisjunctiveFilterTests.test_ticket8283", "expressions.tests.ExpressionOperatorTests.test_lefthand_division", "queries.tests.ForeignKeyToBaseExcludeTests.test_ticket_21787", "queries.tests.Queries4Tests.test_ticket15316_one2one_exclude_true", "queries.test_qs_combinators.QuerySetSetOperationTests.test_difference_with_empty_qs", "queries.tests.ExcludeTests.test_exclude_nullable_fields", "queries.tests.SubqueryTests.test_related_sliced_subquery", "queries.test_qs_combinators.QuerySetSetOperationTests.test_union_with_values_list_and_order", "queries.tests.Queries1Tests.test_ticket_10790_1", "aggregation.tests.AggregateTestCase.test_annotate_values_aggregate", "queries.tests.ValuesQuerysetTests.test_named_values_list_expression", "expressions.tests.BasicExpressionsTests.test_outerref_with_operator", "expressions.tests.ExpressionOperatorTests.test_lefthand_bitwise_or", "queries.test_qs_combinators.QuerySetSetOperationTests.test_order_by_same_type", "queries.tests.ExcludeTest17600.test_exclude_with_q_is_equal_to_plain_exclude", "expressions.tests.CombinableTests.test_reversed_and", "queries.tests.ExcludeTests.test_ticket14511", "queries.tests.TestTicket24279.test_ticket_24278", "queries.test_qs_combinators.QuerySetSetOperationTests.test_exists_intersection", "annotations.tests.NonAggregateAnnotationTestCase.test_grouping_by_q_expression_annotation", "expressions.tests.FTimeDeltaTests.test_invalid_operator", "queries.test_qs_combinators.QuerySetSetOperationTests.test_union_multiple_models_with_values_list_and_order_by_extra_select", "queries.tests.Queries1Tests.test_ticket7235", "annotations.tests.NonAggregateAnnotationTestCase.test_boolean_value_annotation", "queries.tests.QuerysetOrderedTests.test_cleared_default_ordering", "queries.tests.Queries1Tests.test_ticket7096", "queries.tests.Queries1Tests.test_ticket_10790_combine", "queries.test_explain.ExplainTests.test_basic", "expressions.tests.BasicExpressionsTests.test_ticket_16731_startswith_lookup", "expressions.tests.ExpressionOperatorTests.test_right_hand_subtraction", "aggregation.tests.AggregateTestCase.test_order_of_precedence", "queries.tests.Ticket23605Tests.test_ticket_23605", "queries.test_qs_combinators.QuerySetSetOperationTests.test_union_with_two_annotated_values_list", "queries.tests.Queries1Tests.test_get_clears_ordering", "expressions.tests.ReprTests.test_expressions", "expressions.tests.BasicExpressionsTests.test_ticket_18375_kwarg_ordering_2", "aggregation.tests.AggregateTestCase.test_aggregation_subquery_annotation_exists", "queries.tests.RelatedLookupTypeTests.test_wrong_backward_lookup", "aggregation.tests.AggregateTestCase.test_aggregate_transform", "queries.tests.Queries1Tests.test_lookup_constraint_fielderror", "expressions.tests.ValueTests.test_compile_unresolved", "queries.test_query.TestQuery.test_clone_select_related", "annotations.tests.NonAggregateAnnotationTestCase.test_custom_functions_can_ref_other_functions", "aggregation.tests.AggregateTestCase.test_complex_values_aggregation", "expressions.tests.FTimeDeltaTests.test_date_minus_duration", "aggregation.tests.AggregateTestCase.test_aggregation_subquery_annotation_multivalued", "expressions.tests.BasicExpressionsTests.test_update_inherited_field_value", "expressions.tests.ExpressionOperatorTests.test_lefthand_power", "queries.tests.NullJoinPromotionOrTest.test_ticket_17886", "expressions.tests.BasicExpressionsTests.test_nested_outerref_with_function", "queries.tests.Queries1Tests.test_ticket19672", "expressions.tests.BasicExpressionsTests.test_explicit_output_field", "queries.test_bulk_update.BulkUpdateNoteTests.test_multiple_fields", "expressions.tests.ExpressionWrapperTests.test_non_empty_group_by", "queries.tests.Queries1Tests.test_tickets_7087_12242", "expressions.tests.FieldTransformTests.test_transform_in_values", "queries.tests.QuerySetSupportsPythonIdioms.test_slicing_cannot_filter_queryset_once_sliced", "queries.tests.RelatedLookupTypeTests.test_values_queryset_lookup", "queries.test_qs_combinators.QuerySetSetOperationTests.test_empty_qs_union_with_ordered_qs", "queries.tests.ExcludeTests.test_exclude_subquery", "queries.tests.CloneTests.test_no_model_options_cloning", "queries.tests.ValuesQuerysetTests.test_field_error_values_list", "queries.tests.DisjunctionPromotionTests.test_disjunction_promotion3_demote", "aggregation.tests.AggregateTestCase.test_nonaggregate_aggregation_throws", "queries.tests.JoinReuseTest.test_fk_reuse_annotation", "expressions.tests.ExpressionOperatorTests.test_right_hand_addition", "queries.tests.QuerySetExceptionTests.test_order_by_escape_prevention", "aggregation.test_filter_argument.FilteredAggregateTests.test_filtered_aggregates", "queries.tests.ExcludeTests.test_subquery_exclude_outerref", "queries.tests.Queries1Tests.test_order_by_tables", "queries.test_q.QTests.test_deconstruct_and", "annotations.tests.NonAggregateAnnotationTestCase.test_combined_f_expression_annotation_with_aggregation", "queries.tests.Queries5Tests.test_ticket5261", "queries.tests.ValuesQuerysetTests.test_extra_select_params_values_order_in_extra", "aggregation.tests.AggregateTestCase.test_filter_aggregate", "annotations.tests.NonAggregateAnnotationTestCase.test_column_field_ordering", "queries.tests.ValuesSubqueryTests.test_values_in_subquery", "expressions.tests.BasicExpressionsTests.test_new_object_save", "queries.tests.CloneTests.test_no_fields_cloning", "queries.tests.Queries1Tests.test_tickets_7448_7707", "annotations.tests.NonAggregateAnnotationTestCase.test_basic_annotation", "expressions.tests.ExistsTests.test_optimizations", "queries.tests.Queries4Tests.test_join_reuse_order", "queries.tests.ValuesQuerysetTests.test_extra_values", "expressions.tests.FTimeDeltaTests.test_date_subquery_subtraction", "queries.tests.Queries1Tests.test_ticket10432", "queries.test_qs_combinators.QuerySetSetOperationTests.test_count_union_empty_result", "queries.tests.NullJoinPromotionOrTest.test_ticket_21748_double_negated_or"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_215", "original_commit_message": "Fixed CVE-2022-28346 -- Protected QuerySet.annotate(), aggregate(), and extra() against SQL injection in column aliases.\nThanks Splunk team: Preston Elder, Jacob Davis, Jacob Moore,\nMatt Hanson, David Briggs, and a security researcher: Danylo Dmytriiev\n(DDV_UA) for the report.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex c07a4b342a..894aa7db4a 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -40,10 +40,15 @@ from django.db.models.sql.constants import INNER, LOUTER, ORDER_DIR, SINGLE\n from django.db.models.sql.datastructures import BaseTable, Empty, Join, MultiJoin\n from django.db.models.sql.where import AND, OR, ExtraWhere, NothingNode, WhereNode\n from django.utils.functional import cached_property\n+from django.utils.regex_helper import _lazy_re_compile\n from django.utils.tree import Node\n \n __all__ = [\"Query\", \"RawQuery\"]\n \n+# Quotation marks ('\"`[]), whitespace characters, semicolons, or inline\n+# SQL comments are forbidden in column aliases.\n+FORBIDDEN_ALIAS_PATTERN = _lazy_re_compile(r\"['`\\\"\\]\\[;\\s]|--|/\\*|\\*/\")\n+\n \n def get_field_names_from_opts(opts):\n     if opts is None:\n@@ -1091,8 +1096,16 @@ class Query(BaseExpression):\n             alias = seen[int_model] = join_info.joins[-1]\n         return alias or seen[None]\n \n+    def check_alias(self, alias):\n+        if FORBIDDEN_ALIAS_PATTERN.search(alias):\n+            raise ValueError(\n+                \"Column aliases cannot contain whitespace characters, quotation marks, \"\n+                \"semicolons, or SQL comments.\"\n+            )\n+\n     def add_annotation(self, annotation, alias, is_summary=False, select=True):\n         \"\"\"Add a single annotation expression to the Query.\"\"\"\n+        self.check_alias(alias)\n         annotation = annotation.resolve_expression(\n             self, allow_joins=True, reuse=None, summarize=is_summary\n         )\n@@ -2269,6 +2282,7 @@ class Query(BaseExpression):\n             else:\n                 param_iter = iter([])\n             for name, entry in select.items():\n+                self.check_alias(name)\n                 entry = str(entry)\n                 entry_params = []\n                 pos = entry.find(\"%s\")\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 3922478bf3..61da0ebfe7 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -2048,6 +2048,15 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertEqual(len(qs), 6)\n \n+    def test_alias_sql_injection(self):\n+        crafted_alias = \"\"\"injected_name\" from \"aggregation_author\"; --\"\"\"\n+        msg = (\n+            \"Column aliases cannot contain whitespace characters, quotation marks, \"\n+            \"semicolons, or SQL comments.\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            Author.objects.aggregate(**{crafted_alias: Avg(\"age\")})\n+\n     def test_exists_extra_where_with_aggregate(self):\n         qs = Book.objects.annotate(\n             count=Count(\"id\"),\n\ndiff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex 5106a377ac..52a268c4ae 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -1076,6 +1076,40 @@ class NonAggregateAnnotationTestCase(TestCase):\n             ],\n         )\n \n+    def test_alias_sql_injection(self):\n+        crafted_alias = \"\"\"injected_name\" from \"annotations_book\"; --\"\"\"\n+        msg = (\n+            \"Column aliases cannot contain whitespace characters, quotation marks, \"\n+            \"semicolons, or SQL comments.\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            Book.objects.annotate(**{crafted_alias: Value(1)})\n+\n+    def test_alias_forbidden_chars(self):\n+        tests = [\n+            'al\"ias',\n+            \"a'lias\",\n+            \"ali`as\",\n+            \"alia s\",\n+            \"alias\\t\",\n+            \"ali\\nas\",\n+            \"alias--\",\n+            \"ali/*as\",\n+            \"alias*/\",\n+            \"alias;\",\n+            # [] are used by MSSQL.\n+            \"alias[\",\n+            \"alias]\",\n+        ]\n+        msg = (\n+            \"Column aliases cannot contain whitespace characters, quotation marks, \"\n+            \"semicolons, or SQL comments.\"\n+        )\n+        for crafted_alias in tests:\n+            with self.subTest(crafted_alias):\n+                with self.assertRaisesMessage(ValueError, msg):\n+                    Book.objects.annotate(**{crafted_alias: Value(1)})\n+\n \n class AliasTests(TestCase):\n     @classmethod\n@@ -1339,3 +1373,12 @@ class AliasTests(TestCase):\n             with self.subTest(operation=operation):\n                 with self.assertRaisesMessage(FieldError, msg):\n                     getattr(qs, operation)(\"rating_alias\")\n+\n+    def test_alias_sql_injection(self):\n+        crafted_alias = \"\"\"injected_name\" from \"annotations_book\"; --\"\"\"\n+        msg = (\n+            \"Column aliases cannot contain whitespace characters, quotation marks, \"\n+            \"semicolons, or SQL comments.\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            Book.objects.alias(**{crafted_alias: Value(1)})\n\ndiff --git a/tests/expressions/test_queryset_values.py b/tests/expressions/test_queryset_values.py\nindex 147f02fffb..0dba623167 100644\n--- a/tests/expressions/test_queryset_values.py\n+++ b/tests/expressions/test_queryset_values.py\n@@ -34,6 +34,15 @@ class ValuesExpressionsTests(TestCase):\n             [{\"salary\": 10}, {\"salary\": 20}, {\"salary\": 30}],\n         )\n \n+    def test_values_expression_alias_sql_injection(self):\n+        crafted_alias = \"\"\"injected_name\" from \"expressions_company\"; --\"\"\"\n+        msg = (\n+            \"Column aliases cannot contain whitespace characters, quotation marks, \"\n+            \"semicolons, or SQL comments.\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            Company.objects.values(**{crafted_alias: F(\"ceo__salary\")})\n+\n     def test_values_expression_group_by(self):\n         # values() applies annotate() first, so values selected are grouped by\n         # id, not firstname.\n\ndiff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex f9d2ebf98f..7b70a5ae0a 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1898,6 +1898,15 @@ class Queries5Tests(TestCase):\n             Note.objects.extra(select={\"foo\": \"'bar %%s'\"})[0].foo, \"bar %s\"\n         )\n \n+    def test_extra_select_alias_sql_injection(self):\n+        crafted_alias = \"\"\"injected_name\" from \"queries_note\"; --\"\"\"\n+        msg = (\n+            \"Column aliases cannot contain whitespace characters, quotation marks, \"\n+            \"semicolons, or SQL comments.\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            Note.objects.extra(select={crafted_alias: \"1\"})\n+\n     def test_queryset_reuse(self):\n         # Using querysets doesn't mutate aliases.\n         authors = Author.objects.filter(Q(name=\"a1\") | Q(name=\"nonexistent\"))\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "93cae5cb2f9a4ef1514cf1a41f714fef08005200", "source_date": "Mon Apr 11 08:59:33 2022 +0200", "source_tag": "4.1", "target_commit": "2c09e68ec911919360d5f8502cefc312f9e03c5d", "target_date": "Mon Apr 11 09:22:17 2022 +0200", "target_tag": "2.2.28", "FAIL TO PASS": ["expressions.test_queryset_values.ValuesExpressionsTests.test_values_expression_alias_sql_injection", "aggregation.tests.AggregateTestCase.test_alias_sql_injection", "queries.tests.Queries5Tests.test_extra_select_alias_sql_injection", "annotations.tests.NonAggregateAnnotationTestCase.test_alias_sql_injection", "annotations.tests.NonAggregateAnnotationTestCase.test_alias_forbidden_chars"], "PASS TO PASS": ["queries.tests.DisjunctionPromotionTests.test_disjunction_promotion6", "annotations.tests.NonAggregateAnnotationTestCase.test_filter_annotation_with_double_f", "queries.tests.CustomPkTests.test_ticket7371", "queries.tests.WhereNodeTest.test_empty_full_handling_conjunction", "aggregation.tests.AggregateTestCase.test_annotate_defer", "queries.tests.Queries5Tests.test_ticket7045", "queries.tests.QuerySetSupportsPythonIdioms.test_slicing_with_steps_can_be_used", "queries.tests.UnionTests.test_BAB_BACB", "queries.tests.NullableRelOrderingTests.test_join_already_in_query", "aggregation.tests.AggregateTestCase.test_aggregate_in_order_by", "queries.tests.Queries1Tests.test_tickets_2874_3002", "annotations.tests.NonAggregateAnnotationTestCase.test_update_with_annotation", "queries.tests.Queries4Tests.test_ticket15316_exclude_true", "queries.tests.Queries1Tests.test_ticket_10790_2", "queries.tests.Queries6Tests.test_nested_queries_sql", "queries.tests.NullJoinPromotionOrTest.test_ticket_21748_complex_filter", "queries.tests.Queries1Tests.test_heterogeneous_qs_combination", "annotations.tests.NonAggregateAnnotationTestCase.test_joined_annotation", "aggregation.tests.AggregateTestCase.test_non_grouped_annotation_not_in_group_by", "queries.tests.Queries1Tests.test_ticket7181", "queries.tests.Queries1Tests.test_reasonable_number_of_subq_aliases", "queries.tests.ToFieldTests.test_nested_in_subquery", "annotations.tests.NonAggregateAnnotationTestCase.test_mixed_type_annotation_date_interval", "queries.tests.CloneTests.test_evaluated_queryset_as_argument", "queries.tests.UnionTests.test_BAB_BAC", "queries.tests.Queries1Tests.test_ticket7813", "queries.tests.Queries4Tests.test_ticket15316_one2one_filter_false", "aggregation.tests.AggregateTestCase.test_aggregate_multi_join", "queries.tests.IsNullTests.test_to_field", "queries.tests.Queries1Tests.test_ticket2496", "queries.tests.SubqueryTests.test_distinct_ordered_sliced_subquery", "queries.tests.Queries1Tests.test_tickets_2076_7256", "queries.tests.Queries1Tests.test_ticket_20250", "queries.tests.QuerysetOrderedTests.test_empty_queryset", "queries.tests.ToFieldTests.test_reverse_in", "queries.tests.ValuesQuerysetTests.test_extra_values_order_in_extra", "queries.tests.EmptyQuerySetTests.test_emptyqueryset_values", "queries.tests.Queries1Tests.test_ticket10742", "queries.tests.WeirdQuerysetSlicingTests.test_empty_sliced_subquery_exclude", "aggregation.tests.AggregateTestCase.test_ticket17424", "queries.tests.Queries1Tests.test_tickets_4088_4306", "aggregation.tests.AggregateTestCase.test_aggregation_expressions", "aggregation.tests.AggregateTestCase.test_backwards_m2m_annotate", "queries.tests.QuerySetBitwiseOperationTests.test_or_with_rhs_slice", "queries.tests.QuerysetOrderedTests.test_order_by_extra", "aggregation.tests.AggregateTestCase.test_aggregate_alias", "queries.tests.DisjunctionPromotionTests.test_disjunction_promotion1", "queries.tests.GeneratorExpressionTests.test_ticket10432", "aggregation.tests.AggregateTestCase.test_aggregate_over_complex_annotation", "queries.tests.NullJoinPromotionOrTest.test_null_join_demotion", "queries.tests.QuerysetOrderedTests.test_annotated_ordering", "queries.tests.Queries4Tests.test_ticket14876", "queries.tests.NullJoinPromotionOrTest.test_ticket_21748", "queries.tests.ValuesQuerysetTests.test_flat_values_list", "annotations.tests.NonAggregateAnnotationTestCase.test_filter_wrong_annotation", "queries.tests.SubqueryTests.test_slice_subquery_and_query", "queries.tests.JoinReuseTest.test_inverted_q_across_relations", "aggregation.tests.AggregateTestCase.test_missing_output_field_raises_error", "queries.tests.QuerySetSupportsPythonIdioms.test_slicing_cannot_combine_queries_once_sliced", "aggregation.tests.AggregateTestCase.test_nonfield_annotation", "queries.tests.QuerySetBitwiseOperationTests.test_or_with_lhs_slice", "queries.tests.ValuesJoinPromotionTests.test_ticket_21376", "queries.tests.Queries5Tests.test_ordering", "queries.tests.Queries1Tests.test_subquery_condition", "queries.tests.Ticket21203Tests.test_ticket_21203", "aggregation.tests.AggregateTestCase.test_add_implementation", "queries.tests.SubqueryTests.test_ordered_subselect", "queries.tests.Queries4Tests.test_order_by_resetting", "queries.tests.TestInvalidValuesRelation.test_invalid_values", "queries.tests.ToFieldTests.test_recursive_fk_reverse", "annotations.tests.NonAggregateAnnotationTestCase.test_null_annotation", "queries.tests.Queries2Tests.test_ticket4289", "aggregation.tests.AggregateTestCase.test_annotation", "queries.tests.QuerySetSupportsPythonIdioms.test_can_combine_queries_using_and_and_or_operators", "aggregation.tests.AggregateTestCase.test_count_star", "queries.tests.Queries1Tests.test_ticket9985", "queries.tests.Queries1Tests.test_ticket6074", "annotations.tests.NonAggregateAnnotationTestCase.test_mti_annotations", "aggregation.tests.AggregateTestCase.test_empty_aggregate", "annotations.tests.NonAggregateAnnotationTestCase.test_values_annotation", "queries.tests.QuerySetSupportsPythonIdioms.test_slicing_negative_indexing_not_supported_for_range", "queries.tests.Queries1Tests.test_ticket9997", "queries.tests.ValuesQuerysetTests.test_extra_values_list", "aggregation.tests.AggregateTestCase.test_annotate_m2m", "queries.tests.ExcludeTest17600.test_exclude_plain_distinct", "queries.tests.ValuesQuerysetTests.test_named_values_list_expression_with_default_alias", "queries.tests.UnionTests.test_A_AB", "queries.tests.QuerySetSupportsPythonIdioms.test_can_get_number_of_items_in_queryset_using_standard_len", "queries.tests.ExcludeTest17600.test_exclude_with_q_object_distinct", "aggregation.tests.AggregateTestCase.test_related_aggregate", "aggregation.tests.AggregateTestCase.test_sum_duration_field", "queries.tests.EscapingTests.test_ticket_7302", "queries.tests.EmptyQuerySetTests.test_values_subquery", "queries.tests.JoinReuseTest.test_revfk_noreuse", "queries.tests.Queries3Tests.test_ticket8683", "aggregation.tests.AggregateTestCase.test_complex_aggregations_require_kwarg", "aggregation.tests.AggregateTestCase.test_values_annotation_with_expression", "queries.tests.Queries1Tests.test_ticket_10790_8", "aggregation.tests.AggregateTestCase.test_combine_different_types", "queries.tests.DisjunctionPromotionTests.test_disjunction_promotion2", "queries.tests.WhereNodeTest.test_empty_nodes", "annotations.tests.NonAggregateAnnotationTestCase.test_mixed_type_annotation_numbers", "queries.tests.Ticket20955Tests.test_ticket_20955", "queries.tests.ToFieldTests.test_in_subquery", "queries.tests.Queries4Tests.test_combine_join_reuse", "queries.tests.DoubleInSubqueryTests.test_double_subquery_in", "aggregation.tests.AggregateTestCase.test_annotation_expressions", "annotations.tests.NonAggregateAnnotationTestCase.test_custom_functions", "aggregation.tests.AggregateTestCase.test_decimal_max_digits_has_no_effect", "queries.tests.Queries3Tests.test_ticket7107", "annotations.tests.NonAggregateAnnotationTestCase.test_defer_annotation", "expressions.test_queryset_values.ValuesExpressionsTests.test_values_expression_group_by", "aggregation.tests.AggregateTestCase.test_dates_with_aggregation", "queries.tests.ExistsSql.test_ticket_18414", "queries.tests.Queries4Tests.test_order_by_reverse_fk", "aggregation.tests.AggregateTestCase.test_more_aggregation", "queries.tests.Queries1Tests.test_tickets_5324_6704", "aggregation.tests.AggregateTestCase.test_arguments_must_be_expressions", "queries.tests.NullInExcludeTest.test_null_in_exclude_qs", "queries.tests.Queries1Tests.test_ticket6981", "queries.tests.ToFieldTests.test_single_object_reverse", "queries.tests.SubclassFKTests.test_ticket7778", "queries.tests.Queries1Tests.test_ticket4358", "annotations.tests.NonAggregateAnnotationTestCase.test_filter_annotation", "queries.tests.Queries1Tests.test_avoid_infinite_loop_on_too_many_subqueries", "queries.tests.DisjunctionPromotionTests.test_disjunction_promotion4_demote", "queries.tests.QuerySetExceptionTests.test_invalid_queryset_model", "queries.tests.Queries1Tests.test_ticket1050", "queries.tests.ToFieldTests.test_single_object", "queries.tests.Queries4Tests.test_ticket15316_filter_true", "expressions.test_queryset_values.ValuesExpressionsTests.test_chained_values_with_expression", "queries.tests.NullJoinPromotionOrTest.test_isnull_filter_promotion", "queries.tests.NullJoinPromotionOrTest.test_ticket_21748_double_negated_and", "queries.tests.Queries1Tests.test_error_raised_on_filter_with_dictionary", "queries.tests.TestTicket24605.test_ticket_24605", "queries.tests.WeirdQuerysetSlicingTests.test_zero_length_values_slicing", "queries.tests.QuerysetOrderedTests.test_no_default_or_explicit_ordering", "queries.tests.Queries1Tests.test_ticket7098", "queries.tests.Queries4Tests.test_ticket10181", "queries.tests.Queries1Tests.test_ticket6154", "annotations.tests.NonAggregateAnnotationTestCase.test_annotate_with_aggregation", "queries.tests.Queries1Tests.test_exclude_in", "queries.tests.Queries1Tests.test_ticket7378", "queries.tests.Queries1Tests.test_order_by_join_unref", "annotations.tests.NonAggregateAnnotationTestCase.test_order_by_annotation", "queries.tests.Queries2Tests.test_ticket12239", "queries.tests.Queries1Tests.test_ticket3141", "queries.tests.Queries6Tests.test_ticket_11320", "queries.tests.QuerySetBitwiseOperationTests.test_or_with_both_slice", "annotations.tests.NonAggregateAnnotationTestCase.test_aggregate_over_annotation", "annotations.tests.NonAggregateAnnotationTestCase.test_annotate_exists", "queries.tests.Queries5Tests.test_extra_select_literal_percent_s", "queries.tests.EmptyQuerySetTests.test_ticket_19151", "queries.tests.Queries5Tests.test_ticket9848", "queries.tests.ValuesQuerysetTests.test_named_values_list_bad_field_name", "queries.tests.EmptyStringsAsNullTest.test_joined_exclude", "queries.tests.ReverseJoinTrimmingTest.test_reverse_trimming", "queries.tests.Queries1Tests.test_tickets_7204_7506", "aggregation.tests.AggregateTestCase.test_sum_distinct_aggregate", "queries.tests.JoinReuseTest.test_revo2o_reuse", "queries.tests.ExcludeTest17600.test_exclude_with_q_is_equal_to_plain_exclude_variation", "queries.tests.DisjunctionPromotionTests.test_disjunction_promotion3", "aggregation.tests.AggregateTestCase.test_annotate_values", "queries.tests.QuerysetOrderedTests.test_explicit_ordering", "queries.tests.IsNullTests.test_primary_key", "queries.tests.RelatedLookupTypeTests.test_wrong_type_lookup", "queries.tests.WeirdQuerysetSlicingTests.test_empty_resultset_sql", "aggregation.tests.AggregateTestCase.test_multi_arg_aggregate", "queries.tests.Queries1Tests.test_ticket_10790_7", "queries.tests.QuerySetExceptionTests.test_invalid_qs_list", "queries.tests.Queries1Tests.test_common_mixed_case_foreign_keys", "queries.tests.UnionTests.test_AB_ACB", "queries.tests.Queries1Tests.test_ticket9411", "queries.tests.Queries1Tests.test_tickets_1878_2939", "annotations.tests.NonAggregateAnnotationTestCase.test_decimal_annotation", "queries.tests.Queries6Tests.test_ticket3739", "aggregation.tests.AggregateTestCase.test_avg_duration_field", "queries.tests.ToFieldTests.test_in_query", "queries.tests.RelabelCloneTest.test_ticket_19964", "queries.tests.SelectRelatedTests.test_tickets_3045_3288", "queries.tests.JoinReuseTest.test_fk_reuse", "annotations.tests.NonAggregateAnnotationTestCase.test_annotation_in_f_grouped_by_annotation", "queries.tests.ValuesJoinPromotionTests.test_values_no_promotion_for_existing", "aggregation.tests.AggregateTestCase.test_grouped_annotation_in_group_by", "queries.tests.Queries1Tests.test_ticket4510", "queries.tests.ProxyQueryCleanupTest.test_evaluated_proxy_count", "queries.tests.ValuesQuerysetTests.test_extra_multiple_select_params_values_order_by", "queries.tests.DisjunctionPromotionTests.test_disjunction_promotion_fexpression", "aggregation.tests.AggregateTestCase.test_expression_on_aggregation", "annotations.tests.NonAggregateAnnotationTestCase.test_order_by_aggregate", "queries.tests.SubqueryTests.test_sliced_delete", "annotations.tests.NonAggregateAnnotationTestCase.test_annotation_reverse_m2m", "queries.tests.RawQueriesTests.test_ticket14729", "queries.tests.Queries3Tests.test_ticket22023", "queries.tests.WeirdQuerysetSlicingTests.test_tickets_7698_10202", "queries.tests.DisjunctionPromotionTests.test_disjunction_promotion4", "queries.tests.Queries1Tests.test_ticket3037", "queries.tests.Queries1Tests.test_ticket_10790_3", "queries.tests.JoinReuseTest.test_fk_reuse_select_related", "queries.tests.Queries1Tests.test_ticket2902", "queries.tests.Queries6Tests.test_distinct_ordered_sliced_subquery_aggregation", "queries.tests.QuerySetExceptionTests.test_invalid_order_by", "queries.tests.QuerySetExceptionTests.test_iter_exceptions", "aggregation.tests.AggregateTestCase.test_annotated_aggregate_over_annotated_aggregate", "queries.tests.NullJoinPromotionOrTest.test_ticket_21366", "annotations.tests.NonAggregateAnnotationTestCase.test_filter_annotation_with_f", "aggregation.tests.AggregateTestCase.test_ticket12886", "queries.tests.Queries1Tests.test_tickets_5321_7070", "queries.tests.ComparisonTests.test_ticket8597", "queries.tests.UnionTests.test_A_AB2", "queries.tests.QuerySetSupportsPythonIdioms.test_can_get_items_using_index_and_slice_notation", "queries.tests.UnionTests.test_BA_BCA__BAB_BAC_BCA", "queries.tests.Queries1Tests.test_ticket2400", "aggregation.tests.AggregateTestCase.test_filtering", "queries.tests.ReverseM2MCustomPkTests.test_ticket_21879", "queries.tests.Ticket14056Tests.test_ticket_14056", "queries.tests.Queries2Tests.test_ticket7759", "queries.tests.QuerySetSupportsPythonIdioms.test_slicing_without_step_is_lazy", "queries.tests.Queries1Tests.test_tickets_2080_3592", "aggregation.tests.AggregateTestCase.test_count_distinct_expression", "aggregation.tests.AggregateTestCase.test_ticket11881", "queries.tests.Queries5Tests.test_ticket7256", "queries.tests.ExistsSql.test_exists", "aggregation.tests.AggregateTestCase.test_annotate_ordering", "queries.tests.ManyToManyExcludeTest.test_exclude_many_to_many", "queries.tests.EmptyStringsAsNullTest.test_direct_exclude", "queries.tests.Queries1Tests.test_exclude", "queries.tests.ValuesQuerysetTests.test_named_values_list_without_fields", "queries.tests.QuerySetSupportsPythonIdioms.test_slicing_can_slice_again_after_slicing", "annotations.tests.NonAggregateAnnotationTestCase.test_chaining_annotation_filter_with_m2m", "queries.tests.Ticket12807Tests.test_ticket_12807", "annotations.tests.NonAggregateAnnotationTestCase.test_empty_expression_annotation", "queries.tests.Queries1Tests.test_ticket1801", "queries.tests.NullInExcludeTest.test_double_exclude", "queries.tests.ValuesQuerysetTests.test_named_values_list_flat", "expressions.test_queryset_values.ValuesExpressionsTests.test_values_list_expression_flat", "queries.tests.ConditionalTests.test_infinite_loop", "queries.tests.QuerySetSupportsPythonIdioms.test_slicing_negative_indexing_not_supported_for_single_element", "annotations.tests.NonAggregateAnnotationTestCase.test_basic_f_annotation", "queries.tests.ExcludeTest17600.test_exclude_with_q_object_no_distinct", "queries.tests.Queries1Tests.test_ticket8439", "annotations.tests.NonAggregateAnnotationTestCase.test_filter_agg_with_double_f", "queries.tests.Queries1Tests.test_ticket7277", "aggregation.tests.AggregateTestCase.test_reverse_fkey_annotate", "queries.tests.Queries1Tests.test_nested_exclude", "annotations.tests.NonAggregateAnnotationTestCase.test_annotation_with_m2m", "queries.tests.Queries1Tests.test_ticket7155", "queries.tests.Queries1Tests.test_ticket17429", "queries.tests.Queries4Tests.test_ticket7095", "queries.tests.Queries4Tests.test_ticket15316_exclude_false", "queries.tests.Queries1Tests.test_ticket4464", "aggregation.tests.AggregateTestCase.test_annotate_defer_select_related", "queries.tests.Queries4Tests.test_ticket15316_one2one_filter_true", "queries.tests.Exclude15786.test_ticket15786", "queries.tests.Queries4Tests.test_ticket15316_filter_false", "queries.tests.EmptyStringPromotionTests.test_empty_string_promotion", "aggregation.tests.AggregateTestCase.test_annotate_over_annotate", "queries.tests.RelatedLookupTypeTests.test_correct_lookup", "aggregation.tests.AggregateTestCase.test_multiple_aggregates", "queries.tests.DisjunctiveFilterTests.test_ticket7872", "annotations.tests.NonAggregateAnnotationTestCase.test_values_with_pk_annotation", "queries.tests.ToFieldTests.test_recursive_fk", "queries.tests.EmptyStringsAsNullTest.test_21001", "queries.tests.Queries1Tests.test_ticket_10790_5", "queries.tests.DisjunctionPromotionTests.test_disjunction_promotion_select_related", "queries.tests.QuerySetSupportsPythonIdioms.test_slicing_cannot_reorder_queryset_once_sliced", "queries.tests.ValuesQuerysetTests.test_extra_values_order_twice", "queries.tests.DefaultValuesInsertTest.test_no_extra_params", "queries.tests.Queries1Tests.test_ticket7323", "queries.tests.ConditionalTests.test_in_list_limit", "queries.tests.Queries1Tests.test_ticket7791", "queries.tests.Queries4Tests.test_ticket15316_one2one_exclude_false", "queries.tests.ValuesQuerysetTests.test_extra_values_order_multiple", "queries.tests.JoinReuseTest.test_fk_reuse_order_by", "queries.tests.ExcludeTests.test_to_field", "queries.tests.Queries1Tests.test_ticket_10790_6", "queries.tests.ValuesQuerysetTests.test_named_values_list_with_fields", "queries.tests.Queries4Tests.test_ticket11811", "annotations.tests.NonAggregateAnnotationTestCase.test_combined_annotation_commutative", "queries.tests.ExcludeTest17600.test_exclude_plain", "annotations.tests.NonAggregateAnnotationTestCase.test_column_field_ordering_with_deferred", "queries.tests.Queries1Tests.test_ticket10205", "queries.tests.Queries6Tests.test_multiple_columns_with_the_same_name_slice", "queries.tests.Queries1Tests.test_ticket9926", "aggregation.tests.AggregateTestCase.test_avg_decimal_field", "aggregation.tests.AggregateTestCase.test_annotate_values_list", "queries.tests.Queries1Tests.test_deferred_load_qs_pickling", "queries.tests.Queries6Tests.test_parallel_iterators", "queries.tests.Queries1Tests.test_ticket7076", "aggregation.tests.AggregateTestCase.test_values_aggregation", "queries.tests.QuerySetBitwiseOperationTests.test_or_with_both_slice_and_ordering", "queries.tests.ManyToManyExcludeTest.test_ticket_12823", "queries.tests.Ticket22429Tests.test_ticket_22429", "queries.tests.Queries4Tests.test_ticket24525", "queries.tests.Queries1Tests.test_ticket2091", "queries.tests.Queries1Tests.test_tickets_6180_6203", "aggregation.tests.AggregateTestCase.test_fkey_aggregate", "annotations.tests.NonAggregateAnnotationTestCase.test_filter_decimal_annotation", "aggregation.tests.AggregateTestCase.test_aggregate_annotation", "queries.tests.DisjunctionPromotionTests.test_disjunction_promotion5_demote", "aggregation.tests.AggregateTestCase.test_count", "aggregation.tests.AggregateTestCase.test_even_more_aggregate", "queries.tests.WhereNodeTest.test_empty_full_handling_disjunction", "queries.tests.ValuesQuerysetTests.test_flat_extra_values_list", "queries.tests.JoinReuseTest.test_fk_reuse_disjunction", "queries.tests.Queries1Tests.test_ticket_10790_4", "queries.tests.NullableRelOrderingTests.test_ticket10028", "queries.tests.DisjunctionPromotionTests.test_disjunction_promotion7", "expressions.test_queryset_values.ValuesExpressionsTests.test_values_expression", "queries.tests.Ticket20788Tests.test_ticket_20788", "queries.tests.Queries6Tests.test_tickets_8921_9188", "aggregation.tests.AggregateTestCase.test_annotate_basic", "queries.tests.Queries1Tests.test_ticket2306", "queries.tests.WeirdQuerysetSlicingTests.test_empty_sliced_subquery", "annotations.tests.NonAggregateAnnotationTestCase.test_annotation_filter_with_subquery", "queries.tests.QuerySetSupportsPythonIdioms.test_slicing_with_tests_is_not_lazy", "queries.tests.Queries1Tests.test_ticket2253", "expressions.test_queryset_values.ValuesExpressionsTests.test_values_list_expression", "queries.tests.Ticket20101Tests.test_ticket_20101", "queries.tests.Ticket18785Tests.test_ticket_18785", "queries.tests.ValuesJoinPromotionTests.test_non_nullable_fk_not_promoted", "queries.tests.Queries1Tests.test_double_exclude", "aggregation.tests.AggregateTestCase.test_single_aggregate", "annotations.tests.NonAggregateAnnotationTestCase.test_arguments_must_be_expressions", "queries.tests.DisjunctiveFilterTests.test_ticket8283", "queries.tests.ForeignKeyToBaseExcludeTests.test_ticket_21787", "queries.tests.Queries4Tests.test_ticket15316_one2one_exclude_true", "queries.tests.SubqueryTests.test_related_sliced_subquery", "queries.tests.Queries1Tests.test_ticket_10790_1", "aggregation.tests.AggregateTestCase.test_annotate_values_aggregate", "queries.tests.ValuesQuerysetTests.test_named_values_list_expression", "queries.tests.ExcludeTest17600.test_exclude_with_q_is_equal_to_plain_exclude", "queries.tests.ExcludeTests.test_ticket14511", "queries.tests.TestTicket24279.test_ticket_24278", "queries.tests.Queries1Tests.test_ticket7235", "annotations.tests.NonAggregateAnnotationTestCase.test_boolean_value_annotation", "queries.tests.QuerysetOrderedTests.test_cleared_default_ordering", "queries.tests.Queries1Tests.test_ticket7096", "queries.tests.Queries1Tests.test_ticket_10790_combine", "aggregation.tests.AggregateTestCase.test_order_of_precedence", "queries.tests.Ticket23605Tests.test_ticket_23605", "queries.tests.Queries1Tests.test_get_clears_ordering", "queries.tests.RelatedLookupTypeTests.test_wrong_backward_lookup", "queries.tests.Queries1Tests.test_lookup_constraint_fielderror", "annotations.tests.NonAggregateAnnotationTestCase.test_custom_functions_can_ref_other_functions", "aggregation.tests.AggregateTestCase.test_complex_values_aggregation", "queries.tests.NullJoinPromotionOrTest.test_ticket_17886", "queries.tests.Queries1Tests.test_ticket19672", "queries.tests.Queries1Tests.test_tickets_7087_12242", "queries.tests.QuerySetSupportsPythonIdioms.test_slicing_cannot_filter_queryset_once_sliced", "queries.tests.RelatedLookupTypeTests.test_values_queryset_lookup", "queries.tests.CloneTests.test_no_model_options_cloning", "queries.tests.ValuesQuerysetTests.test_field_error_values_list", "queries.tests.DisjunctionPromotionTests.test_disjunction_promotion3_demote", "aggregation.tests.AggregateTestCase.test_nonaggregate_aggregation_throws", "queries.tests.JoinReuseTest.test_fk_reuse_annotation", "queries.tests.Queries1Tests.test_order_by_tables", "queries.tests.Queries5Tests.test_ticket5261", "queries.tests.ValuesQuerysetTests.test_extra_select_params_values_order_in_extra", "aggregation.tests.AggregateTestCase.test_filter_aggregate", "annotations.tests.NonAggregateAnnotationTestCase.test_column_field_ordering", "queries.tests.ValuesSubqueryTests.test_values_in_subquery", "queries.tests.CloneTests.test_no_fields_cloning", "queries.tests.Queries1Tests.test_tickets_7448_7707", "annotations.tests.NonAggregateAnnotationTestCase.test_basic_annotation", "queries.tests.Queries4Tests.test_join_reuse_order", "queries.tests.ValuesQuerysetTests.test_extra_values", "queries.tests.Queries1Tests.test_ticket10432", "queries.tests.NullJoinPromotionOrTest.test_ticket_21748_double_negated_or"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_1240", "original_commit_message": "Validate client ID for approvals\n[#143844261] https://www.pivotaltracker.com/story/show/143844261", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/account/ProfileController.java b/server/src/main/java/org/cloudfoundry/identity/uaa/account/ProfileController.java\nindex d4da04278..a1a2cff64 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/account/ProfileController.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/account/ProfileController.java\n@@ -12,21 +12,27 @@\n  *******************************************************************************/\n package org.cloudfoundry.identity.uaa.account;\n \n-import org.cloudfoundry.identity.uaa.authentication.UaaPrincipal;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.cloudfoundry.identity.uaa.approval.Approval;\n import org.cloudfoundry.identity.uaa.approval.ApprovalsService;\n import org.cloudfoundry.identity.uaa.approval.DescribedApproval;\n-import org.cloudfoundry.identity.uaa.oauth.client.ClientConstants;\n+import org.cloudfoundry.identity.uaa.authentication.UaaPrincipal;\n import org.cloudfoundry.identity.uaa.constants.OriginKeys;\n-import org.cloudfoundry.identity.uaa.approval.Approval;\n+import org.cloudfoundry.identity.uaa.oauth.client.ClientConstants;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.oauth2.provider.ClientDetails;\n import org.springframework.security.oauth2.provider.ClientDetailsService;\n+import org.springframework.security.oauth2.provider.NoSuchClientException;\n import org.springframework.stereotype.Controller;\n import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.servlet.View;\n+import org.springframework.web.servlet.view.RedirectView;\n \n import java.util.ArrayList;\n import java.util.Collection;\n@@ -37,6 +43,8 @@ import java.util.Map;\n @Controller\n public class ProfileController {\n \n+    protected static Log logger = LogFactory.getLog(ProfileController.class);\n+\n     private final ApprovalsService approvalsService;\n     private final ClientDetailsService clientDetailsService;\n \n@@ -108,6 +116,13 @@ public class ProfileController {\n         return \"redirect:profile\";\n     }\n \n+    @ExceptionHandler\n+    public View handleException(NoSuchClientException nsce) {\n+        logger.debug(\"Unable to find client for approvals:\"+nsce.getMessage());\n+        return new RedirectView(\"profile?error_message_code=request.invalid_parameter\", true);\n+    }\n+\n+\n     private boolean isUaaManagedUser(Authentication authentication) {\n         if (authentication.getPrincipal() instanceof UaaPrincipal) {\n             UaaPrincipal principal = (UaaPrincipal) authentication.getPrincipal();\n\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/approval/ApprovalsAdminEndpoints.java b/server/src/main/java/org/cloudfoundry/identity/uaa/approval/ApprovalsAdminEndpoints.java\nindex ccbfee612..bdaa4db55 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/approval/ApprovalsAdminEndpoints.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/approval/ApprovalsAdminEndpoints.java\n@@ -1,5 +1,5 @@\n /*******************************************************************************\n- *     Cloud Foundry \n+ *     Cloud Foundry\n  *     Copyright (c) [2009-2016] Pivotal Software, Inc. All Rights Reserved.\n  *\n  *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n@@ -12,41 +12,45 @@\n  *******************************************************************************/\n package org.cloudfoundry.identity.uaa.approval;\n \n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-import org.cloudfoundry.identity.uaa.oauth.client.ClientConstants;\n-import org.cloudfoundry.identity.uaa.web.ConvertingExceptionView;\n-import org.cloudfoundry.identity.uaa.web.ExceptionReport;\n import org.cloudfoundry.identity.uaa.error.UaaException;\n import org.cloudfoundry.identity.uaa.resources.ActionResult;\n import org.cloudfoundry.identity.uaa.security.DefaultSecurityContextAccessor;\n import org.cloudfoundry.identity.uaa.security.SecurityContextAccessor;\n import org.cloudfoundry.identity.uaa.user.UaaUserDatabase;\n import org.cloudfoundry.identity.uaa.util.UaaPagingUtils;\n+import org.cloudfoundry.identity.uaa.web.ConvertingExceptionView;\n+import org.cloudfoundry.identity.uaa.web.ExceptionReport;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.http.converter.HttpMessageConverter;\n import org.springframework.security.access.AccessDeniedException;\n import org.springframework.security.core.userdetails.UsernameNotFoundException;\n-import org.springframework.security.oauth2.provider.ClientDetails;\n import org.springframework.security.oauth2.provider.ClientDetailsService;\n+import org.springframework.security.oauth2.provider.NoSuchClientException;\n import org.springframework.security.oauth2.provider.client.BaseClientDetails;\n import org.springframework.stereotype.Controller;\n import org.springframework.util.Assert;\n import org.springframework.util.StringUtils;\n-import org.springframework.web.bind.annotation.*;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n import org.springframework.web.client.RestTemplate;\n import org.springframework.web.servlet.View;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n @Controller\n public class ApprovalsAdminEndpoints implements InitializingBean, ApprovalsControllerService {\n \n@@ -168,6 +172,7 @@ public class ApprovalsAdminEndpoints implements InitializingBean, ApprovalsContr\n     @ResponseBody\n     @Override\n     public List<Approval> updateClientApprovals(@PathVariable String clientId, @RequestBody Approval[] approvals) {\n+        clientDetailsService.loadClientByClientId(clientId);\n         String currentUserId = getCurrentUserId();\n         logger.debug(\"Updating approvals for user: \" + currentUserId);\n         approvalStore.revokeApprovals(String.format(USER_AND_CLIENT_FILTER_TEMPLATE, currentUserId, clientId));\n@@ -202,10 +207,17 @@ public class ApprovalsAdminEndpoints implements InitializingBean, ApprovalsContr\n     public ActionResult revokeApprovals(@RequestParam(required = true) String clientId) {\n         String username = getCurrentUserId();\n         logger.debug(\"Revoking all existing approvals for user: \" + username + \" and client \" + clientId);\n+        clientDetailsService.loadClientByClientId(clientId);\n         approvalStore.revokeApprovals(String.format(USER_AND_CLIENT_FILTER_TEMPLATE, username, clientId));\n         return new ActionResult(\"ok\", \"Approvals of user \" + username + \" and client \" + clientId + \" revoked\");\n     }\n \n+    @ExceptionHandler\n+    public View handleException(NoSuchClientException nsce) {\n+        logger.debug(\"Client not found:\"+nsce.getMessage());\n+        return handleException(new UaaException(nsce.getMessage(), 404));\n+    }\n+\n     @ExceptionHandler\n     public View handleException(Exception t) {\n         UaaException e = t instanceof UaaException ? (UaaException) t : new UaaException(\"Unexpected error\",\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/approval/ApprovalsAdminEndpointsTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/approval/ApprovalsAdminEndpointsTests.java\nindex d63278e0a..2ecc1e47c 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/approval/ApprovalsAdminEndpointsTests.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/approval/ApprovalsAdminEndpointsTests.java\n@@ -1,5 +1,5 @@\n /*******************************************************************************\n- *     Cloud Foundry \n+ *     Cloud Foundry\n  *     Copyright (c) [2009-2016] Pivotal Software, Inc. All Rights Reserved.\n  *\n  *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n@@ -12,30 +12,12 @@\n  *******************************************************************************/\n package org.cloudfoundry.identity.uaa.oauth.approval;\n \n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.Date;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-\n-import static org.cloudfoundry.identity.uaa.approval.Approval.ApprovalStatus.APPROVED;\n-import static org.cloudfoundry.identity.uaa.approval.Approval.ApprovalStatus.DENIED;\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.core.Is.is;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-\n import com.fasterxml.jackson.core.type.TypeReference;\n import org.cloudfoundry.identity.uaa.approval.Approval;\n+import org.cloudfoundry.identity.uaa.approval.Approval.ApprovalStatus;\n import org.cloudfoundry.identity.uaa.approval.ApprovalsAdminEndpoints;\n import org.cloudfoundry.identity.uaa.approval.JdbcApprovalStore;\n-import org.cloudfoundry.identity.uaa.oauth.client.ClientConstants;\n import org.cloudfoundry.identity.uaa.error.UaaException;\n-import org.cloudfoundry.identity.uaa.approval.Approval.ApprovalStatus;\n import org.cloudfoundry.identity.uaa.resources.jdbc.JdbcPagingListFactory;\n import org.cloudfoundry.identity.uaa.resources.jdbc.SimpleSearchQueryConverter;\n import org.cloudfoundry.identity.uaa.security.SecurityContextAccessor;\n@@ -48,14 +30,34 @@ import org.cloudfoundry.identity.uaa.user.UaaUserDatabase;\n import org.cloudfoundry.identity.uaa.util.JsonUtils;\n import org.junit.After;\n import org.junit.Before;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.security.oauth2.provider.NoSuchClientException;\n import org.springframework.security.oauth2.provider.client.BaseClientDetails;\n import org.springframework.security.oauth2.provider.client.InMemoryClientDetailsService;\n \n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.cloudfoundry.identity.uaa.approval.Approval.ApprovalStatus.APPROVED;\n+import static org.cloudfoundry.identity.uaa.approval.Approval.ApprovalStatus.DENIED;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n public class ApprovalsAdminEndpointsTests extends JdbcTestBase {\n     private UaaTestAccounts testAccounts = null;\n-    \n+\n     private JdbcApprovalStore dao;\n \n     private UaaUserDatabase userDao = null;\n@@ -64,6 +66,9 @@ public class ApprovalsAdminEndpointsTests extends JdbcTestBase {\n \n     private ApprovalsAdminEndpoints endpoints;\n \n+    @Rule\n+    public ExpectedException exception = ExpectedException.none();\n+\n     @Before\n     public void initApprovalsAdminEndpointsTests() {\n         testAccounts = UaaTestAccounts.standard(null);\n@@ -114,6 +119,21 @@ public class ApprovalsAdminEndpointsTests extends JdbcTestBase {\n         assertThat(jdbcTemplate.queryForObject(\"select count(*) from users\", Integer.class), is(0));\n     }\n \n+    @Test\n+    public void validate_client_id_on_revoke() throws Exception {\n+        exception.expect(NoSuchClientException.class);\n+        exception.expectMessage(\"No client with requested id: invalid_id\");\n+        endpoints.revokeApprovals(\"invalid_id\");\n+    }\n+\n+    @Test\n+    public void validate_client_id_on_update() throws Exception {\n+        exception.expect(NoSuchClientException.class);\n+        exception.expectMessage(\"No client with requested id: invalid_id\");\n+        endpoints.updateClientApprovals(\"invalid_id\", new Approval[0]);\n+    }\n+\n+\n     @Test\n     public void canGetApprovals() {\n         addApproval(marissa.getId(), \"c1\", \"uaa.user\", 6000, APPROVED);\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/approvals/ApprovalsMockMvcTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/approvals/ApprovalsMockMvcTests.java\nindex 36a43c5ea..9a2c30e76 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/approvals/ApprovalsMockMvcTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/approvals/ApprovalsMockMvcTests.java\n@@ -50,6 +50,7 @@ import static org.springframework.test.web.servlet.request.MockMvcRequestBuilder\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.header;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrlPattern;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n@@ -128,6 +129,37 @@ public class ApprovalsMockMvcTests extends AbstractTokenMockMvcTests {\n             .andExpect(status().isFound()); //approval page no longer showing up\n     }\n \n+    @Test\n+    public void revoke() throws Exception {\n+        test_oauth_authorize_without_csrf();\n+        MockHttpSession session = getAuthenticatedSession(user1);\n+        getMockMvc().perform(\n+            post(\"/profile\")\n+                .with(cookieCsrf())\n+                .param(\"delete\",\"true\")\n+                .param(\"clientId\", client1.getClientId())\n+                .session(session)\n+        )\n+            .andExpect(status().isFound())\n+            .andExpect(header().string(\"Location\", \"profile\"));\n+\n+    }\n+\n+    @Test\n+    public void revoke_invalid_client() throws Exception {\n+        test_oauth_authorize_without_csrf();\n+        MockHttpSession session = getAuthenticatedSession(user1);\n+        getMockMvc().perform(\n+            post(\"/profile\")\n+                .with(cookieCsrf())\n+                .param(\"delete\",\"true\")\n+                .param(\"clientId\", \"invalid_id\")\n+                .session(session)\n+        )\n+            .andExpect(status().isFound())\n+            .andExpect(header().string(\"Location\", \"profile?error_message_code=request.invalid_parameter\"));\n+    }\n+\n     @Test\n     public void test_get_approvals() throws Exception {\n         test_oauth_authorize_without_csrf();\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "logical and structural changes", "source_commit": "5eb43757d5a3a2c9e7aae1ef3d0b9b7e2a38851e", "source_date": "Mon Apr 17 17:26:16 2017 -0700", "source_tag": "3.15.0", "target_commit": "24bc5ade80560cedb9300940d2b398163ab0dc6a", "target_date": "Tue Apr 18 11:49:16 2017 -0700", "target_tag": "2.7.4", "FAIL TO PASS": ["org.cloudfoundry.identity.uaa.login.ProfileControllerTests > validate_client_id_on_revoke", "org.cloudfoundry.identity.uaa.mock.DefaultConfigurationTestSuite > org.cloudfoundry.identity.uaa.mock.approvals.ApprovalsMockMvcTests.revoke_invalid_client"], "PASS TO PASS": [":cloudfoundry-identity-login:testClasses", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneEndpointsMockMvcTests", ":cloudfoundry-identity-login:instrument", "org.cloudfoundry.identity.uaa.login.XFrameOptionsTheories", ":cloudfoundry-identity-scim:makeInstrumentedSourceSet", ":cloudfoundry-identity-payload:jar", "org.cloudfoundry.identity.uaa.login.ResetPasswordControllerTest", ":cloudfoundry-identity-scim:instrument", "org.cloudfoundry.identity.uaa.login.LinkedMaskingMultiValueMapTests", ":cloudfoundry-identity-scim:copyInstrumentedClasses", ":cloudfoundry-identity-uaa:testClasses", "org.cloudfoundry.identity.uaa.BootstrapTests", ":cloudfoundry-identity-login:compileTestJava", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.mock.clients.ClientAdminEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.authentication.WhitelistLogoutHandlerTest", ":cloudfoundry-identity-scim:processResources", "org.cloudfoundry.identity.uaa.mock.oauth.CheckDefaultAuthoritiesMvcMockTests", ":cloudfoundry-identity-login:classes", "org.cloudfoundry.identity.uaa.login.ChangePasswordControllerTest", ":cloudfoundry-identity-common:processResources", ":cloudfoundry-identity-common:compileTestJava", ":cloudfoundry-identity-common:jar", ":cloudfoundry-identity-common:instrument", "org.cloudfoundry.identity.uaa.login.util.LocalUaaRestTemplateMockMvcTests", "org.cloudfoundry.identity.uaa.login.util.FakeJavaMailSenderTest", "org.cloudfoundry.identity.uaa.mock.codestore.ExpiringCodeStoreMockMvcTests", "org.cloudfoundry.identity.uaa.login.InvitationsServiceMockMvcTests", ":cloudfoundry-identity-common:copyInstrumentedClasses", ":cloudfoundry-identity-common:classes", "org.cloudfoundry.identity.uaa.mock.authentication.AuthzAuthenticationManagerConfigurationTests", "org.cloudfoundry.identity.uaa.login.EmailChangeEmailServiceTest", ":cloudfoundry-identity-common:instrumentedClasses", ":cloudfoundry-identity-scim:jar", "org.cloudfoundry.identity.uaa.db.TestZonifyGroupSchema_V2_4_1", "org.cloudfoundry.identity.uaa.mock.zones.DisableUserManagementSecurityFilterMockMvcTest", ":cloudfoundry-identity-payload:buildInfo", ":cloudfoundry-identity-scim:compileJava", ":cloudfoundry-identity-scim:compileTestJava", ":cloudfoundry-identity-uaa:compileTestJava", "org.cloudfoundry.identity.uaa.login.EmailInvitationsServiceTests", "org.cloudfoundry.identity.uaa.login.AccountsControllerMockMvcTests", "org.cloudfoundry.identity.uaa.mock.ldap.LdapMockMvcTests", "org.cloudfoundry.identity.uaa.UaaConfigurationTests", ":cloudfoundry-identity-common:testClasses", ":cloudfoundry-identity-common:makeInstrumentedSourceSet", "org.cloudfoundry.identity.uaa.mock.zones.IdentityProviderEndpointsMockMvcTests", ":cloudfoundry-identity-login:compileJava", "org.cloudfoundry.identity.uaa.login.RestUaaApprovalsServiceTest", "org.cloudfoundry.identity.uaa.mock.token.TokenMvcMockTests", ":cloudfoundry-identity-scim:processInstrumentedResources", ":cloudfoundry-identity-login:instrumentedJar", ":cloudfoundry-identity-uaa:copyCoberturaDatafile", "org.cloudfoundry.identity.uaa.mock.audit.AuditCheckMockMvcTests", "org.cloudfoundry.identity.uaa.login.ResetPasswordControllerMockMvcTests", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneSwitchingFilterMockMvcTest", "org.cloudfoundry.identity.uaa.login.PasscodeMockMvcTests", "org.cloudfoundry.identity.uaa.login.AccountsControllerTest", ":cloudfoundry-identity-common:compileJava", "org.cloudfoundry.identity.uaa.login.saml.LoginSamlAuthenticationProviderTests", ":cloudfoundry-identity-scim:testClasses", "org.cloudfoundry.identity.uaa.authentication.manager.DynamicLdapAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.login.EmailAccountCreationServiceTests", "/uaa/uaa/src/test/java/org/springframework/security/ldap/server/ApacheDsSSLContainer.java", ":cloudfoundry-identity-login:processResources", "org.cloudfoundry.identity.uaa.security.CsrfAwareEntryPointAndDeniedHandlerTest", "org.cloudfoundry.identity.web.PromptTest", ":cloudfoundry-identity-uaa:compileTestJava/uaa/uaa/src/test/java/org/springframework/security/ldap/server/ApacheDsSSLContainer.java", ":cloudfoundry-identity-login:jar", "org.cloudfoundry.identity.uaa.login.PasswordConfirmationValidationTest", "org.cloudfoundry.identity.uaa.login.EmailServiceTests", "org.cloudfoundry.identity.uaa.login.ChangeEmailControllerTest", "org.cloudfoundry.identity.uaa.login.BootstrapTests", ":cloudfoundry-identity-payload:gitInfo", ":cloudfoundry-identity-payload:processResources", ":cloudfoundry-identity-login:makeInstrumentedSourceSet", "org.cloudfoundry.identity.uaa.invitations.InvitationsControllerTest", "org.cloudfoundry.identity.uaa.mock.password.PasswordChangeEndpointMockMvcTests", ":cloudfoundry-identity-login:instrumentedClasses", ":cloudfoundry-identity-uaa:classes", ":cloudfoundry-identity-uaa:compileJava", ":cloudfoundry-identity-login:copyInstrumentedClasses", "org.cloudfoundry.identity.uaa.invitations.InvitationsEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.mock.token.TokenKeyEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.scim.endpoints.PasswordResetEndpointMockMvcTests", ":cloudfoundry-identity-scim:classes", ":cloudfoundry-identity-login:processInstrumentedResources", ":cloudfoundry-identity-common:processTestResources", "org.cloudfoundry.identity.uaa.mock.config.HealthzShouldNotBeProtectedMockMvcTests", ":cloudfoundry-identity-scim:instrumentedClasses", "org.cloudfoundry.identity.uaa.login.AutologinAuthenticationManagerTest", ":cloudfoundry-identity-payload:mainOutputResourcesDir", ":cloudfoundry-identity-common:instrumentedJar", "org.cloudfoundry.identity.uaa.invitations.InvitationsAuthenticationTrustResolverTest", "org.cloudfoundry.identity.uaa.mock.zones.DisableInternalUserManagementFilterMockMvcTests", "org.cloudfoundry.identity.uaa.mock.config.LockoutPolicyTests", "org.cloudfoundry.identity.uaa.login.HomeControllerViewTests", ":cloudfoundry-identity-login:compileInstrumentedJava", ":cloudfoundry-identity-payload:compileJava", ":cloudfoundry-identity-scim:instrumentedJar", ":cloudfoundry-identity-uaa:processTestResources", ":cloudfoundry-identity-login:copyCoberturaDatafile", ":cloudfoundry-identity-login:processTestResources", "org.cloudfoundry.identity.uaa.login.LoginMockMvcTests", ":cloudfoundry-identity-common:compileInstrumentedJava", ":cloudfoundry-identity-scim:processTestResources", "org.cloudfoundry.identity.uaa.login.NotificationsServiceTest", ":cloudfoundry-identity-uaa:processResources", "org.cloudfoundry.identity.uaa.authentication.manager.DynamicZoneAwareAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.mock.approvals.ApprovalsMockMvcTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.login.UsernamePasswordExtractingAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.login.saml.SamlIDPRefreshMockMvcTests", ":cloudfoundry-identity-uaa:instrument", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserLookupMockMvcTests", ":cloudfoundry-identity-scim:compileInstrumentedJava", ":cloudfoundry-identity-payload:classes", "org.cloudfoundry.identity.uaa.login.UaaChangePasswordServiceTest", "org.cloudfoundry.identity.uaa.login.TileInfoTest", ":cloudfoundry-identity-common:processInstrumentedResources"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_219", "original_commit_message": "[4.1.x] Fixed CVE-2023-24580 -- Prevented DoS with too many uploaded files.\nThanks to Jakob Ackermann for the report.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex 40b34bb71c..7ac700228f 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -313,6 +313,10 @@ DATA_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n # SuspiciousOperation (TooManyFieldsSent) is raised.\n DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000\n \n+# Maximum number of files encoded in a multipart upload that will be read\n+# before a SuspiciousOperation (TooManyFilesSent) is raised.\n+DATA_UPLOAD_MAX_NUMBER_FILES = 100\n+\n # Directory in which upload streamed files will be temporarily saved. A value of\n # `None` will make Django use the operating system's default temporary directory\n # (i.e. \"/tmp\" on *nix systems).\n\ndiff --git a/django/core/exceptions.py b/django/core/exceptions.py\nindex 7be4e16bc5..e06b33e7bc 100644\n--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n@@ -67,6 +67,15 @@ class TooManyFieldsSent(SuspiciousOperation):\n     pass\n \n \n+class TooManyFilesSent(SuspiciousOperation):\n+    \"\"\"\n+    The number of fields in a GET or POST request exceeded\n+    settings.DATA_UPLOAD_MAX_NUMBER_FILES.\n+    \"\"\"\n+\n+    pass\n+\n+\n class RequestDataTooBig(SuspiciousOperation):\n     \"\"\"\n     The size of the request (excluding any file uploads) exceeded\n\ndiff --git a/django/core/handlers/exception.py b/django/core/handlers/exception.py\nindex 79577c2d0a..fd64584bba 100644\n--- a/django/core/handlers/exception.py\n+++ b/django/core/handlers/exception.py\n@@ -13,6 +13,7 @@ from django.core.exceptions import (\n     RequestDataTooBig,\n     SuspiciousOperation,\n     TooManyFieldsSent,\n+    TooManyFilesSent,\n )\n from django.http import Http404\n from django.http.multipartparser import MultiPartParserError\n@@ -111,7 +112,7 @@ def response_for_exception(request, exc):\n             exception=exc,\n         )\n     elif isinstance(exc, SuspiciousOperation):\n-        if isinstance(exc, (RequestDataTooBig, TooManyFieldsSent)):\n+        if isinstance(exc, (RequestDataTooBig, TooManyFieldsSent, TooManyFilesSent)):\n             # POST data can't be accessed again, otherwise the original\n             # exception would be raised.\n             request._mark_post_parse_error()\n\ndiff --git a/django/http/multipartparser.py b/django/http/multipartparser.py\nindex 26fb2bc41f..944ca4aa6c 100644\n--- a/django/http/multipartparser.py\n+++ b/django/http/multipartparser.py\n@@ -15,6 +15,7 @@ from django.core.exceptions import (\n     RequestDataTooBig,\n     SuspiciousMultipartForm,\n     TooManyFieldsSent,\n+    TooManyFilesSent,\n )\n from django.core.files.uploadhandler import SkipFile, StopFutureHandlers, StopUpload\n from django.utils.datastructures import MultiValueDict\n@@ -39,6 +40,7 @@ class InputStreamExhausted(Exception):\n RAW = \"raw\"\n FILE = \"file\"\n FIELD = \"field\"\n+FIELD_TYPES = frozenset([FIELD, RAW])\n \n \n class MultiPartParser:\n@@ -111,6 +113,22 @@ class MultiPartParser:\n         self._upload_handlers = upload_handlers\n \n     def parse(self):\n+        # Call the actual parse routine and close all open files in case of\n+        # errors. This is needed because if exceptions are thrown the\n+        # MultiPartParser will not be garbage collected immediately and\n+        # resources would be kept alive. This is only needed for errors because\n+        # the Request object closes all uploaded files at the end of the\n+        # request.\n+        try:\n+            return self._parse()\n+        except Exception:\n+            if hasattr(self, \"_files\"):\n+                for _, files in self._files.lists():\n+                    for fileobj in files:\n+                        fileobj.close()\n+            raise\n+\n+    def _parse(self):\n         \"\"\"\n         Parse the POST data and break it into a FILES MultiValueDict and a POST\n         MultiValueDict.\n@@ -156,6 +174,8 @@ class MultiPartParser:\n         num_bytes_read = 0\n         # To count the number of keys in the request.\n         num_post_keys = 0\n+        # To count the number of files in the request.\n+        num_files = 0\n         # To limit the amount of data read from the request.\n         read_size = None\n         # Whether a file upload is finished.\n@@ -171,6 +191,20 @@ class MultiPartParser:\n                     old_field_name = None\n                     uploaded_file = True\n \n+                if (\n+                    item_type in FIELD_TYPES\n+                    and settings.DATA_UPLOAD_MAX_NUMBER_FIELDS is not None\n+                ):\n+                    # Avoid storing more than DATA_UPLOAD_MAX_NUMBER_FIELDS.\n+                    num_post_keys += 1\n+                    # 2 accounts for empty raw fields before and after the\n+                    # last boundary.\n+                    if settings.DATA_UPLOAD_MAX_NUMBER_FIELDS + 2 < num_post_keys:\n+                        raise TooManyFieldsSent(\n+                            \"The number of GET/POST parameters exceeded \"\n+                            \"settings.DATA_UPLOAD_MAX_NUMBER_FIELDS.\"\n+                        )\n+\n                 try:\n                     disposition = meta_data[\"content-disposition\"][1]\n                     field_name = disposition[\"name\"].strip()\n@@ -183,17 +217,6 @@ class MultiPartParser:\n                 field_name = force_str(field_name, encoding, errors=\"replace\")\n \n                 if item_type == FIELD:\n-                    # Avoid storing more than DATA_UPLOAD_MAX_NUMBER_FIELDS.\n-                    num_post_keys += 1\n-                    if (\n-                        settings.DATA_UPLOAD_MAX_NUMBER_FIELDS is not None\n-                        and settings.DATA_UPLOAD_MAX_NUMBER_FIELDS < num_post_keys\n-                    ):\n-                        raise TooManyFieldsSent(\n-                            \"The number of GET/POST parameters exceeded \"\n-                            \"settings.DATA_UPLOAD_MAX_NUMBER_FIELDS.\"\n-                        )\n-\n                     # Avoid reading more than DATA_UPLOAD_MAX_MEMORY_SIZE.\n                     if settings.DATA_UPLOAD_MAX_MEMORY_SIZE is not None:\n                         read_size = (\n@@ -228,6 +251,16 @@ class MultiPartParser:\n                         field_name, force_str(data, encoding, errors=\"replace\")\n                     )\n                 elif item_type == FILE:\n+                    # Avoid storing more than DATA_UPLOAD_MAX_NUMBER_FILES.\n+                    num_files += 1\n+                    if (\n+                        settings.DATA_UPLOAD_MAX_NUMBER_FILES is not None\n+                        and num_files > settings.DATA_UPLOAD_MAX_NUMBER_FILES\n+                    ):\n+                        raise TooManyFilesSent(\n+                            \"The number of files exceeded \"\n+                            \"settings.DATA_UPLOAD_MAX_NUMBER_FILES.\"\n+                        )\n                     # This is a file, use the handler...\n                     file_name = disposition.get(\"filename\")\n                     if file_name:\n@@ -305,8 +338,13 @@ class MultiPartParser:\n                         # Handle file upload completions on next iteration.\n                         old_field_name = field_name\n                 else:\n-                    # If this is neither a FIELD or a FILE, just exhaust the stream.\n-                    exhaust(stream)\n+                    # If this is neither a FIELD nor a FILE, exhaust the field\n+                    # stream. Note: There could be an error here at some point,\n+                    # but there will be at least two RAW types (before and\n+                    # after the other boundaries). This branch is usually not\n+                    # reached at all, because a missing content-disposition\n+                    # header will skip the whole boundary.\n+                    exhaust(field_stream)\n         except StopUpload as e:\n             self._close_files()\n             if not e.connection_reset:\n\ndiff --git a/django/http/request.py b/django/http/request.py\nindex 4b160bc5f4..0789b24c15 100644\n--- a/django/http/request.py\n+++ b/django/http/request.py\n@@ -13,7 +13,11 @@ from django.core.exceptions import (\n     TooManyFieldsSent,\n )\n from django.core.files import uploadhandler\n-from django.http.multipartparser import MultiPartParser, MultiPartParserError\n+from django.http.multipartparser import (\n+    MultiPartParser,\n+    MultiPartParserError,\n+    TooManyFilesSent,\n+)\n from django.utils.datastructures import (\n     CaseInsensitiveMapping,\n     ImmutableList,\n@@ -367,7 +371,7 @@ class HttpRequest:\n                 data = self\n             try:\n                 self._post, self._files = self.parse_file_upload(self.META, data)\n-            except MultiPartParserError:\n+            except (MultiPartParserError, TooManyFilesSent):\n                 # An error occurred while parsing POST data. Since when\n                 # formatting the error the request handler might access\n                 # self.POST, set self._post and self._file to prevent\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/handlers/test_exception.py b/tests/handlers/test_exception.py\nindex 3a483be784..878fff7cc0 100644\n--- a/tests/handlers/test_exception.py\n+++ b/tests/handlers/test_exception.py\n@@ -1,6 +1,11 @@\n from django.core.handlers.wsgi import WSGIHandler\n from django.test import SimpleTestCase, override_settings\n-from django.test.client import FakePayload\n+from django.test.client import (\n+    BOUNDARY,\n+    MULTIPART_CONTENT,\n+    FakePayload,\n+    encode_multipart,\n+)\n \n \n class ExceptionHandlerTests(SimpleTestCase):\n@@ -24,3 +29,27 @@ class ExceptionHandlerTests(SimpleTestCase):\n     def test_data_upload_max_number_fields_exceeded(self):\n         response = WSGIHandler()(self.get_suspicious_environ(), lambda *a, **k: None)\n         self.assertEqual(response.status_code, 400)\n+\n+    @override_settings(DATA_UPLOAD_MAX_NUMBER_FILES=2)\n+    def test_data_upload_max_number_files_exceeded(self):\n+        payload = FakePayload(\n+            encode_multipart(\n+                BOUNDARY,\n+                {\n+                    \"a.txt\": \"Hello World!\",\n+                    \"b.txt\": \"Hello Django!\",\n+                    \"c.txt\": \"Hello Python!\",\n+                },\n+            )\n+        )\n+        environ = {\n+            \"REQUEST_METHOD\": \"POST\",\n+            \"CONTENT_TYPE\": MULTIPART_CONTENT,\n+            \"CONTENT_LENGTH\": len(payload),\n+            \"wsgi.input\": payload,\n+            \"SERVER_NAME\": \"test\",\n+            \"SERVER_PORT\": \"8000\",\n+        }\n+\n+        response = WSGIHandler()(environ, lambda *a, **k: None)\n+        self.assertEqual(response.status_code, 400)\n\ndiff --git a/tests/requests/test_data_upload_settings.py b/tests/requests/test_data_upload_settings.py\nindex 0199296293..e89af0a39b 100644\n--- a/tests/requests/test_data_upload_settings.py\n+++ b/tests/requests/test_data_upload_settings.py\n@@ -1,6 +1,10 @@\n from io import BytesIO\n \n-from django.core.exceptions import RequestDataTooBig, TooManyFieldsSent\n+from django.core.exceptions import (\n+    RequestDataTooBig,\n+    TooManyFieldsSent,\n+    TooManyFilesSent,\n+)\n from django.core.handlers.wsgi import WSGIRequest\n from django.test import SimpleTestCase\n from django.test.client import FakePayload\n@@ -8,6 +12,9 @@ from django.test.client import FakePayload\n TOO_MANY_FIELDS_MSG = (\n     \"The number of GET/POST parameters exceeded settings.DATA_UPLOAD_MAX_NUMBER_FIELDS.\"\n )\n+TOO_MANY_FILES_MSG = (\n+    \"The number of files exceeded settings.DATA_UPLOAD_MAX_NUMBER_FILES.\"\n+)\n TOO_MUCH_DATA_MSG = \"Request body exceeded settings.DATA_UPLOAD_MAX_MEMORY_SIZE.\"\n \n \n@@ -191,6 +198,52 @@ class DataUploadMaxNumberOfFieldsMultipartPost(SimpleTestCase):\n             self.request._load_post_and_files()\n \n \n+class DataUploadMaxNumberOfFilesMultipartPost(SimpleTestCase):\n+    def setUp(self):\n+        payload = FakePayload(\n+            \"\\r\\n\".join(\n+                [\n+                    \"--boundary\",\n+                    (\n+                        'Content-Disposition: form-data; name=\"name1\"; '\n+                        'filename=\"name1.txt\"'\n+                    ),\n+                    \"\",\n+                    \"value1\",\n+                    \"--boundary\",\n+                    (\n+                        'Content-Disposition: form-data; name=\"name2\"; '\n+                        'filename=\"name2.txt\"'\n+                    ),\n+                    \"\",\n+                    \"value2\",\n+                    \"--boundary--\",\n+                ]\n+            )\n+        )\n+        self.request = WSGIRequest(\n+            {\n+                \"REQUEST_METHOD\": \"POST\",\n+                \"CONTENT_TYPE\": \"multipart/form-data; boundary=boundary\",\n+                \"CONTENT_LENGTH\": len(payload),\n+                \"wsgi.input\": payload,\n+            }\n+        )\n+\n+    def test_number_exceeded(self):\n+        with self.settings(DATA_UPLOAD_MAX_NUMBER_FILES=1):\n+            with self.assertRaisesMessage(TooManyFilesSent, TOO_MANY_FILES_MSG):\n+                self.request._load_post_and_files()\n+\n+    def test_number_not_exceeded(self):\n+        with self.settings(DATA_UPLOAD_MAX_NUMBER_FILES=2):\n+            self.request._load_post_and_files()\n+\n+    def test_no_limit(self):\n+        with self.settings(DATA_UPLOAD_MAX_NUMBER_FILES=None):\n+            self.request._load_post_and_files()\n+\n+\n class DataUploadMaxNumberOfFieldsFormPost(SimpleTestCase):\n     def setUp(self):\n         payload = FakePayload(\"\\r\\n\".join([\"a=1&a=2&a=3\", \"\"]))\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "628b33a854a9c68ec8a0c51f382f304a0044ec92", "source_date": "Tue Feb 14 08:24:06 2023 +0100", "source_tag": "4.1.7", "target_commit": "a665ed5179f5bbd3db95ce67286d0192eff041d8", "target_date": "Tue Feb 7 10:39:25 2023 +0100", "target_tag": "3.2.18", "FAIL TO PASS": ["unittest.loader._FailedTest.test_data_upload_settings"], "PASS TO PASS": ["handlers.test_exception.ExceptionHandlerTests.test_data_upload_max_number_fields_exceeded", "handlers.test_exception.ExceptionHandlerTests.test_data_upload_max_memory_size_exceeded", "handlers.test_exception.ExceptionHandlerTests.test_data_upload_max_number_files_exceeded"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_220", "original_commit_message": "[4.1.x] Fixed CVE-2023-24580 -- Prevented DoS with too many uploaded files.\nThanks to Jakob Ackermann for the report.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex 40b34bb71c..7ac700228f 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -313,6 +313,10 @@ DATA_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n # SuspiciousOperation (TooManyFieldsSent) is raised.\n DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000\n \n+# Maximum number of files encoded in a multipart upload that will be read\n+# before a SuspiciousOperation (TooManyFilesSent) is raised.\n+DATA_UPLOAD_MAX_NUMBER_FILES = 100\n+\n # Directory in which upload streamed files will be temporarily saved. A value of\n # `None` will make Django use the operating system's default temporary directory\n # (i.e. \"/tmp\" on *nix systems).\n\ndiff --git a/django/core/exceptions.py b/django/core/exceptions.py\nindex 7be4e16bc5..e06b33e7bc 100644\n--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n@@ -67,6 +67,15 @@ class TooManyFieldsSent(SuspiciousOperation):\n     pass\n \n \n+class TooManyFilesSent(SuspiciousOperation):\n+    \"\"\"\n+    The number of fields in a GET or POST request exceeded\n+    settings.DATA_UPLOAD_MAX_NUMBER_FILES.\n+    \"\"\"\n+\n+    pass\n+\n+\n class RequestDataTooBig(SuspiciousOperation):\n     \"\"\"\n     The size of the request (excluding any file uploads) exceeded\n\ndiff --git a/django/core/handlers/exception.py b/django/core/handlers/exception.py\nindex 79577c2d0a..fd64584bba 100644\n--- a/django/core/handlers/exception.py\n+++ b/django/core/handlers/exception.py\n@@ -13,6 +13,7 @@ from django.core.exceptions import (\n     RequestDataTooBig,\n     SuspiciousOperation,\n     TooManyFieldsSent,\n+    TooManyFilesSent,\n )\n from django.http import Http404\n from django.http.multipartparser import MultiPartParserError\n@@ -111,7 +112,7 @@ def response_for_exception(request, exc):\n             exception=exc,\n         )\n     elif isinstance(exc, SuspiciousOperation):\n-        if isinstance(exc, (RequestDataTooBig, TooManyFieldsSent)):\n+        if isinstance(exc, (RequestDataTooBig, TooManyFieldsSent, TooManyFilesSent)):\n             # POST data can't be accessed again, otherwise the original\n             # exception would be raised.\n             request._mark_post_parse_error()\n\ndiff --git a/django/http/multipartparser.py b/django/http/multipartparser.py\nindex 26fb2bc41f..944ca4aa6c 100644\n--- a/django/http/multipartparser.py\n+++ b/django/http/multipartparser.py\n@@ -15,6 +15,7 @@ from django.core.exceptions import (\n     RequestDataTooBig,\n     SuspiciousMultipartForm,\n     TooManyFieldsSent,\n+    TooManyFilesSent,\n )\n from django.core.files.uploadhandler import SkipFile, StopFutureHandlers, StopUpload\n from django.utils.datastructures import MultiValueDict\n@@ -39,6 +40,7 @@ class InputStreamExhausted(Exception):\n RAW = \"raw\"\n FILE = \"file\"\n FIELD = \"field\"\n+FIELD_TYPES = frozenset([FIELD, RAW])\n \n \n class MultiPartParser:\n@@ -111,6 +113,22 @@ class MultiPartParser:\n         self._upload_handlers = upload_handlers\n \n     def parse(self):\n+        # Call the actual parse routine and close all open files in case of\n+        # errors. This is needed because if exceptions are thrown the\n+        # MultiPartParser will not be garbage collected immediately and\n+        # resources would be kept alive. This is only needed for errors because\n+        # the Request object closes all uploaded files at the end of the\n+        # request.\n+        try:\n+            return self._parse()\n+        except Exception:\n+            if hasattr(self, \"_files\"):\n+                for _, files in self._files.lists():\n+                    for fileobj in files:\n+                        fileobj.close()\n+            raise\n+\n+    def _parse(self):\n         \"\"\"\n         Parse the POST data and break it into a FILES MultiValueDict and a POST\n         MultiValueDict.\n@@ -156,6 +174,8 @@ class MultiPartParser:\n         num_bytes_read = 0\n         # To count the number of keys in the request.\n         num_post_keys = 0\n+        # To count the number of files in the request.\n+        num_files = 0\n         # To limit the amount of data read from the request.\n         read_size = None\n         # Whether a file upload is finished.\n@@ -171,6 +191,20 @@ class MultiPartParser:\n                     old_field_name = None\n                     uploaded_file = True\n \n+                if (\n+                    item_type in FIELD_TYPES\n+                    and settings.DATA_UPLOAD_MAX_NUMBER_FIELDS is not None\n+                ):\n+                    # Avoid storing more than DATA_UPLOAD_MAX_NUMBER_FIELDS.\n+                    num_post_keys += 1\n+                    # 2 accounts for empty raw fields before and after the\n+                    # last boundary.\n+                    if settings.DATA_UPLOAD_MAX_NUMBER_FIELDS + 2 < num_post_keys:\n+                        raise TooManyFieldsSent(\n+                            \"The number of GET/POST parameters exceeded \"\n+                            \"settings.DATA_UPLOAD_MAX_NUMBER_FIELDS.\"\n+                        )\n+\n                 try:\n                     disposition = meta_data[\"content-disposition\"][1]\n                     field_name = disposition[\"name\"].strip()\n@@ -183,17 +217,6 @@ class MultiPartParser:\n                 field_name = force_str(field_name, encoding, errors=\"replace\")\n \n                 if item_type == FIELD:\n-                    # Avoid storing more than DATA_UPLOAD_MAX_NUMBER_FIELDS.\n-                    num_post_keys += 1\n-                    if (\n-                        settings.DATA_UPLOAD_MAX_NUMBER_FIELDS is not None\n-                        and settings.DATA_UPLOAD_MAX_NUMBER_FIELDS < num_post_keys\n-                    ):\n-                        raise TooManyFieldsSent(\n-                            \"The number of GET/POST parameters exceeded \"\n-                            \"settings.DATA_UPLOAD_MAX_NUMBER_FIELDS.\"\n-                        )\n-\n                     # Avoid reading more than DATA_UPLOAD_MAX_MEMORY_SIZE.\n                     if settings.DATA_UPLOAD_MAX_MEMORY_SIZE is not None:\n                         read_size = (\n@@ -228,6 +251,16 @@ class MultiPartParser:\n                         field_name, force_str(data, encoding, errors=\"replace\")\n                     )\n                 elif item_type == FILE:\n+                    # Avoid storing more than DATA_UPLOAD_MAX_NUMBER_FILES.\n+                    num_files += 1\n+                    if (\n+                        settings.DATA_UPLOAD_MAX_NUMBER_FILES is not None\n+                        and num_files > settings.DATA_UPLOAD_MAX_NUMBER_FILES\n+                    ):\n+                        raise TooManyFilesSent(\n+                            \"The number of files exceeded \"\n+                            \"settings.DATA_UPLOAD_MAX_NUMBER_FILES.\"\n+                        )\n                     # This is a file, use the handler...\n                     file_name = disposition.get(\"filename\")\n                     if file_name:\n@@ -305,8 +338,13 @@ class MultiPartParser:\n                         # Handle file upload completions on next iteration.\n                         old_field_name = field_name\n                 else:\n-                    # If this is neither a FIELD or a FILE, just exhaust the stream.\n-                    exhaust(stream)\n+                    # If this is neither a FIELD nor a FILE, exhaust the field\n+                    # stream. Note: There could be an error here at some point,\n+                    # but there will be at least two RAW types (before and\n+                    # after the other boundaries). This branch is usually not\n+                    # reached at all, because a missing content-disposition\n+                    # header will skip the whole boundary.\n+                    exhaust(field_stream)\n         except StopUpload as e:\n             self._close_files()\n             if not e.connection_reset:\n\ndiff --git a/django/http/request.py b/django/http/request.py\nindex 4b160bc5f4..0789b24c15 100644\n--- a/django/http/request.py\n+++ b/django/http/request.py\n@@ -13,7 +13,11 @@ from django.core.exceptions import (\n     TooManyFieldsSent,\n )\n from django.core.files import uploadhandler\n-from django.http.multipartparser import MultiPartParser, MultiPartParserError\n+from django.http.multipartparser import (\n+    MultiPartParser,\n+    MultiPartParserError,\n+    TooManyFilesSent,\n+)\n from django.utils.datastructures import (\n     CaseInsensitiveMapping,\n     ImmutableList,\n@@ -367,7 +371,7 @@ class HttpRequest:\n                 data = self\n             try:\n                 self._post, self._files = self.parse_file_upload(self.META, data)\n-            except MultiPartParserError:\n+            except (MultiPartParserError, TooManyFilesSent):\n                 # An error occurred while parsing POST data. Since when\n                 # formatting the error the request handler might access\n                 # self.POST, set self._post and self._file to prevent\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/handlers/test_exception.py b/tests/handlers/test_exception.py\nindex 3a483be784..878fff7cc0 100644\n--- a/tests/handlers/test_exception.py\n+++ b/tests/handlers/test_exception.py\n@@ -1,6 +1,11 @@\n from django.core.handlers.wsgi import WSGIHandler\n from django.test import SimpleTestCase, override_settings\n-from django.test.client import FakePayload\n+from django.test.client import (\n+    BOUNDARY,\n+    MULTIPART_CONTENT,\n+    FakePayload,\n+    encode_multipart,\n+)\n \n \n class ExceptionHandlerTests(SimpleTestCase):\n@@ -24,3 +29,27 @@ class ExceptionHandlerTests(SimpleTestCase):\n     def test_data_upload_max_number_fields_exceeded(self):\n         response = WSGIHandler()(self.get_suspicious_environ(), lambda *a, **k: None)\n         self.assertEqual(response.status_code, 400)\n+\n+    @override_settings(DATA_UPLOAD_MAX_NUMBER_FILES=2)\n+    def test_data_upload_max_number_files_exceeded(self):\n+        payload = FakePayload(\n+            encode_multipart(\n+                BOUNDARY,\n+                {\n+                    \"a.txt\": \"Hello World!\",\n+                    \"b.txt\": \"Hello Django!\",\n+                    \"c.txt\": \"Hello Python!\",\n+                },\n+            )\n+        )\n+        environ = {\n+            \"REQUEST_METHOD\": \"POST\",\n+            \"CONTENT_TYPE\": MULTIPART_CONTENT,\n+            \"CONTENT_LENGTH\": len(payload),\n+            \"wsgi.input\": payload,\n+            \"SERVER_NAME\": \"test\",\n+            \"SERVER_PORT\": \"8000\",\n+        }\n+\n+        response = WSGIHandler()(environ, lambda *a, **k: None)\n+        self.assertEqual(response.status_code, 400)\n\ndiff --git a/tests/requests/test_data_upload_settings.py b/tests/requests/test_data_upload_settings.py\nindex 0199296293..e89af0a39b 100644\n--- a/tests/requests/test_data_upload_settings.py\n+++ b/tests/requests/test_data_upload_settings.py\n@@ -1,6 +1,10 @@\n from io import BytesIO\n \n-from django.core.exceptions import RequestDataTooBig, TooManyFieldsSent\n+from django.core.exceptions import (\n+    RequestDataTooBig,\n+    TooManyFieldsSent,\n+    TooManyFilesSent,\n+)\n from django.core.handlers.wsgi import WSGIRequest\n from django.test import SimpleTestCase\n from django.test.client import FakePayload\n@@ -8,6 +12,9 @@ from django.test.client import FakePayload\n TOO_MANY_FIELDS_MSG = (\n     \"The number of GET/POST parameters exceeded settings.DATA_UPLOAD_MAX_NUMBER_FIELDS.\"\n )\n+TOO_MANY_FILES_MSG = (\n+    \"The number of files exceeded settings.DATA_UPLOAD_MAX_NUMBER_FILES.\"\n+)\n TOO_MUCH_DATA_MSG = \"Request body exceeded settings.DATA_UPLOAD_MAX_MEMORY_SIZE.\"\n \n \n@@ -191,6 +198,52 @@ class DataUploadMaxNumberOfFieldsMultipartPost(SimpleTestCase):\n             self.request._load_post_and_files()\n \n \n+class DataUploadMaxNumberOfFilesMultipartPost(SimpleTestCase):\n+    def setUp(self):\n+        payload = FakePayload(\n+            \"\\r\\n\".join(\n+                [\n+                    \"--boundary\",\n+                    (\n+                        'Content-Disposition: form-data; name=\"name1\"; '\n+                        'filename=\"name1.txt\"'\n+                    ),\n+                    \"\",\n+                    \"value1\",\n+                    \"--boundary\",\n+                    (\n+                        'Content-Disposition: form-data; name=\"name2\"; '\n+                        'filename=\"name2.txt\"'\n+                    ),\n+                    \"\",\n+                    \"value2\",\n+                    \"--boundary--\",\n+                ]\n+            )\n+        )\n+        self.request = WSGIRequest(\n+            {\n+                \"REQUEST_METHOD\": \"POST\",\n+                \"CONTENT_TYPE\": \"multipart/form-data; boundary=boundary\",\n+                \"CONTENT_LENGTH\": len(payload),\n+                \"wsgi.input\": payload,\n+            }\n+        )\n+\n+    def test_number_exceeded(self):\n+        with self.settings(DATA_UPLOAD_MAX_NUMBER_FILES=1):\n+            with self.assertRaisesMessage(TooManyFilesSent, TOO_MANY_FILES_MSG):\n+                self.request._load_post_and_files()\n+\n+    def test_number_not_exceeded(self):\n+        with self.settings(DATA_UPLOAD_MAX_NUMBER_FILES=2):\n+            self.request._load_post_and_files()\n+\n+    def test_no_limit(self):\n+        with self.settings(DATA_UPLOAD_MAX_NUMBER_FILES=None):\n+            self.request._load_post_and_files()\n+\n+\n class DataUploadMaxNumberOfFieldsFormPost(SimpleTestCase):\n     def setUp(self):\n         payload = FakePayload(\"\\r\\n\".join([\"a=1&a=2&a=3\", \"\"]))\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "628b33a854a9c68ec8a0c51f382f304a0044ec92", "source_date": "Tue Feb 14 08:24:06 2023 +0100", "source_tag": "4.1.7", "target_commit": "83f1ea83e4553e211c1c5a0dfc197b66d4e50432", "target_date": "Tue Feb 7 10:36:32 2023 +0100", "target_tag": "4.0.10", "FAIL TO PASS": ["unittest.loader._FailedTest.test_data_upload_settings"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_221", "original_commit_message": "[3.0.x] Fixed CVE-2020-13596 -- Fixed potential XSS in admin ForeignKeyRawIdWidget.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/contrib/admin/widgets.py b/django/contrib/admin/widgets.py\nindex 7db57f4098..816f848ff0 100644\n--- a/django/contrib/admin/widgets.py\n+++ b/django/contrib/admin/widgets.py\n@@ -12,7 +12,7 @@ from django.db.models.deletion import CASCADE\n from django.urls import reverse\n from django.urls.exceptions import NoReverseMatch\n from django.utils.html import smart_urlquote\n-from django.utils.safestring import mark_safe\n+from django.utils.http import urlencode\n from django.utils.text import Truncator\n from django.utils.translation import get_language, gettext as _\n \n@@ -150,8 +150,8 @@ class ForeignKeyRawIdWidget(forms.TextInput):\n \n             params = self.url_parameters()\n             if params:\n-                related_url += '?' + '&amp;'.join('%s=%s' % (k, v) for k, v in params.items())\n-            context['related_url'] = mark_safe(related_url)\n+                related_url += '?' + urlencode(params)\n+            context['related_url'] = related_url\n             context['link_title'] = _('Lookup')\n             # The JavaScript code looks for this class.\n             context['widget']['attrs'].setdefault('class', 'vForeignKeyRawIdAdminField')\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/admin_widgets/models.py b/tests/admin_widgets/models.py\nindex b5025fdfd7..88bf2b8fca 100644\n--- a/tests/admin_widgets/models.py\n+++ b/tests/admin_widgets/models.py\n@@ -27,6 +27,14 @@ class Band(models.Model):\n         return self.name\n \n \n+class UnsafeLimitChoicesTo(models.Model):\n+    band = models.ForeignKey(\n+        Band,\n+        models.CASCADE,\n+        limit_choices_to={'name': '\"&><escapeme'},\n+    )\n+\n+\n class Album(models.Model):\n     band = models.ForeignKey(Band, models.CASCADE)\n     featuring = models.ManyToManyField(Band, related_name='featured')\n\ndiff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex 7aa597a87d..7d3d71181e 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -22,6 +22,7 @@ from django.utils import translation\n from .models import (\n     Advisor, Album, Band, Bee, Car, Company, Event, Honeycomb, Individual,\n     Inventory, Member, MyFileField, Profile, School, Student,\n+    UnsafeLimitChoicesTo,\n )\n from .widgetadmin import site as widget_admin_site\n \n@@ -586,6 +587,16 @@ class ForeignKeyRawIdWidgetTest(TestCase):\n             'Hidden</a></strong>' % {'pk': hidden.pk}\n         )\n \n+    def test_render_unsafe_limit_choices_to(self):\n+        rel = UnsafeLimitChoicesTo._meta.get_field('band').remote_field\n+        w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)\n+        self.assertHTMLEqual(\n+            w.render('test', None),\n+            '<input type=\"text\" name=\"test\" class=\"vForeignKeyRawIdAdminField\">\\n'\n+            '<a href=\"/admin_widgets/band/?name=%22%26%3E%3Cescapeme&amp;_to_field=id\" '\n+            'class=\"related-lookup\" id=\"lookup_id_test\" title=\"Lookup\"></a>'\n+        )\n+\n \n @override_settings(ROOT_URLCONF='admin_widgets.urls')\n class ManyToManyRawIdWidgetTest(TestCase):\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "1f2dd37f6fcefdd10ed44cb233b2e62b520afb38", "source_date": "Wed Jun 3 09:32:35 2020 +0200", "source_tag": "3.0.7", "target_commit": "6d61860b22875f358fac83d903dc629897934815", "target_date": "Wed Jun 3 09:33:38 2020 +0200", "target_tag": "2.2.13", "FAIL TO PASS": ["admin_widgets.tests.ForeignKeyRawIdWidgetTest.test_render_unsafe_limit_choices_to"], "PASS TO PASS": ["Empty option is present if the field isn't required.", "admin_widgets.tests.AdminFormfieldForDBFieldTests.test_URLField", "admin_widgets.test_autocomplete_widget.AutocompleteMixinTests.test_build_attrs", "admin_widgets.tests.ForeignKeyRawIdWidgetTest.test_fk_to_self_model_not_in_admin", "admin_widgets.test_autocomplete_widget.AutocompleteMixinTests.test_get_url", "admin_widgets.tests.AdminForeignKeyWidgetChangeList.test_changelist_ForeignKey", "admin_widgets.tests.AdminSplitDateTimeWidgetTest.test_render", "admin_widgets.tests.ManyToManyRawIdWidgetTest.test_render", "admin_widgets.tests.AdminFormfieldForDBFieldTests.test_TimeField", "admin_widgets.tests.AdminFormfieldForDBFieldTests.test_ForeignKey", "admin_widgets.tests.AdminFormfieldForDBFieldTests.test_filtered_many_to_many", "admin_widgets.tests.AdminFormfieldForDBFieldTests.test_TextField", "admin_widgets.tests.AdminUUIDWidgetTests.test_attrs", "admin_widgets.tests.AdminFormfieldForDBFieldTests.test_FileField", "admin_widgets.test_autocomplete_widget.AutocompleteMixinTests.test_media", "admin_widgets.tests.AdminForeignKeyRawIdWidget.test_url_params_from_lookup_dict_callable", "admin_widgets.tests.RelatedFieldWidgetWrapperTests.test_select_multiple_widget_cant_change_delete_related", "admin_widgets.test_autocomplete_widget.AutocompleteMixinTests.test_build_attrs_no_custom_class", "admin_widgets.tests.AdminFormfieldForDBFieldTests.test_many_to_many", "admin_widgets.tests.FilteredSelectMultipleWidgetTest.test_render", "admin_widgets.tests.AdminFormfieldForDBFieldTests.test_inheritance", "admin_widgets.tests.AdminTimeWidgetTest.test_attrs", "admin_widgets.tests.ManyToManyRawIdWidgetTest.test_m2m_related_model_not_in_admin", "admin_widgets.tests.RelatedFieldWidgetWrapperTests.test_widget_is_hidden", "admin_widgets.test_autocomplete_widget.AutocompleteMixinTests.test_build_attrs_not_required_field", "admin_widgets.tests.AdminURLWidgetTest.test_get_context_validates_url", "admin_widgets.tests.AdminFormfieldForDBFieldTests.test_radio_fields_ForeignKey", "admin_widgets.tests.RelatedFieldWidgetWrapperTests.test_on_delete_cascade_rel_cant_delete_related", "admin_widgets.tests.ForeignKeyRawIdWidgetTest.test_proper_manager_for_label_lookup", "Overriding the widget for DateTimeField doesn't overrides the default", "admin_widgets.tests.AdminForeignKeyRawIdWidget.test_invalid_target_id", "admin_widgets.tests.AdminFormfieldForDBFieldTests.test_field_with_choices", "admin_widgets.tests.ForeignKeyRawIdWidgetTest.test_fk_related_model_not_in_admin", "admin_widgets.tests.ForeignKeyRawIdWidgetTest.test_relations_to_non_primary_key", "Ensure the user can only see their own cars in the foreign key dropdown.", "admin_widgets.tests.AdminForeignKeyRawIdWidget.test_label_and_url_for_value_invalid_uuid", "formfield_overrides works for a custom field class.", "admin_widgets.tests.AdminFormfieldForDBFieldTests.test_CharField", "admin_widgets.tests.AdminURLWidgetTest.test_render", "admin_widgets.tests.RelatedFieldWidgetWrapperTests.test_no_can_add_related", "admin_widgets.tests.AdminFormfieldForDBFieldTests.test_DateTimeField", "admin_widgets.tests.ForeignKeyRawIdWidgetTest.test_render", "admin_widgets.tests.AdminFormfieldForDBFieldTests.test_raw_id_many_to_many", "admin_widgets.tests.AdminDateWidgetTest.test_attrs", "admin_widgets.tests.AdminForeignKeyRawIdWidget.test_nonexistent_target_id", "admin_widgets.test_autocomplete_widget.AutocompleteMixinTests.test_render_options", "Widget instances in formfield_overrides are not shared between", "admin_widgets.tests.AdminFileWidgetTests.test_render", "admin_widgets.tests.AdminURLWidgetTest.test_render_idn", "WARNING: This test doesn't use assertHTMLEqual since it will get rid", "admin_widgets.tests.RelatedFieldWidgetWrapperTests.test_widget_is_not_hidden", "admin_widgets.tests.AdminFormfieldForDBFieldTests.test_DateField", "admin_widgets.tests.AdminSplitDateTimeWidgetTest.test_localization", "m2m fields help text as it applies to admin app (#9321).", "admin_widgets.tests.AdminFormfieldForDBFieldTests.test_EmailField", "admin_widgets.test_autocomplete_widget.AutocompleteMixinTests.test_build_attrs_required_field", "admin_widgets.tests.RelatedFieldWidgetWrapperTests.test_custom_widget_render", "Empty option isn't present if the field isn't required.", "admin_widgets.tests.AdminFormfieldForDBFieldTests.test_raw_id_ForeignKey", "admin_widgets.tests.RelatedFieldWidgetWrapperTests.test_widget_delegates_value_omitted_from_data", "admin_widgets.tests.AdminFormfieldForDBFieldTests.test_formfield_overrides", "admin_widgets.tests.FilteredSelectMultipleWidgetTest.test_stacked_render", "admin_widgets.tests.AdminFormfieldForDBFieldTests.test_IntegerField", "admin_widgets.tests.AdminForeignKeyRawIdWidget.test_url_params_from_lookup_dict_any_iterable", "admin_widgets.tests.AdminFormfieldForDBFieldTests.test_choices_with_radio_fields", "admin_widgets.tests.AdminFileWidgetTests.test_render_required"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_1244", "original_commit_message": "Remove non used endpoint.\n[#143844261] https://www.pivotaltracker.com/story/show/143844261", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/scim/endpoints/ScimGroupEndpoints.java b/server/src/main/java/org/cloudfoundry/identity/uaa/scim/endpoints/ScimGroupEndpoints.java\nindex f7f5d2b17..f43e28640 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/scim/endpoints/ScimGroupEndpoints.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/scim/endpoints/ScimGroupEndpoints.java\n@@ -385,8 +385,7 @@ public class ScimGroupEndpoints {\n         }\n     }\n \n-    @RequestMapping(value = { \"/Group/{groupId}\", \"/Groups/{groupId}\" },\n-    method = RequestMethod.PATCH)\n+    @RequestMapping(value = { \"/Groups/{groupId}\" }, method = RequestMethod.PATCH)\n     @ResponseBody\n     public ScimGroup patchGroup(@RequestBody ScimGroup patch, @PathVariable\n                                 String groupId,\n\n\n</patch>\n<test_patch>\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/scim/endpoints/ScimGroupEndpointsMockMvcTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/scim/endpoints/ScimGroupEndpointsMockMvcTests.java\nindex d2777fae0..f5f503ef2 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/scim/endpoints/ScimGroupEndpointsMockMvcTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/scim/endpoints/ScimGroupEndpointsMockMvcTests.java\n@@ -75,8 +75,11 @@ import static org.springframework.http.MediaType.APPLICATION_JSON;\n import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrl;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n import static org.springframework.util.StringUtils.hasText;\n \n@@ -122,7 +125,7 @@ public class ScimGroupEndpointsMockMvcTests extends InjectedMockContextTest {\n                 \"clients.read clients.write clients.secret clients.admin\");\n         clientId = generator.generate().toLowerCase();\n         clientSecret = generator.generate().toLowerCase();\n-        String authorities = \"scim.read,scim.write,password.write,oauth.approvals,scim.create\";\n+        String authorities = \"scim.read,scim.write,password.write,oauth.approvals,scim.create,other.scope\";\n         utils().createClient(this.getMockMvc(), adminToken, clientId, clientSecret, Collections.singleton(\"oauth\"), Arrays.asList(\"foo\",\"bar\",\"scim.read\"), Arrays.asList(\"client_credentials\", \"password\"), authorities);\n         scimReadToken = testClient.getClientCredentialsOAuthAccessToken(clientId, clientSecret,\"scim.read password.write\");\n         scimWriteToken = testClient.getClientCredentialsOAuthAccessToken(clientId, clientSecret,\"scim.write password.write\");\n@@ -1138,6 +1141,35 @@ public class ScimGroupEndpointsMockMvcTests extends InjectedMockContextTest {\n             .andExpect(status().isNotFound());\n     }\n \n+    @Test\n+    public void patch_has_one_path() throws Exception {\n+        getMockMvc().perform(\n+            patch(\"/Group/groupId/members\")\n+                .header(\"Authorization\", \"Bearer \" + scimWriteToken)\n+                .header(\"Content-Type\", APPLICATION_JSON_VALUE)\n+        )\n+            .andDo(print())\n+            .andExpect(status().isFound()) //gets caught by the ui filter for unknown URIs\n+            .andExpect(redirectedUrl(\"http://localhost/login\"));\n+    }\n+\n+    @Test\n+    public void add_member_bad_token() throws Exception {\n+        ScimUser user = createUserAndAddToGroups(IdentityZone.getUaa(), Collections.EMPTY_SET);\n+        String groupId = getGroupId(\"scim.read\");\n+        String anyOldToken = testClient.getClientCredentialsOAuthAccessToken(clientId, clientSecret,\"other.scope\");\n+\n+        ScimGroupMember scimGroupMember = new ScimGroupMember(user.getId(), ScimGroupMember.Type.USER, Arrays.asList(ScimGroupMember.Role.MEMBER, ScimGroupMember.Role.READER));\n+\n+        MockHttpServletRequestBuilder post = post(\"/Groups/\" + groupId + \"/members\")\n+            .header(\"Authorization\", \"Bearer \" + anyOldToken)\n+            .header(\"Content-Type\", APPLICATION_JSON_VALUE)\n+            .content(JsonUtils.writeValueAsString(scimGroupMember));\n+        getMockMvc().perform(post)\n+            .andExpect(status().isForbidden());\n+\n+    }\n+\n     @Test\n     public void add_member_to_nonexistent_group() throws Exception {\n         ScimUser user = createUserAndAddToGroups(IdentityZone.getUaa(), Collections.EMPTY_SET);\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "9d44cb0c7c25ccae95bfa1c2d59ce46200c643cb", "source_date": "Mon Apr 17 18:08:31 2017 -0700", "source_tag": "3.15.0", "target_commit": "52acfabd11c3c77c2a3f5229b32f56de0e8d26ad", "target_date": "Mon Apr 17 18:37:40 2017 -0700", "target_tag": "3.9.10", "FAIL TO PASS": ["org.cloudfoundry.identity.uaa.mock.DefaultConfigurationTestSuite > org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsMockMvcTests.add_member_bad_token"], "PASS TO PASS": ["org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.provider.saml.UaaSamlIDPDocs", "org.cloudfoundry.identity.uaa.login.XFrameOptionsTheories", "org.cloudfoundry.identity.uaa.mock.token.CheckTokenEndpointDocs", ":cloudfoundry-identity-server:compileTestJava", ":cloudfoundry-identity-server:processResources", "org.cloudfoundry.identity.uaa.provider.saml.SamlServiceProviderEndpointsZoneSwitchingMockMvcTests", ":cloudfoundry-identity-uaa:testClasses", "org.cloudfoundry.identity.uaa.BootstrapTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.mock.clients.ClientAdminEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.mock.DefaultDocsTestSuite", "org.cloudfoundry.identity.uaa.mock.token.ListUserTokenMockMvcTests", "org.cloudfoundry.identity.uaa.mock.oauth.CheckDefaultAuthoritiesMvcMockTests", ":cloudfoundry-identity-model:gitInfo", "org.cloudfoundry.identity.uaa.provider.saml.SamlMockMvcTests", "org.cloudfoundry.identity.uaa.login.util.LocalUaaRestTemplateMockMvcTests", "org.cloudfoundry.identity.uaa.mock.codestore.ExpiringCodeStoreMockMvcTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlIDPRefreshMockMvcTests", "org.cloudfoundry.identity.uaa.login.InvitationsServiceMockMvcTests", "org.cloudfoundry.identity.uaa.login.SessionControllerMockMvcTests", "org.cloudfoundry.identity.uaa.mock.token.TokenKeyEndpointDocs", ":cloudfoundry-identity-server:compileTestJava/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", ":cloudfoundry-identity-server:testClasses", "org.cloudfoundry.identity.uaa.db.TestZonifyGroupSchema_V2_4_1", "org.cloudfoundry.identity.uaa.mock.zones.DisableUserManagementSecurityFilterMockMvcTest", ":cloudfoundry-identity-uaa:compileTestJava", "org.cloudfoundry.identity.uaa.login.AccountsControllerMockMvcTests", "org.cloudfoundry.identity.uaa.mock.ldap.LdapMockMvcTests", ":cloudfoundry-identity-model:classes", "org.cloudfoundry.identity.uaa.UaaConfigurationTests", "org.cloudfoundry.identity.uaa.mock.token.TokenMvcMockTests", "org.cloudfoundry.identity.uaa.mock.password.PasswordEndpointsDocs", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsDocs", "org.cloudfoundry.identity.uaa.mock.audit.AuditCheckMockMvcTests", "org.cloudfoundry.identity.uaa.login.ResetPasswordControllerMockMvcTests", ":cloudfoundry-identity-model:buildInfo", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneSwitchingFilterMockMvcTest", "org.cloudfoundry.identity.uaa.login.PasscodeMockMvcTests", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneEndpointDocs", "org.cloudfoundry.identity.uaa.authentication.manager.DynamicLdapAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.scim.endpoints.OpenIdConnectEndpointsMockMvcTests", ":cloudfoundry-identity-model:processResources", ":cloudfoundry-identity-model:jar", "/uaa/uaa/src/test/java/org/springframework/security/ldap/server/ApacheDsSSLContainer.java", ":cloudfoundry-identity-uaa:compileTestJava/uaa/uaa/src/test/java/org/springframework/security/ldap/server/ApacheDsSSLContainer.java", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneResolvingMockMvcTest", ":cloudfoundry-identity-server:compileJava", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserEndpointDocs", ":cloudfoundry-identity-server:compileJava/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", "org.cloudfoundry.identity.uaa.login.BootstrapTests", "org.cloudfoundry.identity.uaa.mock.password.PasswordChangeEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.provider.saml.LoginSamlAuthenticationProviderTests", ":cloudfoundry-identity-server:classes", ":cloudfoundry-identity-uaa:classes", ":cloudfoundry-identity-uaa:compileJava", "org.cloudfoundry.identity.uaa.login.AuthorizeEndpointDocs", "org.cloudfoundry.identity.uaa.scim.endpoints.OpenIdConnectEndpointsDocs", ":cloudfoundry-identity-model:mainOutputResourcesDir", "org.cloudfoundry.identity.uaa.invitations.InvitationsEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.mock.providers.IdentityProviderEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.mock.token.TokenKeyEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.mock.token.RefreshTokenMockMvcTests", "org.cloudfoundry.identity.uaa.mock.providers.IdentityProviderEndpointsDocs", "org.cloudfoundry.identity.uaa.scim.endpoints.PasswordResetEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.scim.endpoints.UserInfoEndpointMockMvcTests", "/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", "/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", "org.cloudfoundry.identity.uaa.mock.clients.ClientAdminEndpointsDocs", "org.cloudfoundry.identity.uaa.mock.config.HealthzShouldNotBeProtectedMockMvcTests", "org.cloudfoundry.identity.uaa.mock.zones.DisableInternalUserManagementFilterMockMvcTests", ":cloudfoundry-identity-server:jar", ":cloudfoundry-identity-server:processTestResources", ":cloudfoundry-identity-uaa:processTestResources", "org.cloudfoundry.identity.uaa.login.TokenEndpointDocs", "org.cloudfoundry.identity.uaa.mock.ldap.LdapCertificateMockMvcTests", "org.cloudfoundry.identity.uaa.invitations.InvitationsEndpointDocs", "org.cloudfoundry.identity.uaa.login.LoginMockMvcTests", ":cloudfoundry-identity-model:compileJava", "org.cloudfoundry.identity.uaa.scim.endpoints.UserInfoEndpointDocs", "org.cloudfoundry.identity.uaa.provider.saml.SamlConfigurationBeanTest", "org.cloudfoundry.identity.uaa.provider.saml.SamlServiceProviderEndpointsMockMvcTests", ":cloudfoundry-identity-uaa:processResources", "org.cloudfoundry.identity.uaa.authentication.manager.DynamicZoneAwareAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.mock.approvals.ApprovalsMockMvcTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.client.ClientMetadataAdminEndpointsMockMvcTest", "org.cloudfoundry.identity.uaa.client.ClientMetadataAdminEndpointsDocs", "org.cloudfoundry.identity.uaa.mock.token.UserTokenMockMvcTests", "org.cloudfoundry.identity.uaa.login.LoginInfoEndpointDocs", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserLookupMockMvcTests", "org.cloudfoundry.identity.uaa.mock.ldap.LdapProviderDefinitionDeserializeTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimExternalGroupMappingsEndpointsDocs", "org.cloudfoundry.identity.uaa.scim.endpoints.UserIdConversionEndpointDocs"]}
{"ecosystem": "maven", "repo": "tomcat", "instance_id": "tomcat_1250", "original_commit_message": "When adding and removing ResourceLinks dynamically, ensure\nthat the global resource is only visible via the\nResourceLinkFactory when it is meant to be.\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1757271 13f79535-47bb-0310-9956-ffa450edef68", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/java/org/apache/catalina/core/NamingContextListener.java b/java/org/apache/catalina/core/NamingContextListener.java\nindex ead954d3a0..ebfbc4a2c3 100644\n--- a/java/org/apache/catalina/core/NamingContextListener.java\n+++ b/java/org/apache/catalina/core/NamingContextListener.java\n@@ -40,6 +40,7 @@ import javax.naming.StringRefAddr;\n import org.apache.catalina.ContainerEvent;\n import org.apache.catalina.ContainerListener;\n import org.apache.catalina.Context;\n+import org.apache.catalina.Engine;\n import org.apache.catalina.Host;\n import org.apache.catalina.Lifecycle;\n import org.apache.catalina.LifecycleEvent;\n@@ -58,6 +59,7 @@ import org.apache.naming.ResourceLinkRef;\n import org.apache.naming.ResourceRef;\n import org.apache.naming.ServiceRef;\n import org.apache.naming.TransactionRef;\n+import org.apache.naming.factory.ResourceLinkFactory;\n import org.apache.tomcat.util.descriptor.web.ContextEjb;\n import org.apache.tomcat.util.descriptor.web.ContextEnvironment;\n import org.apache.tomcat.util.descriptor.web.ContextHandler;\n@@ -316,6 +318,11 @@ public class NamingContextListener\n                         registry.unregisterComponent(objectName);\n                     }\n                 }\n+\n+                javax.naming.Context global = getGlobalNamingContext();\n+                if (global != null) {\n+                    ResourceLinkFactory.deregisterGlobalResourceAccess(global);\n+                }\n             } finally {\n                 objectNames.clear();\n \n@@ -1152,6 +1159,17 @@ public class NamingContextListener\n             log.error(sm.getString(\"naming.bindFailed\", e));\n         }\n \n+        ResourceLinkFactory.registerGlobalResourceAccess(\n+                getGlobalNamingContext(), resourceLink.getName(), resourceLink.getGlobal());\n+    }\n+\n+\n+    private javax.naming.Context getGlobalNamingContext() {\n+        if (container instanceof Context) {\n+            Engine e = (Engine) ((Context) container).getParent().getParent();\n+            return e.getService().getServer().getGlobalNamingContext();\n+        }\n+        return null;\n     }\n \n \n@@ -1269,6 +1287,7 @@ public class NamingContextListener\n             log.error(sm.getString(\"naming.unbindFailed\", e));\n         }\n \n+        ResourceLinkFactory.deregisterGlobalResourceAccess(getGlobalNamingContext(), name);\n     }\n \n \n\ndiff --git a/java/org/apache/naming/factory/ResourceLinkFactory.java b/java/org/apache/naming/factory/ResourceLinkFactory.java\nindex 006e6f4d76..b68c4d5880 100644\n--- a/java/org/apache/naming/factory/ResourceLinkFactory.java\n+++ b/java/org/apache/naming/factory/ResourceLinkFactory.java\n@@ -16,7 +16,10 @@\n  */\n package org.apache.naming.factory;\n \n+import java.util.HashMap;\n import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n \n import javax.naming.Context;\n import javax.naming.Name;\n@@ -41,6 +44,8 @@ public class ResourceLinkFactory implements ObjectFactory {\n      */\n     private static Context globalContext = null;\n \n+    private static Map<ClassLoader,Map<String,String>> globalResourceRegistrations =\n+            new ConcurrentHashMap<>();\n \n     // --------------------------------------------------------- Public Methods\n \n@@ -59,6 +64,56 @@ public class ResourceLinkFactory implements ObjectFactory {\n     }\n \n \n+    public static void registerGlobalResourceAccess(Context globalContext, String localName,\n+            String globalName) {\n+        validateGlobalContext(globalContext);\n+        ClassLoader cl = Thread.currentThread().getContextClassLoader();\n+        Map<String,String> registrations = globalResourceRegistrations.get(cl);\n+        if (registrations == null) {\n+            // Web application initialization is single threaded so this is\n+            // safe.\n+            registrations = new HashMap<>();\n+            globalResourceRegistrations.put(cl, registrations);\n+        }\n+        registrations.put(localName, globalName);\n+    }\n+\n+\n+    public static void deregisterGlobalResourceAccess(Context globalContext, String localName) {\n+        validateGlobalContext(globalContext);\n+        ClassLoader cl = Thread.currentThread().getContextClassLoader();\n+        Map<String,String> registrations = globalResourceRegistrations.get(cl);\n+        if (registrations != null) {\n+            registrations.remove(localName);\n+        }\n+    }\n+\n+\n+    public static void deregisterGlobalResourceAccess(Context globalContext) {\n+        validateGlobalContext(globalContext);\n+        ClassLoader cl = Thread.currentThread().getContextClassLoader();\n+        globalResourceRegistrations.remove(cl);\n+    }\n+\n+\n+    private static void validateGlobalContext(Context globalContext) {\n+        if (ResourceLinkFactory.globalContext != null &&\n+                ResourceLinkFactory.globalContext != globalContext) {\n+            throw new SecurityException(\"Caller provided invalid global context\");\n+        }\n+    }\n+\n+\n+    private static boolean validateGlobalResourceAccess(String globalName) {\n+        ClassLoader cl = Thread.currentThread().getContextClassLoader();\n+        Map<String,String> registrations = globalResourceRegistrations.get(cl);\n+        if (registrations != null && registrations.containsValue(globalName)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+\n     // -------------------------------------------------- ObjectFactory Methods\n \n     /**\n@@ -82,6 +137,12 @@ public class ResourceLinkFactory implements ObjectFactory {\n         RefAddr refAddr = ref.get(ResourceLinkRef.GLOBALNAME);\n         if (refAddr != null) {\n             globalName = refAddr.getContent().toString();\n+            // When running under a security manager confirm that the current\n+            // web application has really been configured to access the specified\n+            // global resource\n+            if (!validateGlobalResourceAccess(globalName)) {\n+                return null;\n+            }\n             Object result = null;\n             result = globalContext.lookup(globalName);\n             // Check the expected type\n\n\n</patch>\n<test_patch>\ndiff --git a/test/org/apache/naming/TestNamingContext.java b/test/org/apache/naming/TestNamingContext.java\nnew file mode 100644\nindex 0000000000..cd95b00f66\n--- /dev/null\n+++ b/test/org/apache/naming/TestNamingContext.java\n@@ -0,0 +1,87 @@\n+package org.apache.naming;\n+\n+import javax.naming.Context;\n+import javax.naming.NamingException;\n+\n+import org.apache.catalina.startup.Tomcat;\n+import org.apache.catalina.startup.TomcatBaseTest;\n+import org.apache.naming.factory.ResourceLinkFactory;\n+import org.apache.tomcat.util.descriptor.web.ContextEnvironment;\n+import org.apache.tomcat.util.descriptor.web.ContextResourceLink;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestNamingContext extends TomcatBaseTest {\n+\n+    private static final String COMP_ENV = \"comp/env\";\n+    private static final String GLOBAL_NAME = \"global\";\n+    private static final String LOCAL_NAME = \"local\";\n+    private static final String DATA = \"Cabbage\";\n+\n+\n+    @Test\n+    public void testGlobalNaming() throws Exception {\n+        Tomcat tomcat = getTomcatInstance();\n+        tomcat.enableNaming();\n+\n+        org.apache.catalina.Context ctx = tomcat.addContext(\"\", null);\n+\n+        tomcat.start();\n+\n+        Context webappInitial = ContextBindings.getContext(ctx);\n+\n+        // Nothing added at the moment so should be null\n+        Object obj = doLookup(webappInitial, COMP_ENV + \"/\" + LOCAL_NAME);\n+        Assert.assertNull(obj);\n+\n+        ContextEnvironment ce = new ContextEnvironment();\n+        ce.setName(GLOBAL_NAME);\n+        ce.setValue(DATA);\n+        ce.setType(DATA.getClass().getName());\n+\n+        tomcat.getServer().getGlobalNamingResources().addEnvironment(ce);\n+\n+        // No link so still should be null\n+        obj = doLookup(webappInitial, COMP_ENV + \"/\" + LOCAL_NAME);\n+        Assert.assertNull(obj);\n+\n+        // Now add a resource link to the context\n+        ContextResourceLink crl = new ContextResourceLink();\n+        crl.setGlobal(GLOBAL_NAME);\n+        crl.setName(LOCAL_NAME);\n+        crl.setType(DATA.getClass().getName());\n+        ctx.getNamingResources().addResourceLink(crl);\n+\n+        // Link exists so should be OK now\n+        obj = doLookup(webappInitial, COMP_ENV + \"/\" + LOCAL_NAME);\n+        Assert.assertEquals(DATA, obj);\n+\n+        // Try shortcut\n+        ResourceLinkFactory factory = new ResourceLinkFactory();\n+        ResourceLinkRef rlr = new ResourceLinkRef(DATA.getClass().getName(), GLOBAL_NAME, null, null);\n+        obj = factory.getObjectInstance(rlr, null, null, null);\n+        Assert.assertEquals(DATA, obj);\n+\n+        // Remove the link\n+        ctx.getNamingResources().removeResourceLink(LOCAL_NAME);\n+\n+        // No link so should be null\n+        obj = doLookup(webappInitial, COMP_ENV + \"/\" + LOCAL_NAME);\n+        Assert.assertNull(obj);\n+\n+        // Shortcut should fail too\n+        obj = factory.getObjectInstance(rlr, null, null, null);\n+        Assert.assertNull(obj);\n+    }\n+\n+\n+    private Object doLookup(Context context, String name) {\n+        Object result = null;\n+        try {\n+            result = context.lookup(name);\n+        } catch (NamingException nnfe) {\n+            // Ignore\n+        }\n+        return result;\n+    }\n+}\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "2859ac3eae132383cb6f3f2042e25d7a4a281b0d", "source_date": "Mon Aug 22 20:48:39 2016 +0000", "source_tag": "9.0.0", "target_commit": "d6b5600afe75e1086dd564344e1d085966e4237d", "target_date": "Mon Aug 22 21:00:21 2016 +0000", "target_tag": "8.5.5", "FAIL TO PASS": ["testGlobalNaming"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_229", "original_commit_message": "[1.10.x] Fixed #27912, CVE-2017-7233 -- Fixed is_safe_url() with numeric URLs.\nThis is a security fix.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/utils/http.py b/django/utils/http.py\nindex 151e85de92..812ddb2883 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -16,9 +16,20 @@ from django.utils.encoding import force_bytes, force_str, force_text\n from django.utils.functional import keep_lazy_text\n from django.utils.six.moves.urllib.parse import (\n     quote, quote_plus, unquote, unquote_plus, urlencode as original_urlencode,\n-    urlparse,\n )\n \n+if six.PY2:\n+    from urlparse import (\n+        ParseResult, SplitResult, _splitnetloc, _splitparams, scheme_chars,\n+        uses_params,\n+    )\n+    _coerce_args = None\n+else:\n+    from urllib.parse import (\n+        ParseResult, SplitResult, _coerce_args, _splitnetloc, _splitparams,\n+        scheme_chars, uses_params,\n+    )\n+\n ETAG_MATCH = re.compile(r'(?:W/)?\"((?:\\\\.|[^\"])*)\"')\n \n MONTHS = 'jan feb mar apr may jun jul aug sep oct nov dec'.split()\n@@ -298,12 +309,64 @@ def is_safe_url(url, host=None):\n     return _is_safe_url(url, host) and _is_safe_url(url.replace('\\\\', '/'), host)\n \n \n+# Copied from urllib.parse.urlparse() but uses fixed urlsplit() function.\n+def _urlparse(url, scheme='', allow_fragments=True):\n+    \"\"\"Parse a URL into 6 components:\n+    <scheme>://<netloc>/<path>;<params>?<query>#<fragment>\n+    Return a 6-tuple: (scheme, netloc, path, params, query, fragment).\n+    Note that we don't break the components up in smaller bits\n+    (e.g. netloc is a single string) and we don't expand % escapes.\"\"\"\n+    if _coerce_args:\n+        url, scheme, _coerce_result = _coerce_args(url, scheme)\n+    splitresult = _urlsplit(url, scheme, allow_fragments)\n+    scheme, netloc, url, query, fragment = splitresult\n+    if scheme in uses_params and ';' in url:\n+        url, params = _splitparams(url)\n+    else:\n+        params = ''\n+    result = ParseResult(scheme, netloc, url, params, query, fragment)\n+    return _coerce_result(result) if _coerce_args else result\n+\n+\n+# Copied from urllib.parse.urlsplit() with\n+# https://github.com/python/cpython/pull/661 applied.\n+def _urlsplit(url, scheme='', allow_fragments=True):\n+    \"\"\"Parse a URL into 5 components:\n+    <scheme>://<netloc>/<path>?<query>#<fragment>\n+    Return a 5-tuple: (scheme, netloc, path, query, fragment).\n+    Note that we don't break the components up in smaller bits\n+    (e.g. netloc is a single string) and we don't expand % escapes.\"\"\"\n+    if _coerce_args:\n+        url, scheme, _coerce_result = _coerce_args(url, scheme)\n+    allow_fragments = bool(allow_fragments)\n+    netloc = query = fragment = ''\n+    i = url.find(':')\n+    if i > 0:\n+        for c in url[:i]:\n+            if c not in scheme_chars:\n+                break\n+        else:\n+            scheme, url = url[:i].lower(), url[i + 1:]\n+\n+    if url[:2] == '//':\n+        netloc, url = _splitnetloc(url, 2)\n+        if (('[' in netloc and ']' not in netloc) or\n+                (']' in netloc and '[' not in netloc)):\n+            raise ValueError(\"Invalid IPv6 URL\")\n+    if allow_fragments and '#' in url:\n+        url, fragment = url.split('#', 1)\n+    if '?' in url:\n+        url, query = url.split('?', 1)\n+    v = SplitResult(scheme, netloc, url, query, fragment)\n+    return _coerce_result(v) if _coerce_args else v\n+\n+\n def _is_safe_url(url, host):\n     # Chrome considers any URL with more than two slashes to be absolute, but\n     # urlparse is not so flexible. Treat any url with three slashes as unsafe.\n     if url.startswith('///'):\n         return False\n-    url_info = urlparse(url)\n+    url_info = _urlparse(url)\n     # Forbid URLs like http:///example.com - with a scheme, but without a hostname.\n     # In that URL, example.com is not the hostname but, a path component. However,\n     # Chrome will still consider example.com to be the hostname, so we must not\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex e22f76be2e..efe6b9a8b7 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -104,6 +104,8 @@ class TestUtilsHttp(unittest.TestCase):\n             r'http://testserver\\me:pass@example.com',\n             r'http://testserver\\@example.com',\n             r'http:\\\\testserver\\confirm\\me@example.com',\n+            'http:999999999',\n+            'ftp:9999999999',\n             '\\n',\n         )\n         for bad_url in bad_urls:\n@@ -119,6 +121,7 @@ class TestUtilsHttp(unittest.TestCase):\n             '//testserver/',\n             'http://testserver/confirm?email=me@example.com',\n             '/url%20with%20spaces/',\n+            'path/http:2222222222',\n         )\n         for good_url in good_urls:\n             self.assertTrue(http.is_safe_url(good_url, host='testserver'), \"%s should be allowed\" % good_url)\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "f824655bc2c50b19d2f202d7640785caabc82787", "source_date": "Tue Apr 4 10:17:35 2017 -0400", "source_tag": "1.10.7", "target_commit": "254326cb3682389f55f886804d2c43f7b9f23e4f", "target_date": "Tue Apr 4 10:00:41 2017 -0400", "target_tag": "1.9.13", "FAIL TO PASS": ["utils_tests.test_http.TestUtilsHttp.test_is_safe_url"], "PASS TO PASS": ["utils_tests.test_http.TestUtilsHttp.test_urlencode", "utils_tests.test_http.HttpDateProcessingTests.test_parsing_asctime", "utils_tests.test_http.ETagProcessingTests.test_quoting", "utils_tests.test_http.TestUtilsHttp.test_is_same_domain_bad", "utils_tests.test_http.HttpDateProcessingTests.test_parsing_rfc1123", "utils_tests.test_http.TestUtilsHttp.test_base36", "utils_tests.test_http.HttpDateProcessingTests.test_cookie_date", "utils_tests.test_http.HttpDateProcessingTests.test_http_date", "utils_tests.test_http.TestUtilsHttp.test_urlsafe_base64_roundtrip", "utils_tests.test_http.TestUtilsHttp.test_is_same_domain_good", "utils_tests.test_http.HttpDateProcessingTests.test_parsing_rfc850", "utils_tests.test_http.TestUtilsHttp.test_urlquote", "utils_tests.test_http.ETagProcessingTests.  Applying sites.0002_alter_domain_unique...test_parsing"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_230", "original_commit_message": "[1.10.x] Fixed #27912, CVE-2017-7233 -- Fixed is_safe_url() with numeric URLs.\nThis is a security fix.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/utils/http.py b/django/utils/http.py\nindex 151e85de92..812ddb2883 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -16,9 +16,20 @@ from django.utils.encoding import force_bytes, force_str, force_text\n from django.utils.functional import keep_lazy_text\n from django.utils.six.moves.urllib.parse import (\n     quote, quote_plus, unquote, unquote_plus, urlencode as original_urlencode,\n-    urlparse,\n )\n \n+if six.PY2:\n+    from urlparse import (\n+        ParseResult, SplitResult, _splitnetloc, _splitparams, scheme_chars,\n+        uses_params,\n+    )\n+    _coerce_args = None\n+else:\n+    from urllib.parse import (\n+        ParseResult, SplitResult, _coerce_args, _splitnetloc, _splitparams,\n+        scheme_chars, uses_params,\n+    )\n+\n ETAG_MATCH = re.compile(r'(?:W/)?\"((?:\\\\.|[^\"])*)\"')\n \n MONTHS = 'jan feb mar apr may jun jul aug sep oct nov dec'.split()\n@@ -298,12 +309,64 @@ def is_safe_url(url, host=None):\n     return _is_safe_url(url, host) and _is_safe_url(url.replace('\\\\', '/'), host)\n \n \n+# Copied from urllib.parse.urlparse() but uses fixed urlsplit() function.\n+def _urlparse(url, scheme='', allow_fragments=True):\n+    \"\"\"Parse a URL into 6 components:\n+    <scheme>://<netloc>/<path>;<params>?<query>#<fragment>\n+    Return a 6-tuple: (scheme, netloc, path, params, query, fragment).\n+    Note that we don't break the components up in smaller bits\n+    (e.g. netloc is a single string) and we don't expand % escapes.\"\"\"\n+    if _coerce_args:\n+        url, scheme, _coerce_result = _coerce_args(url, scheme)\n+    splitresult = _urlsplit(url, scheme, allow_fragments)\n+    scheme, netloc, url, query, fragment = splitresult\n+    if scheme in uses_params and ';' in url:\n+        url, params = _splitparams(url)\n+    else:\n+        params = ''\n+    result = ParseResult(scheme, netloc, url, params, query, fragment)\n+    return _coerce_result(result) if _coerce_args else result\n+\n+\n+# Copied from urllib.parse.urlsplit() with\n+# https://github.com/python/cpython/pull/661 applied.\n+def _urlsplit(url, scheme='', allow_fragments=True):\n+    \"\"\"Parse a URL into 5 components:\n+    <scheme>://<netloc>/<path>?<query>#<fragment>\n+    Return a 5-tuple: (scheme, netloc, path, query, fragment).\n+    Note that we don't break the components up in smaller bits\n+    (e.g. netloc is a single string) and we don't expand % escapes.\"\"\"\n+    if _coerce_args:\n+        url, scheme, _coerce_result = _coerce_args(url, scheme)\n+    allow_fragments = bool(allow_fragments)\n+    netloc = query = fragment = ''\n+    i = url.find(':')\n+    if i > 0:\n+        for c in url[:i]:\n+            if c not in scheme_chars:\n+                break\n+        else:\n+            scheme, url = url[:i].lower(), url[i + 1:]\n+\n+    if url[:2] == '//':\n+        netloc, url = _splitnetloc(url, 2)\n+        if (('[' in netloc and ']' not in netloc) or\n+                (']' in netloc and '[' not in netloc)):\n+            raise ValueError(\"Invalid IPv6 URL\")\n+    if allow_fragments and '#' in url:\n+        url, fragment = url.split('#', 1)\n+    if '?' in url:\n+        url, query = url.split('?', 1)\n+    v = SplitResult(scheme, netloc, url, query, fragment)\n+    return _coerce_result(v) if _coerce_args else v\n+\n+\n def _is_safe_url(url, host):\n     # Chrome considers any URL with more than two slashes to be absolute, but\n     # urlparse is not so flexible. Treat any url with three slashes as unsafe.\n     if url.startswith('///'):\n         return False\n-    url_info = urlparse(url)\n+    url_info = _urlparse(url)\n     # Forbid URLs like http:///example.com - with a scheme, but without a hostname.\n     # In that URL, example.com is not the hostname but, a path component. However,\n     # Chrome will still consider example.com to be the hostname, so we must not\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex e22f76be2e..efe6b9a8b7 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -104,6 +104,8 @@ class TestUtilsHttp(unittest.TestCase):\n             r'http://testserver\\me:pass@example.com',\n             r'http://testserver\\@example.com',\n             r'http:\\\\testserver\\confirm\\me@example.com',\n+            'http:999999999',\n+            'ftp:9999999999',\n             '\\n',\n         )\n         for bad_url in bad_urls:\n@@ -119,6 +121,7 @@ class TestUtilsHttp(unittest.TestCase):\n             '//testserver/',\n             'http://testserver/confirm?email=me@example.com',\n             '/url%20with%20spaces/',\n+            'path/http:2222222222',\n         )\n         for good_url in good_urls:\n             self.assertTrue(http.is_safe_url(good_url, host='testserver'), \"%s should be allowed\" % good_url)\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "logical and structural changes", "source_commit": "f824655bc2c50b19d2f202d7640785caabc82787", "source_date": "Tue Apr 4 10:17:35 2017 -0400", "source_tag": "1.10.7", "target_commit": "8339277518c7d8ec280070a780915304654e3b66", "target_date": "Tue Mar 28 12:57:34 2017 -0400", "target_tag": "1.8.18", "FAIL TO PASS": ["utils_tests.test_http.TestUtilsHttp.test_is_safe_url"], "PASS TO PASS": ["utils_tests.test_http.TestUtilsHttp.test_same_origin_false", "utils_tests.test_http.ETagProcessingTests.  Applying sites.0001_initial...test_parsing", "utils_tests.test_http.TestUtilsHttp.test_urlencode", "utils_tests.test_http.HttpDateProcessingTests.test_parsing_asctime", "utils_tests.test_http.ETagProcessingTests.test_quoting", "utils_tests.test_http.TestUtilsHttp.test_same_origin_true", "utils_tests.test_http.HttpDateProcessingTests.test_parsing_rfc1123", "utils_tests.test_http.TestUtilsHttp.test_base36", "utils_tests.test_http.HttpDateProcessingTests.test_cookie_date", "utils_tests.test_http.HttpDateProcessingTests.test_http_date", "utils_tests.test_http.TestUtilsHttp.test_urlsafe_base64_roundtrip", "utils_tests.test_http.HttpDateProcessingTests.test_parsing_rfc850", "utils_tests.test_http.TestUtilsHttp.test_urlquote"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_231", "original_commit_message": "[1.10.x] Fixed CVE-2016-9014 -- Validated Host header when DEBUG=True.\nThis is a security fix.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/http/request.py b/django/http/request.py\nindex 0ea423d080..8c32af54c8 100644\n--- a/django/http/request.py\n+++ b/django/http/request.py\n@@ -96,12 +96,13 @@ class HttpRequest(object):\n         \"\"\"Return the HTTP host using the environment or request headers.\"\"\"\n         host = self._get_raw_host()\n \n-        # There is no hostname validation when DEBUG=True\n-        if settings.DEBUG:\n-            return host\n+        # Allow variants of localhost if ALLOWED_HOSTS is empty and DEBUG=True.\n+        allowed_hosts = settings.ALLOWED_HOSTS\n+        if settings.DEBUG and not allowed_hosts:\n+            allowed_hosts = ['localhost', '127.0.0.1', '[::1]']\n \n         domain, port = split_domain_port(host)\n-        if domain and validate_host(domain, settings.ALLOWED_HOSTS):\n+        if domain and validate_host(domain, allowed_hosts):\n             return host\n         else:\n             msg = \"Invalid HTTP_HOST header: %r.\" % host\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/csrf_tests/tests.py b/tests/csrf_tests/tests.py\nindex 59814a18c7..f96a8581be 100644\n--- a/tests/csrf_tests/tests.py\n+++ b/tests/csrf_tests/tests.py\n@@ -377,7 +377,7 @@ class CsrfViewMiddlewareTest(SimpleTestCase):\n         self.assertEqual(len(csrf_cookie.value), CSRF_TOKEN_LENGTH)\n         self._check_token_present(resp, csrf_id=csrf_cookie.value)\n \n-    @override_settings(DEBUG=True)\n+    @override_settings(DEBUG=True, ALLOWED_HOSTS=['www.example.com'])\n     def test_https_bad_referer(self):\n         \"\"\"\n         Test that a POST HTTPS request with a bad referer is rejected\n\ndiff --git a/tests/requests/tests.py b/tests/requests/tests.py\nindex b015e6dfff..c4277ba495 100644\n--- a/tests/requests/tests.py\n+++ b/tests/requests/tests.py\n@@ -756,21 +756,22 @@ class HostValidationTests(SimpleTestCase):\n         self.assertEqual(request.get_port(), '8080')\n \n     @override_settings(DEBUG=True, ALLOWED_HOSTS=[])\n-    def test_host_validation_disabled_in_debug_mode(self):\n-        \"\"\"If ALLOWED_HOSTS is empty and DEBUG is True, all hosts pass.\"\"\"\n-        request = HttpRequest()\n-        request.META = {\n-            'HTTP_HOST': 'example.com',\n-        }\n-        self.assertEqual(request.get_host(), 'example.com')\n+    def test_host_validation_in_debug_mode(self):\n+        \"\"\"\n+        If ALLOWED_HOSTS is empty and DEBUG is True, variants of localhost are\n+        allowed.\n+        \"\"\"\n+        valid_hosts = ['localhost', '127.0.0.1', '[::1]']\n+        for host in valid_hosts:\n+            request = HttpRequest()\n+            request.META = {'HTTP_HOST': host}\n+            self.assertEqual(request.get_host(), host)\n \n-        # Invalid hostnames would normally raise a SuspiciousOperation,\n-        # but we have DEBUG=True, so this check is disabled.\n-        request = HttpRequest()\n-        request.META = {\n-            'HTTP_HOST': \"invalid_hostname.com\",\n-        }\n-        self.assertEqual(request.get_host(), \"invalid_hostname.com\")\n+        # Other hostnames raise a SuspiciousOperation.\n+        with self.assertRaises(SuspiciousOperation):\n+            request = HttpRequest()\n+            request.META = {'HTTP_HOST': 'example.com'}\n+            request.get_host()\n \n     @override_settings(ALLOWED_HOSTS=[])\n     def test_get_host_suggestion_of_allowed_host(self):\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "884e113838e5a72b4b0ec9e5e87aa480f6aa4472", "source_date": "Tue Nov 1 09:36:44 2016 -0400", "source_tag": "1.10.3", "target_commit": "c401ae9a7dfb1a94a8a61927ed541d6f93089587", "target_date": "Tue Oct 25 15:27:45 2016 -0400", "target_tag": "1.8.16", "FAIL TO PASS": ["requests.tests.HostValidationTests.test_host_validation_in_debug_mode"], "PASS TO PASS": ["requests.tests.RequestsTests.test_POST_after_body_read_and_stream_read_multipart", "requests.tests.RequestsTests.test_wsgirequest_path_info", "requests.tests.RequestsTests.test_body_after_POST_multipart_form_data", "requests.tests.RequestsTests.test_stream", "requests.tests.RequestsTests.test_httponly_cookie", "Cookie will expire if max_age is provided", "requests.tests.RequestsTests.test_POST_binary_only", "Cookie accepts an aware datetime as expiration time", "requests.tests.RequestsTests.test_alternate_charset_POST", "requests.tests.RequestsTests.test_httprequest_repr_invalid_method_and_path", "requests.tests.RequestsTests.test_wsgirequest_repr", "requests.tests.BuildAbsoluteURITestCase.test_build_absolute_uri_relative_location", "requests.tests.RequestsTests.test_FILES_connection_error", "requests.tests.RequestsTests.test_wsgirequest_with_force_script_name", "requests.tests.RequestsTests.test_POST_after_body_read", "requests.tests.RequestsTests.test_non_ascii_POST", "requests.tests.RequestsTests.test_value_after_read", "requests.tests.RequestsTests.test_httprequest_full_path_with_query_string_and_fragment", "requests.tests.HostValidationTests.test_http_get_host", "requests.tests.RequestsTests.test_wsgirequest", "requests.tests.RequestsTests.test_POST_after_body_read_and_stream_read", "requests.tests.BuildAbsoluteURITestCase.test_build_absolute_uri_schema_relative_location", "requests.tests.RequestsTests.test_POST_connection_error", "requests.tests.HostValidationTests.test_http_get_host_with_x_forwarded_host", "requests.tests.RequestsTests.test_body_after_POST_multipart_related", "requests.tests.RequestsTests.test_read_by_lines", "requests.tests.RequestsTests.test_read_after_value", "Cookie will expire when an near expiration time is provided", "Cookie will expire when an distant expiration time is provided", "requests.tests.RequestsTests.test_wsgirequest_with_script_name", "requests.tests.RequestsTests.test_httprequest_location", "requests.tests.RequestsTests.test_POST_multipart_with_content_length_zero", "get_host() makes helpful suggestions if a valid-looking host is not in ALLOWED_HOSTS.", "Verify HttpResponse.set_cookie() works with unicode data.", "requests.tests.RequestsTests.test_limited_stream", "requests.tests.RequestsTests.test_wsgirequest_path_with_force_script_name_trailing_slash", "requests.tests.RequestsTests.test_bad_httprequest_repr", "requests.tests.BuildAbsoluteURITestCase.test_build_absolute_uri_no_location", "requests.tests.RequestsTests.test_httprequest_repr", "requests.tests.RequestsTests.test_httprequest", "requests.tests.BuildAbsoluteURITestCase.  Applying sites.0001_initial...test_build_absolute_uri_absolute_location", "requests.tests.RequestsTests.test_httprequest_full_path"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_232", "original_commit_message": "[1.10.x] Fixed CVE-2016-9014 -- Validated Host header when DEBUG=True.\nThis is a security fix.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/http/request.py b/django/http/request.py\nindex 0ea423d080..8c32af54c8 100644\n--- a/django/http/request.py\n+++ b/django/http/request.py\n@@ -96,12 +96,13 @@ class HttpRequest(object):\n         \"\"\"Return the HTTP host using the environment or request headers.\"\"\"\n         host = self._get_raw_host()\n \n-        # There is no hostname validation when DEBUG=True\n-        if settings.DEBUG:\n-            return host\n+        # Allow variants of localhost if ALLOWED_HOSTS is empty and DEBUG=True.\n+        allowed_hosts = settings.ALLOWED_HOSTS\n+        if settings.DEBUG and not allowed_hosts:\n+            allowed_hosts = ['localhost', '127.0.0.1', '[::1]']\n \n         domain, port = split_domain_port(host)\n-        if domain and validate_host(domain, settings.ALLOWED_HOSTS):\n+        if domain and validate_host(domain, allowed_hosts):\n             return host\n         else:\n             msg = \"Invalid HTTP_HOST header: %r.\" % host\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/csrf_tests/tests.py b/tests/csrf_tests/tests.py\nindex 59814a18c7..f96a8581be 100644\n--- a/tests/csrf_tests/tests.py\n+++ b/tests/csrf_tests/tests.py\n@@ -377,7 +377,7 @@ class CsrfViewMiddlewareTest(SimpleTestCase):\n         self.assertEqual(len(csrf_cookie.value), CSRF_TOKEN_LENGTH)\n         self._check_token_present(resp, csrf_id=csrf_cookie.value)\n \n-    @override_settings(DEBUG=True)\n+    @override_settings(DEBUG=True, ALLOWED_HOSTS=['www.example.com'])\n     def test_https_bad_referer(self):\n         \"\"\"\n         Test that a POST HTTPS request with a bad referer is rejected\n\ndiff --git a/tests/requests/tests.py b/tests/requests/tests.py\nindex b015e6dfff..c4277ba495 100644\n--- a/tests/requests/tests.py\n+++ b/tests/requests/tests.py\n@@ -756,21 +756,22 @@ class HostValidationTests(SimpleTestCase):\n         self.assertEqual(request.get_port(), '8080')\n \n     @override_settings(DEBUG=True, ALLOWED_HOSTS=[])\n-    def test_host_validation_disabled_in_debug_mode(self):\n-        \"\"\"If ALLOWED_HOSTS is empty and DEBUG is True, all hosts pass.\"\"\"\n-        request = HttpRequest()\n-        request.META = {\n-            'HTTP_HOST': 'example.com',\n-        }\n-        self.assertEqual(request.get_host(), 'example.com')\n+    def test_host_validation_in_debug_mode(self):\n+        \"\"\"\n+        If ALLOWED_HOSTS is empty and DEBUG is True, variants of localhost are\n+        allowed.\n+        \"\"\"\n+        valid_hosts = ['localhost', '127.0.0.1', '[::1]']\n+        for host in valid_hosts:\n+            request = HttpRequest()\n+            request.META = {'HTTP_HOST': host}\n+            self.assertEqual(request.get_host(), host)\n \n-        # Invalid hostnames would normally raise a SuspiciousOperation,\n-        # but we have DEBUG=True, so this check is disabled.\n-        request = HttpRequest()\n-        request.META = {\n-            'HTTP_HOST': \"invalid_hostname.com\",\n-        }\n-        self.assertEqual(request.get_host(), \"invalid_hostname.com\")\n+        # Other hostnames raise a SuspiciousOperation.\n+        with self.assertRaises(SuspiciousOperation):\n+            request = HttpRequest()\n+            request.META = {'HTTP_HOST': 'example.com'}\n+            request.get_host()\n \n     @override_settings(ALLOWED_HOSTS=[])\n     def test_get_host_suggestion_of_allowed_host(self):\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "884e113838e5a72b4b0ec9e5e87aa480f6aa4472", "source_date": "Tue Nov 1 09:36:44 2016 -0400", "source_tag": "1.10.3", "target_commit": "45acd6d836895a4c36575f48b3fb36a3dae98d19", "target_date": "Tue Oct 25 15:18:29 2016 -0400", "target_tag": "1.9.11", "FAIL TO PASS": ["requests.tests.HostValidationTests.test_host_validation_in_debug_mode"], "PASS TO PASS": ["requests.tests.RequestsTests.test_POST_after_body_read_and_stream_read_multipart", "requests.tests.RequestsTests.test_wsgirequest_path_info", "requests.tests.RequestsTests.test_body_after_POST_multipart_form_data", "requests.tests.RequestsTests.test_stream", "requests.tests.RequestsTests.test_httponly_cookie", "requests.tests.HostValidationTests.test_get_port", "Cookie will expire if max_age is provided", "requests.tests.RequestsTests.test_POST_binary_only", "Cookie accepts an aware datetime as expiration time", "requests.tests.RequestsTests.test_alternate_charset_POST", "requests.tests.RequestsTests.test_httprequest_repr_invalid_method_and_path", "requests.tests.RequestsTests.test_wsgirequest_repr", "requests.tests.BuildAbsoluteURITestCase.test_build_absolute_uri_relative_location", "requests.tests.RequestsTests.test_FILES_connection_error", "requests.tests.RequestsTests.test_wsgirequest_with_force_script_name", "requests.tests.RequestsTests.test_POST_after_body_read", "requests.tests.RequestsTests.test_non_ascii_POST", "requests.tests.RequestsTests.test_value_after_read", "requests.tests.RequestsTests.test_httprequest_full_path_with_query_string_and_fragment", "requests.tests.HostValidationTests.test_http_get_host", "requests.tests.RequestsTests.test_wsgirequest", "requests.tests.RequestsTests.test_POST_after_body_read_and_stream_read", "requests.tests.BuildAbsoluteURITestCase.test_build_absolute_uri_schema_relative_location", "requests.tests.RequestsTests.test_POST_connection_error", "requests.tests.HostValidationTests.test_http_get_host_with_x_forwarded_host", "requests.tests.RequestsTests.test_body_after_POST_multipart_related", "requests.tests.RequestsTests.test_read_by_lines", "requests.tests.RequestsTests.test_read_after_value", "Cookie will expire when an near expiration time is provided", "Cookie will expire when an distant expiration time is provided", "requests.tests.RequestsTests.test_get_raw_uri", "requests.tests.RequestsTests.test_wsgirequest_with_script_name", "requests.tests.BuildAbsoluteURITestCase.  Applying sites.0002_alter_domain_unique...test_build_absolute_uri_absolute_location", "requests.tests.RequestsTests.test_httprequest_location", "requests.tests.RequestsTests.test_POST_multipart_with_content_length_zero", "get_host() makes helpful suggestions if a valid-looking host is not in ALLOWED_HOSTS.", "Verify HttpResponse.set_cookie() works with unicode data.", "requests.tests.RequestsTests.test_limited_stream", "requests.tests.RequestsTests.test_wsgirequest_path_with_force_script_name_trailing_slash", "requests.tests.HostValidationTests.test_get_port_with_x_forwarded_port", "requests.tests.BuildAbsoluteURITestCase.test_build_absolute_uri_no_location", "requests.tests.RequestsTests.test_httprequest_repr", "requests.tests.RequestsTests.test_httprequest", "requests.tests.RequestsTests.test_httprequest_full_path"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_1261", "original_commit_message": "Add additional jti claim logic when loading auth object\n[#158847208]\nSigned-off-by: Bruce Ricard <bruce.ricard@gmail.com>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java b/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java\nindex d2ce4ea26..130dce797 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java\n@@ -940,6 +940,19 @@ public class UaaTokenServices implements AuthorizationServerTokenServices, Resou\n \n         TokenValidation tokenValidation = validateToken(accessToken);\n         Map<String, Object> claims = tokenValidation.getClaims();\n+\n+        Object jtiClaim = claims.get(JTI);\n+\n+        if (jtiClaim == null) {\n+            throw new InvalidTokenException(\"The token must contain a jti claim.\");\n+        } else {\n+            if (jtiClaim.toString().endsWith(REFRESH_TOKEN_SUFFIX)) {\n+                throw new InvalidTokenException(\n+                  \"Invalid access token was provided.\"\n+                );\n+            }\n+        }\n+\n         accessToken = tokenValidation.getJwt().getEncoded();\n \n         // Check token expiry\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java\nindex 59dfe8698..d408f25bc 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java\n@@ -33,6 +33,7 @@ import org.cloudfoundry.identity.uaa.oauth.token.matchers.OAuth2RefreshTokenMatc\n import org.cloudfoundry.identity.uaa.user.UaaUser;\n import org.cloudfoundry.identity.uaa.user.UaaUserPrototype;\n import org.cloudfoundry.identity.uaa.util.JsonUtils;\n+import org.cloudfoundry.identity.uaa.util.TokenValidation;\n import org.cloudfoundry.identity.uaa.zone.ClientServicesExtension;\n import org.cloudfoundry.identity.uaa.zone.IdentityZone;\n import org.cloudfoundry.identity.uaa.zone.IdentityZoneConfiguration;\n@@ -1975,6 +1976,59 @@ public class UaaTokenServicesTests {\n         System.out.println(\"newAccessToken = \" + newAccessToken);\n     }\n \n+    @Test\n+    public void loadAuthentication_when_given_an_opaque_refreshToken_should_throw_exception() {\n+        tokenSupport.defaultClient.setAutoApproveScopes(singleton(\"true\"));\n+        AuthorizationRequest authorizationRequest = new AuthorizationRequest(CLIENT_ID,tokenSupport.requestedAuthScopes);\n+        authorizationRequest.setResponseTypes(new HashSet(Arrays.asList(\"token\")));\n+        authorizationRequest.setResourceIds(new HashSet<>(tokenSupport.resourceIds));\n+        Map<String, String> azParameters = new HashMap<>(authorizationRequest.getRequestParameters());\n+        azParameters.put(GRANT_TYPE, AUTHORIZATION_CODE);\n+\n+        azParameters.put(REQUEST_TOKEN_FORMAT, TokenConstants.OPAQUE);\n+\n+        authorizationRequest.setRequestParameters(azParameters);\n+        Authentication userAuthentication = tokenSupport.defaultUserAuthentication;\n+\n+        OAuth2Authentication authentication = new OAuth2Authentication(authorizationRequest.createOAuth2Request(), userAuthentication);\n+        OAuth2AccessToken compositeToken = tokenServices.createAccessToken(authentication);\n+\n+        String refreshTokenValue = tokenProvisioning.retrieve(compositeToken.getRefreshToken().getValue(), IdentityZoneHolder.get().getId()).getValue();\n+\n+        expectedException.expect(InvalidTokenException.class);\n+        expectedException.expectMessage(\"Invalid access token was provided.\");\n+\n+        tokenServices.loadAuthentication(refreshTokenValue);\n+    }\n+\n+    @Rule\n+    public ExpectedException expectedException = ExpectedException.none();\n+\n+    @Test\n+    public void loadAuthentication_when_given_an_refresh_jwt_should_throw_exception() {\n+        IdentityZoneHolder.get().getConfig().getTokenPolicy().setJwtRevocable(true);\n+        tokenSupport.defaultClient.setAutoApproveScopes(singleton(\"true\"));\n+        AuthorizationRequest authorizationRequest = new AuthorizationRequest(CLIENT_ID,tokenSupport.requestedAuthScopes);\n+        authorizationRequest.setResponseTypes(new HashSet(Arrays.asList(\"token\")));\n+        authorizationRequest.setResourceIds(new HashSet<>(tokenSupport.resourceIds));\n+        Map<String, String> azParameters = new HashMap<>(authorizationRequest.getRequestParameters());\n+        azParameters.put(GRANT_TYPE, AUTHORIZATION_CODE);\n+\n+        azParameters.put(REQUEST_TOKEN_FORMAT, JWT.getStringValue());\n+\n+        authorizationRequest.setRequestParameters(azParameters);\n+        Authentication userAuthentication = tokenSupport.defaultUserAuthentication;\n+\n+        OAuth2Authentication authentication = new OAuth2Authentication(authorizationRequest.createOAuth2Request(), userAuthentication);\n+        OAuth2AccessToken compositeToken = tokenServices.createAccessToken(authentication);\n+        TokenValidation refreshToken = tokenServices.validateToken(compositeToken.getRefreshToken().getValue());\n+\n+        String refreshTokenValue = tokenProvisioning.retrieve(refreshToken.getClaims().get(\"jti\").toString(), IdentityZoneHolder.get().getId()).getValue();\n+\n+        expectedException.expect(InvalidTokenException.class);\n+        expectedException.expectMessage(\"Invalid access token was provided.\");\n+        tokenServices.loadAuthentication(refreshTokenValue);\n+    }\n \n     @Test\n     public void testLoadAuthenticationForAClient() {\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "5d021e83ef143c64179d0da015aa76321ee40988", "source_date": "Tue Jul 10 10:53:00 2018 -0700", "source_tag": "4.19.2", "target_commit": "4cb1be404cf4a82e39cf2a6357aa17af8b33f2a1", "target_date": "Wed Jul 11 15:11:31 2018 -0700", "target_tag": "4.5.7", "FAIL TO PASS": ["org.cloudfoundry.identity.uaa.oauth.UaaTokenServicesTests > loadAuthentication_when_given_an_opaque_refreshToken_should_throw_exception[0: testname[old behavior]", "org.cloudfoundry.identity.uaa.oauth.UaaTokenServicesTests > loadAuthentication_when_given_an_refresh_jwt_should_throw_exception[1: testname[using enhancer]", "org.cloudfoundry.identity.uaa.oauth.UaaTokenServicesTests > loadAuthentication_when_given_an_refresh_jwt_should_throw_exception[0: testname[old behavior]", "org.cloudfoundry.identity.uaa.oauth.UaaTokenServicesTests > loadAuthentication_when_given_an_opaque_refreshToken_should_throw_exception[1: testname[using enhancer]"], "PASS TO PASS": ["org.cloudfoundry.identity.uaa.zone.event.IdentityProviderModifiedEventTest", "org.cloudfoundry.identity.uaa.oauth.approval.ApprovalTests", "org.cloudfoundry.identity.uaa.provider.ldap.LdapIdentityProviderDefinitionTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.ZoneAwareIdpMetadataGeneratorTest", "org.cloudfoundry.identity.uaa.util.log.SyslogAppenderTest", "org.cloudfoundry.identity.uaa.db.ClientDetailsHasRequiredUserScopes", "org.cloudfoundry.identity.uaa.provider.saml.BootstrapSamlIdentityProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.login.LoginInfoEndpointTests", "org.cloudfoundry.identity.uaa.user.BCryptPasswordEncoderTest", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupExternalMembershipManagerTests", "org.cloudfoundry.identity.uaa.zone.GeneralIdentityZoneConfigurationValidatorTests", ":cloudfoundry-identity-server:compileTestJava", "org.cloudfoundry.identity.uaa.login.ResetPasswordControllerTest", "org.cloudfoundry.identity.uaa.audit.event.ApprovalModifiedEventTest", "org.cloudfoundry.identity.uaa.authentication.BackwardsCompatibleTokenEndpointAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.oauth.AuthorizePromptNoneEntryPointTest", "org.cloudfoundry.identity.uaa.authentication.UaaClientAuthenticationProviderTest", ":cloudfoundry-identity-server:processResources", "org.cloudfoundry.identity.uaa.openid.UserInfoEndpointTests", "org.cloudfoundry.identity.uaa.web.UaaSessionCookieConfigTest", "org.cloudfoundry.identity.uaa.authentication.login.RemoteAuthenticationEndpointTests", "org.cloudfoundry.identity.uaa.provider.saml.ZoneAwareMetadataGeneratorTests", "org.cloudfoundry.identity.uaa.client.ClientAdminBootstrapTests", "org.cloudfoundry.identity.uaa.db.ClientDetailsSupportsExtendedAuthoritesAndScopes", "org.cloudfoundry.identity.uaa.test.CreateDB", "org.cloudfoundry.identity.uaa.audit.event.AuditListenerTests", "org.cloudfoundry.identity.uaa.oauth.token.Saml2TokenGranterTest", "org.cloudfoundry.identity.uaa.util.ColorHashTest", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.provider.ldap.LdapIdentityProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.SamlServiceProviderDefinitionTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpWebSsoProfileImplTest", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupProvisioningTests", "org.cloudfoundry.identity.uaa.zone.IdentityZoneHolderTest", "org.cloudfoundry.identity.uaa.oauth.jwt.CommonSignatureVerifierTest", "org.cloudfoundry.identity.uaa.util.log.LineAwareLayoutTest", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimExternalGroupBootstrapTests", "org.cloudfoundry.identity.uaa.oauth.UaaTokenStoreTests", "org.cloudfoundry.identity.uaa.oauth.token.KeyInfoTests", "org.cloudfoundry.identity.uaa.authentication.manager.ScopeAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.zone.IdentityZoneResolvingFilterTests", "org.cloudfoundry.identity.uaa.authentication.WhitelistLogoutHandlerTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.SamlServiceProviderConfiguratorTest", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.zone.IdentityZoneEndpointsTests", "org.cloudfoundry.identity.uaa.account.PasswordCheckEndpointTests", ":cloudfoundry-identity-model:gitInfo", "org.cloudfoundry.identity.uaa.login.ChangePasswordControllerTest", "org.cloudfoundry.identity.uaa.config.YamlPropertiesFactoryBeanTests", "org.cloudfoundry.identity.uaa.oauth.token.UserTokenGranterTest", "org.cloudfoundry.identity.uaa.authentication.manager.LoginAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.authentication.event.UserAuthenticationSuccessEventTests", "org.cloudfoundry.identity.uaa.user.InMemoryUaaUserDatabaseTests", "org.cloudfoundry.identity.uaa.security.web.CorsFilterTests", "org.cloudfoundry.identity.uaa.util.UaaMapUtilsTest", "org.cloudfoundry.identity.uaa.oauth.token.JwtTokenGranterTests", "org.cloudfoundry.identity.uaa.scim.util.ScimUtilsTest", "org.cloudfoundry.identity.uaa.security.web.SecurityFilterChainPostProcessorTests", "org.cloudfoundry.identity.uaa.oauth.TokenRevocationEndpointTests", "org.cloudfoundry.identity.uaa.scim.ScimGroupMemberTests", "org.cloudfoundry.identity.uaa.zone.JdbcIdentityZoneProvisioningTests", "org.cloudfoundry.identity.uaa.codestore.CodeStoreEndpointsTests", "org.cloudfoundry.identity.uaa.client.ClientAdminEndpointsTests", "org.cloudfoundry.identity.uaa.login.util.FakeJavaMailSenderTest", "org.cloudfoundry.identity.uaa.scim.endpoints.PasswordResetEndpointTest", "org.cloudfoundry.identity.uaa.web.ForwardAwareInternalResourceViewResolverTests", "org.cloudfoundry.identity.uaa.web.ExceptionReportHttpMessageConverterTest", "org.cloudfoundry.identity.uaa.oauth.DisableIdTokenResponseTypeFilterTest", "org.cloudfoundry.identity.uaa.oauth.approval.JdbcApprovalStoreTests", "org.cloudfoundry.identity.uaa.authentication.UTF8ConversionFilterTests", "org.cloudfoundry.identity.uaa.db.TableAndColumnNormalizationTest", "org.cloudfoundry.identity.uaa.util.UaaPagingUtilsTests", "org.cloudfoundry.identity.uaa.db.RevocableTokenTableTest", "org.cloudfoundry.identity.uaa.authentication.listener.UserAuthenticationSuccessListenerTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsTests", "org.cloudfoundry.identity.uaa.util.TokenValidationTest", "org.cloudfoundry.identity.uaa.provider.saml.SamlRedirectUtilsTest", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.login.EmailChangeEmailServiceTest", "org.cloudfoundry.identity.uaa.util.CachingPasswordEncoderTest", "org.cloudfoundry.identity.uaa.authorization.external.LdapGroupMappingAuthorizationManagerTests", "org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationSerializerDeserializerTest", "org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationSerializationTests", ":cloudfoundry-identity-server:compileTestJava/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", ":cloudfoundry-identity-server:testClasses", "org.cloudfoundry.identity.uaa.oauth.expression.IsSelfCheckTest", "org.cloudfoundry.identity.uaa.zone.MultitenantJdbcClientDetailsServiceTests", "org.cloudfoundry.identity.uaa.login.ProfileControllerTests", "org.cloudfoundry.identity.uaa.audit.AuditEventTypeTests", "org.cloudfoundry.identity.uaa.scim.jdbc.ScimSearchQueryConverterTests", "org.cloudfoundry.identity.uaa.db.UserInfoTableTest", "org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcherTests", "org.cloudfoundry.identity.uaa.oauth.RestrictUaaScopesClientValidatorTest", "org.cloudfoundry.identity.uaa.resources.jdbc.JdbcSqlAdapterTests", "org.cloudfoundry.identity.uaa.oauth.jwk.JsonWebKeySetTests", "org.cloudfoundry.identity.uaa.login.EmailInvitationsServiceTests", "org.cloudfoundry.identity.uaa.scim.ScimCoreTests", "org.cloudfoundry.identity.uaa.config.IdentityZoneConfigurationBootstrapTests", "org.cloudfoundry.identity.uaa.provider.saml.ConfigMetadataProviderTest", "org.cloudfoundry.identity.uaa.oauth.token.UaaTokenEndpointTests", "org.cloudfoundry.identity.uaa.authentication.SystemAuthenticationTest", "org.cloudfoundry.identity.uaa.cache.ExpiringUrlCacheTests", ":cloudfoundry-identity-model:classes", "org.cloudfoundry.identity.uaa.util.UaaStringUtilsTest", "org.cloudfoundry.identity.uaa.zone.event.IdentityZoneModifiedEventTest", "org.cloudfoundry.identity.uaa.config.NestedMapPropertySourceTests", "org.cloudfoundry.identity.uaa.security.DefaultSecurityContextAccessorTests", "org.cloudfoundry.identity.uaa.oauth.CheckTokenEndpointTests", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimUserProvisioningTests", "org.cloudfoundry.identity.uaa.authentication.SessionResetFilterTests", "org.cloudfoundry.identity.uaa.oauth.jwt.CommonSignerTest", "org.cloudfoundry.identity.uaa.authentication.SamlAssertionBindingTests", "org.cloudfoundry.identity.uaa.authentication.manager.CheckIdpEnabledAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserEndpointsTests", "org.cloudfoundry.identity.uaa.oauth.event.ClientAdminEventPublisherTests", "org.cloudfoundry.identity.uaa.db.OldAuthzTableDropped", "org.cloudfoundry.identity.uaa.web.UaaSavedRequestCacheTests", "org.cloudfoundry.identity.uaa.authentication.manager.ChainedAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.util.RestTemplateFactoryTests", "org.cloudfoundry.identity.uaa.impl.config.YamlServletProfileInitializerTest", "org.cloudfoundry.identity.uaa.db.RevocableTokenIndexTest_4_0_8", "org.cloudfoundry.identity.uaa.error.ConvertingExceptionViewTests", "org.cloudfoundry.identity.uaa.scim.exception.InvalidPasswordExceptionTest", "org.cloudfoundry.identity.uaa.oauth.token.JdbcRevocableTokenProvisioningTest", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimGroupBootstrapTests", "org.cloudfoundry.identity.uaa.provider.oauth.OauthIdentityProviderDefinitionFactoryBeanTest", ":cloudfoundry-identity-model:buildInfo", "org.cloudfoundry.identity.uaa.user.UaaAuthorityTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlIdentityProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.provider.ldap.DynamicPasswordComparatorTests", "org.cloudfoundry.identity.uaa.resources.jdbc.JdbcPagingListTests", "org.cloudfoundry.identity.uaa.scim.validate.UaaPasswordPolicyValidatorTests", "org.cloudfoundry.identity.uaa.config.YamlServletProfileInitializerTests", "org.cloudfoundry.identity.uaa.authentication.manager.CommonLoginPolicyTest", "org.cloudfoundry.identity.uaa.util.UaaTokenUtilsTest", "org.cloudfoundry.identity.uaa.resources.MessageTests", "org.cloudfoundry.identity.uaa.authentication.manager.ExternalLoginAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.login.AccountsControllerTest", "org.cloudfoundry.identity.uaa.oauth.approval.ApprovalsAdminEndpointsTests", "org.cloudfoundry.identity.uaa.audit.JdbcAuditServiceTests", "org.cloudfoundry.identity.uaa.web.RecognizeFailureDispatcherServletTest", "org.cloudfoundry.identity.uaa.util.LinkedMaskingMultiValueMapTests", "org.cloudfoundry.identity.uaa.config.YamlBindingTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpSamlAuthenticationSuccessHandlerTest", "org.cloudfoundry.identity.uaa.authentication.ClientParametersAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.login.EmailAccountCreationServiceTests", "org.cloudfoundry.identity.uaa.client.OAuth2ClientAuthenticationFilterTests", ":cloudfoundry-identity-model:processResources", "org.cloudfoundry.identity.uaa.user.UaaUserEditorTests", "org.cloudfoundry.identity.uaa.client.SocialClientUserDetailsSourceTests", ":cloudfoundry-identity-model:jar", "org.cloudfoundry.identity.uaa.provider.saml.SamlKeyManagerFactoryTests", "org.cloudfoundry.identity.uaa.security.CsrfAwareEntryPointAndDeniedHandlerTest", "org.cloudfoundry.identity.uaa.authentication.manager.AuthzAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.login.PasswordConfirmationValidationTest", ":cloudfoundry-identity-server:compileJava", "org.cloudfoundry.identity.uaa.oauth.ClientInfoEndpointTests", "org.cloudfoundry.identity.uaa.provider.ldap.ProcessLdapPropertiesTest", ":cloudfoundry-identity-server:compileJava/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", "org.cloudfoundry.identity.uaa.logging.SanitizedLogFactoryTest", "org.cloudfoundry.identity.uaa.login.EmailServiceTests", "org.cloudfoundry.identity.uaa.oauth.token.AddTokenGranterTests", "org.cloudfoundry.identity.uaa.config.PasswordPolicyTest", "org.cloudfoundry.identity.uaa.login.ChangeEmailControllerTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.NonSnarlIdpMetadataManagerTest", "org.cloudfoundry.identity.uaa.account.event.PasswordChangeEventPublisherTests", "org.cloudfoundry.identity.uaa.db.StoreSubDomainAsLowerCase_V2_7_3_Tests", "org.cloudfoundry.identity.uaa.provider.saml.LoginSAMLAuthenticationFailureHandlerTest", "org.cloudfoundry.identity.uaa.db.TestDataSourcePool", "org.cloudfoundry.identity.uaa.authentication.AuthzAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.invitations.InvitationsControllerTest", "org.cloudfoundry.identity.uaa.error.UaaExceptionTests", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimUserBootstrapTests", "org.cloudfoundry.identity.uaa.config.IdentityProviderBootstrapTest", "org.cloudfoundry.identity.uaa.provider.saml.LoginSamlAuthenticationProviderTests", ":cloudfoundry-identity-server:classes", "org.cloudfoundry.identity.uaa.account.PasswordChangeEndpointTests", "org.cloudfoundry.identity.uaa.zone.event.ServiceProviderModifiedEventTest", "org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationEndpointTest", "org.cloudfoundry.identity.uaa.test.UaaTestAccountsTest", "org.cloudfoundry.identity.uaa.provider.saml.ComparableProviderTest", ":cloudfoundry-identity-model:mainOutputResourcesDir", "org.cloudfoundry.identity.uaa.db.TestThatClientIdIsVchar255", "org.cloudfoundry.identity.uaa.login.SamlLoginServerKeyManagerTests", "org.cloudfoundry.identity.uaa.security.X509ExpiryCheckingTrustManagerTest", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeStoreTests", "org.cloudfoundry.identity.uaa.oauth.UserManagedAuthzApprovalHandlerTests", "org.cloudfoundry.identity.uaa.logging.LogSanitizerUtilTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.JdbcSamlServiceProviderProvisioningTest", "org.cloudfoundry.identity.uaa.oauth.AntPathRedirectResolverTests", "org.cloudfoundry.identity.uaa.util.UaaHttpRequestUtilsTest", "org.cloudfoundry.identity.uaa.web.HealthzEndpointTests", "/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", "org.cloudfoundry.identity.uaa.provider.IdentityProviderEndpointsTest", "org.cloudfoundry.identity.uaa.audit.event.SystemDeletableTest", "org.cloudfoundry.identity.uaa.login.UaaAuthenticationFailureHandlerTests", "/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", "org.cloudfoundry.identity.uaa.db.DatabaseParametersTests", "org.cloudfoundry.identity.uaa.user.JdbcUaaUserDatabaseTests", "org.cloudfoundry.identity.uaa.oauth.JdbcQueryableClientDetailsServiceTests", "org.cloudfoundry.identity.uaa.login.ForcePasswordChangeControllerTest", "org.cloudfoundry.identity.uaa.impl.config.ScimExternalGroupsTypeResolvingFactoryBeanTest", "org.cloudfoundry.identity.uaa.login.AutologinAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.invitations.InvitationsAuthenticationTrustResolverTest", "org.cloudfoundry.identity.uaa.account.ResetPasswordAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.scim.endpoints.UserIdConversionEndpointsTests", "org.cloudfoundry.identity.uaa.config.YamlConfigurationValidatorTests", "org.cloudfoundry.identity.uaa.util.DomainFilterTest", "org.cloudfoundry.identity.uaa.provider.saml.SamlIdentityProviderDefinitionTests", "org.cloudfoundry.identity.uaa.db.ExpiringCodeTableTest", "org.cloudfoundry.identity.uaa.login.HomeControllerViewTests", "org.cloudfoundry.identity.uaa.oauth.token.TokenKeyEndpointTests", "org.cloudfoundry.identity.uaa.oauth.AccessControllerTests", "org.cloudfoundry.identity.uaa.util.EnsureOldLibrariesAreRemoved", "org.cloudfoundry.identity.uaa.oauth.ZoneEndpointsClientDetailsValidatorTests", "org.cloudfoundry.identity.uaa.provider.ldap.ExtendedLdapUserMapperTest", "org.cloudfoundry.identity.uaa.scim.ScimUserTests", "org.cloudfoundry.identity.uaa.config.IdentityZoneConfigurationTests", ":cloudfoundry-identity-server:processTestResources", "org.cloudfoundry.identity.uaa.authentication.manager.PeriodLockoutPolicyTests", "org.cloudfoundry.identity.uaa.scim.security.GroupRoleCheckTests", "org.cloudfoundry.identity.uaa.audit.LoggingAuditServiceTest", "org.cloudfoundry.identity.uaa.db.OauthCodeIndexTest", "org.cloudfoundry.identity.uaa.oauth.jwt.ChainedSignatureVerifierTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ChangeEmailEndpointsTest", "org.cloudfoundry.identity.uaa.client.SourceTests", "org.cloudfoundry.identity.uaa.login.UaaResetPasswordServiceTests", "org.cloudfoundry.identity.uaa.config.EnvironmentPropertiesFactoryBeanTests", "org.cloudfoundry.identity.uaa.account.ResetPasswordAuthenticationEntryPointTests", "org.cloudfoundry.identity.uaa.authentication.manager.LdapLoginAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.provider.uaa.UaaIdentityProviderConfigValidatorTest", ":cloudfoundry-identity-model:compileJava", "org.cloudfoundry.identity.uaa.provider.KeystoneIdentityProviderDefinitionTest", "org.cloudfoundry.identity.uaa.audit.JdbcFailedLoginCountingAuditServiceTests", "org.cloudfoundry.identity.uaa.resources.jdbc.LimitSqlAdapterFactoryTest", "org.cloudfoundry.identity.uaa.config.YamlMapFactoryBeanTests", "org.cloudfoundry.identity.uaa.util.NullifyFieldsTest", "org.cloudfoundry.identity.uaa.oauth.UaaOauth2ErrorHandlerTests", "org.cloudfoundry.identity.uaa.provider.IdentityProviderConfigValidationDelegatorTest", "org.cloudfoundry.identity.uaa.login.NotificationsServiceTest", "org.cloudfoundry.identity.uaa.db.TestSchemaValidation", "org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationRequestManagerTests", "org.cloudfoundry.identity.uaa.authentication.ZoneAwareWhitelistLogoutHandlerTests", "org.cloudfoundry.identity.uaa.oauth.UaaUserApprovalHandlerTests", "org.cloudfoundry.identity.uaa.provider.LockoutPolicyTests", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthIdentityProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.oauth.RemoteTokenServicesTests", "org.cloudfoundry.identity.uaa.authentication.manager.KeystoneAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupMembershipManagerTests", "org.cloudfoundry.identity.uaa.login.UsernamePasswordExtractingAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.zone.GeneralIdentityZoneValidatorTests", "org.cloudfoundry.identity.uaa.util.UaaUrlUtilsTest", "org.cloudfoundry.identity.uaa.login.AccountSavingAuthenticationSuccessHandlerTest", "org.cloudfoundry.identity.uaa.web.HeaderFilterTest", "org.cloudfoundry.identity.uaa.zone.IdentityZoneSwitchingFilterTests", "org.cloudfoundry.identity.uaa.client.JdbcClientMetadataProvisioningTest", "org.cloudfoundry.identity.uaa.performance.TestMySQLEmailSearch", "org.cloudfoundry.identity.uaa.web.CookieBasedCsrfTokenRepositoryTests", "org.cloudfoundry.identity.uaa.client.ClientAdminEndpointsValidatorTests", "org.cloudfoundry.identity.uaa.web.UaaSavedRequestAwareAuthenticationSuccessHandlerTests", "org.cloudfoundry.identity.uaa.zone.JdbcIdentityProviderProvisioningTests", "org.cloudfoundry.identity.uaa.util.KeyWithCertTest", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeTests", "org.cloudfoundry.identity.uaa.oauth.client.ClientDetailsModificationTests", "org.cloudfoundry.identity.uaa.util.TimeBasedExpiringValueMapTest", "org.cloudfoundry.identity.uaa.oauth.UaaScopesTests", "org.cloudfoundry.identity.uaa.web.HttpHeadersFilterRequestWrapperTest", "org.cloudfoundry.identity.uaa.audit.event.EntityDeletedEventTest", "org.cloudfoundry.identity.uaa.config.EnvironmentMapFactoryBeanTests", "org.cloudfoundry.identity.uaa.login.UaaChangePasswordServiceTest", "org.cloudfoundry.identity.uaa.oauth.jwt.JwtHelperTest", "org.cloudfoundry.identity.uaa.oauth.jwk.RsaJsonWebKeyTests", "org.cloudfoundry.identity.uaa.resources.jdbc.SimpleSearchQueryConverterTests"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_245", "original_commit_message": "Apply autoescaping to AdminURLFieldWidget.\nThis is a security fix; disclosure to follow shortly.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/contrib/admin/widgets.py b/django/contrib/admin/widgets.py\nindex c4b15cdd6a..5773db6394 100644\n--- a/django/contrib/admin/widgets.py\n+++ b/django/contrib/admin/widgets.py\n@@ -305,9 +305,9 @@ class AdminURLFieldWidget(forms.URLInput):\n         html = super(AdminURLFieldWidget, self).render(name, value, attrs)\n         if value:\n             value = force_text(self._format_value(value))\n-            final_attrs = {'href': mark_safe(smart_urlquote(value))}\n+            final_attrs = {'href': smart_urlquote(value)}\n             html = format_html(\n-                '<p class=\"url\">{0} <a {1}>{2}</a><br />{3} {4}</p>',\n+                '<p class=\"url\">{0} <a{1}>{2}</a><br />{3} {4}</p>',\n                 _('Currently:'), flatatt(final_attrs), value,\n                 _('Change:'), html\n             )\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex 5a88df1e57..9f5abe0684 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -321,18 +321,24 @@ class AdminURLWidgetTest(DjangoTestCase):\n         w = widgets.AdminURLFieldWidget()\n         self.assertHTMLEqual(\n             conditional_escape(w.render('test', 'http://example-äüö.com')),\n-            '<p class=\"url\">Currently:<a href=\"http://xn--example--7za4pnc.com\">http://example-äüö.com</a><br />Change:<input class=\"vURLField\" name=\"test\" type=\"url\" value=\"http://example-äüö.com\" /></p>'\n+            '<p class=\"url\">Currently: <a href=\"http://xn--example--7za4pnc.com\">http://example-äüö.com</a><br />Change:<input class=\"vURLField\" name=\"test\" type=\"url\" value=\"http://example-äüö.com\" /></p>'\n         )\n \n     def test_render_quoting(self):\n+        # WARNING: Don't use assertHTMLEqual in that testcase!\n+        # assertHTMLEqual will get rid of some escapes which are tested here!\n         w = widgets.AdminURLFieldWidget()\n-        self.assertHTMLEqual(\n-            conditional_escape(w.render('test', 'http://example.com/<sometag>some text</sometag>')),\n-            '<p class=\"url\">Currently:<a href=\"http://example.com/%3Csometag%3Esome%20text%3C/sometag%3E\">http://example.com/&lt;sometag&gt;some text&lt;/sometag&gt;</a><br />Change:<input class=\"vURLField\" name=\"test\" type=\"url\" value=\"http://example.com/<sometag>some text</sometag>\" /></p>'\n+        self.assertEqual(\n+            w.render('test', 'http://example.com/<sometag>some text</sometag>'),\n+            '<p class=\"url\">Currently: <a href=\"http://example.com/%3Csometag%3Esome%20text%3C/sometag%3E\">http://example.com/&lt;sometag&gt;some text&lt;/sometag&gt;</a><br />Change: <input class=\"vURLField\" name=\"test\" type=\"url\" value=\"http://example.com/&lt;sometag&gt;some text&lt;/sometag&gt;\" /></p>'\n         )\n-        self.assertHTMLEqual(\n-            conditional_escape(w.render('test', 'http://example-äüö.com/<sometag>some text</sometag>')),\n-            '<p class=\"url\">Currently:<a href=\"http://xn--example--7za4pnc.com/%3Csometag%3Esome%20text%3C/sometag%3E\">http://example-äüö.com/&lt;sometag&gt;some text&lt;/sometag&gt;</a><br />Change:<input class=\"vURLField\" name=\"test\" type=\"url\" value=\"http://example-äüö.com/<sometag>some text</sometag>\" /></p>'\n+        self.assertEqual(\n+            w.render('test', 'http://example-äüö.com/<sometag>some text</sometag>'),\n+            '<p class=\"url\">Currently: <a href=\"http://xn--example--7za4pnc.com/%3Csometag%3Esome%20text%3C/sometag%3E\">http://example-äüö.com/&lt;sometag&gt;some text&lt;/sometag&gt;</a><br />Change: <input class=\"vURLField\" name=\"test\" type=\"url\" value=\"http://example-äüö.com/&lt;sometag&gt;some text&lt;/sometag&gt;\" /></p>'\n+        )\n+        self.assertEqual(\n+            w.render('test', 'http://www.example.com/%C3%A4\"><script>alert(\"XSS!\")</script>\"'),\n+            '<p class=\"url\">Currently: <a href=\"http://www.example.com/%C3%A4%22%3E%3Cscript%3Ealert(%22XSS!%22)%3C/script%3E%22\">http://www.example.com/%C3%A4&quot;&gt;&lt;script&gt;alert(&quot;XSS!&quot;)&lt;/script&gt;&quot;</a><br />Change: <input class=\"vURLField\" name=\"test\" type=\"url\" value=\"http://www.example.com/%C3%A4&quot;&gt;&lt;script&gt;alert(&quot;XSS!&quot;)&lt;/script&gt;&quot;\" /></p>'\n         )\n \n \n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "cbe6d5568f4f5053ed7228ca3c3d0cce77cf9560", "source_date": "Tue Aug 13 11:06:41 2013 -0500", "source_tag": "1.7", "target_commit": "90363e388c61874add3f3557ee654a996ec75d78", "target_date": "Tue Aug 13 11:04:21 2013 -0500", "target_tag": "1.5.2", "FAIL TO PASS": ["regressiontests.admin_widgets.tests.AdminURLWidgetTest.test_render_quoting"], "PASS TO PASS": ["regressiontests.admin_widgets.tests.AdminFormfieldForDBFieldWithRequestTests.testFilterChoicesByRequestUser", "regressiontests.admin_widgets.tests.AdminSplitDateTimeWidgetTest.test_localization", "regressiontests.admin_widgets.tests.AdminFormfieldForDBFieldTests.testRawIDManyTOMany", "regressiontests.admin_widgets.tests.AdminFormfieldForDBFieldTests.testRawIDForeignKey", "regressiontests.admin_widgets.tests.AdminForeignKeyRawIdWidget.test_invalid_target_id", "regressiontests.admin_widgets.tests.AdminFormfieldForDBFieldTests.testRadioFieldsForeignKey", "regressiontests.admin_widgets.tests.AdminSplitDateTimeWidgetTest.test_render", "regressiontests.admin_widgets.tests.AdminForeignKeyRawIdWidget.test_url_params_from_lookup_dict_any_iterable", "regressiontests.admin_widgets.tests.AdminFormfieldForDBFieldTests.testFilteredManyToMany", "regressiontests.admin_widgets.tests.AdminForeignKeyRawIdWidget.test_nonexistent_target_id", "regressiontests.admin_widgets.tests.AdminFormfieldForDBFieldTests.testFormfieldOverridesWidgetInstances", "regressiontests.admin_widgets.tests.ForeignKeyRawIdWidgetTest.test_render", "regressiontests.admin_widgets.tests.AdminFormfieldForDBFieldTests.testTextField", "regressiontests.admin_widgets.tests.AdminFileWidgetTest.test_render", "regressiontests.admin_widgets.tests.AdminForeignKeyWidgetChangeList.test_changelist_foreignkey", "regressiontests.admin_widgets.tests.AdminFormfieldForDBFieldTests.testURLField", "regressiontests.admin_widgets.tests.AdminDateWidgetTest.test_attrs", "regressiontests.admin_widgets.tests.AdminURLWidgetTest.test_render_idn", "regressiontests.admin_widgets.tests.FilteredSelectMultipleWidgetTest.test_render", "regressiontests.admin_widgets.tests.AdminFormfieldForDBFieldTests.testDateField", "regressiontests.admin_widgets.tests.AdminFormfieldForDBFieldTests.testChoicesWithRadioFields", "regressiontests.admin_widgets.tests.AdminFormfieldForDBFieldTests.testFieldWithChoices", "regressiontests.admin_widgets.tests.AdminTimeWidgetTest.test_attrs", "regressiontests.admin_widgets.tests.ForeignKeyRawIdWidgetTest.test_fk_to_self_model_not_in_admin", "regressiontests.admin_widgets.tests.AdminFormfieldForDBFieldTests.testInheritance", "regressiontests.admin_widgets.tests.ManyToManyRawIdWidgetTest.test_render", "regressiontests.admin_widgets.tests.AdminURLWidgetTest.test_render", "regressiontests.admin_widgets.tests.ForeignKeyRawIdWidgetTest.test_fk_related_model_not_in_admin", "regressiontests.admin_widgets.tests.ForeignKeyRawIdWidgetTest.test_relations_to_non_primary_key", "regressiontests.admin_widgets.tests.AdminFormfieldForDBFieldTests.testForeignKey", "regressiontests.admin_widgets.tests.AdminFormfieldForDBFieldTests.testManyToMany", "regressiontests.admin_widgets.tests.AdminFormfieldForDBFieldTests.testIntegerField", "regressiontests.admin_widgets.tests.AdminFormfieldForDBFieldTests.testTimeField", "regressiontests.admin_widgets.tests.ForeignKeyRawIdWidgetTest.test_proper_manager_for_label_lookup", "regressiontests.admin_widgets.tests.RelatedFieldWidgetWrapperTests.test_no_can_add_related", "regressiontests.admin_widgets.tests.FilteredSelectMultipleWidgetTest.test_stacked_render", "regressiontests.admin_widgets.tests.AdminFormfieldForDBFieldTests.testFormfieldOverrides", "regressiontests.admin_widgets.tests.AdminFormfieldForDBFieldTests.testCharField", "regressiontests.admin_widgets.tests.AdminFormfieldForDBFieldTests.testDateTimeField", "regressiontests.admin_widgets.tests.AdminFormfieldForDBFieldTests.testFileField", "regressiontests.admin_widgets.tests.ManyToManyRawIdWidgetTest.test_m2m_related_model_not_in_admin"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_1270", "original_commit_message": "Add additional jti claim logic when loading auth object\n[#158847208]\nSigned-off-by: Bruce Ricard <bruce.ricard@gmail.com>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java b/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java\nindex d2ce4ea26..130dce797 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java\n@@ -940,6 +940,19 @@ public class UaaTokenServices implements AuthorizationServerTokenServices, Resou\n \n         TokenValidation tokenValidation = validateToken(accessToken);\n         Map<String, Object> claims = tokenValidation.getClaims();\n+\n+        Object jtiClaim = claims.get(JTI);\n+\n+        if (jtiClaim == null) {\n+            throw new InvalidTokenException(\"The token must contain a jti claim.\");\n+        } else {\n+            if (jtiClaim.toString().endsWith(REFRESH_TOKEN_SUFFIX)) {\n+                throw new InvalidTokenException(\n+                  \"Invalid access token was provided.\"\n+                );\n+            }\n+        }\n+\n         accessToken = tokenValidation.getJwt().getEncoded();\n \n         // Check token expiry\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java\nindex 59dfe8698..d408f25bc 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java\n@@ -33,6 +33,7 @@ import org.cloudfoundry.identity.uaa.oauth.token.matchers.OAuth2RefreshTokenMatc\n import org.cloudfoundry.identity.uaa.user.UaaUser;\n import org.cloudfoundry.identity.uaa.user.UaaUserPrototype;\n import org.cloudfoundry.identity.uaa.util.JsonUtils;\n+import org.cloudfoundry.identity.uaa.util.TokenValidation;\n import org.cloudfoundry.identity.uaa.zone.ClientServicesExtension;\n import org.cloudfoundry.identity.uaa.zone.IdentityZone;\n import org.cloudfoundry.identity.uaa.zone.IdentityZoneConfiguration;\n@@ -1975,6 +1976,59 @@ public class UaaTokenServicesTests {\n         System.out.println(\"newAccessToken = \" + newAccessToken);\n     }\n \n+    @Test\n+    public void loadAuthentication_when_given_an_opaque_refreshToken_should_throw_exception() {\n+        tokenSupport.defaultClient.setAutoApproveScopes(singleton(\"true\"));\n+        AuthorizationRequest authorizationRequest = new AuthorizationRequest(CLIENT_ID,tokenSupport.requestedAuthScopes);\n+        authorizationRequest.setResponseTypes(new HashSet(Arrays.asList(\"token\")));\n+        authorizationRequest.setResourceIds(new HashSet<>(tokenSupport.resourceIds));\n+        Map<String, String> azParameters = new HashMap<>(authorizationRequest.getRequestParameters());\n+        azParameters.put(GRANT_TYPE, AUTHORIZATION_CODE);\n+\n+        azParameters.put(REQUEST_TOKEN_FORMAT, TokenConstants.OPAQUE);\n+\n+        authorizationRequest.setRequestParameters(azParameters);\n+        Authentication userAuthentication = tokenSupport.defaultUserAuthentication;\n+\n+        OAuth2Authentication authentication = new OAuth2Authentication(authorizationRequest.createOAuth2Request(), userAuthentication);\n+        OAuth2AccessToken compositeToken = tokenServices.createAccessToken(authentication);\n+\n+        String refreshTokenValue = tokenProvisioning.retrieve(compositeToken.getRefreshToken().getValue(), IdentityZoneHolder.get().getId()).getValue();\n+\n+        expectedException.expect(InvalidTokenException.class);\n+        expectedException.expectMessage(\"Invalid access token was provided.\");\n+\n+        tokenServices.loadAuthentication(refreshTokenValue);\n+    }\n+\n+    @Rule\n+    public ExpectedException expectedException = ExpectedException.none();\n+\n+    @Test\n+    public void loadAuthentication_when_given_an_refresh_jwt_should_throw_exception() {\n+        IdentityZoneHolder.get().getConfig().getTokenPolicy().setJwtRevocable(true);\n+        tokenSupport.defaultClient.setAutoApproveScopes(singleton(\"true\"));\n+        AuthorizationRequest authorizationRequest = new AuthorizationRequest(CLIENT_ID,tokenSupport.requestedAuthScopes);\n+        authorizationRequest.setResponseTypes(new HashSet(Arrays.asList(\"token\")));\n+        authorizationRequest.setResourceIds(new HashSet<>(tokenSupport.resourceIds));\n+        Map<String, String> azParameters = new HashMap<>(authorizationRequest.getRequestParameters());\n+        azParameters.put(GRANT_TYPE, AUTHORIZATION_CODE);\n+\n+        azParameters.put(REQUEST_TOKEN_FORMAT, JWT.getStringValue());\n+\n+        authorizationRequest.setRequestParameters(azParameters);\n+        Authentication userAuthentication = tokenSupport.defaultUserAuthentication;\n+\n+        OAuth2Authentication authentication = new OAuth2Authentication(authorizationRequest.createOAuth2Request(), userAuthentication);\n+        OAuth2AccessToken compositeToken = tokenServices.createAccessToken(authentication);\n+        TokenValidation refreshToken = tokenServices.validateToken(compositeToken.getRefreshToken().getValue());\n+\n+        String refreshTokenValue = tokenProvisioning.retrieve(refreshToken.getClaims().get(\"jti\").toString(), IdentityZoneHolder.get().getId()).getValue();\n+\n+        expectedException.expect(InvalidTokenException.class);\n+        expectedException.expectMessage(\"Invalid access token was provided.\");\n+        tokenServices.loadAuthentication(refreshTokenValue);\n+    }\n \n     @Test\n     public void testLoadAuthenticationForAClient() {\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "5d021e83ef143c64179d0da015aa76321ee40988", "source_date": "Tue Jul 10 10:53:00 2018 -0700", "source_tag": "4.19.2", "target_commit": "4fa3e351ec0bface3b693810605905e29a9a8569", "target_date": "Wed Jul 11 12:24:16 2018 -0700", "target_tag": "4.10.2", "FAIL TO PASS": ["org.cloudfoundry.identity.uaa.oauth.UaaTokenServicesTests > loadAuthentication_when_given_an_opaque_refreshToken_should_throw_exception[0: testname[old behavior]", "org.cloudfoundry.identity.uaa.oauth.UaaTokenServicesTests > loadAuthentication_when_given_an_refresh_jwt_should_throw_exception[1: testname[using enhancer]", "org.cloudfoundry.identity.uaa.oauth.UaaTokenServicesTests > loadAuthentication_when_given_an_refresh_jwt_should_throw_exception[0: testname[old behavior]", "org.cloudfoundry.identity.uaa.oauth.UaaTokenServicesTests > loadAuthentication_when_given_an_opaque_refreshToken_should_throw_exception[1: testname[using enhancer]"], "PASS TO PASS": ["org.cloudfoundry.identity.uaa.provider.ldap.LdapIdentityProviderDefinitionTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.ZoneAwareIdpMetadataGeneratorTest", "org.cloudfoundry.identity.uaa.user.BCryptPasswordEncoderTest", "org.cloudfoundry.identity.uaa.oauth.IntrospectEndpointTest", "org.cloudfoundry.identity.uaa.audit.event.ApprovalModifiedEventTest", "org.cloudfoundry.identity.uaa.authentication.BackwardsCompatibleTokenEndpointAuthenticationFilterTest", ":cloudfoundry-identity-server:processResources", "org.cloudfoundry.identity.uaa.web.UaaSessionCookieConfigTest", "org.cloudfoundry.identity.uaa.util.ColorHashTest", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupProvisioningTests", "org.cloudfoundry.identity.uaa.zone.IdentityZoneHolderTest", "org.cloudfoundry.identity.uaa.authentication.manager.ScopeAuthenticationManagerTests", ":cloudfoundry-identity-model:gitInfo", "org.cloudfoundry.identity.uaa.login.ChangePasswordControllerTest", "org.cloudfoundry.identity.uaa.authentication.event.UserAuthenticationSuccessEventTests", "org.cloudfoundry.identity.uaa.user.InMemoryUaaUserDatabaseTests", "org.cloudfoundry.identity.uaa.authentication.ClientBasicAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlSessionStorageFactoryTests", "org.cloudfoundry.identity.uaa.scim.ScimGroupMemberTests", "org.cloudfoundry.identity.uaa.codestore.CodeStoreEndpointsTests", "org.cloudfoundry.identity.uaa.scim.endpoints.PasswordResetEndpointTest", "org.cloudfoundry.identity.uaa.oauth.approval.JdbcApprovalStoreTests", "org.cloudfoundry.identity.uaa.mfa.MfaCheckerTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsTests", "org.cloudfoundry.identity.uaa.authorization.external.LdapGroupMappingAuthorizationManagerTests", "org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationSerializerDeserializerTest", "org.cloudfoundry.identity.uaa.zone.BannerValidatorTest", "org.cloudfoundry.identity.uaa.scim.jdbc.ScimSearchQueryConverterTests", "org.cloudfoundry.identity.uaa.login.EmailInvitationsServiceTests", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimUserProvisioningTests", "org.cloudfoundry.identity.uaa.db.OldAuthzTableDropped", "org.cloudfoundry.identity.uaa.authentication.manager.ChainedAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.error.ConvertingExceptionViewTests", "org.cloudfoundry.identity.uaa.scim.exception.InvalidPasswordExceptionTest", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimGroupBootstrapTests", "org.cloudfoundry.identity.uaa.scim.validate.UaaPasswordPolicyValidatorTests", "org.cloudfoundry.identity.uaa.provider.ldap.DynamicPasswordComparatorTests", "org.cloudfoundry.identity.uaa.authentication.manager.CommonLoginPolicyTest", "org.cloudfoundry.identity.uaa.util.UaaTokenUtilsTest", "org.cloudfoundry.identity.uaa.resources.MessageTests", "org.cloudfoundry.identity.uaa.authentication.manager.ExternalLoginAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.oauth.approval.ApprovalsAdminEndpointsTests", "org.cloudfoundry.identity.uaa.util.LinkedMaskingMultiValueMapTests", "org.cloudfoundry.identity.uaa.authentication.ClientParametersAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.client.SocialClientUserDetailsSourceTests", ":cloudfoundry-identity-server:compileJava", "org.cloudfoundry.identity.uaa.oauth.token.AddTokenGranterTests", "org.cloudfoundry.identity.uaa.provider.saml.LoginSAMLAuthenticationFailureHandlerTest", "org.cloudfoundry.identity.uaa.authentication.AuthzAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.error.UaaExceptionTests", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimUserBootstrapTests", "org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationEndpointTest", ":cloudfoundry-identity-model:mainOutputResourcesDir", "org.cloudfoundry.identity.uaa.db.TestThatClientIdIsVchar255", "org.cloudfoundry.identity.uaa.db.DatabaseParametersTests", "org.cloudfoundry.identity.uaa.login.ForcePasswordChangeControllerTest", "org.cloudfoundry.identity.uaa.login.AutologinAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.util.DomainFilterTest", "org.cloudfoundry.identity.uaa.provider.ldap.ExtendedLdapUserMapperTest", "org.cloudfoundry.identity.uaa.scim.ScimUserTests", "org.cloudfoundry.identity.uaa.oauth.token.LargeRevocableTokenDeleteTests", "org.cloudfoundry.identity.uaa.mfa.GoogleAuthenticatorAdapterTest", "org.cloudfoundry.identity.uaa.audit.JdbcFailedLoginCountingAuditServiceTests", "org.cloudfoundry.identity.uaa.login.NotificationsServiceTest", "org.cloudfoundry.identity.uaa.oauth.UaaUserApprovalHandlerTests", "org.cloudfoundry.identity.uaa.oauth.RemoteTokenServicesTests", "org.cloudfoundry.identity.uaa.login.UsernamePasswordExtractingAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.zone.GeneralIdentityZoneValidatorTests", "org.cloudfoundry.identity.uaa.oauth.OpenIdSessionStateCalculatorTest", "org.cloudfoundry.identity.uaa.client.JdbcClientMetadataProvisioningTest", "org.cloudfoundry.identity.uaa.util.KeyWithCertTest", "org.cloudfoundry.identity.uaa.oauth.client.ClientDetailsModificationTests", "org.cloudfoundry.identity.uaa.web.HttpHeadersFilterRequestWrapperTest", "org.cloudfoundry.identity.uaa.zone.ZoneAwareClientSecretPolicyValidatorTests", "org.cloudfoundry.identity.uaa.zone.event.IdentityProviderModifiedEventTest", ":cloudfoundry-identity-metrics-data:classes", "org.cloudfoundry.identity.uaa.login.ResetPasswordControllerTest", "org.cloudfoundry.identity.uaa.authentication.login.RemoteAuthenticationEndpointTests", "org.cloudfoundry.identity.uaa.provider.saml.ZoneAwareMetadataGeneratorTests", "org.cloudfoundry.identity.uaa.db.ClientDetailsSupportsExtendedAuthoritesAndScopes", "org.cloudfoundry.identity.uaa.test.CreateDB", "org.cloudfoundry.identity.uaa.oauth.token.Saml2TokenGranterTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpWebSsoProfileImplTest", "org.cloudfoundry.identity.uaa.util.log.LineAwareLayoutTest", "org.cloudfoundry.identity.uaa.zone.IdentityZoneResolvingFilterTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.SamlServiceProviderConfiguratorTest", "org.cloudfoundry.identity.uaa.metrics.QueryFilterTests", "org.cloudfoundry.identity.uaa.security.web.CorsFilterTests", "org.cloudfoundry.identity.uaa.oauth.token.JwtTokenGranterTests", "org.cloudfoundry.identity.uaa.security.web.SecurityFilterChainPostProcessorTests", "org.cloudfoundry.identity.uaa.login.util.FakeJavaMailSenderTest", "org.cloudfoundry.identity.uaa.web.ForwardAwareInternalResourceViewResolverTests", "org.cloudfoundry.identity.uaa.web.ExceptionReportHttpMessageConverterTest", "org.cloudfoundry.identity.uaa.db.TableAndColumnNormalizationTest", ":cloudfoundry-identity-server:testClasses", "org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcherTests", "org.cloudfoundry.identity.uaa.resources.jdbc.JdbcSqlAdapterTests", "org.cloudfoundry.identity.uaa.oauth.jwk.JsonWebKeySetTests", "org.cloudfoundry.identity.uaa.mfa.UserGoogleMfaCredentialsProvisioningTest", "org.cloudfoundry.identity.uaa.authentication.SystemAuthenticationTest", "org.cloudfoundry.identity.uaa.oauth.CheckTokenEndpointTests", "org.cloudfoundry.identity.uaa.authentication.SessionResetFilterTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserEndpointsTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlMessageStorageTest", "org.cloudfoundry.identity.uaa.provider.oauth.OauthIdentityProviderDefinitionFactoryBeanTest", "org.cloudfoundry.identity.uaa.user.UaaAuthorityTests", "org.cloudfoundry.identity.uaa.config.YamlServletProfileInitializerTests", "org.cloudfoundry.identity.uaa.mfa.JdbcUserGoogleMfaCredentialsProvisioningTest", "org.cloudfoundry.identity.uaa.web.RecognizeFailureDispatcherServletTest", "org.cloudfoundry.identity.uaa.db.GroupMembershipAuthoritiesNullableTest", "org.cloudfoundry.identity.uaa.db.GoogleAuthUserConfigTableTest", "org.cloudfoundry.identity.uaa.login.EmailAccountCreationServiceTests", "org.cloudfoundry.identity.uaa.client.OAuth2ClientAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.user.UaaUserEditorTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlKeyManagerFactoryTests", "org.cloudfoundry.identity.uaa.security.CsrfAwareEntryPointAndDeniedHandlerTest", "org.cloudfoundry.identity.uaa.login.PasswordConfirmationValidationTest", "org.cloudfoundry.identity.uaa.login.EmailServiceTests", "org.cloudfoundry.identity.uaa.db.StoreSubDomainAsLowerCase_V2_7_3_Tests", "org.cloudfoundry.identity.uaa.invitations.InvitationsControllerTest", "org.cloudfoundry.identity.uaa.provider.saml.LoginSamlAuthenticationProviderTests", "org.cloudfoundry.identity.uaa.account.PasswordChangeEndpointTests", "org.cloudfoundry.identity.uaa.login.SamlLoginServerKeyManagerTests", "org.cloudfoundry.identity.uaa.security.X509ExpiryCheckingTrustManagerTest", "org.cloudfoundry.identity.uaa.oauth.UserManagedAuthzApprovalHandlerTests", "org.cloudfoundry.identity.uaa.logging.LogSanitizerUtilTest", "org.cloudfoundry.identity.uaa.invitations.InvitationsAuthenticationTrustResolverTest", "org.cloudfoundry.identity.uaa.scim.endpoints.UserIdConversionEndpointsTests", ":cloudfoundry-identity-metrics-data:jar", "org.cloudfoundry.identity.uaa.util.EnsureOldLibrariesAreRemoved", ":cloudfoundry-identity-server:processTestResources", "org.cloudfoundry.identity.uaa.oauth.jwt.ChainedSignatureVerifierTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ChangeEmailEndpointsTest", "org.cloudfoundry.identity.uaa.account.ResetPasswordAuthenticationEntryPointTests", "org.cloudfoundry.identity.uaa.config.EnvironmentPropertiesFactoryBeanTests", ":cloudfoundry-identity-model:compileJava", "org.cloudfoundry.identity.uaa.resources.jdbc.LimitSqlAdapterFactoryTest", "org.cloudfoundry.identity.uaa.provider.saml.SamlConfigurationBeanTest", "org.cloudfoundry.identity.uaa.util.NullifyFieldsTest", "org.cloudfoundry.identity.uaa.oauth.UaaOauth2ErrorHandlerTests", "org.cloudfoundry.identity.uaa.provider.IdentityProviderConfigValidationDelegatorTest", "org.cloudfoundry.identity.uaa.authentication.ZoneAwareWhitelistLogoutHandlerTests", "org.cloudfoundry.identity.uaa.provider.LockoutPolicyTests", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthIdentityProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.authentication.manager.KeystoneAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.zone.IdentityZoneSwitchingFilterTests", "org.cloudfoundry.identity.uaa.client.ClientAdminEndpointsValidatorTests", "org.cloudfoundry.identity.uaa.metrics.IdleTimerTests", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeTests", "org.cloudfoundry.identity.uaa.util.TimeBasedExpiringValueMapTest", "org.cloudfoundry.identity.uaa.oauth.UaaScopesTests", "org.cloudfoundry.identity.uaa.config.EnvironmentMapFactoryBeanTests", "org.cloudfoundry.identity.uaa.oauth.jwt.JwtHelperTest", "org.cloudfoundry.identity.uaa.oauth.ZoneEndpointsClientDetailsValidatorTests", "org.cloudfoundry.identity.uaa.db.ClientDetailsHasRequiredUserScopes", "org.cloudfoundry.identity.uaa.zone.GeneralIdentityZoneConfigurationValidatorTests", "org.cloudfoundry.identity.uaa.authentication.UaaClientAuthenticationProviderTest", "org.cloudfoundry.identity.uaa.openid.UserInfoEndpointTests", "org.cloudfoundry.identity.uaa.client.ClientAdminBootstrapTests", "org.cloudfoundry.identity.uaa.audit.event.AuditListenerTests", "org.cloudfoundry.identity.uaa.oauth.jwt.CommonSignatureVerifierTest", "org.cloudfoundry.identity.uaa.oauth.token.KeyInfoTests", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.zone.IdentityZoneEndpointsTests", "org.cloudfoundry.identity.uaa.account.PasswordCheckEndpointTests", "org.cloudfoundry.identity.uaa.zone.MfaConfigValidatorTests", "org.cloudfoundry.identity.uaa.config.YamlPropertiesFactoryBeanTests", "org.cloudfoundry.identity.uaa.authentication.manager.LoginAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.util.UaaMapUtilsTest", "org.cloudfoundry.identity.uaa.scim.util.ScimUtilsTest", "org.cloudfoundry.identity.uaa.oauth.TokenRevocationEndpointTests", "org.cloudfoundry.identity.uaa.zone.JdbcIdentityZoneProvisioningTests", "org.cloudfoundry.identity.uaa.oauth.DisableIdTokenResponseTypeFilterTest", "org.cloudfoundry.identity.uaa.authentication.UTF8ConversionFilterTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlRedirectUtilsTest", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.util.CachingPasswordEncoderTest", "org.cloudfoundry.identity.uaa.login.ProfileControllerTests", "org.cloudfoundry.identity.uaa.audit.AuditEventTypeTests", "org.cloudfoundry.identity.uaa.oauth.RestrictUaaScopesClientValidatorTest", "org.cloudfoundry.identity.uaa.config.IdentityZoneConfigurationBootstrapTests", "org.cloudfoundry.identity.uaa.provider.saml.ConfigMetadataProviderTest", "org.cloudfoundry.identity.uaa.oauth.token.UaaTokenEndpointTests", "org.cloudfoundry.identity.uaa.resources.jdbc.LimitSqlAdapterTests", "org.cloudfoundry.identity.uaa.scim.ScimCoreTests", "org.cloudfoundry.identity.uaa.config.NestedMapPropertySourceTests", "org.cloudfoundry.identity.uaa.oauth.jwt.CommonSignerTest", "org.cloudfoundry.identity.uaa.authentication.manager.CheckIdpEnabledAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.oauth.event.ClientAdminEventPublisherTests", "org.cloudfoundry.identity.uaa.zone.InvalidClientSecretExceptionTests", "org.cloudfoundry.identity.uaa.web.LimitedModeUaaFilterTests", "org.cloudfoundry.identity.uaa.web.UaaSavedRequestCacheTests", "org.cloudfoundry.identity.uaa.impl.config.YamlServletProfileInitializerTest", "org.cloudfoundry.identity.uaa.db.RevocableTokenIndexTest_4_0_8", "org.cloudfoundry.identity.uaa.provider.saml.SamlIdentityProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.resources.jdbc.JdbcPagingListTests", "org.cloudfoundry.identity.uaa.login.TotpMfaEndpointTest", "org.cloudfoundry.identity.uaa.mfa.MfaProviderBootstrapTest", "org.cloudfoundry.identity.uaa.login.AccountsControllerTest", "org.cloudfoundry.identity.uaa.audit.JdbcAuditServiceTests", "org.cloudfoundry.identity.uaa.config.YamlBindingTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpSamlAuthenticationSuccessHandlerTest", "org.cloudfoundry.identity.uaa.authentication.manager.AuthzAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.oauth.ClientInfoEndpointTests", "org.cloudfoundry.identity.uaa.provider.ldap.ProcessLdapPropertiesTest", "org.cloudfoundry.identity.uaa.config.PasswordPolicyTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.NonSnarlIdpMetadataManagerTest", "org.cloudfoundry.identity.uaa.test.UaaTestAccountsTest", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeStoreTests", "org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationDetailsTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.JdbcSamlServiceProviderProvisioningTest", "org.cloudfoundry.identity.uaa.oauth.AntPathRedirectResolverTests", "org.cloudfoundry.identity.uaa.util.UaaHttpRequestUtilsTest", "org.cloudfoundry.identity.uaa.audit.event.SystemDeletableTest", "/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", "org.cloudfoundry.identity.uaa.oauth.JdbcQueryableClientDetailsServiceTests", "org.cloudfoundry.identity.uaa.user.JdbcUaaUserDatabaseTests", "org.cloudfoundry.identity.uaa.authentication.listener.AuthenticationSuccessListenerTests", "org.cloudfoundry.identity.uaa.impl.config.ScimExternalGroupsTypeResolvingFactoryBeanTest", "org.cloudfoundry.identity.uaa.account.ResetPasswordAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.mfa.JdbcMfaProviderProvisioningTest", "org.cloudfoundry.identity.uaa.config.YamlConfigurationValidatorTests", "org.cloudfoundry.identity.uaa.db.ExpiringCodeTableTest", "org.cloudfoundry.identity.uaa.login.HomeControllerViewTests", "org.cloudfoundry.identity.uaa.oauth.AccessControllerTests", "org.cloudfoundry.identity.uaa.config.IdentityZoneConfigurationTests", "org.cloudfoundry.identity.uaa.authentication.manager.PeriodLockoutPolicyTests", "org.cloudfoundry.identity.uaa.provider.uaa.UaaIdentityProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.config.YamlMapFactoryBeanTests", "org.cloudfoundry.identity.uaa.db.TestSchemaValidation", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupMembershipManagerTests", "org.cloudfoundry.identity.uaa.web.HeaderFilterTest", "org.cloudfoundry.identity.uaa.web.CookieBasedCsrfTokenRepositoryTests", "org.cloudfoundry.identity.uaa.zone.JdbcIdentityProviderProvisioningTests", "org.cloudfoundry.identity.uaa.audit.event.EntityDeletedEventTest", "org.cloudfoundry.identity.uaa.login.UaaChangePasswordServiceTest", "org.cloudfoundry.identity.uaa.resources.jdbc.SimpleSearchQueryConverterTests", "org.cloudfoundry.identity.uaa.oauth.approval.ApprovalTests", "org.cloudfoundry.identity.uaa.util.log.SyslogAppenderTest", "org.cloudfoundry.identity.uaa.login.LoginInfoEndpointTests", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupExternalMembershipManagerTests", "org.cloudfoundry.identity.uaa.mfa.MfaProviderEndpointsTest", "org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationEndpointParamaterizedTest", ":cloudfoundry-identity-server:compileTestJava", "org.cloudfoundry.identity.uaa.provider.ldap.LdapIdentityProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.SamlServiceProviderDefinitionTest", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimExternalGroupBootstrapTests", "org.cloudfoundry.identity.uaa.oauth.UaaTokenStoreTests", "org.cloudfoundry.identity.uaa.authentication.WhitelistLogoutHandlerTest", "org.cloudfoundry.identity.uaa.oauth.token.UserTokenGranterTest", "org.cloudfoundry.identity.uaa.client.ClientAdminEndpointsTests", "org.cloudfoundry.identity.uaa.authentication.PasswordChangeRequiredFilterTest", "org.cloudfoundry.identity.uaa.util.UaaPagingUtilsTests", "org.cloudfoundry.identity.uaa.db.RevocableTokenTableTest", "org.cloudfoundry.identity.uaa.util.TokenValidationTest", "org.cloudfoundry.identity.uaa.login.EmailChangeEmailServiceTest", "org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationSerializationTests", "org.cloudfoundry.identity.uaa.oauth.expression.IsSelfCheckTest", "org.cloudfoundry.identity.uaa.zone.MultitenantJdbcClientDetailsServiceTests", "org.cloudfoundry.identity.uaa.db.UserInfoTableTest", "org.cloudfoundry.identity.uaa.cache.ExpiringUrlCacheTests", ":cloudfoundry-identity-model:classes", "org.cloudfoundry.identity.uaa.util.UaaStringUtilsTest", "org.cloudfoundry.identity.uaa.zone.event.IdentityZoneModifiedEventTest", "org.cloudfoundry.identity.uaa.security.DefaultSecurityContextAccessorTests", "org.cloudfoundry.identity.uaa.metrics.UaaMetricsFilterTests", "org.cloudfoundry.identity.uaa.authentication.SamlAssertionBindingTests", "org.cloudfoundry.identity.uaa.util.RestTemplateFactoryTests", "org.cloudfoundry.identity.uaa.oauth.token.JdbcRevocableTokenProvisioningTest", ":cloudfoundry-identity-model:buildInfo", "org.cloudfoundry.identity.uaa.mfa.MfaRegisterQRGeneratorTest", ":cloudfoundry-identity-model:processResources", "org.cloudfoundry.identity.uaa.provider.RestTemplateSSLTest", ":cloudfoundry-identity-model:jar", "org.cloudfoundry.identity.uaa.provider.saml.BootstrapSamlIdentityProviderDataTests", ":cloudfoundry-identity-server:compileJava/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", "org.cloudfoundry.identity.uaa.logging.SanitizedLogFactoryTest", "org.cloudfoundry.identity.uaa.login.ChangeEmailControllerTest", "org.cloudfoundry.identity.uaa.account.event.PasswordChangeEventPublisherTests", "org.cloudfoundry.identity.uaa.util.LowConcurrencyPasswordEncoderTests", "org.cloudfoundry.identity.uaa.db.TestDataSourcePool", "org.cloudfoundry.identity.uaa.config.IdentityProviderBootstrapTest", ":cloudfoundry-identity-server:classes", "org.cloudfoundry.identity.uaa.zone.event.ServiceProviderModifiedEventTest", ":cloudfoundry-identity-metrics-data:processResources", "org.cloudfoundry.identity.uaa.web.SessionIdleTimeoutSetterTest", "org.cloudfoundry.identity.uaa.provider.saml.ComparableProviderTest", "org.cloudfoundry.identity.uaa.mfa.MfaCredentialsSessionCacheTest", "org.cloudfoundry.identity.uaa.web.HealthzEndpointTests", "org.cloudfoundry.identity.uaa.provider.IdentityProviderEndpointsTest", "org.cloudfoundry.identity.uaa.login.UaaAuthenticationFailureHandlerTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpInitiatedLoginControllerTests", ":cloudfoundry-identity-metrics-data:compileJava", "org.cloudfoundry.identity.uaa.provider.saml.SamlIdentityProviderDefinitionTests", "org.cloudfoundry.identity.uaa.oauth.token.TokenKeyEndpointTests", "org.cloudfoundry.identity.uaa.audit.LoggingAuditServiceTest", "org.cloudfoundry.identity.uaa.db.OauthCodeIndexTest", "org.cloudfoundry.identity.uaa.client.SourceTests", "org.cloudfoundry.identity.uaa.login.UaaResetPasswordServiceTests", "org.cloudfoundry.identity.uaa.authentication.manager.LdapLoginAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.provider.KeystoneIdentityProviderDefinitionTest", "org.cloudfoundry.identity.uaa.mfa.MfaRequiredFilterTests", "org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationRequestManagerTests", "org.cloudfoundry.identity.uaa.util.UaaUrlUtilsTest", "org.cloudfoundry.identity.uaa.login.AccountSavingAuthenticationSuccessHandlerTest", "org.cloudfoundry.identity.uaa.web.UaaSavedRequestAwareAuthenticationSuccessHandlerTests", "org.cloudfoundry.identity.uaa.oauth.jwk.RsaJsonWebKeyTests", "org.cloudfoundry.identity.uaa.mfa.GeneralMfaProviderValidatorTest"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_1271", "original_commit_message": "Add additional jti claim logic when loading auth object\n[#158847208]\nSigned-off-by: Bruce Ricard <bruce.ricard@gmail.com>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java b/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java\nindex d2ce4ea26..130dce797 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java\n@@ -940,6 +940,19 @@ public class UaaTokenServices implements AuthorizationServerTokenServices, Resou\n \n         TokenValidation tokenValidation = validateToken(accessToken);\n         Map<String, Object> claims = tokenValidation.getClaims();\n+\n+        Object jtiClaim = claims.get(JTI);\n+\n+        if (jtiClaim == null) {\n+            throw new InvalidTokenException(\"The token must contain a jti claim.\");\n+        } else {\n+            if (jtiClaim.toString().endsWith(REFRESH_TOKEN_SUFFIX)) {\n+                throw new InvalidTokenException(\n+                  \"Invalid access token was provided.\"\n+                );\n+            }\n+        }\n+\n         accessToken = tokenValidation.getJwt().getEncoded();\n \n         // Check token expiry\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java\nindex 59dfe8698..d408f25bc 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java\n@@ -33,6 +33,7 @@ import org.cloudfoundry.identity.uaa.oauth.token.matchers.OAuth2RefreshTokenMatc\n import org.cloudfoundry.identity.uaa.user.UaaUser;\n import org.cloudfoundry.identity.uaa.user.UaaUserPrototype;\n import org.cloudfoundry.identity.uaa.util.JsonUtils;\n+import org.cloudfoundry.identity.uaa.util.TokenValidation;\n import org.cloudfoundry.identity.uaa.zone.ClientServicesExtension;\n import org.cloudfoundry.identity.uaa.zone.IdentityZone;\n import org.cloudfoundry.identity.uaa.zone.IdentityZoneConfiguration;\n@@ -1975,6 +1976,59 @@ public class UaaTokenServicesTests {\n         System.out.println(\"newAccessToken = \" + newAccessToken);\n     }\n \n+    @Test\n+    public void loadAuthentication_when_given_an_opaque_refreshToken_should_throw_exception() {\n+        tokenSupport.defaultClient.setAutoApproveScopes(singleton(\"true\"));\n+        AuthorizationRequest authorizationRequest = new AuthorizationRequest(CLIENT_ID,tokenSupport.requestedAuthScopes);\n+        authorizationRequest.setResponseTypes(new HashSet(Arrays.asList(\"token\")));\n+        authorizationRequest.setResourceIds(new HashSet<>(tokenSupport.resourceIds));\n+        Map<String, String> azParameters = new HashMap<>(authorizationRequest.getRequestParameters());\n+        azParameters.put(GRANT_TYPE, AUTHORIZATION_CODE);\n+\n+        azParameters.put(REQUEST_TOKEN_FORMAT, TokenConstants.OPAQUE);\n+\n+        authorizationRequest.setRequestParameters(azParameters);\n+        Authentication userAuthentication = tokenSupport.defaultUserAuthentication;\n+\n+        OAuth2Authentication authentication = new OAuth2Authentication(authorizationRequest.createOAuth2Request(), userAuthentication);\n+        OAuth2AccessToken compositeToken = tokenServices.createAccessToken(authentication);\n+\n+        String refreshTokenValue = tokenProvisioning.retrieve(compositeToken.getRefreshToken().getValue(), IdentityZoneHolder.get().getId()).getValue();\n+\n+        expectedException.expect(InvalidTokenException.class);\n+        expectedException.expectMessage(\"Invalid access token was provided.\");\n+\n+        tokenServices.loadAuthentication(refreshTokenValue);\n+    }\n+\n+    @Rule\n+    public ExpectedException expectedException = ExpectedException.none();\n+\n+    @Test\n+    public void loadAuthentication_when_given_an_refresh_jwt_should_throw_exception() {\n+        IdentityZoneHolder.get().getConfig().getTokenPolicy().setJwtRevocable(true);\n+        tokenSupport.defaultClient.setAutoApproveScopes(singleton(\"true\"));\n+        AuthorizationRequest authorizationRequest = new AuthorizationRequest(CLIENT_ID,tokenSupport.requestedAuthScopes);\n+        authorizationRequest.setResponseTypes(new HashSet(Arrays.asList(\"token\")));\n+        authorizationRequest.setResourceIds(new HashSet<>(tokenSupport.resourceIds));\n+        Map<String, String> azParameters = new HashMap<>(authorizationRequest.getRequestParameters());\n+        azParameters.put(GRANT_TYPE, AUTHORIZATION_CODE);\n+\n+        azParameters.put(REQUEST_TOKEN_FORMAT, JWT.getStringValue());\n+\n+        authorizationRequest.setRequestParameters(azParameters);\n+        Authentication userAuthentication = tokenSupport.defaultUserAuthentication;\n+\n+        OAuth2Authentication authentication = new OAuth2Authentication(authorizationRequest.createOAuth2Request(), userAuthentication);\n+        OAuth2AccessToken compositeToken = tokenServices.createAccessToken(authentication);\n+        TokenValidation refreshToken = tokenServices.validateToken(compositeToken.getRefreshToken().getValue());\n+\n+        String refreshTokenValue = tokenProvisioning.retrieve(refreshToken.getClaims().get(\"jti\").toString(), IdentityZoneHolder.get().getId()).getValue();\n+\n+        expectedException.expect(InvalidTokenException.class);\n+        expectedException.expectMessage(\"Invalid access token was provided.\");\n+        tokenServices.loadAuthentication(refreshTokenValue);\n+    }\n \n     @Test\n     public void testLoadAuthenticationForAClient() {\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "5d021e83ef143c64179d0da015aa76321ee40988", "source_date": "Tue Jul 10 10:53:00 2018 -0700", "source_tag": "4.19.2", "target_commit": "0cd3c6fdd96206a1d6a376ac62e21e59e16cdcb1", "target_date": "Wed Jul 11 15:09:56 2018 -0700", "target_tag": "4.12.4", "FAIL TO PASS": ["org.cloudfoundry.identity.uaa.oauth.UaaTokenServicesTests > loadAuthentication_when_given_an_opaque_refreshToken_should_throw_exception[0: testname[old behavior]", "org.cloudfoundry.identity.uaa.oauth.UaaTokenServicesTests > loadAuthentication_when_given_an_refresh_jwt_should_throw_exception[1: testname[using enhancer]", "org.cloudfoundry.identity.uaa.oauth.UaaTokenServicesTests > loadAuthentication_when_given_an_refresh_jwt_should_throw_exception[0: testname[old behavior]", "org.cloudfoundry.identity.uaa.oauth.UaaTokenServicesTests > loadAuthentication_when_given_an_opaque_refreshToken_should_throw_exception[1: testname[using enhancer]"], "PASS TO PASS": ["org.cloudfoundry.identity.uaa.provider.ldap.LdapIdentityProviderDefinitionTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.ZoneAwareIdpMetadataGeneratorTest", "org.cloudfoundry.identity.uaa.user.BCryptPasswordEncoderTest", "org.cloudfoundry.identity.uaa.oauth.IntrospectEndpointTest", "org.cloudfoundry.identity.uaa.audit.event.ApprovalModifiedEventTest", "org.cloudfoundry.identity.uaa.authentication.BackwardsCompatibleTokenEndpointAuthenticationFilterTest", ":cloudfoundry-identity-server:processResources", "org.cloudfoundry.identity.uaa.web.UaaSessionCookieConfigTest", "org.cloudfoundry.identity.uaa.util.ColorHashTest", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupProvisioningTests", "org.cloudfoundry.identity.uaa.zone.IdentityZoneHolderTest", "org.cloudfoundry.identity.uaa.authentication.manager.ScopeAuthenticationManagerTests", ":cloudfoundry-identity-model:gitInfo", "org.cloudfoundry.identity.uaa.login.ChangePasswordControllerTest", "org.cloudfoundry.identity.uaa.authentication.ReAuthenticationRequiredFilterTests", "org.cloudfoundry.identity.uaa.authentication.event.UserAuthenticationSuccessEventTests", "org.cloudfoundry.identity.uaa.user.InMemoryUaaUserDatabaseTests", "org.cloudfoundry.identity.uaa.authentication.ClientBasicAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlSessionStorageFactoryTests", "org.cloudfoundry.identity.uaa.scim.ScimGroupMemberTests", "org.cloudfoundry.identity.uaa.codestore.CodeStoreEndpointsTests", "org.cloudfoundry.identity.uaa.scim.endpoints.PasswordResetEndpointTest", "org.cloudfoundry.identity.uaa.oauth.approval.JdbcApprovalStoreTests", "org.cloudfoundry.identity.uaa.mfa.MfaCheckerTests", "org.cloudfoundry.identity.uaa.oauth.openid.IdTokenSerializationTest", "org.cloudfoundry.identity.uaa.oauth.ClientAccessTokenValidityTest", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsTests", "org.cloudfoundry.identity.uaa.authorization.external.LdapGroupMappingAuthorizationManagerTests", "org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationSerializerDeserializerTest", "org.cloudfoundry.identity.uaa.zone.BannerValidatorTest", "org.cloudfoundry.identity.uaa.scim.jdbc.ScimSearchQueryConverterTests", "org.cloudfoundry.identity.uaa.login.EmailInvitationsServiceTests", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimUserProvisioningTests", "org.cloudfoundry.identity.uaa.db.OldAuthzTableDropped", "org.cloudfoundry.identity.uaa.authentication.manager.ChainedAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.error.ConvertingExceptionViewTests", "org.cloudfoundry.identity.uaa.scim.exception.InvalidPasswordExceptionTest", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimGroupBootstrapTests", "org.cloudfoundry.identity.uaa.scim.validate.UaaPasswordPolicyValidatorTests", "org.cloudfoundry.identity.uaa.provider.ldap.DynamicPasswordComparatorTests", "org.cloudfoundry.identity.uaa.authentication.manager.CommonLoginPolicyTest", "org.cloudfoundry.identity.uaa.util.UaaTokenUtilsTest", "org.cloudfoundry.identity.uaa.resources.MessageTests", "org.cloudfoundry.identity.uaa.authentication.manager.ExternalLoginAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.oauth.approval.ApprovalsAdminEndpointsTests", "org.cloudfoundry.identity.uaa.util.LinkedMaskingMultiValueMapTests", "org.cloudfoundry.identity.uaa.authentication.ClientParametersAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.client.SocialClientUserDetailsSourceTests", ":cloudfoundry-identity-server:compileJava", "org.cloudfoundry.identity.uaa.oauth.token.AddTokenGranterTests", "org.cloudfoundry.identity.uaa.provider.saml.LoginSAMLAuthenticationFailureHandlerTest", "org.cloudfoundry.identity.uaa.authentication.AuthzAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.error.UaaExceptionTests", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimUserBootstrapTests", "org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationEndpointTest", ":cloudfoundry-identity-model:mainOutputResourcesDir", "org.cloudfoundry.identity.uaa.db.TestThatClientIdIsVchar255", "org.cloudfoundry.identity.uaa.db.DatabaseParametersTests", "org.cloudfoundry.identity.uaa.login.ForcePasswordChangeControllerTest", "org.cloudfoundry.identity.uaa.login.AutologinAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.util.DomainFilterTest", "org.cloudfoundry.identity.uaa.provider.ldap.ExtendedLdapUserMapperTest", "org.cloudfoundry.identity.uaa.scim.ScimUserTests", "org.cloudfoundry.identity.uaa.oauth.token.LargeRevocableTokenDeleteTests", "org.cloudfoundry.identity.uaa.audit.JdbcFailedLoginCountingAuditServiceTests", "org.cloudfoundry.identity.uaa.login.NotificationsServiceTest", "org.cloudfoundry.identity.uaa.oauth.UaaUserApprovalHandlerTests", "org.cloudfoundry.identity.uaa.oauth.RemoteTokenServicesTests", "org.cloudfoundry.identity.uaa.login.UsernamePasswordExtractingAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.zone.GeneralIdentityZoneValidatorTests", "org.cloudfoundry.identity.uaa.oauth.OpenIdSessionStateCalculatorTest", "org.cloudfoundry.identity.uaa.client.JdbcClientMetadataProvisioningTest", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthAuthenticationManagerIT", "org.cloudfoundry.identity.uaa.util.KeyWithCertTest", "org.cloudfoundry.identity.uaa.oauth.client.ClientDetailsModificationTests", "org.cloudfoundry.identity.uaa.web.HttpHeadersFilterRequestWrapperTest", "org.cloudfoundry.identity.uaa.zone.ZoneAwareClientSecretPolicyValidatorTests", "org.cloudfoundry.identity.uaa.zone.event.IdentityProviderModifiedEventTest", ":cloudfoundry-identity-metrics-data:classes", "org.cloudfoundry.identity.uaa.login.ResetPasswordControllerTest", "org.cloudfoundry.identity.uaa.authentication.login.RemoteAuthenticationEndpointTests", "org.cloudfoundry.identity.uaa.provider.saml.ZoneAwareMetadataGeneratorTests", "org.cloudfoundry.identity.uaa.db.ClientDetailsSupportsExtendedAuthoritesAndScopes", "org.cloudfoundry.identity.uaa.test.CreateDB", "org.cloudfoundry.identity.uaa.mfa.StatelessMfaAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.oauth.token.Saml2TokenGranterTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpWebSsoProfileImplTest", "org.cloudfoundry.identity.uaa.util.log.LineAwareLayoutTest", "org.cloudfoundry.identity.uaa.zone.IdentityZoneResolvingFilterTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.SamlServiceProviderConfiguratorTest", "org.cloudfoundry.identity.uaa.metrics.QueryFilterTests", "org.cloudfoundry.identity.uaa.security.web.CorsFilterTests", "org.cloudfoundry.identity.uaa.oauth.token.JwtTokenGranterTests", "org.cloudfoundry.identity.uaa.security.web.SecurityFilterChainPostProcessorTests", "org.cloudfoundry.identity.uaa.login.util.FakeJavaMailSenderTest", "org.cloudfoundry.identity.uaa.web.ForwardAwareInternalResourceViewResolverTests", "org.cloudfoundry.identity.uaa.web.ExceptionReportHttpMessageConverterTest", "org.cloudfoundry.identity.uaa.db.TableAndColumnNormalizationTest", ":cloudfoundry-identity-server:testClasses", "org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcherTests", "org.cloudfoundry.identity.uaa.resources.jdbc.JdbcSqlAdapterTests", "org.cloudfoundry.identity.uaa.oauth.jwk.JsonWebKeySetTests", "org.cloudfoundry.identity.uaa.provider.RestTemplateSslIT", "org.cloudfoundry.identity.uaa.mfa.UserGoogleMfaCredentialsProvisioningTest", "org.cloudfoundry.identity.uaa.authentication.SystemAuthenticationTest", "org.cloudfoundry.identity.uaa.oauth.CheckTokenEndpointTests", "org.cloudfoundry.identity.uaa.authentication.SessionResetFilterTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserEndpointsTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlMessageStorageTest", "org.cloudfoundry.identity.uaa.provider.oauth.OauthIdentityProviderDefinitionFactoryBeanTest", "org.cloudfoundry.identity.uaa.authentication.PasswordChangeUiRequiredFilterTest", "org.cloudfoundry.identity.uaa.user.UaaAuthorityTests", "org.cloudfoundry.identity.uaa.config.YamlServletProfileInitializerTests", "org.cloudfoundry.identity.uaa.mfa.JdbcUserGoogleMfaCredentialsProvisioningTest", "org.cloudfoundry.identity.uaa.db.MySqlDbMigrationIntegrationTest", "org.cloudfoundry.identity.uaa.web.RecognizeFailureDispatcherServletTest", "org.cloudfoundry.identity.uaa.db.GroupMembershipAuthoritiesNullableTest", "org.cloudfoundry.identity.uaa.db.GoogleAuthUserConfigTableTest", "org.cloudfoundry.identity.uaa.login.EmailAccountCreationServiceTests", "org.cloudfoundry.identity.uaa.client.OAuth2ClientAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.user.UaaUserEditorTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlKeyManagerFactoryTests", "org.cloudfoundry.identity.uaa.security.CsrfAwareEntryPointAndDeniedHandlerTest", "org.cloudfoundry.identity.uaa.login.PasswordConfirmationValidationTest", "org.cloudfoundry.identity.uaa.login.EmailServiceTests", "org.cloudfoundry.identity.uaa.db.StoreSubDomainAsLowerCase_V2_7_3_Tests", "org.cloudfoundry.identity.uaa.invitations.InvitationsControllerTest", "org.cloudfoundry.identity.uaa.provider.saml.LoginSamlAuthenticationProviderTests", "org.cloudfoundry.identity.uaa.account.PasswordChangeEndpointTests", "org.cloudfoundry.identity.uaa.authentication.PasswordChangeRequiredFilterTests", "org.cloudfoundry.identity.uaa.login.SamlLoginServerKeyManagerTests", "org.cloudfoundry.identity.uaa.security.X509ExpiryCheckingTrustManagerTest", "org.cloudfoundry.identity.uaa.oauth.UserManagedAuthzApprovalHandlerTests", "org.cloudfoundry.identity.uaa.logging.LogSanitizerUtilTest", "org.cloudfoundry.identity.uaa.db.SqlServerDbMigrationIntegrationTest", "org.cloudfoundry.identity.uaa.invitations.InvitationsAuthenticationTrustResolverTest", "org.cloudfoundry.identity.uaa.scim.endpoints.UserIdConversionEndpointsTests", ":cloudfoundry-identity-metrics-data:jar", "org.cloudfoundry.identity.uaa.util.EnsureOldLibrariesAreRemoved", ":cloudfoundry-identity-server:processTestResources", "org.cloudfoundry.identity.uaa.oauth.jwt.ChainedSignatureVerifierTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ChangeEmailEndpointsTest", "org.cloudfoundry.identity.uaa.account.ResetPasswordAuthenticationEntryPointTests", "org.cloudfoundry.identity.uaa.config.EnvironmentPropertiesFactoryBeanTests", ":cloudfoundry-identity-model:compileJava", "org.cloudfoundry.identity.uaa.resources.jdbc.LimitSqlAdapterFactoryTest", "org.cloudfoundry.identity.uaa.provider.saml.SamlConfigurationBeanTest", "org.cloudfoundry.identity.uaa.util.NullifyFieldsTest", "org.cloudfoundry.identity.uaa.oauth.UaaOauth2ErrorHandlerTests", "org.cloudfoundry.identity.uaa.provider.IdentityProviderConfigValidationDelegatorTest", "org.cloudfoundry.identity.uaa.authentication.ZoneAwareWhitelistLogoutHandlerTests", "org.cloudfoundry.identity.uaa.provider.LockoutPolicyTests", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthIdentityProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.authentication.manager.KeystoneAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.zone.IdentityZoneSwitchingFilterTests", "org.cloudfoundry.identity.uaa.client.ClientAdminEndpointsValidatorTests", "org.cloudfoundry.identity.uaa.metrics.IdleTimerTests", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeTests", "org.cloudfoundry.identity.uaa.util.TimeBasedExpiringValueMapTest", "org.cloudfoundry.identity.uaa.oauth.UaaScopesTests", "org.cloudfoundry.identity.uaa.config.EnvironmentMapFactoryBeanTests", "org.cloudfoundry.identity.uaa.oauth.jwt.JwtHelperTest", "org.cloudfoundry.identity.uaa.mfa.MfaUiRequiredFilterTests", "org.cloudfoundry.identity.uaa.oauth.ZoneEndpointsClientDetailsValidatorTests", "org.cloudfoundry.identity.uaa.db.ClientDetailsHasRequiredUserScopes", "org.cloudfoundry.identity.uaa.zone.GeneralIdentityZoneConfigurationValidatorTests", "org.cloudfoundry.identity.uaa.authentication.UaaClientAuthenticationProviderTest", "org.cloudfoundry.identity.uaa.openid.UserInfoEndpointTests", "org.cloudfoundry.identity.uaa.client.ClientAdminBootstrapTests", "org.cloudfoundry.identity.uaa.audit.event.AuditListenerTests", "org.cloudfoundry.identity.uaa.oauth.openid.IdTokenCreatorTest", "org.cloudfoundry.identity.uaa.oauth.jwt.CommonSignatureVerifierTest", "org.cloudfoundry.identity.uaa.authentication.CurrentUserCookieRequestFilterTest", "org.cloudfoundry.identity.uaa.oauth.token.KeyInfoTests", "org.cloudfoundry.identity.uaa.zone.IdentityZoneEndpointsTests", "org.cloudfoundry.identity.uaa.account.PasswordCheckEndpointTests", "org.cloudfoundry.identity.uaa.zone.MfaConfigValidatorTests", "org.cloudfoundry.identity.uaa.config.YamlPropertiesFactoryBeanTests", "org.cloudfoundry.identity.uaa.authentication.manager.LoginAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.util.UaaMapUtilsTest", "org.cloudfoundry.identity.uaa.scim.util.ScimUtilsTest", "org.cloudfoundry.identity.uaa.oauth.TokenRevocationEndpointTests", "org.cloudfoundry.identity.uaa.zone.JdbcIdentityZoneProvisioningTests", "org.cloudfoundry.identity.uaa.login.CurrentUserCookieFactoryTest", "org.cloudfoundry.identity.uaa.oauth.DisableIdTokenResponseTypeFilterTest", "org.cloudfoundry.identity.uaa.authentication.UTF8ConversionFilterTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlRedirectUtilsTest", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.util.CachingPasswordEncoderTest", "org.cloudfoundry.identity.uaa.login.ProfileControllerTests", "org.cloudfoundry.identity.uaa.audit.AuditEventTypeTests", "org.cloudfoundry.identity.uaa.oauth.RestrictUaaScopesClientValidatorTest", "org.cloudfoundry.identity.uaa.config.IdentityZoneConfigurationBootstrapTests", "org.cloudfoundry.identity.uaa.provider.saml.ConfigMetadataProviderTest", "org.cloudfoundry.identity.uaa.oauth.token.UaaTokenEndpointTests", "org.cloudfoundry.identity.uaa.resources.jdbc.LimitSqlAdapterTests", "org.cloudfoundry.identity.uaa.scim.ScimCoreTests", "org.cloudfoundry.identity.uaa.config.NestedMapPropertySourceTests", "org.cloudfoundry.identity.uaa.oauth.jwt.CommonSignerTest", "org.cloudfoundry.identity.uaa.authentication.manager.CheckIdpEnabledAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.oauth.event.ClientAdminEventPublisherTests", "org.cloudfoundry.identity.uaa.zone.InvalidClientSecretExceptionTests", "org.cloudfoundry.identity.uaa.web.LimitedModeUaaFilterTests", "org.cloudfoundry.identity.uaa.web.UaaSavedRequestCacheTests", "org.cloudfoundry.identity.uaa.impl.config.YamlServletProfileInitializerTest", "org.cloudfoundry.identity.uaa.db.RevocableTokenIndexTest_4_0_8", "org.cloudfoundry.identity.uaa.provider.saml.SamlIdentityProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.resources.jdbc.JdbcPagingListTests", "org.cloudfoundry.identity.uaa.login.TotpMfaEndpointTest", "org.cloudfoundry.identity.uaa.mfa.MfaProviderBootstrapTest", "org.cloudfoundry.identity.uaa.login.AccountsControllerTest", "org.cloudfoundry.identity.uaa.audit.JdbcAuditServiceTests", "org.cloudfoundry.identity.uaa.util.TestUaaUrlBuilderTest", "org.cloudfoundry.identity.uaa.config.YamlBindingTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpSamlAuthenticationSuccessHandlerTest", "org.cloudfoundry.identity.uaa.authentication.manager.AuthzAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.oauth.ClientInfoEndpointTests", "org.cloudfoundry.identity.uaa.provider.ldap.ProcessLdapPropertiesTest", "org.cloudfoundry.identity.uaa.config.PasswordPolicyTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.NonSnarlIdpMetadataManagerTest", "org.cloudfoundry.identity.uaa.test.UaaTestAccountsTest", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeStoreTests", "org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationDetailsTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.JdbcSamlServiceProviderProvisioningTest", "org.cloudfoundry.identity.uaa.oauth.AntPathRedirectResolverTests", "org.cloudfoundry.identity.uaa.util.UaaHttpRequestUtilsTest", "org.cloudfoundry.identity.uaa.audit.event.SystemDeletableTest", "/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", "org.cloudfoundry.identity.uaa.oauth.JdbcQueryableClientDetailsServiceTests", "org.cloudfoundry.identity.uaa.user.JdbcUaaUserDatabaseTests", "org.cloudfoundry.identity.uaa.authentication.listener.AuthenticationSuccessListenerTests", "org.cloudfoundry.identity.uaa.impl.config.ScimExternalGroupsTypeResolvingFactoryBeanTest", "org.cloudfoundry.identity.uaa.account.ResetPasswordAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.mfa.JdbcMfaProviderProvisioningTest", "org.cloudfoundry.identity.uaa.config.YamlConfigurationValidatorTests", "org.cloudfoundry.identity.uaa.db.HsqlDbMigrationIntegrationTest", "org.cloudfoundry.identity.uaa.db.ExpiringCodeTableTest", "org.cloudfoundry.identity.uaa.db.PostgresDbMigrationIntegrationTest", "org.cloudfoundry.identity.uaa.login.HomeControllerViewTests", "org.cloudfoundry.identity.uaa.oauth.AccessControllerTests", "org.cloudfoundry.identity.uaa.config.IdentityZoneConfigurationTests", "org.cloudfoundry.identity.uaa.authentication.manager.PeriodLockoutPolicyTests", "org.cloudfoundry.identity.uaa.provider.uaa.UaaIdentityProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.config.YamlMapFactoryBeanTests", "org.cloudfoundry.identity.uaa.db.TestSchemaValidation", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupMembershipManagerTests", "org.cloudfoundry.identity.uaa.web.HeaderFilterTest", "org.cloudfoundry.identity.uaa.web.CookieBasedCsrfTokenRepositoryTests", "org.cloudfoundry.identity.uaa.zone.JdbcIdentityProviderProvisioningTests", "org.cloudfoundry.identity.uaa.audit.event.EntityDeletedEventTest", "org.cloudfoundry.identity.uaa.login.UaaChangePasswordServiceTest", "org.cloudfoundry.identity.uaa.resources.jdbc.SimpleSearchQueryConverterTests", "org.cloudfoundry.identity.uaa.oauth.approval.ApprovalTests", "org.cloudfoundry.identity.uaa.util.log.SyslogAppenderTest", "org.cloudfoundry.identity.uaa.login.LoginInfoEndpointTests", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupExternalMembershipManagerTests", "org.cloudfoundry.identity.uaa.mfa.MfaProviderEndpointsTest", "org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationEndpointParamaterizedTest", ":cloudfoundry-identity-server:compileTestJava", "org.cloudfoundry.identity.uaa.provider.ldap.LdapIdentityProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.SamlServiceProviderDefinitionTest", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimExternalGroupBootstrapTests", "org.cloudfoundry.identity.uaa.oauth.UaaTokenStoreTests", "org.cloudfoundry.identity.uaa.authentication.WhitelistLogoutHandlerTest", "org.cloudfoundry.identity.uaa.oauth.token.UserTokenGranterTest", "org.cloudfoundry.identity.uaa.client.ClientAdminEndpointsTests", "org.cloudfoundry.identity.uaa.util.UaaPagingUtilsTests", "org.cloudfoundry.identity.uaa.db.RevocableTokenTableTest", "org.cloudfoundry.identity.uaa.util.TokenValidationTest", "org.cloudfoundry.identity.uaa.login.EmailChangeEmailServiceTest", "org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationSerializationTests", "org.cloudfoundry.identity.uaa.oauth.expression.IsSelfCheckTest", "org.cloudfoundry.identity.uaa.zone.MultitenantJdbcClientDetailsServiceTests", "org.cloudfoundry.identity.uaa.db.UserInfoTableTest", "org.cloudfoundry.identity.uaa.cache.ExpiringUrlCacheTests", ":cloudfoundry-identity-model:classes", "org.cloudfoundry.identity.uaa.util.UaaStringUtilsTest", "org.cloudfoundry.identity.uaa.zone.event.IdentityZoneModifiedEventTest", "org.cloudfoundry.identity.uaa.security.DefaultSecurityContextAccessorTests", "org.cloudfoundry.identity.uaa.metrics.UaaMetricsFilterTests", "org.cloudfoundry.identity.uaa.authentication.SamlAssertionBindingTests", "org.cloudfoundry.identity.uaa.util.RestTemplateFactoryTests", "org.cloudfoundry.identity.uaa.oauth.token.JdbcRevocableTokenProvisioningTest", ":cloudfoundry-identity-model:buildInfo", "org.cloudfoundry.identity.uaa.mfa.MfaRegisterQRGeneratorTest", ":cloudfoundry-identity-model:processResources", ":cloudfoundry-identity-model:jar", "org.cloudfoundry.identity.uaa.provider.saml.BootstrapSamlIdentityProviderDataTests", ":cloudfoundry-identity-server:compileJava/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", "org.cloudfoundry.identity.uaa.logging.SanitizedLogFactoryTest", "org.cloudfoundry.identity.uaa.login.ChangeEmailControllerTest", "org.cloudfoundry.identity.uaa.account.event.PasswordChangeEventPublisherTests", "org.cloudfoundry.identity.uaa.util.LowConcurrencyPasswordEncoderTests", "org.cloudfoundry.identity.uaa.db.TestDataSourcePool", "org.cloudfoundry.identity.uaa.config.IdentityProviderBootstrapTest", ":cloudfoundry-identity-server:classes", "org.cloudfoundry.identity.uaa.zone.event.ServiceProviderModifiedEventTest", ":cloudfoundry-identity-metrics-data:processResources", "org.cloudfoundry.identity.uaa.web.SessionIdleTimeoutSetterTest", "org.cloudfoundry.identity.uaa.provider.saml.ComparableProviderTest", "org.cloudfoundry.identity.uaa.web.HealthzEndpointTests", "org.cloudfoundry.identity.uaa.provider.IdentityProviderEndpointsTest", "org.cloudfoundry.identity.uaa.login.UaaAuthenticationFailureHandlerTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpInitiatedLoginControllerTests", ":cloudfoundry-identity-metrics-data:compileJava", "org.cloudfoundry.identity.uaa.provider.saml.SamlIdentityProviderDefinitionTests", "org.cloudfoundry.identity.uaa.oauth.token.TokenKeyEndpointTests", "org.cloudfoundry.identity.uaa.oauth.TokenValidityResolverTest", "org.cloudfoundry.identity.uaa.audit.LoggingAuditServiceTest", "org.cloudfoundry.identity.uaa.db.OauthCodeIndexTest", "org.cloudfoundry.identity.uaa.client.SourceTests", "org.cloudfoundry.identity.uaa.login.UaaResetPasswordServiceTests", "org.cloudfoundry.identity.uaa.authentication.manager.LdapLoginAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.provider.KeystoneIdentityProviderDefinitionTest", "org.cloudfoundry.identity.uaa.mfa.MfaRequiredFilterTests", "org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationRequestManagerTests", "org.cloudfoundry.identity.uaa.util.UaaUrlUtilsTest", "org.cloudfoundry.identity.uaa.login.AccountSavingAuthenticationSuccessHandlerTest", "org.cloudfoundry.identity.uaa.oauth.ClientRefreshTokenValidityTest", "org.cloudfoundry.identity.uaa.web.UaaSavedRequestAwareAuthenticationSuccessHandlerTests", "org.cloudfoundry.identity.uaa.oauth.jwk.RsaJsonWebKeyTests", "org.cloudfoundry.identity.uaa.mfa.GeneralMfaProviderValidatorTest"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_1272", "original_commit_message": "Add additional jti claim logic when loading auth object\n[#158847208]\nSigned-off-by: Bruce Ricard <bruce.ricard@gmail.com>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java b/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java\nindex d2ce4ea26..130dce797 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java\n@@ -940,6 +940,19 @@ public class UaaTokenServices implements AuthorizationServerTokenServices, Resou\n \n         TokenValidation tokenValidation = validateToken(accessToken);\n         Map<String, Object> claims = tokenValidation.getClaims();\n+\n+        Object jtiClaim = claims.get(JTI);\n+\n+        if (jtiClaim == null) {\n+            throw new InvalidTokenException(\"The token must contain a jti claim.\");\n+        } else {\n+            if (jtiClaim.toString().endsWith(REFRESH_TOKEN_SUFFIX)) {\n+                throw new InvalidTokenException(\n+                  \"Invalid access token was provided.\"\n+                );\n+            }\n+        }\n+\n         accessToken = tokenValidation.getJwt().getEncoded();\n \n         // Check token expiry\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java\nindex 59dfe8698..d408f25bc 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java\n@@ -33,6 +33,7 @@ import org.cloudfoundry.identity.uaa.oauth.token.matchers.OAuth2RefreshTokenMatc\n import org.cloudfoundry.identity.uaa.user.UaaUser;\n import org.cloudfoundry.identity.uaa.user.UaaUserPrototype;\n import org.cloudfoundry.identity.uaa.util.JsonUtils;\n+import org.cloudfoundry.identity.uaa.util.TokenValidation;\n import org.cloudfoundry.identity.uaa.zone.ClientServicesExtension;\n import org.cloudfoundry.identity.uaa.zone.IdentityZone;\n import org.cloudfoundry.identity.uaa.zone.IdentityZoneConfiguration;\n@@ -1975,6 +1976,59 @@ public class UaaTokenServicesTests {\n         System.out.println(\"newAccessToken = \" + newAccessToken);\n     }\n \n+    @Test\n+    public void loadAuthentication_when_given_an_opaque_refreshToken_should_throw_exception() {\n+        tokenSupport.defaultClient.setAutoApproveScopes(singleton(\"true\"));\n+        AuthorizationRequest authorizationRequest = new AuthorizationRequest(CLIENT_ID,tokenSupport.requestedAuthScopes);\n+        authorizationRequest.setResponseTypes(new HashSet(Arrays.asList(\"token\")));\n+        authorizationRequest.setResourceIds(new HashSet<>(tokenSupport.resourceIds));\n+        Map<String, String> azParameters = new HashMap<>(authorizationRequest.getRequestParameters());\n+        azParameters.put(GRANT_TYPE, AUTHORIZATION_CODE);\n+\n+        azParameters.put(REQUEST_TOKEN_FORMAT, TokenConstants.OPAQUE);\n+\n+        authorizationRequest.setRequestParameters(azParameters);\n+        Authentication userAuthentication = tokenSupport.defaultUserAuthentication;\n+\n+        OAuth2Authentication authentication = new OAuth2Authentication(authorizationRequest.createOAuth2Request(), userAuthentication);\n+        OAuth2AccessToken compositeToken = tokenServices.createAccessToken(authentication);\n+\n+        String refreshTokenValue = tokenProvisioning.retrieve(compositeToken.getRefreshToken().getValue(), IdentityZoneHolder.get().getId()).getValue();\n+\n+        expectedException.expect(InvalidTokenException.class);\n+        expectedException.expectMessage(\"Invalid access token was provided.\");\n+\n+        tokenServices.loadAuthentication(refreshTokenValue);\n+    }\n+\n+    @Rule\n+    public ExpectedException expectedException = ExpectedException.none();\n+\n+    @Test\n+    public void loadAuthentication_when_given_an_refresh_jwt_should_throw_exception() {\n+        IdentityZoneHolder.get().getConfig().getTokenPolicy().setJwtRevocable(true);\n+        tokenSupport.defaultClient.setAutoApproveScopes(singleton(\"true\"));\n+        AuthorizationRequest authorizationRequest = new AuthorizationRequest(CLIENT_ID,tokenSupport.requestedAuthScopes);\n+        authorizationRequest.setResponseTypes(new HashSet(Arrays.asList(\"token\")));\n+        authorizationRequest.setResourceIds(new HashSet<>(tokenSupport.resourceIds));\n+        Map<String, String> azParameters = new HashMap<>(authorizationRequest.getRequestParameters());\n+        azParameters.put(GRANT_TYPE, AUTHORIZATION_CODE);\n+\n+        azParameters.put(REQUEST_TOKEN_FORMAT, JWT.getStringValue());\n+\n+        authorizationRequest.setRequestParameters(azParameters);\n+        Authentication userAuthentication = tokenSupport.defaultUserAuthentication;\n+\n+        OAuth2Authentication authentication = new OAuth2Authentication(authorizationRequest.createOAuth2Request(), userAuthentication);\n+        OAuth2AccessToken compositeToken = tokenServices.createAccessToken(authentication);\n+        TokenValidation refreshToken = tokenServices.validateToken(compositeToken.getRefreshToken().getValue());\n+\n+        String refreshTokenValue = tokenProvisioning.retrieve(refreshToken.getClaims().get(\"jti\").toString(), IdentityZoneHolder.get().getId()).getValue();\n+\n+        expectedException.expect(InvalidTokenException.class);\n+        expectedException.expectMessage(\"Invalid access token was provided.\");\n+        tokenServices.loadAuthentication(refreshTokenValue);\n+    }\n \n     @Test\n     public void testLoadAuthenticationForAClient() {\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "5d021e83ef143c64179d0da015aa76321ee40988", "source_date": "Tue Jul 10 10:53:00 2018 -0700", "source_tag": "4.19.2", "target_commit": "b37552d2bf084de059bc965b5ef5a45e64883904", "target_date": "Wed Jul 11 15:11:02 2018 -0700", "target_tag": "4.7.6", "FAIL TO PASS": ["org.cloudfoundry.identity.uaa.oauth.UaaTokenServicesTests > loadAuthentication_when_given_an_opaque_refreshToken_should_throw_exception[0: testname[old behavior]", "org.cloudfoundry.identity.uaa.oauth.UaaTokenServicesTests > loadAuthentication_when_given_an_refresh_jwt_should_throw_exception[1: testname[using enhancer]", "org.cloudfoundry.identity.uaa.oauth.UaaTokenServicesTests > loadAuthentication_when_given_an_refresh_jwt_should_throw_exception[0: testname[old behavior]", "org.cloudfoundry.identity.uaa.oauth.UaaTokenServicesTests > loadAuthentication_when_given_an_opaque_refreshToken_should_throw_exception[1: testname[using enhancer]"], "PASS TO PASS": ["org.cloudfoundry.identity.uaa.zone.ZoneAwareClientSecretPolicyValidatorTests", "org.cloudfoundry.identity.uaa.zone.event.IdentityProviderModifiedEventTest", "org.cloudfoundry.identity.uaa.oauth.approval.ApprovalTests", "org.cloudfoundry.identity.uaa.provider.ldap.LdapIdentityProviderDefinitionTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.ZoneAwareIdpMetadataGeneratorTest", "org.cloudfoundry.identity.uaa.mfa_provider.JdbcMfaProviderProvisioningTest", "org.cloudfoundry.identity.uaa.util.log.SyslogAppenderTest", "org.cloudfoundry.identity.uaa.mfa_provider.MfaProviderEndpointsTest", "org.cloudfoundry.identity.uaa.db.ClientDetailsHasRequiredUserScopes", "org.cloudfoundry.identity.uaa.provider.saml.BootstrapSamlIdentityProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.login.LoginInfoEndpointTests", "org.cloudfoundry.identity.uaa.user.BCryptPasswordEncoderTest", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupExternalMembershipManagerTests", ":cloudfoundry-identity-metrics-data:classes", "org.cloudfoundry.identity.uaa.zone.GeneralIdentityZoneConfigurationValidatorTests", ":cloudfoundry-identity-server:compileTestJava", "org.cloudfoundry.identity.uaa.login.ResetPasswordControllerTest", "org.cloudfoundry.identity.uaa.audit.event.ApprovalModifiedEventTest", "org.cloudfoundry.identity.uaa.authentication.BackwardsCompatibleTokenEndpointAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.oauth.AuthorizePromptNoneEntryPointTest", "org.cloudfoundry.identity.uaa.authentication.UaaClientAuthenticationProviderTest", ":cloudfoundry-identity-server:processResources", "org.cloudfoundry.identity.uaa.openid.UserInfoEndpointTests", "org.cloudfoundry.identity.uaa.web.UaaSessionCookieConfigTest", "org.cloudfoundry.identity.uaa.authentication.login.RemoteAuthenticationEndpointTests", "org.cloudfoundry.identity.uaa.provider.saml.ZoneAwareMetadataGeneratorTests", "org.cloudfoundry.identity.uaa.client.ClientAdminBootstrapTests", "org.cloudfoundry.identity.uaa.db.ClientDetailsSupportsExtendedAuthoritesAndScopes", "org.cloudfoundry.identity.uaa.test.CreateDB", "org.cloudfoundry.identity.uaa.audit.event.AuditListenerTests", "org.cloudfoundry.identity.uaa.oauth.token.Saml2TokenGranterTest", "org.cloudfoundry.identity.uaa.util.ColorHashTest", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.provider.ldap.LdapIdentityProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.SamlServiceProviderDefinitionTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpWebSsoProfileImplTest", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupProvisioningTests", "org.cloudfoundry.identity.uaa.zone.IdentityZoneHolderTest", "org.cloudfoundry.identity.uaa.oauth.jwt.CommonSignatureVerifierTest", "org.cloudfoundry.identity.uaa.util.log.LineAwareLayoutTest", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimExternalGroupBootstrapTests", "org.cloudfoundry.identity.uaa.oauth.UaaTokenStoreTests", "org.cloudfoundry.identity.uaa.oauth.token.KeyInfoTests", "org.cloudfoundry.identity.uaa.authentication.manager.ScopeAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.zone.IdentityZoneResolvingFilterTests", "org.cloudfoundry.identity.uaa.authentication.WhitelistLogoutHandlerTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.SamlServiceProviderConfiguratorTest", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.zone.IdentityZoneEndpointsTests", "org.cloudfoundry.identity.uaa.account.PasswordCheckEndpointTests", ":cloudfoundry-identity-model:gitInfo", "org.cloudfoundry.identity.uaa.login.ChangePasswordControllerTest", "org.cloudfoundry.identity.uaa.config.YamlPropertiesFactoryBeanTests", "org.cloudfoundry.identity.uaa.oauth.token.UserTokenGranterTest", "org.cloudfoundry.identity.uaa.metrics.QueryFilterTests", "org.cloudfoundry.identity.uaa.authentication.manager.LoginAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.authentication.event.UserAuthenticationSuccessEventTests", "org.cloudfoundry.identity.uaa.user.InMemoryUaaUserDatabaseTests", "org.cloudfoundry.identity.uaa.authentication.ClientBasicAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlSessionStorageFactoryTests", "org.cloudfoundry.identity.uaa.security.web.CorsFilterTests", "org.cloudfoundry.identity.uaa.util.UaaMapUtilsTest", "org.cloudfoundry.identity.uaa.oauth.token.JwtTokenGranterTests", "org.cloudfoundry.identity.uaa.scim.util.ScimUtilsTest", "org.cloudfoundry.identity.uaa.security.web.SecurityFilterChainPostProcessorTests", "org.cloudfoundry.identity.uaa.oauth.TokenRevocationEndpointTests", "org.cloudfoundry.identity.uaa.scim.ScimGroupMemberTests", "org.cloudfoundry.identity.uaa.zone.JdbcIdentityZoneProvisioningTests", "org.cloudfoundry.identity.uaa.codestore.CodeStoreEndpointsTests", "org.cloudfoundry.identity.uaa.client.ClientAdminEndpointsTests", "org.cloudfoundry.identity.uaa.login.util.FakeJavaMailSenderTest", "org.cloudfoundry.identity.uaa.scim.endpoints.PasswordResetEndpointTest", "org.cloudfoundry.identity.uaa.web.ForwardAwareInternalResourceViewResolverTests", "org.cloudfoundry.identity.uaa.web.ExceptionReportHttpMessageConverterTest", "org.cloudfoundry.identity.uaa.oauth.DisableIdTokenResponseTypeFilterTest", "org.cloudfoundry.identity.uaa.oauth.approval.JdbcApprovalStoreTests", "org.cloudfoundry.identity.uaa.authentication.UTF8ConversionFilterTests", "org.cloudfoundry.identity.uaa.db.TableAndColumnNormalizationTest", "org.cloudfoundry.identity.uaa.util.UaaPagingUtilsTests", "org.cloudfoundry.identity.uaa.db.RevocableTokenTableTest", "org.cloudfoundry.identity.uaa.authentication.listener.UserAuthenticationSuccessListenerTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsTests", "org.cloudfoundry.identity.uaa.util.TokenValidationTest", "org.cloudfoundry.identity.uaa.provider.saml.SamlRedirectUtilsTest", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.login.EmailChangeEmailServiceTest", "org.cloudfoundry.identity.uaa.util.CachingPasswordEncoderTest", "org.cloudfoundry.identity.uaa.authorization.external.LdapGroupMappingAuthorizationManagerTests", "org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationSerializerDeserializerTest", "org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationSerializationTests", ":cloudfoundry-identity-server:compileTestJava/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", ":cloudfoundry-identity-server:testClasses", "org.cloudfoundry.identity.uaa.oauth.expression.IsSelfCheckTest", "org.cloudfoundry.identity.uaa.zone.MultitenantJdbcClientDetailsServiceTests", "org.cloudfoundry.identity.uaa.zone.BannerValidatorTest", "org.cloudfoundry.identity.uaa.login.ProfileControllerTests", "org.cloudfoundry.identity.uaa.audit.AuditEventTypeTests", "org.cloudfoundry.identity.uaa.scim.jdbc.ScimSearchQueryConverterTests", "org.cloudfoundry.identity.uaa.db.UserInfoTableTest", "org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcherTests", "org.cloudfoundry.identity.uaa.oauth.RestrictUaaScopesClientValidatorTest", "org.cloudfoundry.identity.uaa.resources.jdbc.JdbcSqlAdapterTests", "org.cloudfoundry.identity.uaa.oauth.jwk.JsonWebKeySetTests", "org.cloudfoundry.identity.uaa.login.EmailInvitationsServiceTests", "org.cloudfoundry.identity.uaa.scim.ScimCoreTests", "org.cloudfoundry.identity.uaa.config.IdentityZoneConfigurationBootstrapTests", "org.cloudfoundry.identity.uaa.provider.saml.ConfigMetadataProviderTest", "org.cloudfoundry.identity.uaa.oauth.token.UaaTokenEndpointTests", "org.cloudfoundry.identity.uaa.authentication.SystemAuthenticationTest", "org.cloudfoundry.identity.uaa.cache.ExpiringUrlCacheTests", ":cloudfoundry-identity-model:classes", "org.cloudfoundry.identity.uaa.util.UaaStringUtilsTest", "org.cloudfoundry.identity.uaa.zone.event.IdentityZoneModifiedEventTest", "org.cloudfoundry.identity.uaa.config.NestedMapPropertySourceTests", "org.cloudfoundry.identity.uaa.security.DefaultSecurityContextAccessorTests", "org.cloudfoundry.identity.uaa.metrics.UaaMetricsFilterTests", "org.cloudfoundry.identity.uaa.oauth.CheckTokenEndpointTests", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimUserProvisioningTests", "org.cloudfoundry.identity.uaa.authentication.SessionResetFilterTests", "org.cloudfoundry.identity.uaa.oauth.jwt.CommonSignerTest", "org.cloudfoundry.identity.uaa.authentication.SamlAssertionBindingTests", "org.cloudfoundry.identity.uaa.authentication.manager.CheckIdpEnabledAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserEndpointsTests", "org.cloudfoundry.identity.uaa.oauth.event.ClientAdminEventPublisherTests", "org.cloudfoundry.identity.uaa.zone.InvalidClientSecretExceptionTests", "org.cloudfoundry.identity.uaa.db.OldAuthzTableDropped", "org.cloudfoundry.identity.uaa.web.LimitedModeUaaFilterTests", "org.cloudfoundry.identity.uaa.web.UaaSavedRequestCacheTests", "org.cloudfoundry.identity.uaa.authentication.manager.ChainedAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.util.RestTemplateFactoryTests", "org.cloudfoundry.identity.uaa.impl.config.YamlServletProfileInitializerTest", "org.cloudfoundry.identity.uaa.db.RevocableTokenIndexTest_4_0_8", "org.cloudfoundry.identity.uaa.error.ConvertingExceptionViewTests", "org.cloudfoundry.identity.uaa.scim.exception.InvalidPasswordExceptionTest", "org.cloudfoundry.identity.uaa.provider.saml.SamlMessageStorageTest", "org.cloudfoundry.identity.uaa.oauth.token.JdbcRevocableTokenProvisioningTest", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimGroupBootstrapTests", "org.cloudfoundry.identity.uaa.provider.oauth.OauthIdentityProviderDefinitionFactoryBeanTest", ":cloudfoundry-identity-model:buildInfo", "org.cloudfoundry.identity.uaa.user.UaaAuthorityTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlIdentityProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.provider.ldap.DynamicPasswordComparatorTests", "org.cloudfoundry.identity.uaa.resources.jdbc.JdbcPagingListTests", "org.cloudfoundry.identity.uaa.scim.validate.UaaPasswordPolicyValidatorTests", "org.cloudfoundry.identity.uaa.config.YamlServletProfileInitializerTests", "org.cloudfoundry.identity.uaa.authentication.manager.CommonLoginPolicyTest", "org.cloudfoundry.identity.uaa.util.UaaTokenUtilsTest", "org.cloudfoundry.identity.uaa.resources.MessageTests", "org.cloudfoundry.identity.uaa.login.AccountsControllerTest", "org.cloudfoundry.identity.uaa.authentication.manager.ExternalLoginAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.oauth.approval.ApprovalsAdminEndpointsTests", "org.cloudfoundry.identity.uaa.audit.JdbcAuditServiceTests", "org.cloudfoundry.identity.uaa.web.RecognizeFailureDispatcherServletTest", "org.cloudfoundry.identity.uaa.db.GroupMembershipAuthoritiesNullableTest", "org.cloudfoundry.identity.uaa.util.LinkedMaskingMultiValueMapTests", "org.cloudfoundry.identity.uaa.config.YamlBindingTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpSamlAuthenticationSuccessHandlerTest", "org.cloudfoundry.identity.uaa.authentication.ClientParametersAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.login.EmailAccountCreationServiceTests", "org.cloudfoundry.identity.uaa.client.OAuth2ClientAuthenticationFilterTests", ":cloudfoundry-identity-model:processResources", "org.cloudfoundry.identity.uaa.user.UaaUserEditorTests", "org.cloudfoundry.identity.uaa.client.SocialClientUserDetailsSourceTests", ":cloudfoundry-identity-model:jar", "org.cloudfoundry.identity.uaa.provider.saml.SamlKeyManagerFactoryTests", "org.cloudfoundry.identity.uaa.security.CsrfAwareEntryPointAndDeniedHandlerTest", "org.cloudfoundry.identity.uaa.authentication.manager.AuthzAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.login.PasswordConfirmationValidationTest", ":cloudfoundry-identity-server:compileJava", "org.cloudfoundry.identity.uaa.oauth.ClientInfoEndpointTests", "org.cloudfoundry.identity.uaa.provider.ldap.ProcessLdapPropertiesTest", ":cloudfoundry-identity-server:compileJava/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", "org.cloudfoundry.identity.uaa.logging.SanitizedLogFactoryTest", "org.cloudfoundry.identity.uaa.login.EmailServiceTests", "org.cloudfoundry.identity.uaa.oauth.token.AddTokenGranterTests", "org.cloudfoundry.identity.uaa.config.PasswordPolicyTest", "org.cloudfoundry.identity.uaa.login.ChangeEmailControllerTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.NonSnarlIdpMetadataManagerTest", "org.cloudfoundry.identity.uaa.account.event.PasswordChangeEventPublisherTests", "org.cloudfoundry.identity.uaa.db.StoreSubDomainAsLowerCase_V2_7_3_Tests", "org.cloudfoundry.identity.uaa.provider.saml.LoginSAMLAuthenticationFailureHandlerTest", "org.cloudfoundry.identity.uaa.db.TestDataSourcePool", "org.cloudfoundry.identity.uaa.authentication.AuthzAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.invitations.InvitationsControllerTest", "org.cloudfoundry.identity.uaa.error.UaaExceptionTests", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimUserBootstrapTests", "org.cloudfoundry.identity.uaa.config.IdentityProviderBootstrapTest", "org.cloudfoundry.identity.uaa.provider.saml.LoginSamlAuthenticationProviderTests", ":cloudfoundry-identity-server:classes", "org.cloudfoundry.identity.uaa.account.PasswordChangeEndpointTests", "org.cloudfoundry.identity.uaa.zone.event.ServiceProviderModifiedEventTest", ":cloudfoundry-identity-metrics-data:processResources", "org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationEndpointTest", "org.cloudfoundry.identity.uaa.test.UaaTestAccountsTest", "org.cloudfoundry.identity.uaa.provider.saml.ComparableProviderTest", ":cloudfoundry-identity-model:mainOutputResourcesDir", "org.cloudfoundry.identity.uaa.db.TestThatClientIdIsVchar255", "org.cloudfoundry.identity.uaa.login.SamlLoginServerKeyManagerTests", "org.cloudfoundry.identity.uaa.security.X509ExpiryCheckingTrustManagerTest", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeStoreTests", "org.cloudfoundry.identity.uaa.oauth.UserManagedAuthzApprovalHandlerTests", "org.cloudfoundry.identity.uaa.logging.LogSanitizerUtilTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.JdbcSamlServiceProviderProvisioningTest", "org.cloudfoundry.identity.uaa.oauth.AntPathRedirectResolverTests", "org.cloudfoundry.identity.uaa.util.UaaHttpRequestUtilsTest", "org.cloudfoundry.identity.uaa.web.HealthzEndpointTests", "/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", "org.cloudfoundry.identity.uaa.provider.IdentityProviderEndpointsTest", "org.cloudfoundry.identity.uaa.audit.event.SystemDeletableTest", "org.cloudfoundry.identity.uaa.login.UaaAuthenticationFailureHandlerTests", "/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", "org.cloudfoundry.identity.uaa.db.DatabaseParametersTests", "org.cloudfoundry.identity.uaa.user.JdbcUaaUserDatabaseTests", "org.cloudfoundry.identity.uaa.oauth.JdbcQueryableClientDetailsServiceTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpInitiatedLoginControllerTests", "org.cloudfoundry.identity.uaa.login.ForcePasswordChangeControllerTest", "org.cloudfoundry.identity.uaa.impl.config.ScimExternalGroupsTypeResolvingFactoryBeanTest", "org.cloudfoundry.identity.uaa.login.AutologinAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.invitations.InvitationsAuthenticationTrustResolverTest", "org.cloudfoundry.identity.uaa.account.ResetPasswordAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.scim.endpoints.UserIdConversionEndpointsTests", "org.cloudfoundry.identity.uaa.config.YamlConfigurationValidatorTests", ":cloudfoundry-identity-metrics-data:compileJava", "org.cloudfoundry.identity.uaa.util.DomainFilterTest", ":cloudfoundry-identity-metrics-data:jar", "org.cloudfoundry.identity.uaa.provider.saml.SamlIdentityProviderDefinitionTests", "org.cloudfoundry.identity.uaa.db.ExpiringCodeTableTest", "org.cloudfoundry.identity.uaa.login.HomeControllerViewTests", "org.cloudfoundry.identity.uaa.oauth.token.TokenKeyEndpointTests", "org.cloudfoundry.identity.uaa.oauth.AccessControllerTests", "org.cloudfoundry.identity.uaa.util.EnsureOldLibrariesAreRemoved", "org.cloudfoundry.identity.uaa.oauth.ZoneEndpointsClientDetailsValidatorTests", "org.cloudfoundry.identity.uaa.provider.ldap.ExtendedLdapUserMapperTest", "org.cloudfoundry.identity.uaa.scim.ScimUserTests", "org.cloudfoundry.identity.uaa.config.IdentityZoneConfigurationTests", ":cloudfoundry-identity-server:processTestResources", "org.cloudfoundry.identity.uaa.authentication.manager.PeriodLockoutPolicyTests", "org.cloudfoundry.identity.uaa.mfa_provider.GoogleMfaProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.mfa_provider.GeneralMfaProviderValidatorTest", "org.cloudfoundry.identity.uaa.audit.LoggingAuditServiceTest", "org.cloudfoundry.identity.uaa.db.OauthCodeIndexTest", "org.cloudfoundry.identity.uaa.oauth.jwt.ChainedSignatureVerifierTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ChangeEmailEndpointsTest", "org.cloudfoundry.identity.uaa.client.SourceTests", "org.cloudfoundry.identity.uaa.login.UaaResetPasswordServiceTests", "org.cloudfoundry.identity.uaa.config.EnvironmentPropertiesFactoryBeanTests", "org.cloudfoundry.identity.uaa.account.ResetPasswordAuthenticationEntryPointTests", "org.cloudfoundry.identity.uaa.authentication.manager.LdapLoginAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.provider.uaa.UaaIdentityProviderConfigValidatorTest", ":cloudfoundry-identity-model:compileJava", "org.cloudfoundry.identity.uaa.provider.KeystoneIdentityProviderDefinitionTest", "org.cloudfoundry.identity.uaa.audit.JdbcFailedLoginCountingAuditServiceTests", "org.cloudfoundry.identity.uaa.resources.jdbc.LimitSqlAdapterFactoryTest", "org.cloudfoundry.identity.uaa.config.YamlMapFactoryBeanTests", "org.cloudfoundry.identity.uaa.util.NullifyFieldsTest", "org.cloudfoundry.identity.uaa.oauth.UaaOauth2ErrorHandlerTests", "org.cloudfoundry.identity.uaa.provider.IdentityProviderConfigValidationDelegatorTest", "org.cloudfoundry.identity.uaa.login.NotificationsServiceTest", "org.cloudfoundry.identity.uaa.db.TestSchemaValidation", "org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationRequestManagerTests", "org.cloudfoundry.identity.uaa.authentication.ZoneAwareWhitelistLogoutHandlerTests", "org.cloudfoundry.identity.uaa.oauth.UaaUserApprovalHandlerTests", "org.cloudfoundry.identity.uaa.provider.LockoutPolicyTests", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthIdentityProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.oauth.RemoteTokenServicesTests", "org.cloudfoundry.identity.uaa.authentication.manager.KeystoneAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupMembershipManagerTests", "org.cloudfoundry.identity.uaa.login.UsernamePasswordExtractingAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.zone.GeneralIdentityZoneValidatorTests", "org.cloudfoundry.identity.uaa.util.UaaUrlUtilsTest", "org.cloudfoundry.identity.uaa.login.AccountSavingAuthenticationSuccessHandlerTest", "org.cloudfoundry.identity.uaa.web.HeaderFilterTest", "org.cloudfoundry.identity.uaa.zone.IdentityZoneSwitchingFilterTests", "org.cloudfoundry.identity.uaa.client.JdbcClientMetadataProvisioningTest", "org.cloudfoundry.identity.uaa.performance.TestMySQLEmailSearch", "org.cloudfoundry.identity.uaa.web.CookieBasedCsrfTokenRepositoryTests", "org.cloudfoundry.identity.uaa.client.ClientAdminEndpointsValidatorTests", "org.cloudfoundry.identity.uaa.web.UaaSavedRequestAwareAuthenticationSuccessHandlerTests", "org.cloudfoundry.identity.uaa.zone.JdbcIdentityProviderProvisioningTests", "org.cloudfoundry.identity.uaa.metrics.IdleTimerTests", "org.cloudfoundry.identity.uaa.util.KeyWithCertTest", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeTests", "org.cloudfoundry.identity.uaa.oauth.client.ClientDetailsModificationTests", "org.cloudfoundry.identity.uaa.util.TimeBasedExpiringValueMapTest", "org.cloudfoundry.identity.uaa.oauth.UaaScopesTests", "org.cloudfoundry.identity.uaa.web.HttpHeadersFilterRequestWrapperTest", "org.cloudfoundry.identity.uaa.audit.event.EntityDeletedEventTest", "org.cloudfoundry.identity.uaa.config.EnvironmentMapFactoryBeanTests", "org.cloudfoundry.identity.uaa.login.UaaChangePasswordServiceTest", "org.cloudfoundry.identity.uaa.oauth.jwt.JwtHelperTest", "org.cloudfoundry.identity.uaa.oauth.jwk.RsaJsonWebKeyTests", "org.cloudfoundry.identity.uaa.resources.jdbc.SimpleSearchQueryConverterTests"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_250", "original_commit_message": "[4.0.x] Fixed CVE-2021-45115 -- Prevented DoS vector in UserAttributeSimilarityValidator.\nThanks Chris Bailey for the report.\nCo-authored-by: Adam Johnson <me@adamj.eu>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/contrib/auth/password_validation.py b/django/contrib/auth/password_validation.py\nindex 7c9e75e62e..1e6e7eeb46 100644\n--- a/django/contrib/auth/password_validation.py\n+++ b/django/contrib/auth/password_validation.py\n@@ -115,6 +115,36 @@ class MinimumLengthValidator:\n         ) % {'min_length': self.min_length}\n \n \n+def exceeds_maximum_length_ratio(password, max_similarity, value):\n+    \"\"\"\n+    Test that value is within a reasonable range of password.\n+\n+    The following ratio calculations are based on testing SequenceMatcher like\n+    this:\n+\n+    for i in range(0,6):\n+      print(10**i, SequenceMatcher(a='A', b='A'*(10**i)).quick_ratio())\n+\n+    which yields:\n+\n+    1 1.0\n+    10 0.18181818181818182\n+    100 0.019801980198019802\n+    1000 0.001998001998001998\n+    10000 0.00019998000199980003\n+    100000 1.999980000199998e-05\n+\n+    This means a length_ratio of 10 should never yield a similarity higher than\n+    0.2, for 100 this is down to 0.02 and for 1000 it is 0.002. This can be\n+    calculated via 2 / length_ratio. As a result we avoid the potentially\n+    expensive sequence matching.\n+    \"\"\"\n+    pwd_len = len(password)\n+    length_bound_similarity = max_similarity / 2 * pwd_len\n+    value_len = len(value)\n+    return pwd_len >= 10 * value_len and value_len < length_bound_similarity\n+\n+\n class UserAttributeSimilarityValidator:\n     \"\"\"\n     Validate whether the password is sufficiently different from the user's\n@@ -130,19 +160,25 @@ class UserAttributeSimilarityValidator:\n \n     def __init__(self, user_attributes=DEFAULT_USER_ATTRIBUTES, max_similarity=0.7):\n         self.user_attributes = user_attributes\n+        if max_similarity < 0.1:\n+            raise ValueError('max_similarity must be at least 0.1')\n         self.max_similarity = max_similarity\n \n     def validate(self, password, user=None):\n         if not user:\n             return\n \n+        password = password.lower()\n         for attribute_name in self.user_attributes:\n             value = getattr(user, attribute_name, None)\n             if not value or not isinstance(value, str):\n                 continue\n-            value_parts = re.split(r'\\W+', value) + [value]\n+            value_lower = value.lower()\n+            value_parts = re.split(r'\\W+', value_lower) + [value_lower]\n             for value_part in value_parts:\n-                if SequenceMatcher(a=password.lower(), b=value_part.lower()).quick_ratio() >= self.max_similarity:\n+                if exceeds_maximum_length_ratio(password, self.max_similarity, value_part):\n+                    continue\n+                if SequenceMatcher(a=password, b=value_part).quick_ratio() >= self.max_similarity:\n                     try:\n                         verbose_name = str(user._meta.get_field(attribute_name).verbose_name)\n                     except FieldDoesNotExist:\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 393fbdd39c..f4aaf33052 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -150,13 +150,10 @@ class UserAttributeSimilarityValidatorTest(TestCase):\n                 max_similarity=1,\n             ).validate(user.first_name, user=user)\n         self.assertEqual(cm.exception.messages, [expected_error % \"first name\"])\n-        # max_similarity=0 rejects all passwords.\n-        with self.assertRaises(ValidationError) as cm:\n-            UserAttributeSimilarityValidator(\n-                user_attributes=['first_name'],\n-                max_similarity=0,\n-            ).validate('XXX', user=user)\n-        self.assertEqual(cm.exception.messages, [expected_error % \"first name\"])\n+        # Very low max_similarity is rejected.\n+        msg = 'max_similarity must be at least 0.1'\n+        with self.assertRaisesMessage(ValueError, msg):\n+            UserAttributeSimilarityValidator(max_similarity=0.09)\n         # Passes validation.\n         self.assertIsNone(\n             UserAttributeSimilarityValidator(user_attributes=['first_name']).validate('testclient', user=user)\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "df79ef03ac867c93caaa6be56bc69e66abfeef8f", "source_date": "Tue Jan 4 10:10:14 2022 +0100", "source_tag": "4.0.1", "target_commit": "a8b32fe13bcaed1c0b772fdc53de84abc224fb20", "target_date": "Tue Jan 4 10:19:49 2022 +0100", "target_tag": "3.2.11", "FAIL TO PASS": ["auth_tests.test_validators.UserAttributeSimilarityValidatorTest.test_validate"], "PASS TO PASS": ["auth_tests.test_validators.UserAttributeSimilarityValidatorTest.test_help_text", "auth_tests.test_validators.CommonPasswordValidatorTest.test_validate", "auth_tests.test_validators.PasswordValidationTest.test_password_changed", "auth_tests.test_validators.CommonPasswordValidatorTest.test_validate_django_supplied_file", "auth_tests.test_validators.UserAttributeSimilarityValidatorTest.test_validate_property", "auth_tests.test_validators.NumericPasswordValidatorTest.test_validate", "auth_tests.test_validators.UsernameValidatorsTests.test_unicode_validator", "auth_tests.test_validators.MinimumLengthValidatorTest.test_help_text", "auth_tests.test_validators.PasswordValidationTest.test_password_validators_help_texts", "auth_tests.test_validators.PasswordValidationTest.test_password_validators_help_text_html", "auth_tests.test_validators.PasswordValidationTest.test_validate_password", "auth_tests.test_validators.MinimumLengthValidatorTest.test_validate", "auth_tests.test_validators.CommonPasswordValidatorTest.test_validate_custom_list", "auth_tests.test_validators.CommonPasswordValidatorTest.test_help_text", "auth_tests.test_validators.PasswordValidationTest.test_get_default_password_validators", "auth_tests.test_validators.PasswordValidationTest.test_empty_password_validator_help_text_html", "auth_tests.test_validators.PasswordValidationTest.test_get_password_validators_custom", "auth_tests.test_validators.PasswordValidationTest.test_password_validators_help_text_html_escaping", "auth_tests.test_validators.NumericPasswordValidatorTest.test_help_text", "auth_tests.test_validators.PasswordValidationTest.test_password_changed_with_custom_validator", "auth_tests.test_validators.UsernameValidatorsTests.test_ascii_validator"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_251", "original_commit_message": "[4.0.x] Fixed CVE-2021-45115 -- Prevented DoS vector in UserAttributeSimilarityValidator.\nThanks Chris Bailey for the report.\nCo-authored-by: Adam Johnson <me@adamj.eu>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/contrib/auth/password_validation.py b/django/contrib/auth/password_validation.py\nindex 7c9e75e62e..1e6e7eeb46 100644\n--- a/django/contrib/auth/password_validation.py\n+++ b/django/contrib/auth/password_validation.py\n@@ -115,6 +115,36 @@ class MinimumLengthValidator:\n         ) % {'min_length': self.min_length}\n \n \n+def exceeds_maximum_length_ratio(password, max_similarity, value):\n+    \"\"\"\n+    Test that value is within a reasonable range of password.\n+\n+    The following ratio calculations are based on testing SequenceMatcher like\n+    this:\n+\n+    for i in range(0,6):\n+      print(10**i, SequenceMatcher(a='A', b='A'*(10**i)).quick_ratio())\n+\n+    which yields:\n+\n+    1 1.0\n+    10 0.18181818181818182\n+    100 0.019801980198019802\n+    1000 0.001998001998001998\n+    10000 0.00019998000199980003\n+    100000 1.999980000199998e-05\n+\n+    This means a length_ratio of 10 should never yield a similarity higher than\n+    0.2, for 100 this is down to 0.02 and for 1000 it is 0.002. This can be\n+    calculated via 2 / length_ratio. As a result we avoid the potentially\n+    expensive sequence matching.\n+    \"\"\"\n+    pwd_len = len(password)\n+    length_bound_similarity = max_similarity / 2 * pwd_len\n+    value_len = len(value)\n+    return pwd_len >= 10 * value_len and value_len < length_bound_similarity\n+\n+\n class UserAttributeSimilarityValidator:\n     \"\"\"\n     Validate whether the password is sufficiently different from the user's\n@@ -130,19 +160,25 @@ class UserAttributeSimilarityValidator:\n \n     def __init__(self, user_attributes=DEFAULT_USER_ATTRIBUTES, max_similarity=0.7):\n         self.user_attributes = user_attributes\n+        if max_similarity < 0.1:\n+            raise ValueError('max_similarity must be at least 0.1')\n         self.max_similarity = max_similarity\n \n     def validate(self, password, user=None):\n         if not user:\n             return\n \n+        password = password.lower()\n         for attribute_name in self.user_attributes:\n             value = getattr(user, attribute_name, None)\n             if not value or not isinstance(value, str):\n                 continue\n-            value_parts = re.split(r'\\W+', value) + [value]\n+            value_lower = value.lower()\n+            value_parts = re.split(r'\\W+', value_lower) + [value_lower]\n             for value_part in value_parts:\n-                if SequenceMatcher(a=password.lower(), b=value_part.lower()).quick_ratio() >= self.max_similarity:\n+                if exceeds_maximum_length_ratio(password, self.max_similarity, value_part):\n+                    continue\n+                if SequenceMatcher(a=password, b=value_part).quick_ratio() >= self.max_similarity:\n                     try:\n                         verbose_name = str(user._meta.get_field(attribute_name).verbose_name)\n                     except FieldDoesNotExist:\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 393fbdd39c..f4aaf33052 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -150,13 +150,10 @@ class UserAttributeSimilarityValidatorTest(TestCase):\n                 max_similarity=1,\n             ).validate(user.first_name, user=user)\n         self.assertEqual(cm.exception.messages, [expected_error % \"first name\"])\n-        # max_similarity=0 rejects all passwords.\n-        with self.assertRaises(ValidationError) as cm:\n-            UserAttributeSimilarityValidator(\n-                user_attributes=['first_name'],\n-                max_similarity=0,\n-            ).validate('XXX', user=user)\n-        self.assertEqual(cm.exception.messages, [expected_error % \"first name\"])\n+        # Very low max_similarity is rejected.\n+        msg = 'max_similarity must be at least 0.1'\n+        with self.assertRaisesMessage(ValueError, msg):\n+            UserAttributeSimilarityValidator(max_similarity=0.09)\n         # Passes validation.\n         self.assertIsNone(\n             UserAttributeSimilarityValidator(user_attributes=['first_name']).validate('testclient', user=user)\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "df79ef03ac867c93caaa6be56bc69e66abfeef8f", "source_date": "Tue Jan 4 10:10:14 2022 +0100", "source_tag": "4.0.1", "target_commit": "2135637fdd5ce994de110affef9e67dffdf77277", "target_date": "Tue Jan 4 10:20:31 2022 +0100", "target_tag": "2.2.26", "FAIL TO PASS": ["auth_tests.test_validators.UserAttributeSimilarityValidatorTest.test_validate"], "PASS TO PASS": ["auth_tests.test_validators.UserAttributeSimilarityValidatorTest.test_help_text", "auth_tests.test_validators.CommonPasswordValidatorTest.test_validate", "auth_tests.test_validators.PasswordValidationTest.test_password_changed", "auth_tests.test_validators.CommonPasswordValidatorTest.test_validate_django_supplied_file", "auth_tests.test_validators.UserAttributeSimilarityValidatorTest.test_validate_property", "auth_tests.test_validators.NumericPasswordValidatorTest.test_validate", "auth_tests.test_validators.UsernameValidatorsTests.test_unicode_validator", "auth_tests.test_validators.MinimumLengthValidatorTest.test_help_text", "auth_tests.test_validators.PasswordValidationTest.test_password_validators_help_texts", "auth_tests.test_validators.PasswordValidationTest.test_password_validators_help_text_html", "auth_tests.test_validators.PasswordValidationTest.test_validate_password", "auth_tests.test_validators.MinimumLengthValidatorTest.test_validate", "auth_tests.test_validators.CommonPasswordValidatorTest.test_validate_custom_list", "auth_tests.test_validators.CommonPasswordValidatorTest.test_help_text", "auth_tests.test_validators.PasswordValidationTest.test_get_default_password_validators", "auth_tests.test_validators.PasswordValidationTest.test_empty_password_validator_help_text_html", "auth_tests.test_validators.PasswordValidationTest.test_get_password_validators_custom", "auth_tests.test_validators.PasswordValidationTest.test_password_validators_help_text_html_escaping", "auth_tests.test_validators.NumericPasswordValidatorTest.test_help_text", "auth_tests.test_validators.PasswordValidationTest.test_password_changed_with_custom_validator", "auth_tests.test_validators.UsernameValidatorsTests.test_ascii_validator"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_258", "original_commit_message": "[2.1.x] Fixed CVE-2018-14574 -- Fixed open redirect possibility in CommonMiddleware.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/middleware/common.py b/django/middleware/common.py\nindex bea3f7448a..a18fbe7b47 100644\n--- a/django/middleware/common.py\n+++ b/django/middleware/common.py\n@@ -7,6 +7,7 @@ from django.core.mail import mail_managers\n from django.http import HttpResponsePermanentRedirect\n from django.urls import is_valid_path\n from django.utils.deprecation import MiddlewareMixin\n+from django.utils.http import escape_leading_slashes\n \n \n class CommonMiddleware(MiddlewareMixin):\n@@ -79,6 +80,8 @@ class CommonMiddleware(MiddlewareMixin):\n         POST, PUT, or PATCH.\n         \"\"\"\n         new_path = request.get_full_path(force_append_slash=True)\n+        # Prevent construction of scheme relative urls.\n+        new_path = escape_leading_slashes(new_path)\n         if settings.DEBUG and request.method in ('POST', 'PUT', 'PATCH'):\n             raise RuntimeError(\n                 \"You called this URL via %(method)s, but the URL doesn't end \"\n\ndiff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex ce8c7ffa32..5bfab0c067 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -17,7 +17,7 @@ from django.core.checks.urls import check_resolver\n from django.core.exceptions import ImproperlyConfigured\n from django.utils.datastructures import MultiValueDict\n from django.utils.functional import cached_property\n-from django.utils.http import RFC3986_SUBDELIMS\n+from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes\n from django.utils.regex_helper import normalize\n from django.utils.translation import get_language\n \n@@ -592,9 +592,7 @@ class URLResolver:\n                     # safe characters from `pchar` definition of RFC 3986\n                     url = quote(candidate_pat % text_candidate_subs, safe=RFC3986_SUBDELIMS + '/~:@')\n                     # Don't allow construction of scheme relative urls.\n-                    if url.startswith('//'):\n-                        url = '/%%2F%s' % url[2:]\n-                    return url\n+                    return escape_leading_slashes(url)\n         # lookup_view can be URL name or callable, but callables are not\n         # friendly in error messages.\n         m = getattr(lookup_view, '__module__', None)\n\ndiff --git a/django/utils/http.py b/django/utils/http.py\nindex 4558c6874a..e33ec7362b 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -433,3 +433,14 @@ def limited_parse_qsl(qs, keep_blank_values=False, encoding='utf-8',\n             value = unquote(value, encoding=encoding, errors=errors)\n             r.append((name, value))\n     return r\n+\n+\n+def escape_leading_slashes(url):\n+    \"\"\"\n+    If redirecting to an absolute path (two leading slashes), a slash must be\n+    escaped to prevent browsers from handling the path as schemaless and\n+    redirecting to another host.\n+    \"\"\"\n+    if url.startswith('//'):\n+        url = '/%2F{}'.format(url[2:])\n+    return url\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/middleware/tests.py b/tests/middleware/tests.py\nindex f3c8b9ca06..88e33348e6 100644\n--- a/tests/middleware/tests.py\n+++ b/tests/middleware/tests.py\n@@ -130,6 +130,25 @@ class CommonMiddlewareTest(SimpleTestCase):\n         self.assertEqual(r.status_code, 301)\n         self.assertEqual(r.url, '/needsquoting%23/')\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_leading_slashes(self):\n+        \"\"\"\n+        Paths starting with two slashes are escaped to prevent open redirects.\n+        If there's a URL pattern that allows paths to start with two slashes, a\n+        request with path //evil.com must not redirect to //evil.com/ (appended\n+        slash) which is a schemaless absolute URL. The browser would navigate\n+        to evil.com/.\n+        \"\"\"\n+        # Use 4 slashes because of RequestFactory behavior.\n+        request = self.rf.get('////evil.com/security')\n+        response = HttpResponseNotFound()\n+        r = CommonMiddleware().process_request(request)\n+        self.assertEqual(r.status_code, 301)\n+        self.assertEqual(r.url, '/%2Fevil.com/security/')\n+        r = CommonMiddleware().process_response(request, response)\n+        self.assertEqual(r.status_code, 301)\n+        self.assertEqual(r.url, '/%2Fevil.com/security/')\n+\n     @override_settings(APPEND_SLASH=False, PREPEND_WWW=True)\n     def test_prepend_www(self):\n         request = self.rf.get('/path/')\n\ndiff --git a/tests/middleware/urls.py b/tests/middleware/urls.py\nindex 8c6621d059..d623e7d6af 100644\n--- a/tests/middleware/urls.py\n+++ b/tests/middleware/urls.py\n@@ -6,4 +6,6 @@ urlpatterns = [\n     url(r'^noslash$', views.empty_view),\n     url(r'^slash/$', views.empty_view),\n     url(r'^needsquoting#/$', views.empty_view),\n+    # Accepts paths with two leading slashes.\n+    url(r'^(.+)/security/$', views.empty_view),\n ]\n\ndiff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex 86fcff9d8e..d2a68ccd69 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -5,10 +5,10 @@ from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n from django.utils.deprecation import RemovedInDjango30Warning\n from django.utils.http import (\n-    base36_to_int, cookie_date, http_date, int_to_base36, is_safe_url,\n-    is_same_domain, parse_etags, parse_http_date, quote_etag, urlencode,\n-    urlquote, urlquote_plus, urlsafe_base64_decode, urlsafe_base64_encode,\n-    urlunquote, urlunquote_plus,\n+    base36_to_int, cookie_date, escape_leading_slashes, http_date,\n+    int_to_base36, is_safe_url, is_same_domain, parse_etags, parse_http_date,\n+    quote_etag, urlencode, urlquote, urlquote_plus, urlsafe_base64_decode,\n+    urlsafe_base64_encode, urlunquote, urlunquote_plus,\n )\n \n \n@@ -271,3 +271,14 @@ class HttpDateProcessingTests(unittest.TestCase):\n     def test_parsing_asctime(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n+\n+\n+class EscapeLeadingSlashesTests(unittest.TestCase):\n+    def test(self):\n+        tests = (\n+            ('//example.com', '/%2Fexample.com'),\n+            ('//', '/%2F'),\n+        )\n+        for url, expected in tests:\n+            with self.subTest(url=url):\n+                self.assertEqual(escape_leading_slashes(url), expected)\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "c4e5ff7fdb5fce447675e90291fd33fddd052b3c", "source_date": "Wed Aug 1 09:35:09 2018 -0400", "source_tag": "2.1", "target_commit": "6fffc3c6d420e44f4029d5643f38d00a39b08525", "target_date": "Tue Jul 31 10:37:29 2018 -0400", "target_tag": "2.0.8", "FAIL TO PASS": ["unittest.loader._FailedTest.test_http"], "PASS TO PASS": ["middleware.test_security.SecurityMiddlewareTest.test_sts_off", "middleware.test_security.SecurityMiddlewareTest.test_content_type_on", "middleware.test_security.SecurityMiddlewareTest.test_sts_no_preload", "middleware.test_security.SecurityMiddlewareTest.test_ssl_redirect_on", "middleware.test_security.SecurityMiddlewareTest.test_no_redirect_ssl", "middleware.tests.ETagGZipMiddlewareTest.test_etag_match", "middleware.test_security.SecurityMiddlewareTest.test_content_type_already_present", "middleware.test_security.SecurityMiddlewareTest.test_redirect_ssl_host", "middleware.tests.XFrameOptionsMiddlewareTest.test_response_exempt", "middleware.tests.GZipMiddlewareTest.test_no_compress_short_response", "middleware.test_security.SecurityMiddlewareTest.test_xss_filter_on", "middleware.tests.ETagGZipMiddlewareTest.test_weak_etag_not_modified", "middleware.tests.GZipMiddlewareTest.test_compress_non_200_response", "middleware.test_security.SecurityMiddlewareTest.test_sts_no_include_subdomains", "middleware.test_security.SecurityMiddlewareTest.test_xss_filter_off", "middleware.tests.XFrameOptionsMiddlewareTest.test_is_extendable", "middleware.test_security.SecurityMiddlewareTest.test_sts_on", "middleware.test_security.SecurityMiddlewareTest.test_xss_filter_already_present", "middleware.tests.GZipMiddlewareTest.test_no_compress_incompressible_response", "middleware.tests.GZipMiddlewareTest.test_compress_file_response", "middleware.tests.GZipMiddlewareTest.test_compress_streaming_response", "middleware.test_security.SecurityMiddlewareTest.test_redirect_exempt", "middleware.tests.GZipMiddlewareTest.test_no_compress_compressed_response", "middleware.test_security.SecurityMiddlewareTest.test_sts_preload", "middleware.test_security.SecurityMiddlewareTest.test_sts_subdomains_and_preload", "middleware.test_security.SecurityMiddlewareTest.test_content_type_off", "middleware.tests.XFrameOptionsMiddlewareTest.test_same_origin", "middleware.tests.XFrameOptionsMiddlewareTest.test_defaults_sameorigin", "middleware.tests.GZipMiddlewareTest.test_compress_deterministic", "middleware.tests.GZipMiddlewareTest.test_compress_streaming_response_unicode", "middleware.test_security.SecurityMiddlewareTest.test_sts_include_subdomains", "middleware.test_security.SecurityMiddlewareTest.test_ssl_redirect_off", "middleware.tests.XFrameOptionsMiddlewareTest.test_dont_set_if_set", "middleware.tests.GZipMiddlewareTest.test_compress_response", "middleware.tests.XFrameOptionsMiddlewareTest.test_deny", "middleware.test_security.SecurityMiddlewareTest.test_sts_already_present", "middleware.test_security.SecurityMiddlewareTest.test_sts_only_if_secure", "middleware.tests.ETagGZipMiddlewareTest.test_strong_etag_modified"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_260", "original_commit_message": "[2.1.x] Fixed CVE-2018-14574 -- Fixed open redirect possibility in CommonMiddleware.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/middleware/common.py b/django/middleware/common.py\nindex bea3f7448a..a18fbe7b47 100644\n--- a/django/middleware/common.py\n+++ b/django/middleware/common.py\n@@ -7,6 +7,7 @@ from django.core.mail import mail_managers\n from django.http import HttpResponsePermanentRedirect\n from django.urls import is_valid_path\n from django.utils.deprecation import MiddlewareMixin\n+from django.utils.http import escape_leading_slashes\n \n \n class CommonMiddleware(MiddlewareMixin):\n@@ -79,6 +80,8 @@ class CommonMiddleware(MiddlewareMixin):\n         POST, PUT, or PATCH.\n         \"\"\"\n         new_path = request.get_full_path(force_append_slash=True)\n+        # Prevent construction of scheme relative urls.\n+        new_path = escape_leading_slashes(new_path)\n         if settings.DEBUG and request.method in ('POST', 'PUT', 'PATCH'):\n             raise RuntimeError(\n                 \"You called this URL via %(method)s, but the URL doesn't end \"\n\ndiff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex ce8c7ffa32..5bfab0c067 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -17,7 +17,7 @@ from django.core.checks.urls import check_resolver\n from django.core.exceptions import ImproperlyConfigured\n from django.utils.datastructures import MultiValueDict\n from django.utils.functional import cached_property\n-from django.utils.http import RFC3986_SUBDELIMS\n+from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes\n from django.utils.regex_helper import normalize\n from django.utils.translation import get_language\n \n@@ -592,9 +592,7 @@ class URLResolver:\n                     # safe characters from `pchar` definition of RFC 3986\n                     url = quote(candidate_pat % text_candidate_subs, safe=RFC3986_SUBDELIMS + '/~:@')\n                     # Don't allow construction of scheme relative urls.\n-                    if url.startswith('//'):\n-                        url = '/%%2F%s' % url[2:]\n-                    return url\n+                    return escape_leading_slashes(url)\n         # lookup_view can be URL name or callable, but callables are not\n         # friendly in error messages.\n         m = getattr(lookup_view, '__module__', None)\n\ndiff --git a/django/utils/http.py b/django/utils/http.py\nindex 4558c6874a..e33ec7362b 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -433,3 +433,14 @@ def limited_parse_qsl(qs, keep_blank_values=False, encoding='utf-8',\n             value = unquote(value, encoding=encoding, errors=errors)\n             r.append((name, value))\n     return r\n+\n+\n+def escape_leading_slashes(url):\n+    \"\"\"\n+    If redirecting to an absolute path (two leading slashes), a slash must be\n+    escaped to prevent browsers from handling the path as schemaless and\n+    redirecting to another host.\n+    \"\"\"\n+    if url.startswith('//'):\n+        url = '/%2F{}'.format(url[2:])\n+    return url\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/middleware/tests.py b/tests/middleware/tests.py\nindex f3c8b9ca06..88e33348e6 100644\n--- a/tests/middleware/tests.py\n+++ b/tests/middleware/tests.py\n@@ -130,6 +130,25 @@ class CommonMiddlewareTest(SimpleTestCase):\n         self.assertEqual(r.status_code, 301)\n         self.assertEqual(r.url, '/needsquoting%23/')\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_append_slash_leading_slashes(self):\n+        \"\"\"\n+        Paths starting with two slashes are escaped to prevent open redirects.\n+        If there's a URL pattern that allows paths to start with two slashes, a\n+        request with path //evil.com must not redirect to //evil.com/ (appended\n+        slash) which is a schemaless absolute URL. The browser would navigate\n+        to evil.com/.\n+        \"\"\"\n+        # Use 4 slashes because of RequestFactory behavior.\n+        request = self.rf.get('////evil.com/security')\n+        response = HttpResponseNotFound()\n+        r = CommonMiddleware().process_request(request)\n+        self.assertEqual(r.status_code, 301)\n+        self.assertEqual(r.url, '/%2Fevil.com/security/')\n+        r = CommonMiddleware().process_response(request, response)\n+        self.assertEqual(r.status_code, 301)\n+        self.assertEqual(r.url, '/%2Fevil.com/security/')\n+\n     @override_settings(APPEND_SLASH=False, PREPEND_WWW=True)\n     def test_prepend_www(self):\n         request = self.rf.get('/path/')\n\ndiff --git a/tests/middleware/urls.py b/tests/middleware/urls.py\nindex 8c6621d059..d623e7d6af 100644\n--- a/tests/middleware/urls.py\n+++ b/tests/middleware/urls.py\n@@ -6,4 +6,6 @@ urlpatterns = [\n     url(r'^noslash$', views.empty_view),\n     url(r'^slash/$', views.empty_view),\n     url(r'^needsquoting#/$', views.empty_view),\n+    # Accepts paths with two leading slashes.\n+    url(r'^(.+)/security/$', views.empty_view),\n ]\n\ndiff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex 86fcff9d8e..d2a68ccd69 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -5,10 +5,10 @@ from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n from django.utils.deprecation import RemovedInDjango30Warning\n from django.utils.http import (\n-    base36_to_int, cookie_date, http_date, int_to_base36, is_safe_url,\n-    is_same_domain, parse_etags, parse_http_date, quote_etag, urlencode,\n-    urlquote, urlquote_plus, urlsafe_base64_decode, urlsafe_base64_encode,\n-    urlunquote, urlunquote_plus,\n+    base36_to_int, cookie_date, escape_leading_slashes, http_date,\n+    int_to_base36, is_safe_url, is_same_domain, parse_etags, parse_http_date,\n+    quote_etag, urlencode, urlquote, urlquote_plus, urlsafe_base64_decode,\n+    urlsafe_base64_encode, urlunquote, urlunquote_plus,\n )\n \n \n@@ -271,3 +271,14 @@ class HttpDateProcessingTests(unittest.TestCase):\n     def test_parsing_asctime(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n+\n+\n+class EscapeLeadingSlashesTests(unittest.TestCase):\n+    def test(self):\n+        tests = (\n+            ('//example.com', '/%2Fexample.com'),\n+            ('//', '/%2F'),\n+        )\n+        for url, expected in tests:\n+            with self.subTest(url=url):\n+                self.assertEqual(escape_leading_slashes(url), expected)\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location & namespace changes", "source_commit": "c4e5ff7fdb5fce447675e90291fd33fddd052b3c", "source_date": "Wed Aug 1 09:35:09 2018 -0400", "source_tag": "2.1", "target_commit": "d6eaee092709aad477a9894598496c6deec532ff", "target_date": "Wed Jul 25 12:13:03 2018 -0400", "target_tag": "1.11.15", "FAIL TO PASS": ["utils_tests.test_http.EscapeLeadingSlashesTests.test", "middleware.tests.CommonMiddlewareTest.test_append_slash_leading_slashes"], "PASS TO PASS": ["middleware.tests.CommonMiddlewareTest.test_etag_streaming_response", "middleware.tests.CommonMiddlewareTest.test_append_slash_redirect_querystring", "middleware.test_security.SecurityMiddlewareTest.test_no_redirect_ssl", "middleware.tests.ConditionalGetMiddlewareTest.test_if_modified_since_and_last_modified_in_the_future", "middleware.tests.ETagGZipMiddlewareTest.test_etag_match", "middleware.tests.CommonMiddlewareTest.test_prepend_www_append_slash_have_slash_custom_urlconf", "utils_tests.test_http.TestUtilsHttp.test_is_safe_url", "middleware.tests.BrokenLinkEmailsMiddlewareTest.test_referer_equal_to_requested_url_without_trailing_slash_when_append_slash_is_set", "middleware.test_security.SecurityMiddlewareTest.test_xss_filter_off", "middleware.tests.CommonMiddlewareTest.test_append_slash_no_redirect_on_POST_in_DEBUG", "middleware.tests.ConditionalGetMiddlewareTest.test_if_none_match_and_redirect", "utils_tests.test_http.HttpDateProcessingTests.test_parsing_rfc850", "middleware.test_security.SecurityMiddlewareTest.test_xss_filter_already_present", "middleware.tests.GZipMiddlewareTest.test_no_compress_incompressible_response", "middleware.tests.CommonMiddlewareTest.test_append_slash_have_slash", "utils_tests.test_http.TestUtilsHttp.test_urlencode", "middleware.tests.BrokenLinkEmailsMiddlewareTest.test_referer_equal_to_requested_url_without_trailing_slash_when_append_slash_is_unset", "middleware.tests.CommonMiddlewareTest.test_append_slash_slashless_unknown_custom_urlconf", "Regression test for #15152", "middleware.tests.CommonMiddlewareTest.test_append_slash_slashless_unknown", "middleware.tests.ConditionalGetMiddlewareTest.test_no_if_none_match_and_etag", "utils_tests.test_http.TestUtilsHttp.test_is_same_domain_good", "middleware.tests.ConditionalGetMiddlewareTest.test_middleware_wont_overwrite_etag", "middleware.tests.XFrameOptionsMiddlewareTest.test_same_origin", "middleware.test_security.SecurityMiddlewareTest.test_sts_include_subdomains", "middleware.tests.ConditionalGetMiddlewareTest.test_no_unsafe", "utils_tests.test_http.HttpDateProcessingTests.test_cookie_date", "middleware.tests.GZipMiddlewareTest.test_compress_response", "middleware.tests.CommonMiddlewareTest.test_no_etag_streaming_response", "middleware.tests.GZipMiddlewareTest.test_no_compress_compressed_response", "middleware.test_security.SecurityMiddlewareTest.test_sts_only_if_secure", "middleware.tests.BrokenLinkEmailsMiddlewareTest.test_404_error_reporting", "middleware.test_security.SecurityMiddlewareTest.test_ssl_redirect_on", "middleware.tests.ConditionalGetMiddlewareTest.test_no_if_modified_since_and_last_modified", "middleware.tests.CommonMiddlewareTest.test_prepend_www_append_slash_slashless", "middleware.tests.CommonMiddlewareTest.test_prepend_www_append_slash_have_slash", "utils_tests.test_http.TestUtilsHttp.test_is_safe_url_secure_param_https_urls", "middleware.tests.CommonMiddlewareTest.test_response_redirect_class", "middleware.tests.CommonMiddlewareTest.test_content_length_header_added", "middleware.tests.XFrameOptionsMiddlewareTest.test_response_exempt", "middleware.tests.ETagGZipMiddlewareTest.test_weak_etag_not_modified", "middleware.tests.GZipMiddlewareTest.test_compress_non_200_response", "middleware.tests.XFrameOptionsMiddlewareTest.test_is_extendable", "middleware.tests.ConditionalGetMiddlewareTest.test_not_modified_headers", "middleware.test_security.SecurityMiddlewareTest.test_redirect_exempt", "middleware.tests.CommonMiddlewareTest.test_append_slash_slashless_resource", "middleware.tests.ConditionalGetMiddlewareTest.test_if_none_match_and_no_etag", "middleware.tests.CommonMiddlewareTest.test_prepend_www", "utils_tests.test_http.ETagProcessingTests.test_quoting", "middleware.tests.CommonMiddlewareTest.test_response_redirect_class_subclass", "middleware.tests.XFrameOptionsMiddlewareTest.test_defaults_sameorigin", "middleware.tests.GZipMiddlewareTest.test_compress_streaming_response_unicode", "middleware.test_security.SecurityMiddlewareTest.test_sts_already_present", "middleware.tests.ConditionalGetMiddlewareTest.test_no_etag_no_store_cache", "middleware.test_security.SecurityMiddlewareTest.test_sts_off", "middleware.tests.ConditionalGetMiddlewareTest.test_if_modified_since_and_no_last_modified", "middleware.tests.BrokenLinkEmailsMiddlewareTest.test_referer_equal_to_requested_url_on_another_domain", "middleware.test_security.SecurityMiddlewareTest.test_sts_no_preload", "middleware.tests.CommonMiddlewareTest.test_if_none_match", "middleware.tests.ConditionalGetMiddlewareTest.test_no_head", "utils_tests.test_http.HttpDateProcessingTests.test_http_date", "middleware.test_security.SecurityMiddlewareTest.test_redirect_ssl_host", "middleware.tests.CommonMiddlewareTest.test_disallowed_user_agents", "middleware.test_security.SecurityMiddlewareTest.test_xss_filter_on", "middleware.tests.CommonMiddlewareTest.test_etag_extended_cache_control", "middleware.tests.CommonMiddlewareTest.test_append_slash_disabled", "middleware.tests.CommonMiddlewareTest.test_no_etag_no_store_cache", "middleware.tests.CommonMiddlewareTest.test_append_slash_redirect_querystring_have_slash", "utils_tests.test_http.HttpDateProcessingTests.test_parsing_asctime", "middleware.tests.GZipMiddlewareTest.test_compress_file_response", "middleware.tests.CommonMiddlewareTest.test_append_slash_redirect", "middleware.tests.GZipMiddlewareTest.test_compress_streaming_response", "middleware.tests.CommonMiddlewareTest.test_content_length_header_not_changed", "middleware.tests.ConditionalGetMiddlewareTest.test_if_none_match_and_same_etag", "middleware.tests.ConditionalGetMiddlewareTest.test_middleware_calculates_etag", "middleware.test_security.SecurityMiddlewareTest.test_sts_preload", "middleware.test_security.SecurityMiddlewareTest.test_sts_subdomains_and_preload", "utils_tests.test_http.ETagProcessingTests.  Applying sites.0002_alter_domain_unique...test_parsing", "middleware.tests.ConditionalGetMiddlewareTest.test_if_modified_since_and_same_last_modified", "middleware.tests.ConditionalGetMiddlewareTest.test_if_none_match_and_client_error", "middleware.tests.GZipMiddlewareTest.test_compress_deterministic", "middleware.tests.CommonMiddlewareTest.test_etag", "utils_tests.test_http.TestUtilsHttp.test_base36", "middleware.tests.XFrameOptionsMiddlewareTest.test_deny", "middleware.tests.BrokenLinkEmailsMiddlewareTest.test_404_error_reporting_no_referer", "utils_tests.test_http.TestUtilsHttp.test_is_safe_url_secure_param_non_https_urls", "middleware.tests.ConditionalGetMiddlewareTest.test_if_modified_since_and_last_modified_in_the_past", "middleware.tests.ConditionalGetMiddlewareTest.test_if_modified_since_and_client_error", "middleware.test_security.SecurityMiddlewareTest.test_content_type_on", "middleware.tests.CommonMiddlewareTest.test_append_slash_disabled_custom_urlconf", "middleware.tests.CommonMiddlewareTest.test_content_length_header_not_added_for_streaming_response", "middleware.tests.CommonMiddlewareTest.test_append_slash_quoted", "middleware.tests.CommonMiddlewareTest.test_append_slash_redirect_custom_urlconf", "middleware.tests.BrokenLinkEmailsMiddlewareTest.test_custom_request_checker", "middleware.tests.BrokenLinkEmailsMiddlewareTest.test_referer_equal_to_requested_url", "middleware.tests.CommonMiddlewareTest.test_append_slash_no_redirect_on_POST_in_DEBUG_custom_urlconf", "middleware.tests.GZipMiddlewareTest.test_no_compress_short_response", "middleware.tests.ConditionalGetMiddlewareTest.test_etag_extended_cache_control", "middleware.tests.CommonMiddlewareTest.test_prepend_www_append_slash_slashless_custom_urlconf", "middleware.test_security.SecurityMiddlewareTest.test_sts_no_include_subdomains", "middleware.tests.ConditionalGetMiddlewareTest.test_no_etag_streaming_response", "middleware.test_security.SecurityMiddlewareTest.test_sts_on", "middleware.tests.ConditionalGetMiddlewareTest.test_if_modified_since_and_redirect", "middleware.tests.CommonMiddlewareTest.test_append_slash_have_slash_custom_urlconf", "utils_tests.test_http.TestUtilsHttp.test_is_same_domain_bad", "middleware.tests.ConditionalGetMiddlewareTest.test_if_none_match_and_different_etag", "middleware.tests.CommonMiddlewareTest.test_append_slash_slashless_resource_custom_urlconf", "middleware.test_security.SecurityMiddlewareTest.  Applying sites.0002_alter_domain_unique...test_content_type_already_present", "utils_tests.test_http.TestUtilsHttp.test_urlsafe_base64_roundtrip", "middleware.tests.CommonMiddlewareTest.test_prepend_www_custom_urlconf", "middleware.test_security.SecurityMiddlewareTest.test_content_type_off", "middleware.tests.BrokenLinkEmailsMiddlewareTest.test_404_error_reporting_ignored_url", "utils_tests.test_http.HttpDateProcessingTests.test_parsing_rfc1123", "middleware.test_security.SecurityMiddlewareTest.test_ssl_redirect_off", "middleware.tests.XFrameOptionsMiddlewareTest.test_dont_set_if_set", "middleware.tests.CommonMiddlewareTest.test_append_slash_quoted_custom_urlconf", "utils_tests.test_http.TestUtilsHttp.test_urlquote", "middleware.tests.ETagGZipMiddlewareTest.test_strong_etag_modified"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_261", "original_commit_message": "[1.2.X]  Fixed a security issue in the CSRF componenent.  Disclosure and new release forthcoming.\ngit-svn-id: http://code.djangoproject.com/svn/django/branches/releases/1.2.X@15465 bcc190cf-cafb-0310-a4f2-bffc1f526a37", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/middleware/csrf.py b/django/middleware/csrf.py\nindex 67b02f04f1..2853e6eb43 100644\n--- a/django/middleware/csrf.py\n+++ b/django/middleware/csrf.py\n@@ -97,6 +97,7 @@ class CsrfViewMiddleware(object):\n         return _get_failure_view()(request, reason=reason)\n \n     def process_view(self, request, callback, callback_args, callback_kwargs):\n+\n         if getattr(request, 'csrf_processing_done', False):\n             return None\n \n@@ -130,31 +131,6 @@ class CsrfViewMiddleware(object):\n                 # any branches that call reject()\n                 return self._accept(request)\n \n-            if request.is_ajax():\n-                # .is_ajax() is based on the presence of X-Requested-With.  In\n-                # the context of a browser, this can only be sent if using\n-                # XmlHttpRequest.  Browsers implement careful policies for\n-                # XmlHttpRequest:\n-                #\n-                #  * Normally, only same-domain requests are allowed.\n-                #\n-                #  * Some browsers (e.g. Firefox 3.5 and later) relax this\n-                #    carefully:\n-                #\n-                #    * if it is a 'simple' GET or POST request (which can\n-                #      include no custom headers), it is allowed to be cross\n-                #      domain.  These requests will not be recognized as AJAX.\n-                #\n-                #    * if a 'preflight' check with the server confirms that the\n-                #      server is expecting and allows the request, cross domain\n-                #      requests even with custom headers are allowed. These\n-                #      requests will be recognized as AJAX, but can only get\n-                #      through when the developer has specifically opted in to\n-                #      allowing the cross-domain POST request.\n-                #\n-                # So in all cases, it is safe to allow these requests through.\n-                return self._accept(request)\n-\n             if request.is_secure():\n                 # Strict referer checking for HTTPS\n                 referer = request.META.get('HTTP_REFERER')\n@@ -185,7 +161,11 @@ class CsrfViewMiddleware(object):\n                 csrf_token = request.META[\"CSRF_COOKIE\"]\n \n             # check incoming token\n-            request_csrf_token = request.POST.get('csrfmiddlewaretoken', None)\n+            request_csrf_token = request.POST.get('csrfmiddlewaretoken', \"\")\n+            if request_csrf_token == \"\":\n+                # Fall back to X-CSRFToken, to make things easier for AJAX\n+                request_csrf_token = request.META.get('HTTP_X_CSRFTOKEN', '')\n+\n             if request_csrf_token != csrf_token:\n                 if cookie_is_new:\n                     # probably a problem setting the CSRF cookie\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/regressiontests/csrf_tests/tests.py b/tests/regressiontests/csrf_tests/tests.py\nindex 9f74fc5a0a..08501895d2 100644\n--- a/tests/regressiontests/csrf_tests/tests.py\n+++ b/tests/regressiontests/csrf_tests/tests.py\n@@ -275,12 +275,12 @@ class CsrfMiddlewareTest(TestCase):\n         req2 = CsrfMiddleware().process_view(req, csrf_exempt(post_form_view), (), {})\n         self.assertEquals(None, req2)\n \n-    def test_ajax_exemption(self):\n+    def test_csrf_token_in_header(self):\n         \"\"\"\n-        Check that AJAX requests are automatically exempted.\n+        Check that we can pass in the token in a header instead of in the form\n         \"\"\"\n         req = self._get_POST_csrf_cookie_request()\n-        req.META['HTTP_X_REQUESTED_WITH'] = 'XMLHttpRequest'\n+        req.META['HTTP_X_CSRFTOKEN'] = self._csrf_id\n         req2 = CsrfMiddleware().process_view(req, post_form_view, (), {})\n         self.assertEquals(None, req2)\n \n\n</test_patch>\n", "file change type": "Files matched", "content change type": "logical and structural changes", "source_commit": "818e70344e7193f6ebc73c82ed574e6ce3c91afc", "source_date": "Wed Feb 9 02:07:05 2011 +0000", "source_tag": "1.2.5", "target_commit": "408c5c873ce1437c7eee9544ff279ecbad7e150a", "target_date": "Wed Feb 9 02:07:35 2011 +0000", "target_tag": "1.1.4", "FAIL TO PASS": ["django.contrib.csrf.tests.CsrfMiddlewareTest.test_csrf_token_in_header", "django.contrib.csrf.tests.CsrfMiddlewareTest.Trying '/django/django/contrib/admin/fixtures' for initial_data.json.gz fixture 'initialtest_csrf_token_in_header"], "PASS TO PASS": ["django.contrib.csrf.tests.CsrfMiddlewareTest.test_process_response_exempt_view", "django.contrib.csrf.tests.CsrfMiddlewareTest.test_process_request_no_session", "django.contrib.csrf.tests.CsrfMiddlewareTest.test_template_tag_noop", "django.contrib.csrf.tests.CsrfMiddlewareTest.test_process_response_no_session", "django.contrib.csrf.tests.CsrfMiddlewareTest.test_process_request_session_and_token", "django.contrib.csrf.tests.CsrfMiddlewareTest.test_process_request_session_no_token_exempt_view", "django.contrib.csrf.tests.CsrfMiddlewareTest.test_process_response_new_session", "django.contrib.csrf.tests.CsrfMiddlewareTest.test_process_request_session_no_token", "django.contrib.csrf.tests.CsrfMiddlewareTest.test_process_response_existing_session"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_268", "original_commit_message": "Fixed #23066 -- Modified RemoteUserMiddleware to logout on REMOTE_USER change.\nThis is a security fix. Disclosure following shortly.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/contrib/auth/middleware.py b/django/contrib/auth/middleware.py\nindex b2f392262a..b34da60299 100644\n--- a/django/contrib/auth/middleware.py\n+++ b/django/contrib/auth/middleware.py\n@@ -76,14 +76,7 @@ class RemoteUserMiddleware(object):\n             # authenticated remote-user, or return (leaving request.user set to\n             # AnonymousUser by the AuthenticationMiddleware).\n             if request.user.is_authenticated():\n-                try:\n-                    stored_backend = load_backend(request.session.get(\n-                        auth.BACKEND_SESSION_KEY, ''))\n-                    if isinstance(stored_backend, RemoteUserBackend):\n-                        auth.logout(request)\n-                except ImportError:\n-                    # backend failed to load\n-                    auth.logout(request)\n+                self._remove_invalid_user(request)\n             return\n         # If the user is already authenticated and that user is the user we are\n         # getting passed in the headers, then the correct user is already\n@@ -91,6 +84,11 @@ class RemoteUserMiddleware(object):\n         if request.user.is_authenticated():\n             if request.user.get_username() == self.clean_username(username, request):\n                 return\n+            else:\n+                # An authenticated user is associated with the request, but\n+                # it does not match the authorized user in the header.\n+                self._remove_invalid_user(request)\n+\n         # We are seeing this user for the first time in this session, attempt\n         # to authenticate the user.\n         user = auth.authenticate(remote_user=username)\n@@ -112,3 +110,17 @@ class RemoteUserMiddleware(object):\n         except AttributeError:  # Backend has no clean_username method.\n             pass\n         return username\n+\n+    def _remove_invalid_user(self, request):\n+        \"\"\"\n+        Removes the current authenticated user in the request which is invalid\n+        but only if the user is authenticated via the RemoteUserBackend.\n+        \"\"\"\n+        try:\n+            stored_backend = load_backend(request.session.get(auth.BACKEND_SESSION_KEY, ''))\n+        except ImportError:\n+            # backend failed to load\n+            auth.logout(request)\n+        else:\n+            if isinstance(stored_backend, RemoteUserBackend):\n+                auth.logout(request)\n\n\n</patch>\n<test_patch>\ndiff --git a/django/contrib/auth/tests/test_remote_user.py b/django/contrib/auth/tests/test_remote_user.py\nindex 2ccfd6e6fa..790e5d0d53 100644\n--- a/django/contrib/auth/tests/test_remote_user.py\n+++ b/django/contrib/auth/tests/test_remote_user.py\n@@ -125,6 +125,24 @@ class RemoteUserTest(TestCase):\n         response = self.client.get('/remote_user/')\n         self.assertEqual(response.context['user'].username, 'modeluser')\n \n+    def test_user_switch_forces_new_login(self):\n+        \"\"\"\n+        Tests that if the username in the header changes between requests\n+        that the original user is logged out\n+        \"\"\"\n+        User.objects.create(username='knownuser')\n+        # Known user authenticates\n+        response = self.client.get('/remote_user/',\n+                                   **{self.header: self.known_user})\n+        self.assertEqual(response.context['user'].username, 'knownuser')\n+        # During the session, the REMOTE_USER changes to a different user.\n+        response = self.client.get('/remote_user/',\n+                                   **{self.header: \"newnewuser\"})\n+        # Ensure that the current user is not the prior remote_user\n+        # In backends that create a new user, username is \"newnewuser\"\n+        # In backends that do not create new users, it is '' (anonymous user)\n+        self.assertNotEqual(response.context['user'].username, 'knownuser')\n+\n     def tearDown(self):\n         \"\"\"Restores settings to avoid breaking other tests.\"\"\"\n         settings.MIDDLEWARE_CLASSES = self.curr_middleware\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location & namespace changes", "source_commit": "5307ce565fbedb9cc27cbe7c757b41a00438d37c", "source_date": "Wed Aug 20 14:39:40 2014 -0400", "source_tag": "1.8", "target_commit": "dd68f319b365f6cb38c5a6c106faf4f6142d7d88", "target_date": "Wed Aug 20 11:44:02 2014 -0400", "target_tag": "1.5.9", "FAIL TO PASS": ["django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_user_switch_forces_new_login"], "PASS TO PASS": ["django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_header_disappears", "django.contrib.auth.tests.decorators.LoginRequiredTestCase.testLoginRequired", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_low_level_pkbdf2", "django.contrib.auth.tests.handlers.ModWsgiHandlerTestCase.test_check_password_custom_user", "django.contrib.auth.tests.context_processors.AuthContextProcessorTests.test_user_attrs", "django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_known_user", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_bad_algorithm", "django.contrib.auth.tests.views.LoginTest.test_login_csrf_rotate", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_pkbdf2", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_upgrade", "django.contrib.auth.tests.auth_backends.NoBackendsTest.test_raises_exception", "django.contrib.auth.tests.views.LoginURLSettings.test_remote_login_url", "django.contrib.auth.tests.models.UserManagerTestCase.test_create_user_email_domain_normalize", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_unusable_password", "django.contrib.auth.tests.basic.BasicTestCase.test_createsuperuser_nolocale", "django.contrib.auth.tests.forms.AuthenticationFormTest.test_username_field_label", "Check the creation and properties of a superuser", "USERNAME_FIELD should not appear in REQUIRED_FIELDS.", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_header_disappears", "Regressiontest for #12462", "django.contrib.auth.tests.views.LogoutTest.test_logout_with_overridden_redirect_url", "django.contrib.auth.tests.auth_backends.AnonymousUserBackendTest.test_has_perm", "django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_user_switch_forces_new_login", "django.contrib.auth.tests.tokens.TokenGeneratorTest.test_make_token", "django.contrib.auth.tests.models.UserManagerTestCase.test_create_user_email_domain_normalize_with_whitespace", "django.contrib.auth.tests.views.LoginURLSettings.test_remote_login_url_with_next_querystring", "django.contrib.auth.tests.views.LoginTest.test_security_check", "django.contrib.auth.tests.views.LogoutTest.test_security_check", "django.contrib.auth.tests.views.ChangelistTests.test_changelist_disallows_password_lookups", "django.contrib.auth.tests.context_processors.PermWrapperTests.test_permwrapper_in", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_no_remote_user", "django.contrib.auth.tests.auth_backends.InActiveUserBackendTest.test_has_module_perms", "Email is sent if a valid email address is provided for password reset", "Email is sent if a valid email address is provided for password reset when a custom from_email is provided.", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_invalid_user", "django.contrib.auth.tests.auth_backends.RowlevelBackendTest.test_get_group_permissions", "django.contrib.auth.tests.views.LoginURLSettings.test_standard_login_url", "django.contrib.auth.tests.auth_backends.ExtensionUserModelBackendTest.test_has_perm", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_md5", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_no_remote_user", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_sha1", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_known_user", "Check the properties of the anonymous user", "django.contrib.auth.tests.forms.AuthenticationFormTest.test_success", "django.contrib.auth.tests.forms.UserChangeFormTest.test_bug_19349_bound_password_field", "django.contrib.auth.tests.views.LogoutTest.test_14377", "django.contrib.auth.tests.models.UserManagerTestCase.test_create_user", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_unknown_user", "django.contrib.auth.tests.management.GetDefaultUsernameTestCase.test_actual_implementation", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_succeeds", "Error is raised if the provided email address isn't currently registered", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_inactive_user", "Logout with next_page option given redirects to specified resource", "django.contrib.auth.tests.forms.AuthenticationFormTest.test_inactive_user", "django.contrib.auth.tests.management.CreatesuperuserManagementCommandTestCase.test_email_in_username", "A superuser can be created when a custom User model is in use", "django.contrib.auth.tests.auth_backends.AnonymousUserBackendTest.test_has_perms", "django.contrib.auth.tests.management.PermissionDuplicationTestCase.test_duplicated_permissions", "django.contrib.auth.tests.auth_backends.CustomPermissionsUserModelBackendTest.test_has_perm", "A Custom superuser won't be created when a required field isn't provided", "Poisoned HTTP_HOST headers can't be used for reset emails", "django.contrib.auth.tests.management.GetDefaultUsernameTestCase.test_simple", "Logout without next_page option renders the default template", "django.contrib.auth.tests.context_processors.PermWrapperTests.test_permlookupdict_in", "django.contrib.auth.tests.models.IsActiveTestCase.test_is_active_field_default", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_invalid", "django.contrib.auth.tests.auth_backends.RowlevelBackendTest.test_has_perm", "django.contrib.auth.tests.forms.UserCreationFormTest.test_password_verification", "django.contrib.auth.tests.auth_backends.ExtensionUserModelBackendTest.test_custom_perms", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_invalid_post", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_unusable", "Executing the changepassword management command should change joe's password", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_done_fails", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_nonexistant_email", "Named URLs should be reversible", "django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_no_remote_user", "django.contrib.auth.tests.forms.PasswordChangeFormTest.test_success", "django.contrib.auth.tests.tokens.TokenGeneratorTest.test_date_length", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_no_upgrade_on_incorrect_pass", "django.contrib.auth.tests.signals.SignalTestCase.test_logout_anonymous", "django.contrib.auth.tests.forms.UserChangeFormTest.test_username_validity", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_done_succeeds", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_unsalted_md5", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_cleaned_data", "django.contrib.auth.tests.forms.UserChangeFormTest.test_bug_14242", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_custom_email_subject", "django.contrib.auth.tests.auth_backends.CustomPermissionsUserModelBackendTest.test_custom_perms", "A non-unique USERNAME_FIELD should raise a model validation error.", "django.contrib.auth.tests.forms.AuthenticationFormTest.test_invalid_username", "django.contrib.auth.tests.forms.UserCreationFormTest.test_user_already_exists", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_complete", "django.contrib.auth.tests.auth_backends.ModelBackendTest.test_has_perm", "django.contrib.auth.tests.auth_backends.AnonymousUserBackendTest.test_get_all_permissions", "django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_unknown_user", "django.contrib.auth.tests.views.LoginURLSettings.test_https_login_url", "django.contrib.auth.tests.context_processors.AuthContextProcessorTests.test_session_is_accessed", "django.contrib.auth.tests.forms.SetPasswordFormTest.test_password_verification", "django.contrib.auth.tests.models.NaturalKeysTestCase.test_user_natural_key", "django.contrib.auth.tests.auth_backends.ModelBackendTest.test_custom_perms", "The current user model can be swapped out for another", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_header_disappears", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_bad_encoded", "django.contrib.auth.tests.forms.UserChangeFormTest.test_bug_17944_unknown_password_algorithm", "django.contrib.auth.tests.forms.AuthenticationFormTest.test_inactive_user_i18n", "django.contrib.auth.tests.decorators.LoginRequiredTestCase.testView", "django.contrib.auth.tests.forms.UserChangeFormTest.test_bug_17944_empty_password", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_last_login", "django.contrib.auth.tests.views.LoginURLSettings.test_login_url_with_querystring", "The current user model must point to an installed model", "django.contrib.auth.tests.models.LoadDataWithoutNaturalKeysTestCase.test_user_is_created_and_added_to_group", "If the reset view is marked as being for admin, the HTTP_HOST header is used for a domain override.", "django.contrib.auth.tests.management.GetDefaultUsernameTestCase.test_existing", "django.contrib.auth.tests.forms.PasswordChangeFormTest.test_password_verification", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_fails_with_invalid_old_password", "django.contrib.auth.tests.models.NaturalKeysTestCase.test_group_natural_key", "django.contrib.auth.tests.handlers.ModWsgiHandlerTestCase.test_groups_for_user", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_bug_5605", "django.contrib.auth.tests.models.UserManagerTestCase.test_empty_username", "django.contrib.auth.tests.forms.UserChangeFormTest.test_bug_17944_unmanageable_password", "django.contrib.auth.tests.forms.PasswordChangeFormTest.test_incorrect_password", "A superuser has all permissions. Refs #14795", "django.contrib.auth.tests.auth_backends.ImproperlyConfiguredUserModelTest.test_does_not_shadow_exception", "django.contrib.auth.tests.decorators.LoginRequiredTestCase.testLoginRequiredNextUrl", "django.contrib.auth.tests.context_processors.AuthContextProcessorTests.test_session_not_accessed", "The current user model can be retrieved", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_known_user", "Poisoned HTTP_HOST headers can't be used for reset emails on admin views", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_unsalted_sha1", "django.contrib.auth.tests.forms.UserCreationFormTest.test_invalid_data", "django.contrib.auth.tests.signals.SignalTestCase.test_logout", "django.contrib.auth.tests.tokens.TokenGeneratorTest.test_timeout", "django.contrib.auth.tests.context_processors.AuthContextProcessorTests.test_perms_attrs", "django.contrib.auth.tests.decorators.LoginRequiredTestCase.testCallable", "django.contrib.auth.tests.auth_backends.InActiveUserBackendTest.test_has_perm", "django.contrib.auth.tests.tokens.TokenGeneratorTest.test_10265", "django.contrib.auth.tests.models.UserManagerTestCase.test_create_user_email_domain_normalize_rfc3696", "django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_last_login", "django.contrib.auth.tests.models.LoadDataWithNaturalKeysTestCase.test_user_is_created_and_added_to_group", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_crypt", "django.contrib.auth.tests.forms.SetPasswordFormTest.test_success", "django.contrib.auth.tests.forms.ReadOnlyPasswordHashWidgetTest.test_bug_19349_render_with_none_value", "django.contrib.auth.tests.signals.SignalTestCase.test_login", "django.contrib.auth.tests.auth_backends.RowlevelBackendTest.test_get_all_permissions", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_user_switch_forces_new_login", "django.contrib.auth.tests.forms.UserCreationFormTest.test_both_passwords", "django.contrib.auth.tests.views.CustomUserPasswordResetTest.test_confirm_valid_custom_user", "django.contrib.auth.tests.context_processors.AuthContextProcessorTests.test_perm_in_perms_attrs", "django.contrib.auth.tests.context_processors.AuthContextProcessorTests.test_message_attrs", "Logout with custom query string redirects to specified resource", "The change form does not return the password value", "Logout with query string redirects to specified resource", "django.contrib.auth.tests.models.IsActiveTestCase.test_builtin_user_isactive", "django.contrib.auth.tests.management.CreatesuperuserManagementCommandTestCase.test_verbosity_zero", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_different_passwords", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_invalid_email", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_overflow_user", "Check that users can be created without an email", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_fails_with_mismatched_passwords", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_no_upgrade", "The alternate user setting must point to something in the format app.model", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_last_login", "django.contrib.auth.tests.auth_backends.CustomUserModelBackendAuthenticateTest.test_authenticate", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_unknown_user", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_low_level_pbkdf2_sha1", "django.contrib.auth.tests.basic.BasicTestCase.test_createsuperuser_non_ascii_verbose_name", "django.contrib.auth.tests.handlers.ModWsgiHandlerTestCase.test_check_password", "django.contrib.auth.tests.forms.UserChangeFormTest.test_unsuable_password", "Ensure that only `last_login` is updated in `update_last_login`", "django.contrib.auth.tests.auth_backends.AnonymousUserBackendTest.test_has_module_perms", "django.contrib.auth.tests.management.ChangepasswordManagementCommandTestCase.test_that_max_tries_exits_1", "django.contrib.auth.tests.views.LoginTest.test_current_site_in_context_after_login", "django.contrib.auth.tests.management.GetDefaultUsernameTestCase.test_i18n", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_valid", "Check that users can be created and can set their password", "Check the operation of the createsuperuser management command", "django.contrib.auth.tests.models.ProfileTestCase.test_site_profile_not_available", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_simple", "django.contrib.auth.tests.forms.UserCreationFormTest.test_success", "django.contrib.auth.tests.forms.PasswordChangeFormTest.test_field_order"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_269", "original_commit_message": "Fixed #23066 -- Modified RemoteUserMiddleware to logout on REMOTE_USER change.\nThis is a security fix. Disclosure following shortly.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/contrib/auth/middleware.py b/django/contrib/auth/middleware.py\nindex b2f392262a..b34da60299 100644\n--- a/django/contrib/auth/middleware.py\n+++ b/django/contrib/auth/middleware.py\n@@ -76,14 +76,7 @@ class RemoteUserMiddleware(object):\n             # authenticated remote-user, or return (leaving request.user set to\n             # AnonymousUser by the AuthenticationMiddleware).\n             if request.user.is_authenticated():\n-                try:\n-                    stored_backend = load_backend(request.session.get(\n-                        auth.BACKEND_SESSION_KEY, ''))\n-                    if isinstance(stored_backend, RemoteUserBackend):\n-                        auth.logout(request)\n-                except ImportError:\n-                    # backend failed to load\n-                    auth.logout(request)\n+                self._remove_invalid_user(request)\n             return\n         # If the user is already authenticated and that user is the user we are\n         # getting passed in the headers, then the correct user is already\n@@ -91,6 +84,11 @@ class RemoteUserMiddleware(object):\n         if request.user.is_authenticated():\n             if request.user.get_username() == self.clean_username(username, request):\n                 return\n+            else:\n+                # An authenticated user is associated with the request, but\n+                # it does not match the authorized user in the header.\n+                self._remove_invalid_user(request)\n+\n         # We are seeing this user for the first time in this session, attempt\n         # to authenticate the user.\n         user = auth.authenticate(remote_user=username)\n@@ -112,3 +110,17 @@ class RemoteUserMiddleware(object):\n         except AttributeError:  # Backend has no clean_username method.\n             pass\n         return username\n+\n+    def _remove_invalid_user(self, request):\n+        \"\"\"\n+        Removes the current authenticated user in the request which is invalid\n+        but only if the user is authenticated via the RemoteUserBackend.\n+        \"\"\"\n+        try:\n+            stored_backend = load_backend(request.session.get(auth.BACKEND_SESSION_KEY, ''))\n+        except ImportError:\n+            # backend failed to load\n+            auth.logout(request)\n+        else:\n+            if isinstance(stored_backend, RemoteUserBackend):\n+                auth.logout(request)\n\n\n</patch>\n<test_patch>\ndiff --git a/django/contrib/auth/tests/test_remote_user.py b/django/contrib/auth/tests/test_remote_user.py\nindex 2ccfd6e6fa..790e5d0d53 100644\n--- a/django/contrib/auth/tests/test_remote_user.py\n+++ b/django/contrib/auth/tests/test_remote_user.py\n@@ -125,6 +125,24 @@ class RemoteUserTest(TestCase):\n         response = self.client.get('/remote_user/')\n         self.assertEqual(response.context['user'].username, 'modeluser')\n \n+    def test_user_switch_forces_new_login(self):\n+        \"\"\"\n+        Tests that if the username in the header changes between requests\n+        that the original user is logged out\n+        \"\"\"\n+        User.objects.create(username='knownuser')\n+        # Known user authenticates\n+        response = self.client.get('/remote_user/',\n+                                   **{self.header: self.known_user})\n+        self.assertEqual(response.context['user'].username, 'knownuser')\n+        # During the session, the REMOTE_USER changes to a different user.\n+        response = self.client.get('/remote_user/',\n+                                   **{self.header: \"newnewuser\"})\n+        # Ensure that the current user is not the prior remote_user\n+        # In backends that create a new user, username is \"newnewuser\"\n+        # In backends that do not create new users, it is '' (anonymous user)\n+        self.assertNotEqual(response.context['user'].username, 'knownuser')\n+\n     def tearDown(self):\n         \"\"\"Restores settings to avoid breaking other tests.\"\"\"\n         settings.MIDDLEWARE_CLASSES = self.curr_middleware\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location & namespace changes", "source_commit": "5307ce565fbedb9cc27cbe7c757b41a00438d37c", "source_date": "Wed Aug 20 14:39:40 2014 -0400", "source_tag": "1.8", "target_commit": "0268b855f9eab3377f2821164ef3e66037789e09", "target_date": "Wed Aug 20 11:43:43 2014 -0400", "target_tag": "1.6.6", "FAIL TO PASS": ["django.contrib.auth.tests.test_remote_user.RemoteUserNoCreateTest.test_user_switch_forces_new_login"], "PASS TO PASS": ["django.contrib.auth.tests.test_remote_user.RemoteUserTest.test_last_login", "django.contrib.auth.tests.test_remote_user.RemoteUserNoCreateTest.test_header_disappears", "django.contrib.auth.tests.test_remote_user.RemoteUserNoCreateTest.test_last_login", "django.contrib.auth.tests.test_remote_user.RemoteUserTest.test_header_disappears", "django.contrib.auth.tests.test_remote_user.RemoteUserTest.test_unknown_user", "django.contrib.auth.tests.test_remote_user.RemoteUserCustomTest.test_user_switch_forces_new_login", "django.contrib.auth.tests.test_remote_user.RemoteUserCustomTest.test_header_disappears", "django.contrib.auth.tests.test_remote_user.RemoteUserNoCreateTest.test_known_user", "django.contrib.auth.tests.test_remote_user.RemoteUserCustomTest.test_last_login", "django.contrib.auth.tests.test_remote_user.RemoteUserCustomTest.test_unknown_user", "django.contrib.auth.tests.test_remote_user.RemoteUserTest.test_known_user", "django.contrib.auth.tests.test_remote_user.RemoteUserNoCreateTest.test_unknown_user", "django.contrib.auth.tests.test_remote_user.RemoteUserTest.test_user_switch_forces_new_login", "django.contrib.auth.tests.test_remote_user.RemoteUserCustomTest.test_no_remote_user", "django.contrib.auth.tests.test_remote_user.RemoteUserCustomTest.test_known_user", "django.contrib.auth.tests.test_remote_user.RemoteUserTest.test_no_remote_user", "django.contrib.auth.tests.test_remote_user.RemoteUserNoCreateTest.test_no_remote_user"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_270", "original_commit_message": "Fixed #23066 -- Modified RemoteUserMiddleware to logout on REMOTE_USER change.\nThis is a security fix. Disclosure following shortly.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/contrib/auth/middleware.py b/django/contrib/auth/middleware.py\nindex b2f392262a..b34da60299 100644\n--- a/django/contrib/auth/middleware.py\n+++ b/django/contrib/auth/middleware.py\n@@ -76,14 +76,7 @@ class RemoteUserMiddleware(object):\n             # authenticated remote-user, or return (leaving request.user set to\n             # AnonymousUser by the AuthenticationMiddleware).\n             if request.user.is_authenticated():\n-                try:\n-                    stored_backend = load_backend(request.session.get(\n-                        auth.BACKEND_SESSION_KEY, ''))\n-                    if isinstance(stored_backend, RemoteUserBackend):\n-                        auth.logout(request)\n-                except ImportError:\n-                    # backend failed to load\n-                    auth.logout(request)\n+                self._remove_invalid_user(request)\n             return\n         # If the user is already authenticated and that user is the user we are\n         # getting passed in the headers, then the correct user is already\n@@ -91,6 +84,11 @@ class RemoteUserMiddleware(object):\n         if request.user.is_authenticated():\n             if request.user.get_username() == self.clean_username(username, request):\n                 return\n+            else:\n+                # An authenticated user is associated with the request, but\n+                # it does not match the authorized user in the header.\n+                self._remove_invalid_user(request)\n+\n         # We are seeing this user for the first time in this session, attempt\n         # to authenticate the user.\n         user = auth.authenticate(remote_user=username)\n@@ -112,3 +110,17 @@ class RemoteUserMiddleware(object):\n         except AttributeError:  # Backend has no clean_username method.\n             pass\n         return username\n+\n+    def _remove_invalid_user(self, request):\n+        \"\"\"\n+        Removes the current authenticated user in the request which is invalid\n+        but only if the user is authenticated via the RemoteUserBackend.\n+        \"\"\"\n+        try:\n+            stored_backend = load_backend(request.session.get(auth.BACKEND_SESSION_KEY, ''))\n+        except ImportError:\n+            # backend failed to load\n+            auth.logout(request)\n+        else:\n+            if isinstance(stored_backend, RemoteUserBackend):\n+                auth.logout(request)\n\n\n</patch>\n<test_patch>\ndiff --git a/django/contrib/auth/tests/test_remote_user.py b/django/contrib/auth/tests/test_remote_user.py\nindex 2ccfd6e6fa..790e5d0d53 100644\n--- a/django/contrib/auth/tests/test_remote_user.py\n+++ b/django/contrib/auth/tests/test_remote_user.py\n@@ -125,6 +125,24 @@ class RemoteUserTest(TestCase):\n         response = self.client.get('/remote_user/')\n         self.assertEqual(response.context['user'].username, 'modeluser')\n \n+    def test_user_switch_forces_new_login(self):\n+        \"\"\"\n+        Tests that if the username in the header changes between requests\n+        that the original user is logged out\n+        \"\"\"\n+        User.objects.create(username='knownuser')\n+        # Known user authenticates\n+        response = self.client.get('/remote_user/',\n+                                   **{self.header: self.known_user})\n+        self.assertEqual(response.context['user'].username, 'knownuser')\n+        # During the session, the REMOTE_USER changes to a different user.\n+        response = self.client.get('/remote_user/',\n+                                   **{self.header: \"newnewuser\"})\n+        # Ensure that the current user is not the prior remote_user\n+        # In backends that create a new user, username is \"newnewuser\"\n+        # In backends that do not create new users, it is '' (anonymous user)\n+        self.assertNotEqual(response.context['user'].username, 'knownuser')\n+\n     def tearDown(self):\n         \"\"\"Restores settings to avoid breaking other tests.\"\"\"\n         settings.MIDDLEWARE_CLASSES = self.curr_middleware\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "logical and structural changes", "source_commit": "5307ce565fbedb9cc27cbe7c757b41a00438d37c", "source_date": "Wed Aug 20 14:39:40 2014 -0400", "source_tag": "1.8", "target_commit": "c9e3b9949cd55f090591fbdc4a114fcb8368b6d9", "target_date": "Mon Aug 11 12:15:06 2014 -0400", "target_tag": "1.4.14", "FAIL TO PASS": ["django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_user_switch_forces_new_login"], "PASS TO PASS": ["django.contrib.auth.tests.decorators.LoginRequiredTestCase.testLoginRequired", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_low_level_pkbdf2", "django.contrib.auth.tests.context_processors.AuthContextProcessorTests.test_user_attrs", "django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_known_user", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_bad_algorithm", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_pkbdf2", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_upgrade", "django.contrib.auth.tests.auth_backends.NoBackendsTest.test_raises_exception", "django.contrib.auth.tests.views.LoginURLSettings.test_remote_login_url", "django.contrib.auth.tests.models.UserManagerTestCase.test_create_user_email_domain_normalize", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_unusable_password", "Check the creation and properties of a superuser", "django.contrib.auth.tests.views.LogoutTest.test_logout_with_overridden_redirect_url", "django.contrib.auth.tests.auth_backends.AnonymousUserBackendTest.test_has_perm", "django.contrib.auth.tests.models.UserManagerTestCase.test_create_user_email_domain_normalize_with_whitespace", "django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_user_switch_forces_new_login", "django.contrib.auth.tests.tokens.TokenGeneratorTest.test_make_token", "django.contrib.auth.tests.views.LoginURLSettings.test_remote_login_url_with_next_querystring", "django.contrib.auth.tests.views.LoginTest.test_security_check", "django.contrib.auth.tests.views.LogoutTest.test_security_check", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_no_remote_user", "django.contrib.auth.tests.auth_backends.InActiveUserBackendTest.test_has_module_perms", "Email is sent if a valid email address is provided for password reset", "Email is sent if a valid email address is provided for password reset when a custom from_email is provided.", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_invalid_user", "django.contrib.auth.tests.auth_backends.RowlevelBackendTest.test_get_group_permissions", "django.contrib.auth.tests.views.LoginURLSettings.test_standard_login_url", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_md5", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_no_remote_user", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_sha1", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_known_user", "Check the properties of the anonymous user", "django.contrib.auth.tests.auth_backends.BackendTest.test_has_perm", "django.contrib.auth.tests.forms.AuthenticationFormTest.test_success", "django.contrib.auth.tests.models.UserManagerTestCase.test_create_user", "django.contrib.auth.tests.views.LogoutTest.test_14377", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_unknown_user", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_succeeds", "Error is raised if the provided email address isn't currently registered", "Logout with next_page option given redirects to specified resource", "django.contrib.auth.tests.forms.AuthenticationFormTest.test_inactive_user", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_inactive_user", "django.contrib.auth.tests.auth_backends.NoInActiveUserBackendTest.test_has_perm", "django.contrib.auth.tests.auth_backends.NoInActiveUserBackendTest.test_has_module_perms", "django.contrib.auth.tests.auth_backends.AnonymousUserBackendTest.test_has_perms", "Poisoned HTTP_HOST headers can't be used for reset emails", "django.contrib.auth.tests.management.GetDefaultUsernameTestCase.test_simple", "Logout without next_page option renders the default template", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_invalid", "django.contrib.auth.tests.auth_backends.RowlevelBackendTest.test_has_perm", "django.contrib.auth.tests.forms.UserCreationFormTest.test_password_verification", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_invalid_post", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_unusable", "Executing the changepassword management command should change joe's password", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_done_fails", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_nonexistant_email", "Named URLs should be reversible", "django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_no_remote_user", "django.contrib.auth.tests.forms.PasswordChangeFormTest.test_success", "django.contrib.auth.tests.tokens.TokenGeneratorTest.test_date_length", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_no_upgrade_on_incorrect_pass", "django.contrib.auth.tests.signals.SignalTestCase.test_logout_anonymous", "django.contrib.auth.tests.forms.UserChangeFormTest.test_username_validity", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_done_succeeds", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_unsalted_md5", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_cleaned_data", "django.contrib.auth.tests.forms.UserChangeFormTest.test_bug_14242", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_custom_email_subject", "django.contrib.auth.tests.auth_backends.BackendTest.test_custom_perms", "django.contrib.auth.tests.forms.AuthenticationFormTest.test_invalid_username", "django.contrib.auth.tests.forms.UserCreationFormTest.test_user_already_exists", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_complete", "django.contrib.auth.tests.auth_backends.AnonymousUserBackendTest.test_get_all_permissions", "django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_unknown_user", "django.contrib.auth.tests.views.LoginURLSettings.test_https_login_url", "django.contrib.auth.tests.context_processors.AuthContextProcessorTests.test_session_is_accessed", "django.contrib.auth.tests.forms.SetPasswordFormTest.test_password_verification", "django.contrib.auth.tests.models.NaturalKeysTestCase.test_user_natural_key", "django.contrib.auth.tests.forms.PasswordChangeFormTest.test_field_order", "django.contrib.auth.tests.forms.UserChangeFormTest.test_bug_17944_unknown_password_algorithm", "django.contrib.auth.tests.forms.AuthenticationFormTest.test_inactive_user_i18n", "django.contrib.auth.tests.decorators.LoginRequiredTestCase.testView", "django.contrib.auth.tests.forms.UserChangeFormTest.test_bug_17944_empty_password", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_last_login", "django.contrib.auth.tests.views.LoginURLSettings.test_login_url_with_querystring", "django.contrib.auth.tests.models.LoadDataWithoutNaturalKeysTestCase.test_user_is_created_and_added_to_group", "If the reset view is marked as being for admin, the HTTP_HOST header is used for a domain override.", "django.contrib.auth.tests.management.GetDefaultUsernameTestCase.test_existing", "django.contrib.auth.tests.forms.PasswordChangeFormTest.test_password_verification", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_fails_with_invalid_old_password", "django.contrib.auth.tests.models.NaturalKeysTestCase.test_group_natural_key", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_bug_5605", "django.contrib.auth.tests.models.UserManagerTestCase.test_empty_username", "django.contrib.auth.tests.forms.UserChangeFormTest.test_bug_17944_unmanageable_password", "django.contrib.auth.tests.forms.PasswordChangeFormTest.test_incorrect_password", "A superuser has all permissions. Refs #14795", "django.contrib.auth.tests.decorators.LoginRequiredTestCase.testLoginRequiredNextUrl", "django.contrib.auth.tests.context_processors.AuthContextProcessorTests.test_session_not_accessed", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_unsalted_sha1", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_known_user", "Poisoned HTTP_HOST headers can't be used for reset emails on admin views", "django.contrib.auth.tests.forms.UserCreationFormTest.test_invalid_data", "django.contrib.auth.tests.signals.SignalTestCase.test_logout", "django.contrib.auth.tests.tokens.TokenGeneratorTest.test_timeout", "django.contrib.auth.tests.context_processors.AuthContextProcessorTests.test_perms_attrs", "django.contrib.auth.tests.decorators.LoginRequiredTestCase.testCallable", "django.contrib.auth.tests.auth_backends.InActiveUserBackendTest.test_has_perm", "django.contrib.auth.tests.tokens.TokenGeneratorTest.test_10265", "django.contrib.auth.tests.models.UserManagerTestCase.test_create_user_email_domain_normalize_rfc3696", "django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_last_login", "django.contrib.auth.tests.models.LoadDataWithNaturalKeysTestCase.test_user_is_created_and_added_to_group", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_crypt", "django.contrib.auth.tests.forms.SetPasswordFormTest.test_success", "django.contrib.auth.tests.signals.SignalTestCase.test_login", "django.contrib.auth.tests.auth_backends.RowlevelBackendTest.test_get_all_permissions", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_user_switch_forces_new_login", "django.contrib.auth.tests.forms.UserCreationFormTest.test_both_passwords", "django.contrib.auth.tests.context_processors.AuthContextProcessorTests.test_message_attrs", "Logout with custom query string redirects to specified resource", "Logout with query string redirects to specified resource", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_different_passwords", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_invalid_email", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_overflow_user", "Check that users can be created without an email", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_fails_with_mismatched_passwords", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_no_upgrade", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_last_login", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_unknown_user", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_low_level_pbkdf2_sha1", "django.contrib.auth.tests.auth_backends.AnonymousUserBackendTest.test_has_module_perms", "django.contrib.auth.tests.management.ChangepasswordManagementCommandTestCase.test_that_max_tries_exits_1", "django.contrib.auth.tests.management.GetDefaultUsernameTestCase.test_i18n", "django.contrib.auth.tests.views.LoginTest.test_current_site_in_context_after_login", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_valid", "Check that users can be created and can set their password", "Check the operation of the createsuperuser management command", "django.contrib.auth.tests.models.ProfileTestCase.test_site_profile_not_available", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_simple", "django.contrib.auth.tests.forms.UserCreationFormTest.test_success", "Regressiontest for #12462"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_1297", "original_commit_message": "Refactor UAA token service to use new validation methods\n[#158846330] https://www.pivotaltracker.com/story/show/158846330\nSigned-off-by: Bruce Ricard <bruce.ricard@gmail.com>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java b/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java\nindex 130dce797..dd06e1de4 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java\n@@ -938,20 +938,11 @@ public class UaaTokenServices implements AuthorizationServerTokenServices, Resou\n             throw new InvalidTokenException(\"Invalid access token value, must be at least 30 characters\");\n         }\n \n-        TokenValidation tokenValidation = validateToken(accessToken);\n-        Map<String, Object> claims = tokenValidation.getClaims();\n-\n-        Object jtiClaim = claims.get(JTI);\n+        TokenValidation tokenValidation = validateToken(accessToken)\n+          .checkAccessToken()\n+          .throwIfInvalid();\n \n-        if (jtiClaim == null) {\n-            throw new InvalidTokenException(\"The token must contain a jti claim.\");\n-        } else {\n-            if (jtiClaim.toString().endsWith(REFRESH_TOKEN_SUFFIX)) {\n-                throw new InvalidTokenException(\n-                  \"Invalid access token was provided.\"\n-                );\n-            }\n-        }\n+        Map<String, Object> claims = tokenValidation.getClaims();\n \n         accessToken = tokenValidation.getJwt().getEncoded();\n \n@@ -1014,7 +1005,10 @@ public class UaaTokenServices implements AuthorizationServerTokenServices, Resou\n      */\n     @Override\n     public OAuth2AccessToken readAccessToken(String accessToken) {\n-        TokenValidation tokenValidation = validateToken(accessToken);\n+        TokenValidation tokenValidation = validateToken(accessToken)\n+          .checkAccessToken()\n+          .throwIfInvalid();\n+\n         Map<String, Object> claims = tokenValidation.getClaims();\n         accessToken = tokenValidation.getJwt().getEncoded();\n \n\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/util/TokenValidation.java b/server/src/main/java/org/cloudfoundry/identity/uaa/util/TokenValidation.java\nindex d68486e81..ad2bcaadf 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/util/TokenValidation.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/util/TokenValidation.java\n@@ -58,9 +58,11 @@ import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.CID;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.CLIENT_ID;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.EXP;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.ISS;\n+import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.JTI;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.REVOCATION_SIGNATURE;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.SCOPE;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.USER_ID;\n+import static org.cloudfoundry.identity.uaa.oauth.token.TokenConstants.REFRESH_TOKEN_SUFFIX;\n import static org.cloudfoundry.identity.uaa.util.UaaTokenUtils.isUserToken;\n \n public class TokenValidation {\n@@ -492,4 +494,19 @@ public class TokenValidation {\n     public Map<String, Object> getClaims() {\n         return claims;\n     }\n+\n+    public TokenValidation checkAccessToken() {\n+        Object jti = this.getClaims().get(JTI);\n+        if (jti == null) {\n+            addError(\"The token must contain a jti claim.\");\n+            return this;\n+        }\n+\n+        if (jti.toString().endsWith(REFRESH_TOKEN_SUFFIX)) {\n+            addError(\"Invalid access token.\");\n+        }\n+\n+        return this;\n+    }\n+\n }\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java\nindex d408f25bc..9dfbec8d1 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java\n@@ -1756,6 +1756,54 @@ public class UaaTokenServicesTests {\n         readAccessToken(new HashSet<>(Arrays.asList(ClaimConstants.EMAIL, ClaimConstants.USER_NAME)));\n     }\n \n+    @Test\n+    public void testReadAccessToken_When_Given_Refresh_token_should_throw_exception() {\n+        tokenServices.setExcludedClaims(new HashSet<>(Arrays.asList(ClaimConstants.EMAIL, ClaimConstants.USER_NAME)));\n+        AuthorizationRequest authorizationRequest =new AuthorizationRequest(CLIENT_ID, tokenSupport.requestedAuthScopes);\n+        authorizationRequest.setResourceIds(new HashSet<>(tokenSupport.resourceIds));\n+        Map<String, String> azParameters = new HashMap<>(authorizationRequest.getRequestParameters());\n+        azParameters.put(GRANT_TYPE, AUTHORIZATION_CODE);\n+        authorizationRequest.setRequestParameters(azParameters);\n+        Authentication userAuthentication = tokenSupport.defaultUserAuthentication;\n+\n+        Calendar expiresAt1 = Calendar.getInstance();\n+        expiresAt1.add(Calendar.MILLISECOND, 3000);\n+        Calendar updatedAt1 = Calendar.getInstance();\n+        updatedAt1.add(Calendar.MILLISECOND, -1000);\n+\n+        tokenSupport.approvalStore.addApproval(new Approval()\n+            .setUserId(tokenSupport.userId)\n+            .setClientId(CLIENT_ID)\n+            .setScope(tokenSupport.readScope.get(0))\n+            .setExpiresAt(expiresAt1.getTime())\n+            .setStatus(ApprovalStatus.APPROVED)\n+            .setLastUpdatedAt(updatedAt1.getTime()), IdentityZoneHolder.get().getId());\n+        tokenSupport.approvalStore.addApproval(new Approval()\n+            .setUserId(tokenSupport.userId)\n+            .setClientId(CLIENT_ID)\n+            .setScope(tokenSupport.writeScope.get(0))\n+            .setExpiresAt(expiresAt1.getTime())\n+            .setStatus(ApprovalStatus.APPROVED)\n+            .setLastUpdatedAt(updatedAt1.getTime()), IdentityZoneHolder.get().getId());\n+        Approval approval = new Approval()\n+            .setUserId(tokenSupport.userId)\n+            .setClientId(CLIENT_ID)\n+            .setScope(OPENID)\n+            .setExpiresAt(expiresAt1.getTime())\n+            .setStatus(ApprovalStatus.APPROVED)\n+            .setLastUpdatedAt(updatedAt1.getTime());\n+        tokenSupport.approvalStore.addApproval(\n+            approval, IdentityZoneHolder.get().getId());\n+\n+        OAuth2Authentication authentication = new OAuth2Authentication(authorizationRequest.createOAuth2Request(), userAuthentication);\n+        OAuth2AccessToken accessToken = tokenServices.createAccessToken(authentication);\n+\n+\n+        expectedException.expectMessage(\"Invalid access token.\");\n+        tokenServices.readAccessToken(accessToken.getRefreshToken().getValue());\n+    }\n+\n+\n     public void readAccessToken(Set<String> excludedClaims) {\n         tokenServices.setExcludedClaims(excludedClaims);\n         AuthorizationRequest authorizationRequest =new AuthorizationRequest(CLIENT_ID, tokenSupport.requestedAuthScopes);\n@@ -1996,7 +2044,7 @@ public class UaaTokenServicesTests {\n         String refreshTokenValue = tokenProvisioning.retrieve(compositeToken.getRefreshToken().getValue(), IdentityZoneHolder.get().getId()).getValue();\n \n         expectedException.expect(InvalidTokenException.class);\n-        expectedException.expectMessage(\"Invalid access token was provided.\");\n+        expectedException.expectMessage(\"Invalid access token.\");\n \n         tokenServices.loadAuthentication(refreshTokenValue);\n     }\n@@ -2026,7 +2074,7 @@ public class UaaTokenServicesTests {\n         String refreshTokenValue = tokenProvisioning.retrieve(refreshToken.getClaims().get(\"jti\").toString(), IdentityZoneHolder.get().getId()).getValue();\n \n         expectedException.expect(InvalidTokenException.class);\n-        expectedException.expectMessage(\"Invalid access token was provided.\");\n+        expectedException.expectMessage(\"Invalid access token.\");\n         tokenServices.loadAuthentication(refreshTokenValue);\n     }\n \n\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/util/TokenValidationTest.java b/server/src/test/java/org/cloudfoundry/identity/uaa/util/TokenValidationTest.java\nindex c86e8cae7..49bdb2103 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/util/TokenValidationTest.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/util/TokenValidationTest.java\n@@ -20,6 +20,7 @@ import org.cloudfoundry.identity.uaa.user.MockUaaUserDatabase;\n import org.cloudfoundry.identity.uaa.user.UaaUser;\n import org.cloudfoundry.identity.uaa.user.UaaUserDatabase;\n import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;\n+import org.hamcrest.CoreMatchers;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n@@ -46,13 +47,19 @@ import java.util.stream.Collectors;\n import static java.util.Collections.EMPTY_LIST;\n import static org.cloudfoundry.identity.uaa.oauth.client.ClientConstants.REQUIRED_USER_GROUPS;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.EMAIL;\n+import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.JTI;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.USER_NAME;\n import static org.cloudfoundry.identity.uaa.util.TokenValidation.validate;\n import static org.cloudfoundry.identity.uaa.util.UaaMapUtils.entry;\n import static org.cloudfoundry.identity.uaa.util.UaaMapUtils.map;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.hasItems;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n import static org.hamcrest.Matchers.containsInAnyOrder;\n import static org.hamcrest.Matchers.empty;\n import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasSize;\n import static org.hamcrest.Matchers.instanceOf;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertThat;\n@@ -210,12 +217,53 @@ public class TokenValidationTest {\n                 .checkRevocationSignature(Collections.singletonList(\"fa1c787d\"))\n                 .checkAudience(\"acme\", \"app\")\n                 .checkRevocableTokenStore(revocableTokenProvisioning)\n+                .checkAccessToken()\n                 ;\n \n         assertThat(validation.getValidationErrors(), empty());\n         assertTrue(validation.isValid());\n     }\n \n+    @Test\n+    public void validateAccessToken() throws Exception {\n+        content.put(JTI, \"8b14f193-8212-4af2-9927-e3ae903f94a6-r\");\n+\n+        TokenValidation validation = validate(getToken())\n+          .checkAccessToken();\n+\n+        assertThat(validation.getValidationErrors(), not(empty()));\n+        assertThat(validation.getValidationErrors(), hasSize(1));\n+        assertThat(validation.getValidationErrors().get(0), instanceOf(InvalidTokenException.class));\n+        assertThat(validation.getValidationErrors().get(0).getMessage(), is(\"Invalid access token.\"));\n+\n+        assertThat(validation.isValid(), is(false));\n+    }\n+\n+    @Test\n+    public void validateAccessToken_with_dashR_in_JTI_should_fail_validation() throws Exception {\n+        content.put(JTI, \"8b14f193-r-8212-4af2-9927-e3ae903f94a6\");\n+\n+        TokenValidation validation = validate(getToken())\n+          .checkAccessToken();\n+\n+        assertThat(validation.getValidationErrors(), empty());\n+        assertThat(validation.isValid(), is(true));\n+    }\n+\n+    @Test\n+    public void validateAccessToken_without_jti_should_fail_validation() throws Exception {\n+        content.put(JTI, null);\n+\n+        TokenValidation validation = validate(getToken())\n+          .checkAccessToken();\n+\n+        assertThat(validation.getValidationErrors(), hasSize(1));\n+        assertThat(validation.getValidationErrors().get(0), instanceOf(InvalidTokenException.class));\n+        assertThat(validation.getValidationErrors().get(0).getMessage(), is(\"The token must contain a jti claim.\"));\n+\n+        assertThat(validation.isValid(), is(false));\n+    }\n+\n     @Test\n     public void validateToken_Without_Email_And_Username() throws Exception {\n         TokenValidation validation = validate(getToken(Arrays.asList(EMAIL, USER_NAME)))\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "2906057dae995024576ce6afdc20abd855695141", "source_date": "Tue Jul 10 10:58:25 2018 -0700", "source_tag": "4.19.2", "target_commit": "81aeb7a3aa048ea086c494f725d643e48dd92669", "target_date": "Wed Jul 11 12:24:40 2018 -0700", "target_tag": "4.10.2", "FAIL TO PASS": ["/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/util/TokenValidationTest.java"], "PASS TO PASS": [":cloudfoundry-identity-model:processResources", ":cloudfoundry-identity-model:jar", ":cloudfoundry-identity-metrics-data:classes", ":cloudfoundry-identity-server:compileTestJava/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", ":cloudfoundry-identity-server:compileTestJava", ":cloudfoundry-identity-server:compileJava", ":cloudfoundry-identity-server:compileJava/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", ":cloudfoundry-identity-server:processResources", ":cloudfoundry-identity-model:compileJava", ":cloudfoundry-identity-model:classes", ":cloudfoundry-identity-server:classes", ":cloudfoundry-identity-metrics-data:processResources", ":cloudfoundry-identity-model:mainOutputResourcesDir", ":cloudfoundry-identity-model:gitInfo", "/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", "/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", ":cloudfoundry-identity-model:buildInfo", ":cloudfoundry-identity-metrics-data:compileJava", ":cloudfoundry-identity-metrics-data:jar"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_275", "original_commit_message": "[3.2.x] Fixed CVE-2021-33203 -- Fixed potential path-traversal via admindocs' TemplateDetailView.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/contrib/admindocs/views.py b/django/contrib/admindocs/views.py\nindex bd566cde40..60b357e927 100644\n--- a/django/contrib/admindocs/views.py\n+++ b/django/contrib/admindocs/views.py\n@@ -16,6 +16,7 @@ from django.db import models\n from django.http import Http404\n from django.template.engine import Engine\n from django.urls import get_mod_func, get_resolver, get_urlconf\n+from django.utils._os import safe_join\n from django.utils.decorators import method_decorator\n from django.utils.inspect import (\n     func_accepts_kwargs, func_accepts_var_args, get_func_full_args,\n@@ -329,7 +330,7 @@ class TemplateDetailView(BaseAdminDocsView):\n         else:\n             # This doesn't account for template loaders (#24128).\n             for index, directory in enumerate(default_engine.dirs):\n-                template_file = Path(directory) / template\n+                template_file = Path(safe_join(directory, template))\n                 if template_file.exists():\n                     template_contents = template_file.read_text()\n                 else:\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/admin_docs/test_views.py b/tests/admin_docs/test_views.py\nindex 47bec73a50..45fc50012b 100644\n--- a/tests/admin_docs/test_views.py\n+++ b/tests/admin_docs/test_views.py\n@@ -137,6 +137,22 @@ class AdminDocViewTests(TestDataMixin, AdminDocsTestCase):\n         self.assertContains(response, 'View documentation')\n \n \n+@unittest.skipUnless(utils.docutils_is_available, 'no docutils installed.')\n+class AdminDocViewDefaultEngineOnly(TestDataMixin, AdminDocsTestCase):\n+\n+    def setUp(self):\n+        self.client.force_login(self.superuser)\n+\n+    def test_template_detail_path_traversal(self):\n+        cases = ['/etc/passwd', '../passwd']\n+        for fpath in cases:\n+            with self.subTest(path=fpath):\n+                response = self.client.get(\n+                    reverse('django-admindocs-templates', args=[fpath]),\n+                )\n+                self.assertEqual(response.status_code, 400)\n+\n+\n @override_settings(TEMPLATES=[{\n     'NAME': 'ONE',\n     'BACKEND': 'django.template.backends.django.DjangoTemplates',\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "dfaba12cda060b8b292ae1d271b44bf810b1c5b9", "source_date": "Wed Jun 2 10:44:39 2021 +0200", "source_tag": "3.2.4", "target_commit": "20c67a0693c4ede2b09af02574823485e82e4c8f", "target_date": "Wed Jun 2 10:38:07 2021 +0200", "target_tag": "3.1.12", "FAIL TO PASS": ["admin_docs.test_views.AdminDocViewDefaultEngineOnly.test_template_detail_path_traversal"], "PASS TO PASS": ["admin_docs.test_views.TestFieldType.test_custom_fields", "admin_docs.test_views.TestFieldType.test_builtin_fields", "admin_docs.test_views.TestFieldType.test_field_name", "admin_docs.test_views.AdminDocViewFunctionsTests.test_simplify_regex"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_1300", "original_commit_message": "Refactor UAA token service to use new validation methods\n[#158846330] https://www.pivotaltracker.com/story/show/158846330\nSigned-off-by: Bruce Ricard <bruce.ricard@gmail.com>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java b/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java\nindex 130dce797..dd06e1de4 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java\n@@ -938,20 +938,11 @@ public class UaaTokenServices implements AuthorizationServerTokenServices, Resou\n             throw new InvalidTokenException(\"Invalid access token value, must be at least 30 characters\");\n         }\n \n-        TokenValidation tokenValidation = validateToken(accessToken);\n-        Map<String, Object> claims = tokenValidation.getClaims();\n-\n-        Object jtiClaim = claims.get(JTI);\n+        TokenValidation tokenValidation = validateToken(accessToken)\n+          .checkAccessToken()\n+          .throwIfInvalid();\n \n-        if (jtiClaim == null) {\n-            throw new InvalidTokenException(\"The token must contain a jti claim.\");\n-        } else {\n-            if (jtiClaim.toString().endsWith(REFRESH_TOKEN_SUFFIX)) {\n-                throw new InvalidTokenException(\n-                  \"Invalid access token was provided.\"\n-                );\n-            }\n-        }\n+        Map<String, Object> claims = tokenValidation.getClaims();\n \n         accessToken = tokenValidation.getJwt().getEncoded();\n \n@@ -1014,7 +1005,10 @@ public class UaaTokenServices implements AuthorizationServerTokenServices, Resou\n      */\n     @Override\n     public OAuth2AccessToken readAccessToken(String accessToken) {\n-        TokenValidation tokenValidation = validateToken(accessToken);\n+        TokenValidation tokenValidation = validateToken(accessToken)\n+          .checkAccessToken()\n+          .throwIfInvalid();\n+\n         Map<String, Object> claims = tokenValidation.getClaims();\n         accessToken = tokenValidation.getJwt().getEncoded();\n \n\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/util/TokenValidation.java b/server/src/main/java/org/cloudfoundry/identity/uaa/util/TokenValidation.java\nindex d68486e81..ad2bcaadf 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/util/TokenValidation.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/util/TokenValidation.java\n@@ -58,9 +58,11 @@ import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.CID;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.CLIENT_ID;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.EXP;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.ISS;\n+import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.JTI;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.REVOCATION_SIGNATURE;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.SCOPE;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.USER_ID;\n+import static org.cloudfoundry.identity.uaa.oauth.token.TokenConstants.REFRESH_TOKEN_SUFFIX;\n import static org.cloudfoundry.identity.uaa.util.UaaTokenUtils.isUserToken;\n \n public class TokenValidation {\n@@ -492,4 +494,19 @@ public class TokenValidation {\n     public Map<String, Object> getClaims() {\n         return claims;\n     }\n+\n+    public TokenValidation checkAccessToken() {\n+        Object jti = this.getClaims().get(JTI);\n+        if (jti == null) {\n+            addError(\"The token must contain a jti claim.\");\n+            return this;\n+        }\n+\n+        if (jti.toString().endsWith(REFRESH_TOKEN_SUFFIX)) {\n+            addError(\"Invalid access token.\");\n+        }\n+\n+        return this;\n+    }\n+\n }\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java\nindex d408f25bc..9dfbec8d1 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java\n@@ -1756,6 +1756,54 @@ public class UaaTokenServicesTests {\n         readAccessToken(new HashSet<>(Arrays.asList(ClaimConstants.EMAIL, ClaimConstants.USER_NAME)));\n     }\n \n+    @Test\n+    public void testReadAccessToken_When_Given_Refresh_token_should_throw_exception() {\n+        tokenServices.setExcludedClaims(new HashSet<>(Arrays.asList(ClaimConstants.EMAIL, ClaimConstants.USER_NAME)));\n+        AuthorizationRequest authorizationRequest =new AuthorizationRequest(CLIENT_ID, tokenSupport.requestedAuthScopes);\n+        authorizationRequest.setResourceIds(new HashSet<>(tokenSupport.resourceIds));\n+        Map<String, String> azParameters = new HashMap<>(authorizationRequest.getRequestParameters());\n+        azParameters.put(GRANT_TYPE, AUTHORIZATION_CODE);\n+        authorizationRequest.setRequestParameters(azParameters);\n+        Authentication userAuthentication = tokenSupport.defaultUserAuthentication;\n+\n+        Calendar expiresAt1 = Calendar.getInstance();\n+        expiresAt1.add(Calendar.MILLISECOND, 3000);\n+        Calendar updatedAt1 = Calendar.getInstance();\n+        updatedAt1.add(Calendar.MILLISECOND, -1000);\n+\n+        tokenSupport.approvalStore.addApproval(new Approval()\n+            .setUserId(tokenSupport.userId)\n+            .setClientId(CLIENT_ID)\n+            .setScope(tokenSupport.readScope.get(0))\n+            .setExpiresAt(expiresAt1.getTime())\n+            .setStatus(ApprovalStatus.APPROVED)\n+            .setLastUpdatedAt(updatedAt1.getTime()), IdentityZoneHolder.get().getId());\n+        tokenSupport.approvalStore.addApproval(new Approval()\n+            .setUserId(tokenSupport.userId)\n+            .setClientId(CLIENT_ID)\n+            .setScope(tokenSupport.writeScope.get(0))\n+            .setExpiresAt(expiresAt1.getTime())\n+            .setStatus(ApprovalStatus.APPROVED)\n+            .setLastUpdatedAt(updatedAt1.getTime()), IdentityZoneHolder.get().getId());\n+        Approval approval = new Approval()\n+            .setUserId(tokenSupport.userId)\n+            .setClientId(CLIENT_ID)\n+            .setScope(OPENID)\n+            .setExpiresAt(expiresAt1.getTime())\n+            .setStatus(ApprovalStatus.APPROVED)\n+            .setLastUpdatedAt(updatedAt1.getTime());\n+        tokenSupport.approvalStore.addApproval(\n+            approval, IdentityZoneHolder.get().getId());\n+\n+        OAuth2Authentication authentication = new OAuth2Authentication(authorizationRequest.createOAuth2Request(), userAuthentication);\n+        OAuth2AccessToken accessToken = tokenServices.createAccessToken(authentication);\n+\n+\n+        expectedException.expectMessage(\"Invalid access token.\");\n+        tokenServices.readAccessToken(accessToken.getRefreshToken().getValue());\n+    }\n+\n+\n     public void readAccessToken(Set<String> excludedClaims) {\n         tokenServices.setExcludedClaims(excludedClaims);\n         AuthorizationRequest authorizationRequest =new AuthorizationRequest(CLIENT_ID, tokenSupport.requestedAuthScopes);\n@@ -1996,7 +2044,7 @@ public class UaaTokenServicesTests {\n         String refreshTokenValue = tokenProvisioning.retrieve(compositeToken.getRefreshToken().getValue(), IdentityZoneHolder.get().getId()).getValue();\n \n         expectedException.expect(InvalidTokenException.class);\n-        expectedException.expectMessage(\"Invalid access token was provided.\");\n+        expectedException.expectMessage(\"Invalid access token.\");\n \n         tokenServices.loadAuthentication(refreshTokenValue);\n     }\n@@ -2026,7 +2074,7 @@ public class UaaTokenServicesTests {\n         String refreshTokenValue = tokenProvisioning.retrieve(refreshToken.getClaims().get(\"jti\").toString(), IdentityZoneHolder.get().getId()).getValue();\n \n         expectedException.expect(InvalidTokenException.class);\n-        expectedException.expectMessage(\"Invalid access token was provided.\");\n+        expectedException.expectMessage(\"Invalid access token.\");\n         tokenServices.loadAuthentication(refreshTokenValue);\n     }\n \n\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/util/TokenValidationTest.java b/server/src/test/java/org/cloudfoundry/identity/uaa/util/TokenValidationTest.java\nindex c86e8cae7..49bdb2103 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/util/TokenValidationTest.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/util/TokenValidationTest.java\n@@ -20,6 +20,7 @@ import org.cloudfoundry.identity.uaa.user.MockUaaUserDatabase;\n import org.cloudfoundry.identity.uaa.user.UaaUser;\n import org.cloudfoundry.identity.uaa.user.UaaUserDatabase;\n import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;\n+import org.hamcrest.CoreMatchers;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n@@ -46,13 +47,19 @@ import java.util.stream.Collectors;\n import static java.util.Collections.EMPTY_LIST;\n import static org.cloudfoundry.identity.uaa.oauth.client.ClientConstants.REQUIRED_USER_GROUPS;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.EMAIL;\n+import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.JTI;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.USER_NAME;\n import static org.cloudfoundry.identity.uaa.util.TokenValidation.validate;\n import static org.cloudfoundry.identity.uaa.util.UaaMapUtils.entry;\n import static org.cloudfoundry.identity.uaa.util.UaaMapUtils.map;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.hasItems;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n import static org.hamcrest.Matchers.containsInAnyOrder;\n import static org.hamcrest.Matchers.empty;\n import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasSize;\n import static org.hamcrest.Matchers.instanceOf;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertThat;\n@@ -210,12 +217,53 @@ public class TokenValidationTest {\n                 .checkRevocationSignature(Collections.singletonList(\"fa1c787d\"))\n                 .checkAudience(\"acme\", \"app\")\n                 .checkRevocableTokenStore(revocableTokenProvisioning)\n+                .checkAccessToken()\n                 ;\n \n         assertThat(validation.getValidationErrors(), empty());\n         assertTrue(validation.isValid());\n     }\n \n+    @Test\n+    public void validateAccessToken() throws Exception {\n+        content.put(JTI, \"8b14f193-8212-4af2-9927-e3ae903f94a6-r\");\n+\n+        TokenValidation validation = validate(getToken())\n+          .checkAccessToken();\n+\n+        assertThat(validation.getValidationErrors(), not(empty()));\n+        assertThat(validation.getValidationErrors(), hasSize(1));\n+        assertThat(validation.getValidationErrors().get(0), instanceOf(InvalidTokenException.class));\n+        assertThat(validation.getValidationErrors().get(0).getMessage(), is(\"Invalid access token.\"));\n+\n+        assertThat(validation.isValid(), is(false));\n+    }\n+\n+    @Test\n+    public void validateAccessToken_with_dashR_in_JTI_should_fail_validation() throws Exception {\n+        content.put(JTI, \"8b14f193-r-8212-4af2-9927-e3ae903f94a6\");\n+\n+        TokenValidation validation = validate(getToken())\n+          .checkAccessToken();\n+\n+        assertThat(validation.getValidationErrors(), empty());\n+        assertThat(validation.isValid(), is(true));\n+    }\n+\n+    @Test\n+    public void validateAccessToken_without_jti_should_fail_validation() throws Exception {\n+        content.put(JTI, null);\n+\n+        TokenValidation validation = validate(getToken())\n+          .checkAccessToken();\n+\n+        assertThat(validation.getValidationErrors(), hasSize(1));\n+        assertThat(validation.getValidationErrors().get(0), instanceOf(InvalidTokenException.class));\n+        assertThat(validation.getValidationErrors().get(0).getMessage(), is(\"The token must contain a jti claim.\"));\n+\n+        assertThat(validation.isValid(), is(false));\n+    }\n+\n     @Test\n     public void validateToken_Without_Email_And_Username() throws Exception {\n         TokenValidation validation = validate(getToken(Arrays.asList(EMAIL, USER_NAME)))\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "2906057dae995024576ce6afdc20abd855695141", "source_date": "Tue Jul 10 10:58:25 2018 -0700", "source_tag": "4.19.2", "target_commit": "a1d523c7f150e56bf06df8b83ed1d416d6c1d3bb", "target_date": "Wed Jul 11 15:11:36 2018 -0700", "target_tag": "4.5.7", "FAIL TO PASS": ["/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/util/TokenValidationTest.java"], "PASS TO PASS": [":cloudfoundry-identity-model:mainOutputResourcesDir", ":cloudfoundry-identity-model:buildInfo", ":cloudfoundry-identity-model:compileJava", ":cloudfoundry-identity-model:processResources", ":cloudfoundry-identity-model:jar", ":cloudfoundry-identity-model:gitInfo", ":cloudfoundry-identity-server:compileJava/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", ":cloudfoundry-identity-model:classes", "/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", ":cloudfoundry-identity-server:classes", ":cloudfoundry-identity-server:compileTestJava/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", ":cloudfoundry-identity-server:compileTestJava", "/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", ":cloudfoundry-identity-server:compileJava", ":cloudfoundry-identity-server:processResources"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_277", "original_commit_message": "[3.2.x] Fixed CVE-2021-33203 -- Fixed potential path-traversal via admindocs' TemplateDetailView.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/contrib/admindocs/views.py b/django/contrib/admindocs/views.py\nindex bd566cde40..60b357e927 100644\n--- a/django/contrib/admindocs/views.py\n+++ b/django/contrib/admindocs/views.py\n@@ -16,6 +16,7 @@ from django.db import models\n from django.http import Http404\n from django.template.engine import Engine\n from django.urls import get_mod_func, get_resolver, get_urlconf\n+from django.utils._os import safe_join\n from django.utils.decorators import method_decorator\n from django.utils.inspect import (\n     func_accepts_kwargs, func_accepts_var_args, get_func_full_args,\n@@ -329,7 +330,7 @@ class TemplateDetailView(BaseAdminDocsView):\n         else:\n             # This doesn't account for template loaders (#24128).\n             for index, directory in enumerate(default_engine.dirs):\n-                template_file = Path(directory) / template\n+                template_file = Path(safe_join(directory, template))\n                 if template_file.exists():\n                     template_contents = template_file.read_text()\n                 else:\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/admin_docs/test_views.py b/tests/admin_docs/test_views.py\nindex 47bec73a50..45fc50012b 100644\n--- a/tests/admin_docs/test_views.py\n+++ b/tests/admin_docs/test_views.py\n@@ -137,6 +137,22 @@ class AdminDocViewTests(TestDataMixin, AdminDocsTestCase):\n         self.assertContains(response, 'View documentation')\n \n \n+@unittest.skipUnless(utils.docutils_is_available, 'no docutils installed.')\n+class AdminDocViewDefaultEngineOnly(TestDataMixin, AdminDocsTestCase):\n+\n+    def setUp(self):\n+        self.client.force_login(self.superuser)\n+\n+    def test_template_detail_path_traversal(self):\n+        cases = ['/etc/passwd', '../passwd']\n+        for fpath in cases:\n+            with self.subTest(path=fpath):\n+                response = self.client.get(\n+                    reverse('django-admindocs-templates', args=[fpath]),\n+                )\n+                self.assertEqual(response.status_code, 400)\n+\n+\n @override_settings(TEMPLATES=[{\n     'NAME': 'ONE',\n     'BACKEND': 'django.template.backends.django.DjangoTemplates',\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "dfaba12cda060b8b292ae1d271b44bf810b1c5b9", "source_date": "Wed Jun 2 10:44:39 2021 +0200", "source_tag": "3.2.4", "target_commit": "053cc9534d174dc89daba36724ed2dcb36755b90", "target_date": "Wed Jun 2 10:26:22 2021 +0200", "target_tag": "2.2.24", "FAIL TO PASS": ["admin_docs.test_views.AdminDocViewDefaultEngineOnly.test_template_detail_path_traversal"], "PASS TO PASS": ["admin_docs.test_views.TestModelDetailView.test_method_excludes", "admin_docs.test_views.AdminDocViewTests.test_index", "admin_docs.test_views.AdminDocViewWithMultipleEngines.test_templatefilter_index", "admin_docs.test_views.TestModelDetailView.test_methods_with_multiple_arguments_display_arguments", "admin_docs.test_views.AdminDocViewWithMultipleEngines.test_template_detail", "admin_docs.test_views.AdminDocViewWithMultipleEngines.test_model_index", "admin_docs.test_views.AdminDocViewWithMultipleEngines.test_view_index", "admin_docs.test_views.AdminDocViewWithMultipleEngines.test_missing_docutils", "admin_docs.test_views.TestModelDetailView.test_descriptions_render_correctly", "admin_docs.test_views.TestModelDetailView.test_method_data_types", "admin_docs.test_views.TestModelDetailView.test_model_not_found", "admin_docs.test_views.AdminDocViewTests.test_model_index", "admin_docs.test_views.AdminDocViewWithMultipleEngines.test_view_index_with_method", "admin_docs.test_views.AdminDocViewTests.test_bookmarklets", "admin_docs.test_views.AdminDocViewTests.test_view_detail_illegal_import", "admin_docs.test_views.TestFieldType.test_custom_fields", "admin_docs.test_views.AdminDocViewTests.test_no_sites_framework", "admin_docs.test_views.AdminDocViewWithMultipleEngines.test_namespaced_view_detail", "admin_docs.test_views.TestModelDetailView.test_model_with_many_to_one", "admin_docs.test_views.AdminDocViewWithMultipleEngines.test_no_sites_framework", "admin_docs.test_views.AdminDocViewTests.test_view_detail_as_method", "admin_docs.test_views.AdminDocViewWithMultipleEngines.test_view_detail_as_method", "admin_docs.test_views.TestModelDetailView.test_model_detail_title", "admin_docs.test_views.AdminDocViewWithMultipleEngines.test_index", "admin_docs.test_views.AdminDocViewWithMultipleEngines.test_view_detail_illegal_import", "admin_docs.test_views.TestModelDetailView.test_app_not_found", "admin_docs.test_views.AdminDocViewWithMultipleEngines.test_view_detail", "admin_docs.test_views.AdminDocViewTests.test_view_index", "admin_docs.test_views.AdminDocViewTests.test_template_detail", "admin_docs.test_views.AdminDocViewFunctionsTests.test_simplify_regex", "admin_docs.test_views.TestModelDetailView.test_model_docstring_renders_correctly", "admin_docs.test_views.AdminDocViewTests.test_templatetag_index", "admin_docs.test_views.TestModelDetailView.test_methods_with_arguments_display_arguments", "admin_docs.test_views.TestModelDetailView.test_methods_with_arguments_display_arguments_default_value", "admin_docs.test_views.AdminDocViewTests.test_view_index_with_method", "admin_docs.test_views.AdminDocViewWithMultipleEngines.test_templatetag_index", "admin_docs.test_views.TestModelDetailView.test_methods_with_arguments", "admin_docs.test_views.AdminDocViewTests.test_templatefilter_index", "admin_docs.test_views.AdminDocViewTests.test_namespaced_view_detail", "admin_docs.test_views.AdminDocViewWithMultipleEngines.test_bookmarklets", "admin_docs.test_views.TestModelDetailView.test_model_with_no_backward_relations_render_only_relevant_fields", "admin_docs.test_views.AdminDocViewTests.test_view_detail", "admin_docs.test_views.TestFieldType.test_builtin_fields", "admin_docs.test_views.AdminDocViewTests.test_missing_docutils", "admin_docs.test_views.TestFieldType.test_field_name"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_1303", "original_commit_message": "Refactor UAA token service to use new validation methods\n[#158846330] https://www.pivotaltracker.com/story/show/158846330\nSigned-off-by: Bruce Ricard <bruce.ricard@gmail.com>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java b/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java\nindex 130dce797..dd06e1de4 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java\n@@ -938,20 +938,11 @@ public class UaaTokenServices implements AuthorizationServerTokenServices, Resou\n             throw new InvalidTokenException(\"Invalid access token value, must be at least 30 characters\");\n         }\n \n-        TokenValidation tokenValidation = validateToken(accessToken);\n-        Map<String, Object> claims = tokenValidation.getClaims();\n-\n-        Object jtiClaim = claims.get(JTI);\n+        TokenValidation tokenValidation = validateToken(accessToken)\n+          .checkAccessToken()\n+          .throwIfInvalid();\n \n-        if (jtiClaim == null) {\n-            throw new InvalidTokenException(\"The token must contain a jti claim.\");\n-        } else {\n-            if (jtiClaim.toString().endsWith(REFRESH_TOKEN_SUFFIX)) {\n-                throw new InvalidTokenException(\n-                  \"Invalid access token was provided.\"\n-                );\n-            }\n-        }\n+        Map<String, Object> claims = tokenValidation.getClaims();\n \n         accessToken = tokenValidation.getJwt().getEncoded();\n \n@@ -1014,7 +1005,10 @@ public class UaaTokenServices implements AuthorizationServerTokenServices, Resou\n      */\n     @Override\n     public OAuth2AccessToken readAccessToken(String accessToken) {\n-        TokenValidation tokenValidation = validateToken(accessToken);\n+        TokenValidation tokenValidation = validateToken(accessToken)\n+          .checkAccessToken()\n+          .throwIfInvalid();\n+\n         Map<String, Object> claims = tokenValidation.getClaims();\n         accessToken = tokenValidation.getJwt().getEncoded();\n \n\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/util/TokenValidation.java b/server/src/main/java/org/cloudfoundry/identity/uaa/util/TokenValidation.java\nindex d68486e81..ad2bcaadf 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/util/TokenValidation.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/util/TokenValidation.java\n@@ -58,9 +58,11 @@ import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.CID;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.CLIENT_ID;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.EXP;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.ISS;\n+import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.JTI;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.REVOCATION_SIGNATURE;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.SCOPE;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.USER_ID;\n+import static org.cloudfoundry.identity.uaa.oauth.token.TokenConstants.REFRESH_TOKEN_SUFFIX;\n import static org.cloudfoundry.identity.uaa.util.UaaTokenUtils.isUserToken;\n \n public class TokenValidation {\n@@ -492,4 +494,19 @@ public class TokenValidation {\n     public Map<String, Object> getClaims() {\n         return claims;\n     }\n+\n+    public TokenValidation checkAccessToken() {\n+        Object jti = this.getClaims().get(JTI);\n+        if (jti == null) {\n+            addError(\"The token must contain a jti claim.\");\n+            return this;\n+        }\n+\n+        if (jti.toString().endsWith(REFRESH_TOKEN_SUFFIX)) {\n+            addError(\"Invalid access token.\");\n+        }\n+\n+        return this;\n+    }\n+\n }\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java\nindex d408f25bc..9dfbec8d1 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java\n@@ -1756,6 +1756,54 @@ public class UaaTokenServicesTests {\n         readAccessToken(new HashSet<>(Arrays.asList(ClaimConstants.EMAIL, ClaimConstants.USER_NAME)));\n     }\n \n+    @Test\n+    public void testReadAccessToken_When_Given_Refresh_token_should_throw_exception() {\n+        tokenServices.setExcludedClaims(new HashSet<>(Arrays.asList(ClaimConstants.EMAIL, ClaimConstants.USER_NAME)));\n+        AuthorizationRequest authorizationRequest =new AuthorizationRequest(CLIENT_ID, tokenSupport.requestedAuthScopes);\n+        authorizationRequest.setResourceIds(new HashSet<>(tokenSupport.resourceIds));\n+        Map<String, String> azParameters = new HashMap<>(authorizationRequest.getRequestParameters());\n+        azParameters.put(GRANT_TYPE, AUTHORIZATION_CODE);\n+        authorizationRequest.setRequestParameters(azParameters);\n+        Authentication userAuthentication = tokenSupport.defaultUserAuthentication;\n+\n+        Calendar expiresAt1 = Calendar.getInstance();\n+        expiresAt1.add(Calendar.MILLISECOND, 3000);\n+        Calendar updatedAt1 = Calendar.getInstance();\n+        updatedAt1.add(Calendar.MILLISECOND, -1000);\n+\n+        tokenSupport.approvalStore.addApproval(new Approval()\n+            .setUserId(tokenSupport.userId)\n+            .setClientId(CLIENT_ID)\n+            .setScope(tokenSupport.readScope.get(0))\n+            .setExpiresAt(expiresAt1.getTime())\n+            .setStatus(ApprovalStatus.APPROVED)\n+            .setLastUpdatedAt(updatedAt1.getTime()), IdentityZoneHolder.get().getId());\n+        tokenSupport.approvalStore.addApproval(new Approval()\n+            .setUserId(tokenSupport.userId)\n+            .setClientId(CLIENT_ID)\n+            .setScope(tokenSupport.writeScope.get(0))\n+            .setExpiresAt(expiresAt1.getTime())\n+            .setStatus(ApprovalStatus.APPROVED)\n+            .setLastUpdatedAt(updatedAt1.getTime()), IdentityZoneHolder.get().getId());\n+        Approval approval = new Approval()\n+            .setUserId(tokenSupport.userId)\n+            .setClientId(CLIENT_ID)\n+            .setScope(OPENID)\n+            .setExpiresAt(expiresAt1.getTime())\n+            .setStatus(ApprovalStatus.APPROVED)\n+            .setLastUpdatedAt(updatedAt1.getTime());\n+        tokenSupport.approvalStore.addApproval(\n+            approval, IdentityZoneHolder.get().getId());\n+\n+        OAuth2Authentication authentication = new OAuth2Authentication(authorizationRequest.createOAuth2Request(), userAuthentication);\n+        OAuth2AccessToken accessToken = tokenServices.createAccessToken(authentication);\n+\n+\n+        expectedException.expectMessage(\"Invalid access token.\");\n+        tokenServices.readAccessToken(accessToken.getRefreshToken().getValue());\n+    }\n+\n+\n     public void readAccessToken(Set<String> excludedClaims) {\n         tokenServices.setExcludedClaims(excludedClaims);\n         AuthorizationRequest authorizationRequest =new AuthorizationRequest(CLIENT_ID, tokenSupport.requestedAuthScopes);\n@@ -1996,7 +2044,7 @@ public class UaaTokenServicesTests {\n         String refreshTokenValue = tokenProvisioning.retrieve(compositeToken.getRefreshToken().getValue(), IdentityZoneHolder.get().getId()).getValue();\n \n         expectedException.expect(InvalidTokenException.class);\n-        expectedException.expectMessage(\"Invalid access token was provided.\");\n+        expectedException.expectMessage(\"Invalid access token.\");\n \n         tokenServices.loadAuthentication(refreshTokenValue);\n     }\n@@ -2026,7 +2074,7 @@ public class UaaTokenServicesTests {\n         String refreshTokenValue = tokenProvisioning.retrieve(refreshToken.getClaims().get(\"jti\").toString(), IdentityZoneHolder.get().getId()).getValue();\n \n         expectedException.expect(InvalidTokenException.class);\n-        expectedException.expectMessage(\"Invalid access token was provided.\");\n+        expectedException.expectMessage(\"Invalid access token.\");\n         tokenServices.loadAuthentication(refreshTokenValue);\n     }\n \n\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/util/TokenValidationTest.java b/server/src/test/java/org/cloudfoundry/identity/uaa/util/TokenValidationTest.java\nindex c86e8cae7..49bdb2103 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/util/TokenValidationTest.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/util/TokenValidationTest.java\n@@ -20,6 +20,7 @@ import org.cloudfoundry.identity.uaa.user.MockUaaUserDatabase;\n import org.cloudfoundry.identity.uaa.user.UaaUser;\n import org.cloudfoundry.identity.uaa.user.UaaUserDatabase;\n import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;\n+import org.hamcrest.CoreMatchers;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n@@ -46,13 +47,19 @@ import java.util.stream.Collectors;\n import static java.util.Collections.EMPTY_LIST;\n import static org.cloudfoundry.identity.uaa.oauth.client.ClientConstants.REQUIRED_USER_GROUPS;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.EMAIL;\n+import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.JTI;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.USER_NAME;\n import static org.cloudfoundry.identity.uaa.util.TokenValidation.validate;\n import static org.cloudfoundry.identity.uaa.util.UaaMapUtils.entry;\n import static org.cloudfoundry.identity.uaa.util.UaaMapUtils.map;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.hasItems;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n import static org.hamcrest.Matchers.containsInAnyOrder;\n import static org.hamcrest.Matchers.empty;\n import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasSize;\n import static org.hamcrest.Matchers.instanceOf;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertThat;\n@@ -210,12 +217,53 @@ public class TokenValidationTest {\n                 .checkRevocationSignature(Collections.singletonList(\"fa1c787d\"))\n                 .checkAudience(\"acme\", \"app\")\n                 .checkRevocableTokenStore(revocableTokenProvisioning)\n+                .checkAccessToken()\n                 ;\n \n         assertThat(validation.getValidationErrors(), empty());\n         assertTrue(validation.isValid());\n     }\n \n+    @Test\n+    public void validateAccessToken() throws Exception {\n+        content.put(JTI, \"8b14f193-8212-4af2-9927-e3ae903f94a6-r\");\n+\n+        TokenValidation validation = validate(getToken())\n+          .checkAccessToken();\n+\n+        assertThat(validation.getValidationErrors(), not(empty()));\n+        assertThat(validation.getValidationErrors(), hasSize(1));\n+        assertThat(validation.getValidationErrors().get(0), instanceOf(InvalidTokenException.class));\n+        assertThat(validation.getValidationErrors().get(0).getMessage(), is(\"Invalid access token.\"));\n+\n+        assertThat(validation.isValid(), is(false));\n+    }\n+\n+    @Test\n+    public void validateAccessToken_with_dashR_in_JTI_should_fail_validation() throws Exception {\n+        content.put(JTI, \"8b14f193-r-8212-4af2-9927-e3ae903f94a6\");\n+\n+        TokenValidation validation = validate(getToken())\n+          .checkAccessToken();\n+\n+        assertThat(validation.getValidationErrors(), empty());\n+        assertThat(validation.isValid(), is(true));\n+    }\n+\n+    @Test\n+    public void validateAccessToken_without_jti_should_fail_validation() throws Exception {\n+        content.put(JTI, null);\n+\n+        TokenValidation validation = validate(getToken())\n+          .checkAccessToken();\n+\n+        assertThat(validation.getValidationErrors(), hasSize(1));\n+        assertThat(validation.getValidationErrors().get(0), instanceOf(InvalidTokenException.class));\n+        assertThat(validation.getValidationErrors().get(0).getMessage(), is(\"The token must contain a jti claim.\"));\n+\n+        assertThat(validation.isValid(), is(false));\n+    }\n+\n     @Test\n     public void validateToken_Without_Email_And_Username() throws Exception {\n         TokenValidation validation = validate(getToken(Arrays.asList(EMAIL, USER_NAME)))\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "2906057dae995024576ce6afdc20abd855695141", "source_date": "Tue Jul 10 10:58:25 2018 -0700", "source_tag": "4.19.2", "target_commit": "aba1fb5f18e0d628628b2d960fc6d0cc62d86f53", "target_date": "Wed Jul 11 15:11:08 2018 -0700", "target_tag": "4.7.6", "FAIL TO PASS": ["/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/util/TokenValidationTest.java"], "PASS TO PASS": [":cloudfoundry-identity-model:processResources", ":cloudfoundry-identity-model:jar", ":cloudfoundry-identity-metrics-data:classes", ":cloudfoundry-identity-server:compileTestJava/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", ":cloudfoundry-identity-server:compileTestJava", ":cloudfoundry-identity-server:compileJava", ":cloudfoundry-identity-server:compileJava/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", ":cloudfoundry-identity-server:processResources", ":cloudfoundry-identity-model:compileJava", ":cloudfoundry-identity-model:classes", ":cloudfoundry-identity-server:classes", ":cloudfoundry-identity-metrics-data:processResources", ":cloudfoundry-identity-model:mainOutputResourcesDir", ":cloudfoundry-identity-model:gitInfo", "/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", "/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", ":cloudfoundry-identity-model:buildInfo", ":cloudfoundry-identity-metrics-data:compileJava", ":cloudfoundry-identity-metrics-data:jar"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_1304", "original_commit_message": "Refactor UAA token service to use new validation methods\n[#158846330] https://www.pivotaltracker.com/story/show/158846330\nSigned-off-by: Bruce Ricard <bruce.ricard@gmail.com>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java b/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java\nindex 130dce797..dd06e1de4 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServices.java\n@@ -938,20 +938,11 @@ public class UaaTokenServices implements AuthorizationServerTokenServices, Resou\n             throw new InvalidTokenException(\"Invalid access token value, must be at least 30 characters\");\n         }\n \n-        TokenValidation tokenValidation = validateToken(accessToken);\n-        Map<String, Object> claims = tokenValidation.getClaims();\n-\n-        Object jtiClaim = claims.get(JTI);\n+        TokenValidation tokenValidation = validateToken(accessToken)\n+          .checkAccessToken()\n+          .throwIfInvalid();\n \n-        if (jtiClaim == null) {\n-            throw new InvalidTokenException(\"The token must contain a jti claim.\");\n-        } else {\n-            if (jtiClaim.toString().endsWith(REFRESH_TOKEN_SUFFIX)) {\n-                throw new InvalidTokenException(\n-                  \"Invalid access token was provided.\"\n-                );\n-            }\n-        }\n+        Map<String, Object> claims = tokenValidation.getClaims();\n \n         accessToken = tokenValidation.getJwt().getEncoded();\n \n@@ -1014,7 +1005,10 @@ public class UaaTokenServices implements AuthorizationServerTokenServices, Resou\n      */\n     @Override\n     public OAuth2AccessToken readAccessToken(String accessToken) {\n-        TokenValidation tokenValidation = validateToken(accessToken);\n+        TokenValidation tokenValidation = validateToken(accessToken)\n+          .checkAccessToken()\n+          .throwIfInvalid();\n+\n         Map<String, Object> claims = tokenValidation.getClaims();\n         accessToken = tokenValidation.getJwt().getEncoded();\n \n\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/util/TokenValidation.java b/server/src/main/java/org/cloudfoundry/identity/uaa/util/TokenValidation.java\nindex d68486e81..ad2bcaadf 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/util/TokenValidation.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/util/TokenValidation.java\n@@ -58,9 +58,11 @@ import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.CID;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.CLIENT_ID;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.EXP;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.ISS;\n+import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.JTI;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.REVOCATION_SIGNATURE;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.SCOPE;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.USER_ID;\n+import static org.cloudfoundry.identity.uaa.oauth.token.TokenConstants.REFRESH_TOKEN_SUFFIX;\n import static org.cloudfoundry.identity.uaa.util.UaaTokenUtils.isUserToken;\n \n public class TokenValidation {\n@@ -492,4 +494,19 @@ public class TokenValidation {\n     public Map<String, Object> getClaims() {\n         return claims;\n     }\n+\n+    public TokenValidation checkAccessToken() {\n+        Object jti = this.getClaims().get(JTI);\n+        if (jti == null) {\n+            addError(\"The token must contain a jti claim.\");\n+            return this;\n+        }\n+\n+        if (jti.toString().endsWith(REFRESH_TOKEN_SUFFIX)) {\n+            addError(\"Invalid access token.\");\n+        }\n+\n+        return this;\n+    }\n+\n }\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java\nindex d408f25bc..9dfbec8d1 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/oauth/UaaTokenServicesTests.java\n@@ -1756,6 +1756,54 @@ public class UaaTokenServicesTests {\n         readAccessToken(new HashSet<>(Arrays.asList(ClaimConstants.EMAIL, ClaimConstants.USER_NAME)));\n     }\n \n+    @Test\n+    public void testReadAccessToken_When_Given_Refresh_token_should_throw_exception() {\n+        tokenServices.setExcludedClaims(new HashSet<>(Arrays.asList(ClaimConstants.EMAIL, ClaimConstants.USER_NAME)));\n+        AuthorizationRequest authorizationRequest =new AuthorizationRequest(CLIENT_ID, tokenSupport.requestedAuthScopes);\n+        authorizationRequest.setResourceIds(new HashSet<>(tokenSupport.resourceIds));\n+        Map<String, String> azParameters = new HashMap<>(authorizationRequest.getRequestParameters());\n+        azParameters.put(GRANT_TYPE, AUTHORIZATION_CODE);\n+        authorizationRequest.setRequestParameters(azParameters);\n+        Authentication userAuthentication = tokenSupport.defaultUserAuthentication;\n+\n+        Calendar expiresAt1 = Calendar.getInstance();\n+        expiresAt1.add(Calendar.MILLISECOND, 3000);\n+        Calendar updatedAt1 = Calendar.getInstance();\n+        updatedAt1.add(Calendar.MILLISECOND, -1000);\n+\n+        tokenSupport.approvalStore.addApproval(new Approval()\n+            .setUserId(tokenSupport.userId)\n+            .setClientId(CLIENT_ID)\n+            .setScope(tokenSupport.readScope.get(0))\n+            .setExpiresAt(expiresAt1.getTime())\n+            .setStatus(ApprovalStatus.APPROVED)\n+            .setLastUpdatedAt(updatedAt1.getTime()), IdentityZoneHolder.get().getId());\n+        tokenSupport.approvalStore.addApproval(new Approval()\n+            .setUserId(tokenSupport.userId)\n+            .setClientId(CLIENT_ID)\n+            .setScope(tokenSupport.writeScope.get(0))\n+            .setExpiresAt(expiresAt1.getTime())\n+            .setStatus(ApprovalStatus.APPROVED)\n+            .setLastUpdatedAt(updatedAt1.getTime()), IdentityZoneHolder.get().getId());\n+        Approval approval = new Approval()\n+            .setUserId(tokenSupport.userId)\n+            .setClientId(CLIENT_ID)\n+            .setScope(OPENID)\n+            .setExpiresAt(expiresAt1.getTime())\n+            .setStatus(ApprovalStatus.APPROVED)\n+            .setLastUpdatedAt(updatedAt1.getTime());\n+        tokenSupport.approvalStore.addApproval(\n+            approval, IdentityZoneHolder.get().getId());\n+\n+        OAuth2Authentication authentication = new OAuth2Authentication(authorizationRequest.createOAuth2Request(), userAuthentication);\n+        OAuth2AccessToken accessToken = tokenServices.createAccessToken(authentication);\n+\n+\n+        expectedException.expectMessage(\"Invalid access token.\");\n+        tokenServices.readAccessToken(accessToken.getRefreshToken().getValue());\n+    }\n+\n+\n     public void readAccessToken(Set<String> excludedClaims) {\n         tokenServices.setExcludedClaims(excludedClaims);\n         AuthorizationRequest authorizationRequest =new AuthorizationRequest(CLIENT_ID, tokenSupport.requestedAuthScopes);\n@@ -1996,7 +2044,7 @@ public class UaaTokenServicesTests {\n         String refreshTokenValue = tokenProvisioning.retrieve(compositeToken.getRefreshToken().getValue(), IdentityZoneHolder.get().getId()).getValue();\n \n         expectedException.expect(InvalidTokenException.class);\n-        expectedException.expectMessage(\"Invalid access token was provided.\");\n+        expectedException.expectMessage(\"Invalid access token.\");\n \n         tokenServices.loadAuthentication(refreshTokenValue);\n     }\n@@ -2026,7 +2074,7 @@ public class UaaTokenServicesTests {\n         String refreshTokenValue = tokenProvisioning.retrieve(refreshToken.getClaims().get(\"jti\").toString(), IdentityZoneHolder.get().getId()).getValue();\n \n         expectedException.expect(InvalidTokenException.class);\n-        expectedException.expectMessage(\"Invalid access token was provided.\");\n+        expectedException.expectMessage(\"Invalid access token.\");\n         tokenServices.loadAuthentication(refreshTokenValue);\n     }\n \n\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/util/TokenValidationTest.java b/server/src/test/java/org/cloudfoundry/identity/uaa/util/TokenValidationTest.java\nindex c86e8cae7..49bdb2103 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/util/TokenValidationTest.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/util/TokenValidationTest.java\n@@ -20,6 +20,7 @@ import org.cloudfoundry.identity.uaa.user.MockUaaUserDatabase;\n import org.cloudfoundry.identity.uaa.user.UaaUser;\n import org.cloudfoundry.identity.uaa.user.UaaUserDatabase;\n import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;\n+import org.hamcrest.CoreMatchers;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n@@ -46,13 +47,19 @@ import java.util.stream.Collectors;\n import static java.util.Collections.EMPTY_LIST;\n import static org.cloudfoundry.identity.uaa.oauth.client.ClientConstants.REQUIRED_USER_GROUPS;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.EMAIL;\n+import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.JTI;\n import static org.cloudfoundry.identity.uaa.oauth.token.ClaimConstants.USER_NAME;\n import static org.cloudfoundry.identity.uaa.util.TokenValidation.validate;\n import static org.cloudfoundry.identity.uaa.util.UaaMapUtils.entry;\n import static org.cloudfoundry.identity.uaa.util.UaaMapUtils.map;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.hasItems;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n import static org.hamcrest.Matchers.containsInAnyOrder;\n import static org.hamcrest.Matchers.empty;\n import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasSize;\n import static org.hamcrest.Matchers.instanceOf;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertThat;\n@@ -210,12 +217,53 @@ public class TokenValidationTest {\n                 .checkRevocationSignature(Collections.singletonList(\"fa1c787d\"))\n                 .checkAudience(\"acme\", \"app\")\n                 .checkRevocableTokenStore(revocableTokenProvisioning)\n+                .checkAccessToken()\n                 ;\n \n         assertThat(validation.getValidationErrors(), empty());\n         assertTrue(validation.isValid());\n     }\n \n+    @Test\n+    public void validateAccessToken() throws Exception {\n+        content.put(JTI, \"8b14f193-8212-4af2-9927-e3ae903f94a6-r\");\n+\n+        TokenValidation validation = validate(getToken())\n+          .checkAccessToken();\n+\n+        assertThat(validation.getValidationErrors(), not(empty()));\n+        assertThat(validation.getValidationErrors(), hasSize(1));\n+        assertThat(validation.getValidationErrors().get(0), instanceOf(InvalidTokenException.class));\n+        assertThat(validation.getValidationErrors().get(0).getMessage(), is(\"Invalid access token.\"));\n+\n+        assertThat(validation.isValid(), is(false));\n+    }\n+\n+    @Test\n+    public void validateAccessToken_with_dashR_in_JTI_should_fail_validation() throws Exception {\n+        content.put(JTI, \"8b14f193-r-8212-4af2-9927-e3ae903f94a6\");\n+\n+        TokenValidation validation = validate(getToken())\n+          .checkAccessToken();\n+\n+        assertThat(validation.getValidationErrors(), empty());\n+        assertThat(validation.isValid(), is(true));\n+    }\n+\n+    @Test\n+    public void validateAccessToken_without_jti_should_fail_validation() throws Exception {\n+        content.put(JTI, null);\n+\n+        TokenValidation validation = validate(getToken())\n+          .checkAccessToken();\n+\n+        assertThat(validation.getValidationErrors(), hasSize(1));\n+        assertThat(validation.getValidationErrors().get(0), instanceOf(InvalidTokenException.class));\n+        assertThat(validation.getValidationErrors().get(0).getMessage(), is(\"The token must contain a jti claim.\"));\n+\n+        assertThat(validation.isValid(), is(false));\n+    }\n+\n     @Test\n     public void validateToken_Without_Email_And_Username() throws Exception {\n         TokenValidation validation = validate(getToken(Arrays.asList(EMAIL, USER_NAME)))\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "2906057dae995024576ce6afdc20abd855695141", "source_date": "Tue Jul 10 10:58:25 2018 -0700", "source_tag": "4.19.2", "target_commit": "bbbba5aec514ad88e7d1e168a2519c80229f02ff", "target_date": "Wed Jul 11 15:10:03 2018 -0700", "target_tag": "4.12.4", "FAIL TO PASS": ["/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/util/TokenValidationTest.java"], "PASS TO PASS": [":cloudfoundry-identity-model:processResources", ":cloudfoundry-identity-model:jar", ":cloudfoundry-identity-metrics-data:classes", ":cloudfoundry-identity-server:compileTestJava/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", ":cloudfoundry-identity-server:compileTestJava", ":cloudfoundry-identity-server:compileJava", ":cloudfoundry-identity-server:compileJava/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", ":cloudfoundry-identity-server:processResources", ":cloudfoundry-identity-model:compileJava", ":cloudfoundry-identity-model:classes", ":cloudfoundry-identity-server:classes", ":cloudfoundry-identity-metrics-data:processResources", ":cloudfoundry-identity-model:mainOutputResourcesDir", ":cloudfoundry-identity-model:gitInfo", "/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", "/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", ":cloudfoundry-identity-model:buildInfo", ":cloudfoundry-identity-metrics-data:compileJava", ":cloudfoundry-identity-metrics-data:jar"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_281", "original_commit_message": "[1.7.x] Fixed DoS possibility in ModelMultipleChoiceField.\nThis is a security fix. Disclosure following shortly.\nThanks Keryn Knight for the report and initial patch.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/forms/models.py b/django/forms/models.py\nindex 0f1f54f850..37ef32dddb 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1221,8 +1221,7 @@ class ModelMultipleChoiceField(ModelChoiceField):\n     def to_python(self, value):\n         if not value:\n             return []\n-        to_py = super(ModelMultipleChoiceField, self).to_python\n-        return [to_py(val) for val in value]\n+        return list(self._check_values(value))\n \n     def clean(self, value):\n         if self.required and not value:\n@@ -1231,7 +1230,29 @@ class ModelMultipleChoiceField(ModelChoiceField):\n             return self.queryset.none()\n         if not isinstance(value, (list, tuple)):\n             raise ValidationError(self.error_messages['list'], code='list')\n+        qs = self._check_values(value)\n+        # Since this overrides the inherited ModelChoiceField.clean\n+        # we run custom validators here\n+        self.run_validators(value)\n+        return qs\n+\n+    def _check_values(self, value):\n+        \"\"\"\n+        Given a list of possible PK values, returns a QuerySet of the\n+        corresponding objects. Raises a ValidationError if a given value is\n+        invalid (not a valid PK, not in the queryset, etc.)\n+        \"\"\"\n         key = self.to_field_name or 'pk'\n+        # deduplicate given values to avoid creating many querysets or\n+        # requiring the database backend deduplicate efficiently.\n+        try:\n+            value = frozenset(value)\n+        except TypeError:\n+            # list of lists isn't hashable, for example\n+            raise ValidationError(\n+                self.error_messages['list'],\n+                code='list',\n+            )\n         for pk in value:\n             try:\n                 self.queryset.filter(**{key: pk})\n@@ -1250,9 +1271,6 @@ class ModelMultipleChoiceField(ModelChoiceField):\n                     code='invalid_choice',\n                     params={'value': val},\n                 )\n-        # Since this overrides the inherited ModelChoiceField.clean\n-        # we run custom validators here\n-        self.run_validators(value)\n         return qs\n \n     def prepare_value(self, value):\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 78c3bca416..a1871bf2bf 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1573,6 +1573,27 @@ class ModelMultipleChoiceFieldTests(TestCase):\n         self.assertTrue(form.is_valid())\n         self.assertTrue(form.has_changed())\n \n+    def test_show_hidden_initial_changed_queries_efficiently(self):\n+        class WriterForm(forms.Form):\n+            persons = forms.ModelMultipleChoiceField(\n+                show_hidden_initial=True, queryset=Writer.objects.all())\n+\n+        writers = (Writer.objects.create(name=str(x)) for x in range(0, 50))\n+        writer_pks = tuple(x.pk for x in writers)\n+        form = WriterForm(data={'initial-persons': writer_pks})\n+        with self.assertNumQueries(1):\n+            self.assertTrue(form.has_changed())\n+\n+    def test_clean_does_deduplicate_values(self):\n+        class WriterForm(forms.Form):\n+            persons = forms.ModelMultipleChoiceField(queryset=Writer.objects.all())\n+\n+        person1 = Writer.objects.create(name=\"Person 1\")\n+        form = WriterForm(data={})\n+        queryset = form.fields['persons'].clean([str(person1.pk)] * 50)\n+        sql, params = queryset.query.sql_with_params()\n+        self.assertEqual(len(params), 1)\n+\n \n class ModelOneToOneFieldTests(TestCase):\n     def test_modelform_onetoonefield(self):\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "bcfb47780ce7caecb409a9e9c1c314266e41d392", "source_date": "Tue Jan 13 13:02:56 2015 -0500", "source_tag": "1.7.3", "target_commit": "d7a06ee7e571b6dad07c0f5b519b1db02e2a476c", "target_date": "Tue Jan 13 13:10:11 2015 -0500", "target_tag": "1.6.10", "FAIL TO PASS": ["model_forms.tests.OldFormForXTests.test_clean_does_deduplicate_values", "model_forms.tests.OldFormForXTests.test_show_hidden_initial_changed_queries_efficiently"], "PASS TO PASS": ["model_forms.tests.OldFormForXTests.test_iterable_model_m2m", "If the date for unique_for_* constraints is excluded from the", "model_forms.tests.ModelFormBaseTest.test_subclassmeta_form", "model_forms.tests.ModelFormBaseTest.test_orderfields_form", "model_forms.tests.UniqueTest.test_simple_unique", "model_forms.tests.TestFieldOverridesTroughFormMeta.test_help_text_overrides", "model_forms.tests.ModelFormBaseTest.test_invalid_meta_model", "model_forms.tests.ModelFormBaseTest.test_base_form", "model_forms.tests.TestFieldOverridesTroughFormMeta.test_widget_overrides", "model_forms.tests.ModelToDictTests.test_model_to_dict_many_to_many", "model_forms.tests.OldFormForXTests.test_with_data", "model_forms.tests.UniqueTest.test_abstract_inherited_unique_together", "model_forms.tests.ModelFormBaseTest.test_replace_field", "model_forms.tests.OldFormForXTests.test_model_field_that_returns_none_to_exclude_itself_with_explicit_fields", "model_forms.tests.ValidationTest.test_validates_with_replaced_field_excluded", "ModelForm test of unique_together constraint", "model_forms.tests.ModelFormBaseTest.test_replace_field_variant_3", "model_forms.tests.TestFieldOverridesTroughFormMeta.test_label_overrides", "model_forms.tests.UniqueTest.test_inherited_unique", "model_forms.tests.OldFormForXTests.test_custom_error_messages", "Creating table model_forms_derivedbo", "model_forms.tests.ModelFormBaseTest.test_exclude_fields_with_string", "model_forms.tests.OldFormForXTests.test_big_integer_field", "model_forms.tests.ModelFormBaseTest.test_extra_fields", "model_forms.tests.ModelFormBaseTest.test_mixmodel_form", "model_forms.tests.ModelFormBaseTest.test_exclude_fields", "Test for primary_key being in the form and failing validation.", "model_forms.tests.ModelFormBaseTest.test_exclude_nonexistent_field", "model_forms.tests.ModelFormBaseTest.test_confused_form", "model_forms.tests.OldFormForXTests.test_foreignkeys_which_use_to_field", "model_forms.tests.ValidationTest.test_notrequired_overrides_notblank", "model_forms.tests.ModelFormBaseTest.test_override_field", "model_forms.tests.OldFormForXTests.test_base_form", "model_forms.tests.ModelFormBaseTest.test_article_form", "model_forms.tests.ModelFormBaseTest.test_limit_nonexistent_field", "model_forms.tests.UniqueTest.test_inherited_unique_together", "model_forms.tests.ModelFormBaseTest.test_orderfields2_form", "model_forms.tests.ModelFormBaseTest.test_missing_fields_attribute", "Help text of different widgets for ManyToManyFields model fields", "model_forms.tests.TestFieldOverridesTroughFormMeta.test_error_messages_overrides", "model_forms.tests.UniqueTest.test_unique_for_date", "model_forms.tests.UniqueTest.test_abstract_inherited_unique", "model_forms.tests.ModelFormBaseTest.test_replace_field_variant_2", "model_forms.tests.OldFormForXTests.test_file_field", "model_forms.tests.UniqueTest.test_unique_for_date_with_nullable_date", "Creating table model_forms_bo", "model_forms.tests.OldFormForXTests.test_media_on_modelform", "model_forms.tests.ModelFormBaseTest.test_subcategory_form", "model_forms.tests.ModelFormBaseTest.test_bad_form", "model_forms.tests.OldFormForXTests.test_auto_id", "model_forms.tests.ModelFormBaseTest.test_limit_fields_with_string", "model_forms.tests.UniqueTest.test_inherited_unique_for_date", "model_forms.tests.ValidationTest.test_validates_with_replaced_field_not_specified", "model_forms.tests.UniqueTest.test_unique_null", "Ensure keys and blank character strings are tested for uniqueness."]}
{"ecosystem": "maven", "repo": "tomcat", "instance_id": "tomcat_1306", "original_commit_message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=62343\nMake CORS filter defaults more secure.\nThis is the fix for CVE-2018-8014.\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1831726 13f79535-47bb-0310-9956-ffa450edef68", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/java/org/apache/catalina/filters/CorsFilter.java b/java/org/apache/catalina/filters/CorsFilter.java\nindex 9fa4c96bde..2d6d02372f 100644\n--- a/java/org/apache/catalina/filters/CorsFilter.java\n+++ b/java/org/apache/catalina/filters/CorsFilter.java\n@@ -256,17 +256,14 @@ public class CorsFilter extends GenericFilter {\n \n         // Section 6.1.3\n         // Add a single Access-Control-Allow-Origin header.\n-        if (anyOriginAllowed && !supportsCredentials) {\n-            // If resource doesn't support credentials and if any origin is\n-            // allowed\n-            // to make CORS request, return header with '*'.\n+        if (anyOriginAllowed) {\n+            // If any origin is allowed, return header with '*'.\n             response.addHeader(\n                     CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN,\n                     \"*\");\n         } else {\n-            // If the resource supports credentials add a single\n-            // Access-Control-Allow-Origin header, with the value of the Origin\n-            // header as value.\n+            // Add a single Access-Control-Allow-Origin header, with the value\n+            // of the Origin header as value.\n             response.addHeader(\n                     CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN,\n                     origin);\n@@ -764,6 +761,10 @@ public class CorsFilter extends GenericFilter {\n         // For any value other then 'true' this will be false.\n         this.supportsCredentials = Boolean.parseBoolean(supportsCredentials);\n \n+        if (this.supportsCredentials && this.anyOriginAllowed) {\n+            throw new ServletException(sm.getString(\"corsFilter.invalidSupportsCredentials\"));\n+        }\n+\n         try {\n             if (!preflightMaxAge.isEmpty()) {\n                 this.preflightMaxAge = Long.parseLong(preflightMaxAge);\n@@ -1073,7 +1074,7 @@ public class CorsFilter extends GenericFilter {\n     /**\n      * By default, all origins are allowed to make requests.\n      */\n-    public static final String DEFAULT_ALLOWED_ORIGINS = \"*\";\n+    public static final String DEFAULT_ALLOWED_ORIGINS = \"\";\n \n     /**\n      * By default, following methods are supported: GET, POST, HEAD and OPTIONS.\n@@ -1089,7 +1090,7 @@ public class CorsFilter extends GenericFilter {\n     /**\n      * By default, support credentials is turned on.\n      */\n-    public static final String DEFAULT_SUPPORTS_CREDENTIALS = \"true\";\n+    public static final String DEFAULT_SUPPORTS_CREDENTIALS = \"false\";\n \n     /**\n      * By default, following headers are supported:\n\n\n</patch>\n<test_patch>\ndiff --git a/test/org/apache/catalina/filters/TestCorsFilter.java b/test/org/apache/catalina/filters/TestCorsFilter.java\nindex 9077bbce20..6fc6dc1cf7 100644\n--- a/test/org/apache/catalina/filters/TestCorsFilter.java\n+++ b/test/org/apache/catalina/filters/TestCorsFilter.java\n@@ -55,8 +55,7 @@ public class TestCorsFilter {\n         corsFilter.doFilter(request, response, filterChain);\n \n         Assert.assertTrue(response.getHeader(\n-                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals(\n-                \"https://www.apache.org\"));\n+                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals(\"*\"));\n         Assert.assertTrue(((Boolean) request.getAttribute(\n                 CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());\n         Assert.assertTrue(request.getAttribute(\n@@ -88,8 +87,7 @@ public class TestCorsFilter {\n         corsFilter.doFilter(request, response, filterChain);\n \n         Assert.assertTrue(response.getHeader(\n-                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals(\n-                \"https://www.apache.org\"));\n+                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals(\"*\"));\n         Assert.assertTrue(((Boolean) request.getAttribute(\n                 CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());\n         Assert.assertTrue(request.getAttribute(\n@@ -120,8 +118,7 @@ public class TestCorsFilter {\n         corsFilter.doFilter(request, response, filterChain);\n \n         Assert.assertTrue(response.getHeader(\n-                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals(\n-                \"https://www.apache.org\"));\n+                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals(\"*\"));\n         Assert.assertTrue(((Boolean) request.getAttribute(\n                 CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());\n         Assert.assertTrue(request.getAttribute(\n@@ -166,41 +163,15 @@ public class TestCorsFilter {\n     }\n \n     /*\n-     * Tests the presence of the origin (and not '*') in the response, when\n-     * supports credentials is enabled alongwith any origin, '*'.\n+     * Tests the that supports credentials may not be enabled with any origin,\n+     * '*'.\n      *\n-     * @throws IOException\n      * @throws ServletException\n      */\n-    @Test\n-    public void testDoFilterSimpleAnyOriginAndSupportsCredentials()\n-            throws IOException, ServletException {\n-        TesterHttpServletRequest request = new TesterHttpServletRequest();\n-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,\n-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);\n-        request.setMethod(\"GET\");\n-        TesterHttpServletResponse response = new TesterHttpServletResponse();\n-\n+    @Test(expected=ServletException.class)\n+    public void testDoFilterSimpleAnyOriginAndSupportsCredentials() throws ServletException {\n         CorsFilter corsFilter = new CorsFilter();\n-        corsFilter.init(TesterFilterConfigs\n-                .getFilterConfigAnyOriginAndSupportsCredentials());\n-        corsFilter.doFilter(request, response, filterChain);\n-\n-        Assert.assertTrue(response.getHeader(\n-                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals(\n-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));\n-        Assert.assertTrue(response.getHeader(\n-                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_CREDENTIALS)\n-                .equals(\n-                        \"true\"));\n-        Assert.assertTrue(((Boolean) request.getAttribute(\n-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());\n-        Assert.assertTrue(request.getAttribute(\n-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN).equals(\n-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));\n-        Assert.assertTrue(request.getAttribute(\n-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE).equals(\n-                CorsFilter.CORSRequestType.SIMPLE.name().toLowerCase(Locale.ENGLISH)));\n+        corsFilter.init(TesterFilterConfigs.getFilterConfigAnyOriginAndSupportsCredentials());\n     }\n \n     /*\n@@ -261,8 +232,7 @@ public class TestCorsFilter {\n         corsFilter.doFilter(request, response, filterChain);\n \n         Assert.assertTrue(response.getHeader(\n-                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals(\n-                \"https://www.apache.org\"));\n+                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals(\"*\"));\n         Assert.assertTrue(response.getHeader(\n                 CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_EXPOSE_HEADERS)\n                 .equals(TesterFilterConfigs.EXPOSED_HEADERS));\n@@ -727,9 +697,8 @@ public class TestCorsFilter {\n         });\n         corsFilter.doFilter(request, response, filterChain);\n \n-        Assert.assertTrue(response.getHeader(\n-                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals(\n-                \"https://www.apache.org\"));\n+        Assert.assertNull(response.getHeader(\n+                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN));\n         Assert.assertTrue(((Boolean) request.getAttribute(\n                 CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());\n         Assert.assertTrue(request.getAttribute(\n@@ -1412,7 +1381,7 @@ public class TestCorsFilter {\n         Assert.assertTrue(corsFilter.getAllowedOrigins().size() == 0);\n         Assert.assertTrue(corsFilter.isAnyOriginAllowed());\n         Assert.assertTrue(corsFilter.getExposedHeaders().size() == 0);\n-        Assert.assertTrue(corsFilter.isSupportsCredentials());\n+        Assert.assertFalse(corsFilter.isSupportsCredentials());\n         Assert.assertTrue(corsFilter.getPreflightMaxAge() == 1800);\n     }\n \n@@ -1448,9 +1417,9 @@ public class TestCorsFilter {\n         Assert.assertTrue(corsFilter.getAllowedHttpHeaders().size() == 6);\n         Assert.assertTrue(corsFilter.getAllowedHttpMethods().size() == 4);\n         Assert.assertTrue(corsFilter.getAllowedOrigins().size() == 0);\n-        Assert.assertTrue(corsFilter.isAnyOriginAllowed());\n+        Assert.assertFalse(corsFilter.isAnyOriginAllowed());\n         Assert.assertTrue(corsFilter.getExposedHeaders().size() == 0);\n-        Assert.assertTrue(corsFilter.isSupportsCredentials());\n+        Assert.assertFalse(corsFilter.isSupportsCredentials());\n         Assert.assertTrue(corsFilter.getPreflightMaxAge() == 1800);\n     }\n \n@@ -1554,8 +1523,7 @@ public class TestCorsFilter {\n         corsFilter.doFilter(request, response, filterChain);\n \n         Assert.assertTrue(response.getHeader(\n-                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals(\n-                \"https://www.apache.org\"));\n+                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals(\"*\"));\n         Assert.assertNull(request\n                 .getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST));\n         Assert.assertNull(request\n\ndiff --git a/test/org/apache/catalina/filters/TesterFilterConfigs.java b/test/org/apache/catalina/filters/TesterFilterConfigs.java\nindex 941d8949d7..cb3d04f813 100644\n--- a/test/org/apache/catalina/filters/TesterFilterConfigs.java\n+++ b/test/org/apache/catalina/filters/TesterFilterConfigs.java\n@@ -36,12 +36,13 @@ public class TesterFilterConfigs {\n     public static final TesterServletContext mockServletContext =\n             new TesterServletContext();\n \n+    // Default config for the test is to allow any origin\n     public static FilterConfig getDefaultFilterConfig() {\n         final String allowedHttpHeaders =\n                 CorsFilter.DEFAULT_ALLOWED_HTTP_HEADERS;\n         final String allowedHttpMethods =\n                 CorsFilter.DEFAULT_ALLOWED_HTTP_METHODS;\n-        final String allowedOrigins = CorsFilter.DEFAULT_ALLOWED_ORIGINS;\n+        final String allowedOrigins = ANY_ORIGIN;\n         final String exposedHeaders = CorsFilter.DEFAULT_EXPOSED_HEADERS;\n         final String supportCredentials =\n                 CorsFilter.DEFAULT_SUPPORTS_CREDENTIALS;\n@@ -59,7 +60,7 @@ public class TesterFilterConfigs {\n                 CorsFilter.DEFAULT_ALLOWED_HTTP_HEADERS;\n         final String allowedHttpMethods =\n                 CorsFilter.DEFAULT_ALLOWED_HTTP_METHODS + \",PUT\";\n-        final String allowedOrigins = CorsFilter.DEFAULT_ALLOWED_ORIGINS;\n+        final String allowedOrigins = ANY_ORIGIN;\n         final String exposedHeaders = CorsFilter.DEFAULT_EXPOSED_HEADERS;\n         final String supportCredentials = \"true\";\n         final String preflightMaxAge =\n@@ -77,7 +78,7 @@ public class TesterFilterConfigs {\n                 CorsFilter.DEFAULT_ALLOWED_HTTP_HEADERS;\n         final String allowedHttpMethods =\n                 CorsFilter.DEFAULT_ALLOWED_HTTP_METHODS + \",PUT\";\n-        final String allowedOrigins = CorsFilter.DEFAULT_ALLOWED_ORIGINS;\n+        final String allowedOrigins = ANY_ORIGIN;\n         final String exposedHeaders = CorsFilter.DEFAULT_EXPOSED_HEADERS;\n         final String supportCredentials = \"false\";\n         final String preflightMaxAge =\n@@ -131,7 +132,7 @@ public class TesterFilterConfigs {\n                 CorsFilter.DEFAULT_ALLOWED_HTTP_HEADERS;\n         final String allowedHttpMethods =\n                 CorsFilter.DEFAULT_ALLOWED_HTTP_METHODS;\n-        final String allowedOrigins = CorsFilter.DEFAULT_ALLOWED_ORIGINS;\n+        final String allowedOrigins = ANY_ORIGIN;\n         final String exposedHeaders = EXPOSED_HEADERS;\n         final String supportCredentials =\n                 CorsFilter.DEFAULT_SUPPORTS_CREDENTIALS;\n@@ -240,7 +241,7 @@ public class TesterFilterConfigs {\n                 CorsFilter.DEFAULT_ALLOWED_HTTP_HEADERS;\n         final String allowedHttpMethods =\n                 CorsFilter.DEFAULT_ALLOWED_HTTP_METHODS;\n-        final String allowedOrigins = CorsFilter.DEFAULT_ALLOWED_ORIGINS;\n+        final String allowedOrigins = ANY_ORIGIN;\n         final String exposedHeaders = CorsFilter.DEFAULT_EXPOSED_HEADERS;\n         final String supportCredentials =\n                 CorsFilter.DEFAULT_SUPPORTS_CREDENTIALS;\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "d83a76732e6804739b81d8b2056365307637b42d", "source_date": "Wed May 16 14:53:21 2018 +0000", "source_tag": "9.0.9", "target_commit": "60f596a21fd6041335a3a1a4015d4512439cecb5", "target_date": "Wed May 16 14:54:09 2018 +0000", "target_tag": "8.5.32", "FAIL TO PASS": ["testDoFilterSimpleGET", "testDoFilterSimpleHEAD", "testDoFilterSimpleWithExposedHeaders", "testWithFilterConfig", "testDoFilterSimpleAnyOriginAndSupportsCredentials", "testInitDefaultFilterConfig", "testWithStringParserNull", "testDecorateRequestDisabled", "testDoFilterSimplePOST"], "PASS TO PASS": ["testDoFilterSameHostWithOrigin05", "testCheckPreFlightRequestTypeAnyOriginNoWithCredentials", "testDoFilterNullOriginAllowedByDefault", "testValidOrigin", "testCheckNotCORSRequestTypeEmptyOrigin", "testCheckRequestTypeNull", "testCheckInvalidCRLF1", "testDoFilterPreflight", "testCheckNullRequestMethod", "testDoFilterNullOriginAllowedByConfiguration", "testDecorateCORSPropertiesNullRequestValidCORSRequestType", "testJoinAllEmptyElements", "testCheckNullOriginNotAllowed", "testCheckForPortVariance", "testInValidOriginCRLF", "testDecorateCORSPropertiesCORSRequestTypeNotCORS", "testCheckActualRequestType", "testCheckSimpleRequestTypeAnyOrigin", "testDoFilterNullRequestNullResponse", "testDoFilterSimpleAnyOriginAndSupportsCredentialsDisabled", "testWithStringParserEmpty", "testDoFilterSameHostWithOrigin03", "testJoinPipeSeparator", "testCheckInvalidRequestMethod", "testCheckPreFlightRequestTypeEmptyACRM", "testJoinOneNullElement", "testCheckPreFlightRequestTypeOriginNotAllowed", "testCheckPreFlightRequestType", "testInValidOriginEncodedCRLF3", "testContentTypeWithParameter", "testDoFilterSameHostWithOrigin04", "testNotSimple", "testDecorateCORSPropertiesCORSRequestTypeInvalidCORS", "testDecorateCORSPropertiesNullRequestNullCORSRequestType", "testCheckInvalidCRLF4", "testDoFilterSimpleSpecificHeader", "testJoinElementsNull", "testCheckForSchemeVariance", "testCheckPreFlightRequestTypeUnsupportedRequestHeaders", "testCheckInvalidOriginNotAllowedSubdomain", "testInitInvalidFilterConfig", "testDoFilterNullRequestResponse", "testCheckPreFlightRequestTypeEmptyHeaders", "testJoinSingleElement", "testDoFilterPreflightWithCredentials", "testDoFilterSameHostWithOrigin06", "testInValidOriginEncodedCRLF1", "initializationError", "testCheckPreFlightRequestTypeNoACRM", "testDoFilterPreflightInvalidOrigin", "testDecorateCORSPropertiesValidRequestNullRequestType", "testCheckInvalidCRLF3", "testDoFilterSameHostWithOrigin07", "testJoin", "testDoFilterSameHostWithOrigin01", "testJoinSepNull", "testWithFilterConfigInvalidPreflightAge", "testCheckPreFlightRequestTypeNoHeaders", "testDoFilterPreflightAnyOrigin", "testCheckPreFlightRequestTypeUnsupportedRequestMethod", "testCheckSimpleRequestType", "testCheckActualRequestTypeMethodPOSTNotSimpleHeaders", "testNotPreflight", "testDoFilterPreflightNegativeMaxAge", "testJoinAllNullElements", "testDoFilterSameHostWithOrigin02", "testDoFilterRequestNullResponse", "testCheckInvalidOrigin", "testCheckInvalidCRLF2", "testDoFilterPreflightWithoutCredentialsAndSpecificOrigin", "testDoFilterInvalidCORSOriginNotAllowed", "testCheckPreFlightRequestTypeInvalidRequestMethod", "testDoFilterNoOrigin", "testInValidOriginEncodedCRLF2"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_795", "original_commit_message": "Implement csrf on approvals pages\n[#129374221] https://www.pivotaltracker.com/story/show/129374221", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/approval/LoginUaaApprovalsService.java b/server/src/main/java/org/cloudfoundry/identity/uaa/approval/LoginUaaApprovalsService.java\nindex a2d3c54c6..721021726 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/approval/LoginUaaApprovalsService.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/approval/LoginUaaApprovalsService.java\n@@ -1,5 +1,5 @@\n /*******************************************************************************\n- *     Cloud Foundry \n+ *     Cloud Foundry\n  *     Copyright (c) [2009-2016] Pivotal Software, Inc. All Rights Reserved.\n  *\n  *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n@@ -12,11 +12,6 @@\n  *******************************************************************************/\n package org.cloudfoundry.identity.uaa.approval;\n \n-import org.cloudfoundry.identity.uaa.approval.ApprovalsService;\n-import org.cloudfoundry.identity.uaa.approval.DescribedApproval;\n-import org.cloudfoundry.identity.uaa.constants.OriginKeys;\n-import org.cloudfoundry.identity.uaa.approval.Approval;\n-import org.cloudfoundry.identity.uaa.approval.ApprovalsControllerService;\n import org.springframework.beans.factory.annotation.Autowired;\n \n import java.util.ArrayList;\n\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/security/web/CookieBasedCsrfTokenRepository.java b/server/src/main/java/org/cloudfoundry/identity/uaa/security/web/CookieBasedCsrfTokenRepository.java\nindex 6ff3c5e23..6baa02fab 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/security/web/CookieBasedCsrfTokenRepository.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/security/web/CookieBasedCsrfTokenRepository.java\n@@ -84,6 +84,7 @@ public class CookieBasedCsrfTokenRepository implements CsrfTokenRepository {\n         Cookie csrfCookie = new Cookie(token.getParameterName(), token.getToken());\n         csrfCookie.setHttpOnly(true);\n         csrfCookie.setSecure(secure || request.getProtocol().equals(\"https\"));\n+\n         if (expire) {\n             csrfCookie.setMaxAge(0);\n         } else {\n\n\n</patch>\n<test_patch>\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/CheckTokenEndpointIntegrationTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/CheckTokenEndpointIntegrationTests.java\nindex 292414a94..b616bf2d2 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/CheckTokenEndpointIntegrationTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/CheckTokenEndpointIntegrationTests.java\n@@ -14,7 +14,6 @@ package org.cloudfoundry.identity.uaa.integration;\n \n import org.cloudfoundry.identity.uaa.ServerRunning;\n import org.cloudfoundry.identity.uaa.integration.util.IntegrationTestUtils;\n-import org.cloudfoundry.identity.uaa.security.web.CookieBasedCsrfTokenRepository;\n import org.cloudfoundry.identity.uaa.test.TestAccountSetup;\n import org.cloudfoundry.identity.uaa.test.UaaTestAccounts;\n import org.junit.Rule;\n@@ -37,6 +36,7 @@ import java.net.URI;\n import java.util.Arrays;\n import java.util.Map;\n \n+import static org.cloudfoundry.identity.uaa.security.web.CookieBasedCsrfTokenRepository.DEFAULT_CSRF_COOKIE_NAME;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n@@ -96,7 +96,7 @@ public class CheckTokenEndpointIntegrationTests {\n         MultiValueMap<String, String> formData = new LinkedMultiValueMap<>();\n         formData.add(\"username\", testAccounts.getUserName());\n         formData.add(\"password\", testAccounts.getPassword());\n-        formData.add(CookieBasedCsrfTokenRepository.DEFAULT_CSRF_COOKIE_NAME, csrf);\n+        formData.add(DEFAULT_CSRF_COOKIE_NAME, csrf);\n \n         // Should be redirected to the original URL, but now authenticated\n         result = serverRunning.postForResponse(\"/login.do\", headers, formData);\n@@ -115,6 +115,7 @@ public class CheckTokenEndpointIntegrationTests {\n             assertTrue(response.getBody().contains(\"<h1>Application Authorization</h1>\"));\n \n             formData.clear();\n+            formData.add(DEFAULT_CSRF_COOKIE_NAME, IntegrationTestUtils.extractCookieCsrf(response.getBody()));\n             formData.add(USER_OAUTH_APPROVAL, \"true\");\n             result = serverRunning.postForResponse(\"/oauth/authorize\", headers, formData);\n             assertEquals(HttpStatus.FOUND, result.getStatusCode());\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/OpenIdTokenAuthorizationWithApprovalIntegrationTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/OpenIdTokenAuthorizationWithApprovalIntegrationTests.java\nindex d72cc2ae0..fc4ec6909 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/OpenIdTokenAuthorizationWithApprovalIntegrationTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/OpenIdTokenAuthorizationWithApprovalIntegrationTests.java\n@@ -56,6 +56,7 @@ import java.util.Iterator;\n import java.util.Map;\n import java.util.Set;\n \n+import static org.cloudfoundry.identity.uaa.security.web.CookieBasedCsrfTokenRepository.DEFAULT_CSRF_COOKIE_NAME;\n import static org.hamcrest.Matchers.containsInAnyOrder;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n@@ -276,6 +277,7 @@ public class OpenIdTokenAuthorizationWithApprovalIntegrationTests {\n \n             formData.clear();\n             formData.add(USER_OAUTH_APPROVAL, \"true\");\n+            formData.add(DEFAULT_CSRF_COOKIE_NAME, IntegrationTestUtils.extractCookieCsrf(response.getBody()));\n             result = serverRunning.postForResponse(\"/oauth/authorize\", headers, formData);\n             assertEquals(HttpStatus.FOUND, result.getStatusCode());\n             location = UriUtils.decode(result.getHeaders().getLocation().toString(), \"UTF-8\");\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/RefreshTokenSupportIntegrationTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/RefreshTokenSupportIntegrationTests.java\nindex ee804e2fa..6ffc4f27f 100755\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/RefreshTokenSupportIntegrationTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/RefreshTokenSupportIntegrationTests.java\n@@ -15,7 +15,6 @@ package org.cloudfoundry.identity.uaa.integration;\n import org.cloudfoundry.identity.uaa.ServerRunning;\n import org.cloudfoundry.identity.uaa.integration.util.IntegrationTestUtils;\n import org.cloudfoundry.identity.uaa.oauth.jwt.JwtHelper;\n-import org.cloudfoundry.identity.uaa.security.web.CookieBasedCsrfTokenRepository;\n import org.cloudfoundry.identity.uaa.test.TestAccountSetup;\n import org.cloudfoundry.identity.uaa.test.UaaTestAccounts;\n import org.junit.Before;\n@@ -36,6 +35,7 @@ import java.net.URI;\n import java.util.Arrays;\n import java.util.Map;\n \n+import static org.cloudfoundry.identity.uaa.security.web.CookieBasedCsrfTokenRepository.DEFAULT_CSRF_COOKIE_NAME;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n@@ -98,7 +98,7 @@ public class RefreshTokenSupportIntegrationTests {\n         MultiValueMap<String, String> formData = new LinkedMultiValueMap<String, String>();\n         formData.add(\"username\", testAccounts.getUserName());\n         formData.add(\"password\", testAccounts.getPassword());\n-        formData.add(CookieBasedCsrfTokenRepository.DEFAULT_CSRF_COOKIE_NAME, IntegrationTestUtils.extractCookieCsrf(response.getBody()));\n+        formData.add(DEFAULT_CSRF_COOKIE_NAME, IntegrationTestUtils.extractCookieCsrf(response.getBody()));\n \n         // Should be redirected to the original URL, but now authenticated\n         result = serverRunning.postForResponse(\"/login.do\", headers, formData);\n@@ -118,6 +118,7 @@ public class RefreshTokenSupportIntegrationTests {\n \n             formData.clear();\n             formData.add(USER_OAUTH_APPROVAL, \"true\");\n+            formData.add(DEFAULT_CSRF_COOKIE_NAME, IntegrationTestUtils.extractCookieCsrf(response.getBody()));\n             result = serverRunning.postForResponse(\"/oauth/authorize\", headers, formData);\n             assertEquals(HttpStatus.FOUND, result.getStatusCode());\n             location = result.getHeaders().getLocation().toString();\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/ScimGroupEndpointsIntegrationTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/ScimGroupEndpointsIntegrationTests.java\nindex 0f7deb57e..ea8b584c2 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/ScimGroupEndpointsIntegrationTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/ScimGroupEndpointsIntegrationTests.java\n@@ -57,6 +57,7 @@ import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n \n+import static org.cloudfoundry.identity.uaa.security.web.CookieBasedCsrfTokenRepository.DEFAULT_CSRF_COOKIE_NAME;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n@@ -520,6 +521,7 @@ public class ScimGroupEndpointsIntegrationTests {\n             assertTrue(response.getBody().contains(\"<h1>Application Authorization</h1>\"));\n \n             formData.clear();\n+            formData.add(DEFAULT_CSRF_COOKIE_NAME, IntegrationTestUtils.extractCookieCsrf(response.getBody()));\n             formData.add(USER_OAUTH_APPROVAL, \"true\");\n             formData.add(\"scope.0\", \"scope.\" + CFID);\n             result = serverRunning.postForResponse(\"/oauth/authorize\", headers, formData);\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/AutologinIT.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/AutologinIT.java\nindex a362cf62b..8cd06fa89 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/AutologinIT.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/AutologinIT.java\n@@ -13,7 +13,6 @@\n package org.cloudfoundry.identity.uaa.integration.feature;\n \n import org.cloudfoundry.identity.uaa.integration.util.IntegrationTestUtils;\n-import org.cloudfoundry.identity.uaa.security.web.CookieBasedCsrfTokenRepository;\n import org.cloudfoundry.identity.uaa.test.UaaTestAccounts;\n import org.junit.After;\n import org.junit.Assert;\n@@ -44,8 +43,8 @@ import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n+import static org.cloudfoundry.identity.uaa.security.web.CookieBasedCsrfTokenRepository.DEFAULT_CSRF_COOKIE_NAME;\n import static org.junit.Assert.assertEquals;\n-import static org.springframework.security.oauth2.common.util.OAuth2Utils.USER_OAUTH_APPROVAL;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(classes = DefaultIntegrationTestConfig.class)\n@@ -126,9 +125,9 @@ public class AutologinIT {\n \n         //generate an autologin code with our credentials\n         ResponseEntity<Map> autologinResponseEntity = restOperations.exchange(baseUrl + \"/autologin\",\n-            HttpMethod.POST,\n-            new HttpEntity<>(requestBody.toSingleValueMap(), headers),\n-            Map.class);\n+                                                                              HttpMethod.POST,\n+                                                                              new HttpEntity<>(requestBody.toSingleValueMap(), headers),\n+                                                                              Map.class);\n         String autologinCode = (String) autologinResponseEntity.getBody().get(\"code\");\n \n         //start the authorization flow - this will issue a login event\n@@ -144,28 +143,32 @@ public class AutologinIT {\n         //rest template that does NOT follow redirects\n         RestTemplate template = new RestTemplate(new DefaultIntegrationTestConfig.HttpClientFactory());\n         headers.remove(\"Authorization\");\n-        ResponseEntity<Map> authorizeResponse = template.exchange(authorizeUrl,\n-            HttpMethod.GET,\n-            new HttpEntity<>(new HashMap<String,String>(),headers),\n-            Map.class);\n+        headers.add(HttpHeaders.ACCEPT, MediaType.TEXT_HTML_VALUE);\n+        ResponseEntity<String> authorizeResponse =\n+            template.exchange(authorizeUrl,\n+                              HttpMethod.GET,\n+                              new HttpEntity<>(new HashMap<String, String>(), headers),\n+                              String.class);\n \n \n         //we are now logged in. retrieve the JSESSIONID\n         List<String> cookies = authorizeResponse.getHeaders().get(\"Set-Cookie\");\n-        assertEquals(1, cookies.size());\n+        assertEquals(2, cookies.size());\n         headers = getAppBasicAuthHttpHeaders();\n         headers.add(\"Cookie\", cookies.get(0));\n+        headers.add(\"Cookie\", cookies.get(1));\n \n         //if we receive a 200, then we must approve our scopes\n         if (HttpStatus.OK == authorizeResponse.getStatusCode()) {\n             authorizeUrl = UriComponentsBuilder.fromHttpUrl(baseUrl)\n                 .path(\"/oauth/authorize\")\n-                .queryParam(USER_OAUTH_APPROVAL, \"true\")\n+                .queryParam(\"user_oauth_approval\", \"true\")\n+                .queryParam(DEFAULT_CSRF_COOKIE_NAME, IntegrationTestUtils.extractCookieCsrf(authorizeResponse.getBody()))\n                 .build().toUriString();\n             authorizeResponse = template.exchange(authorizeUrl,\n-                HttpMethod.POST,\n-                new HttpEntity<>(new HashMap<String,String>(),headers),\n-                Map.class);\n+                                                  HttpMethod.POST,\n+                                                  new HttpEntity<>(new HashMap<String,String>(),headers),\n+                                                  String.class);\n         }\n \n         //approval is complete, we receive a token code back\n@@ -195,9 +198,9 @@ public class AutologinIT {\n \n         headers.set(headers.ACCEPT, MediaType.TEXT_HTML_VALUE);\n         ResponseEntity<String> loginResponse = template.exchange(baseUrl + \"/login\",\n-            HttpMethod.GET,\n-            new HttpEntity<>(null, headers),\n-            String.class);\n+                                                                 HttpMethod.GET,\n+                                                                 new HttpEntity<>(null, headers),\n+                                                                 String.class);\n \n         if (loginResponse.getHeaders().containsKey(\"Set-Cookie\")) {\n             for (String cookie : loginResponse.getHeaders().get(\"Set-Cookie\")) {\n@@ -205,22 +208,27 @@ public class AutologinIT {\n             }\n         }\n         String csrf = IntegrationTestUtils.extractCookieCsrf(loginResponse.getBody());\n-        requestBody.add(CookieBasedCsrfTokenRepository.DEFAULT_CSRF_COOKIE_NAME, csrf);\n+        requestBody.add(DEFAULT_CSRF_COOKIE_NAME, csrf);\n \n         headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);\n         loginResponse = restOperations.exchange(baseUrl + \"/login.do\",\n-            HttpMethod.POST,\n-            new HttpEntity<>(requestBody, headers),\n-            String.class);\n+                                                HttpMethod.POST,\n+                                                new HttpEntity<>(requestBody, headers),\n+                                                String.class);\n         cookies = loginResponse.getHeaders().get(\"Set-Cookie\");\n         assertEquals(3, cookies.size());\n         headers.clear();\n         for (String cookie : loginResponse.getHeaders().get(\"Set-Cookie\")) {\n-            headers.add(\"Cookie\", cookie);\n+            if (!cookie.contains(\"1970\")) { //deleted cookie\n+                headers.add(\"Cookie\", cookie);\n+            }\n         }\n-        restOperations.exchange(baseUrl + \"/profile\",\n-            HttpMethod.GET,\n-            new HttpEntity<>(null, headers),Void.class);\n+        headers.add(HttpHeaders.ACCEPT, MediaType.TEXT_HTML_VALUE);\n+        ResponseEntity<String> profilePage =\n+            restOperations.exchange(baseUrl + \"/profile\",\n+                                    HttpMethod.GET,\n+                                    new HttpEntity<>(null, headers), String.class);\n+\n \n         String revokeApprovalsUrl = UriComponentsBuilder.fromHttpUrl(baseUrl)\n             .path(\"/profile\")\n@@ -228,10 +236,11 @@ public class AutologinIT {\n         requestBody.clear();\n         requestBody.add(\"clientId\",\"app\");\n         requestBody.add(\"delete\",\"\");\n+        requestBody.add(DEFAULT_CSRF_COOKIE_NAME, IntegrationTestUtils.extractCookieCsrf(profilePage.getBody()));\n         ResponseEntity<Void> revokeResponse = template.exchange(revokeApprovalsUrl,\n-            HttpMethod.POST,\n-            new HttpEntity<>(requestBody, headers),\n-            Void.class);\n+                                                                HttpMethod.POST,\n+                                                                new HttpEntity<>(requestBody, headers),\n+                                                                Void.class);\n         assertEquals(HttpStatus.FOUND, revokeResponse.getStatusCode());\n     }\n \n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/OpenIdTokenGrantsIT.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/OpenIdTokenGrantsIT.java\nindex 2e57e4990..a7997eb5a 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/OpenIdTokenGrantsIT.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/OpenIdTokenGrantsIT.java\n@@ -58,6 +58,7 @@ import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n+import static org.cloudfoundry.identity.uaa.security.web.CookieBasedCsrfTokenRepository.DEFAULT_CSRF_COOKIE_NAME;\n import static org.hamcrest.Matchers.containsInAnyOrder;\n import static org.hamcrest.Matchers.empty;\n import static org.hamcrest.Matchers.is;\n@@ -349,6 +350,7 @@ public class OpenIdTokenGrantsIT {\n \n             formData.clear();\n             formData.add(USER_OAUTH_APPROVAL, \"true\");\n+            formData.add(DEFAULT_CSRF_COOKIE_NAME, IntegrationTestUtils.extractCookieCsrf(response.getBody()));\n             result = restOperations.exchange(loginUrl + \"/oauth/authorize\", HttpMethod.POST, new HttpEntity<>(formData, headers), Void.class);\n             assertEquals(HttpStatus.FOUND, result.getStatusCode());\n             location = UriUtils.decode(result.getHeaders().getLocation().toString(), \"UTF-8\");\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/util/IntegrationTestUtils.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/util/IntegrationTestUtils.java\nindex a8c4632dd..2ccf3f966 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/util/IntegrationTestUtils.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/util/IntegrationTestUtils.java\n@@ -84,6 +84,7 @@ import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n import static org.cloudfoundry.identity.uaa.provider.ExternalIdentityProviderDefinition.USER_NAME_ATTRIBUTE_PREFIX;\n+import static org.cloudfoundry.identity.uaa.security.web.CookieBasedCsrfTokenRepository.DEFAULT_CSRF_COOKIE_NAME;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n@@ -1062,6 +1063,7 @@ public class IntegrationTestUtils {\n \n             formData.clear();\n             formData.add(USER_OAUTH_APPROVAL, \"true\");\n+            formData.add(DEFAULT_CSRF_COOKIE_NAME, IntegrationTestUtils.extractCookieCsrf(response.getBody()));\n             result = serverRunning.postForResponse(\"/oauth/authorize\", headers, formData);\n             assertEquals(HttpStatus.FOUND, result.getStatusCode());\n             location = result.getHeaders().getLocation().toString();\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/audit/AuditCheckMockMvcTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/audit/AuditCheckMockMvcTests.java\nindex d17f008e7..d7e88d2c4 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/audit/AuditCheckMockMvcTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/audit/AuditCheckMockMvcTests.java\n@@ -593,6 +593,7 @@ public class AuditCheckMockMvcTests extends InjectedMockContextTest {\n             \"loginsecret\",\n             \"oauth.login\");\n         MockHttpServletRequestBuilder userPost = post(\"/oauth/authorize\")\n+            .with(cookieCsrf())\n             .accept(MediaType.APPLICATION_JSON_VALUE)\n             .contentType(MediaType.APPLICATION_JSON)\n             .header(\"Authorization\", \"Bearer \" + loginToken)\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/token/AbstractTokenMockMvcTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/token/AbstractTokenMockMvcTests.java\nindex ea41764d1..d10c54ff3 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/token/AbstractTokenMockMvcTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/token/AbstractTokenMockMvcTests.java\n@@ -170,6 +170,26 @@ public abstract class AbstractTokenMockMvcTests extends InjectedMockContextTest\n         return userProvisioning.retrieve(user.getId());\n     }\n \n+    protected ScimUser syncGroups(ScimUser user) {\n+        if (user == null) {\n+            return user;\n+        }\n+\n+        Set<ScimGroup> directGroups = groupMembershipManager.getGroupsWithMember(user.getId(), false);\n+        Set<ScimGroup> indirectGroups = groupMembershipManager.getGroupsWithMember(user.getId(), true);\n+        indirectGroups.removeAll(directGroups);\n+        Set<ScimUser.Group> groups = new HashSet<ScimUser.Group>();\n+        for (ScimGroup group : directGroups) {\n+            groups.add(new ScimUser.Group(group.getId(), group.getDisplayName(), ScimUser.Group.Type.DIRECT));\n+        }\n+        for (ScimGroup group : indirectGroups) {\n+            groups.add(new ScimUser.Group(group.getId(), group.getDisplayName(), ScimUser.Group.Type.INDIRECT));\n+        }\n+\n+        user.setGroups(groups);\n+        return user;\n+    }\n+\n     protected ScimGroupMember addMember(ScimUser user, ScimGroup group) {\n         ScimGroupMember gm = new ScimGroupMember(user.getId());\n         try {\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/token/TokenMvcMockTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/token/TokenMvcMockTests.java\nindex b63a067b0..11356a174 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/token/TokenMvcMockTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/token/TokenMvcMockTests.java\n@@ -89,6 +89,7 @@ import java.util.Map;\n import java.util.Set;\n import java.util.TreeSet;\n \n+import static org.cloudfoundry.identity.uaa.mock.util.MockMvcUtils.CookieCsrfPostProcessor.cookieCsrf;\n import static org.cloudfoundry.identity.uaa.mock.util.MockMvcUtils.createClient;\n import static org.cloudfoundry.identity.uaa.mock.util.MockMvcUtils.createUser;\n import static org.cloudfoundry.identity.uaa.mock.util.MockMvcUtils.getClientCredentialsOAuthAccessToken;\n@@ -742,6 +743,7 @@ public class TokenMvcMockTests extends AbstractTokenMockMvcTests {\n         MvcResult result  = getMockMvc().perform(\n             post(\"/oauth/authorize\")\n                 .session(session)\n+                .with(cookieCsrf())\n                 .param(OAuth2Utils.USER_OAUTH_APPROVAL, \"true\")\n                 .param(\"scope.0\",\"openid\")\n         ).andExpect(status().is3xxRedirection()).andReturn();\n@@ -787,6 +789,7 @@ public class TokenMvcMockTests extends AbstractTokenMockMvcTests {\n             post(\"/oauth/authorize\")\n                 .session(session)\n                 .param(OAuth2Utils.USER_OAUTH_APPROVAL, \"true\")\n+                .with(cookieCsrf())\n                 .param(\"scope.0\", \"openid\")\n         ).andExpect(status().is3xxRedirection()).andReturn();\n \n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/util/MockMvcUtils.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/util/MockMvcUtils.java\nindex 6f63ea0ba..2ea4392b7 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/util/MockMvcUtils.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/util/MockMvcUtils.java\n@@ -1026,20 +1026,34 @@ public final class MockMvcUtils {\n             CsrfTokenRepository repository = new CookieBasedCsrfTokenRepository();\n             CsrfToken token = repository.generateToken(request);\n             repository.saveToken(token, request, new MockHttpServletResponse());\n-            String tokenValue = useInvalidToken ? \"invalid\" + token.getToken() : token.getToken();\n+            String tokenValue = token.getToken();\n             Cookie cookie = new Cookie(token.getParameterName(), tokenValue);\n             cookie.setHttpOnly(true);\n             Cookie[] cookies = request.getCookies();\n             if (cookies==null) {\n                 request.setCookies(cookie);\n             } else {\n-                Cookie[] newcookies = new Cookie[cookies.length+1];\n+                addCsrfCookie(request, cookie, cookies);\n+            }\n+            request.setParameter(token.getParameterName(), useInvalidToken ? \"invalid\" + tokenValue : tokenValue);\n+            return request;\n+        }\n+\n+        protected void addCsrfCookie(MockHttpServletRequest request, Cookie cookie, Cookie[] cookies) {\n+            boolean replaced = false;\n+            for (int i=0; i<cookies.length; i++) {\n+                Cookie c = cookies[i];\n+                if (cookie.getName()==c.getName()) {\n+                    cookies[i] = cookie;\n+                    replaced = true;\n+                }\n+            }\n+            if (!replaced) {\n+                Cookie[] newcookies = new Cookie[cookies.length + 1];\n                 System.arraycopy(cookies, 0, newcookies, 0, cookies.length);\n                 newcookies[cookies.length] = cookie;\n                 request.setCookies(newcookies);\n             }\n-            request.setParameter(token.getParameterName(), tokenValue);\n-            return request;\n         }\n \n         public static CookieCsrfPostProcessor cookieCsrf() {\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "logical and structural changes", "source_commit": "cded6164a3b90e791688a954069aea3cfde59b69", "source_date": "Tue Aug 30 09:45:35 2016 -0700", "source_tag": "3.7.0", "target_commit": "37e0384c52d3337a3fa4eef6647032229edecfa4", "target_date": "Wed Sep 28 10:13:17 2016 -0700", "target_tag": "3.6.1", "FAIL TO PASS": ["org.cloudfoundry.identity.uaa.mock.DefaultConfigurationTestSuite > org.cloudfoundry.identity.uaa.mock.approvals.ApprovalsMockMvcTests.test_post_approval_csrf", "org.cloudfoundry.identity.uaa.mock.DefaultConfigurationTestSuite > org.cloudfoundry.identity.uaa.mock.approvals.ApprovalsMockMvcTests.test_get_approvals", "org.cloudfoundry.identity.uaa.mock.DefaultConfigurationTestSuite > org.cloudfoundry.identity.uaa.mock.approvals.ApprovalsMockMvcTests.test_oauth_authorize_without_csrf"], "PASS TO PASS": ["org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.login.XFrameOptionsTheories", "org.cloudfoundry.identity.uaa.mock.token.CheckTokenEndpointDocs", ":cloudfoundry-identity-server:compileTestJava", ":cloudfoundry-identity-server:processResources", ":cloudfoundry-identity-uaa:testClasses", "org.cloudfoundry.identity.uaa.BootstrapTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.mock.clients.ClientAdminEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.mock.DefaultDocsTestSuite", "org.cloudfoundry.identity.uaa.mock.oauth.CheckDefaultAuthoritiesMvcMockTests", ":cloudfoundry-identity-model:gitInfo", "org.cloudfoundry.identity.uaa.login.util.LocalUaaRestTemplateMockMvcTests", "org.cloudfoundry.identity.uaa.mock.codestore.ExpiringCodeStoreMockMvcTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlIDPRefreshMockMvcTests", "org.cloudfoundry.identity.uaa.login.InvitationsServiceMockMvcTests", "org.cloudfoundry.identity.uaa.mock.authentication.AuthzAuthenticationManagerConfigurationTests", "org.cloudfoundry.identity.uaa.mock.token.TokenKeyEndpointDocs", ":cloudfoundry-identity-server:testClasses", "org.cloudfoundry.identity.uaa.db.TestZonifyGroupSchema_V2_4_1", "org.cloudfoundry.identity.uaa.mock.zones.DisableUserManagementSecurityFilterMockMvcTest", ":cloudfoundry-identity-uaa:compileTestJava", "org.cloudfoundry.identity.uaa.login.AccountsControllerMockMvcTests", "org.cloudfoundry.identity.uaa.mock.ldap.LdapMockMvcTests", ":cloudfoundry-identity-model:classes", "org.cloudfoundry.identity.uaa.UaaConfigurationTests", "org.cloudfoundry.identity.uaa.mock.token.TokenMvcMockTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsDocs", "org.cloudfoundry.identity.uaa.mock.audit.AuditCheckMockMvcTests", "org.cloudfoundry.identity.uaa.login.ResetPasswordControllerMockMvcTests", ":cloudfoundry-identity-model:buildInfo", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneSwitchingFilterMockMvcTest", "org.cloudfoundry.identity.uaa.login.PasscodeMockMvcTests", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneEndpointDocs", "org.cloudfoundry.identity.uaa.authentication.manager.DynamicLdapAuthenticationManagerTest", ":cloudfoundry-identity-model:processResources", ":cloudfoundry-identity-model:jar", "/uaa/uaa/src/test/java/org/springframework/security/ldap/server/ApacheDsSSLContainer.java", ":cloudfoundry-identity-uaa:compileTestJava/uaa/uaa/src/test/java/org/springframework/security/ldap/server/ApacheDsSSLContainer.java", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneResolvingMockMvcTest", ":cloudfoundry-identity-server:compileJava", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserEndpointDocs", "org.cloudfoundry.identity.uaa.login.BootstrapTests", "org.cloudfoundry.identity.uaa.mock.password.PasswordChangeEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.provider.saml.LoginSamlAuthenticationProviderTests", ":cloudfoundry-identity-server:classes", ":cloudfoundry-identity-uaa:classes", ":cloudfoundry-identity-uaa:compileJava", "org.cloudfoundry.identity.uaa.login.AuthorizeEndpointDocs", ":cloudfoundry-identity-model:mainOutputResourcesDir", "org.cloudfoundry.identity.uaa.invitations.InvitationsEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.mock.providers.IdentityProviderEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.mock.token.TokenKeyEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.scim.endpoints.PasswordResetEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.mock.providers.IdentityProviderEndpointsDocs", "org.cloudfoundry.identity.uaa.scim.endpoints.UserInfoEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.mock.clients.ClientAdminEndpointsDocs", "org.cloudfoundry.identity.uaa.mock.config.HealthzShouldNotBeProtectedMockMvcTests", "org.cloudfoundry.identity.uaa.mock.zones.DisableInternalUserManagementFilterMockMvcTests", ":cloudfoundry-identity-server:jar", ":cloudfoundry-identity-server:processTestResources", ":cloudfoundry-identity-uaa:processTestResources", "org.cloudfoundry.identity.uaa.login.TokenEndpointDocs", "org.cloudfoundry.identity.uaa.invitations.InvitationsEndpointDocs", "org.cloudfoundry.identity.uaa.login.LoginMockMvcTests", ":cloudfoundry-identity-model:compileJava", "org.cloudfoundry.identity.uaa.scim.endpoints.UserInfoEndpointDocs", ":cloudfoundry-identity-uaa:processResources", "org.cloudfoundry.identity.uaa.authentication.manager.DynamicZoneAwareAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.mock.approvals.ApprovalsMockMvcTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.client.ClientMetadataAdminEndpointsMockMvcTest", "org.cloudfoundry.identity.uaa.client.ClientMetadataAdminEndpointsDocs", "org.cloudfoundry.identity.uaa.login.LoginInfoEndpointDocs", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserLookupMockMvcTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimExternalGroupMappingsEndpointsDocs", "org.cloudfoundry.identity.uaa.mock.DefaultConfigurationTestSuite", "org.cloudfoundry.identity.uaa.scim.endpoints.UserIdConversionEndpointDocs"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_796", "original_commit_message": "Implement csrf on approvals pages\n[#129374221] https://www.pivotaltracker.com/story/show/129374221", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/approval/LoginUaaApprovalsService.java b/server/src/main/java/org/cloudfoundry/identity/uaa/approval/LoginUaaApprovalsService.java\nindex a2d3c54c6..721021726 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/approval/LoginUaaApprovalsService.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/approval/LoginUaaApprovalsService.java\n@@ -1,5 +1,5 @@\n /*******************************************************************************\n- *     Cloud Foundry \n+ *     Cloud Foundry\n  *     Copyright (c) [2009-2016] Pivotal Software, Inc. All Rights Reserved.\n  *\n  *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n@@ -12,11 +12,6 @@\n  *******************************************************************************/\n package org.cloudfoundry.identity.uaa.approval;\n \n-import org.cloudfoundry.identity.uaa.approval.ApprovalsService;\n-import org.cloudfoundry.identity.uaa.approval.DescribedApproval;\n-import org.cloudfoundry.identity.uaa.constants.OriginKeys;\n-import org.cloudfoundry.identity.uaa.approval.Approval;\n-import org.cloudfoundry.identity.uaa.approval.ApprovalsControllerService;\n import org.springframework.beans.factory.annotation.Autowired;\n \n import java.util.ArrayList;\n\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/security/web/CookieBasedCsrfTokenRepository.java b/server/src/main/java/org/cloudfoundry/identity/uaa/security/web/CookieBasedCsrfTokenRepository.java\nindex 6ff3c5e23..6baa02fab 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/security/web/CookieBasedCsrfTokenRepository.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/security/web/CookieBasedCsrfTokenRepository.java\n@@ -84,6 +84,7 @@ public class CookieBasedCsrfTokenRepository implements CsrfTokenRepository {\n         Cookie csrfCookie = new Cookie(token.getParameterName(), token.getToken());\n         csrfCookie.setHttpOnly(true);\n         csrfCookie.setSecure(secure || request.getProtocol().equals(\"https\"));\n+\n         if (expire) {\n             csrfCookie.setMaxAge(0);\n         } else {\n\n\n</patch>\n<test_patch>\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/CheckTokenEndpointIntegrationTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/CheckTokenEndpointIntegrationTests.java\nindex 292414a94..b616bf2d2 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/CheckTokenEndpointIntegrationTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/CheckTokenEndpointIntegrationTests.java\n@@ -14,7 +14,6 @@ package org.cloudfoundry.identity.uaa.integration;\n \n import org.cloudfoundry.identity.uaa.ServerRunning;\n import org.cloudfoundry.identity.uaa.integration.util.IntegrationTestUtils;\n-import org.cloudfoundry.identity.uaa.security.web.CookieBasedCsrfTokenRepository;\n import org.cloudfoundry.identity.uaa.test.TestAccountSetup;\n import org.cloudfoundry.identity.uaa.test.UaaTestAccounts;\n import org.junit.Rule;\n@@ -37,6 +36,7 @@ import java.net.URI;\n import java.util.Arrays;\n import java.util.Map;\n \n+import static org.cloudfoundry.identity.uaa.security.web.CookieBasedCsrfTokenRepository.DEFAULT_CSRF_COOKIE_NAME;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n@@ -96,7 +96,7 @@ public class CheckTokenEndpointIntegrationTests {\n         MultiValueMap<String, String> formData = new LinkedMultiValueMap<>();\n         formData.add(\"username\", testAccounts.getUserName());\n         formData.add(\"password\", testAccounts.getPassword());\n-        formData.add(CookieBasedCsrfTokenRepository.DEFAULT_CSRF_COOKIE_NAME, csrf);\n+        formData.add(DEFAULT_CSRF_COOKIE_NAME, csrf);\n \n         // Should be redirected to the original URL, but now authenticated\n         result = serverRunning.postForResponse(\"/login.do\", headers, formData);\n@@ -115,6 +115,7 @@ public class CheckTokenEndpointIntegrationTests {\n             assertTrue(response.getBody().contains(\"<h1>Application Authorization</h1>\"));\n \n             formData.clear();\n+            formData.add(DEFAULT_CSRF_COOKIE_NAME, IntegrationTestUtils.extractCookieCsrf(response.getBody()));\n             formData.add(USER_OAUTH_APPROVAL, \"true\");\n             result = serverRunning.postForResponse(\"/oauth/authorize\", headers, formData);\n             assertEquals(HttpStatus.FOUND, result.getStatusCode());\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/OpenIdTokenAuthorizationWithApprovalIntegrationTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/OpenIdTokenAuthorizationWithApprovalIntegrationTests.java\nindex d72cc2ae0..fc4ec6909 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/OpenIdTokenAuthorizationWithApprovalIntegrationTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/OpenIdTokenAuthorizationWithApprovalIntegrationTests.java\n@@ -56,6 +56,7 @@ import java.util.Iterator;\n import java.util.Map;\n import java.util.Set;\n \n+import static org.cloudfoundry.identity.uaa.security.web.CookieBasedCsrfTokenRepository.DEFAULT_CSRF_COOKIE_NAME;\n import static org.hamcrest.Matchers.containsInAnyOrder;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n@@ -276,6 +277,7 @@ public class OpenIdTokenAuthorizationWithApprovalIntegrationTests {\n \n             formData.clear();\n             formData.add(USER_OAUTH_APPROVAL, \"true\");\n+            formData.add(DEFAULT_CSRF_COOKIE_NAME, IntegrationTestUtils.extractCookieCsrf(response.getBody()));\n             result = serverRunning.postForResponse(\"/oauth/authorize\", headers, formData);\n             assertEquals(HttpStatus.FOUND, result.getStatusCode());\n             location = UriUtils.decode(result.getHeaders().getLocation().toString(), \"UTF-8\");\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/RefreshTokenSupportIntegrationTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/RefreshTokenSupportIntegrationTests.java\nindex ee804e2fa..6ffc4f27f 100755\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/RefreshTokenSupportIntegrationTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/RefreshTokenSupportIntegrationTests.java\n@@ -15,7 +15,6 @@ package org.cloudfoundry.identity.uaa.integration;\n import org.cloudfoundry.identity.uaa.ServerRunning;\n import org.cloudfoundry.identity.uaa.integration.util.IntegrationTestUtils;\n import org.cloudfoundry.identity.uaa.oauth.jwt.JwtHelper;\n-import org.cloudfoundry.identity.uaa.security.web.CookieBasedCsrfTokenRepository;\n import org.cloudfoundry.identity.uaa.test.TestAccountSetup;\n import org.cloudfoundry.identity.uaa.test.UaaTestAccounts;\n import org.junit.Before;\n@@ -36,6 +35,7 @@ import java.net.URI;\n import java.util.Arrays;\n import java.util.Map;\n \n+import static org.cloudfoundry.identity.uaa.security.web.CookieBasedCsrfTokenRepository.DEFAULT_CSRF_COOKIE_NAME;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n@@ -98,7 +98,7 @@ public class RefreshTokenSupportIntegrationTests {\n         MultiValueMap<String, String> formData = new LinkedMultiValueMap<String, String>();\n         formData.add(\"username\", testAccounts.getUserName());\n         formData.add(\"password\", testAccounts.getPassword());\n-        formData.add(CookieBasedCsrfTokenRepository.DEFAULT_CSRF_COOKIE_NAME, IntegrationTestUtils.extractCookieCsrf(response.getBody()));\n+        formData.add(DEFAULT_CSRF_COOKIE_NAME, IntegrationTestUtils.extractCookieCsrf(response.getBody()));\n \n         // Should be redirected to the original URL, but now authenticated\n         result = serverRunning.postForResponse(\"/login.do\", headers, formData);\n@@ -118,6 +118,7 @@ public class RefreshTokenSupportIntegrationTests {\n \n             formData.clear();\n             formData.add(USER_OAUTH_APPROVAL, \"true\");\n+            formData.add(DEFAULT_CSRF_COOKIE_NAME, IntegrationTestUtils.extractCookieCsrf(response.getBody()));\n             result = serverRunning.postForResponse(\"/oauth/authorize\", headers, formData);\n             assertEquals(HttpStatus.FOUND, result.getStatusCode());\n             location = result.getHeaders().getLocation().toString();\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/ScimGroupEndpointsIntegrationTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/ScimGroupEndpointsIntegrationTests.java\nindex 0f7deb57e..ea8b584c2 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/ScimGroupEndpointsIntegrationTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/ScimGroupEndpointsIntegrationTests.java\n@@ -57,6 +57,7 @@ import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n \n+import static org.cloudfoundry.identity.uaa.security.web.CookieBasedCsrfTokenRepository.DEFAULT_CSRF_COOKIE_NAME;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n@@ -520,6 +521,7 @@ public class ScimGroupEndpointsIntegrationTests {\n             assertTrue(response.getBody().contains(\"<h1>Application Authorization</h1>\"));\n \n             formData.clear();\n+            formData.add(DEFAULT_CSRF_COOKIE_NAME, IntegrationTestUtils.extractCookieCsrf(response.getBody()));\n             formData.add(USER_OAUTH_APPROVAL, \"true\");\n             formData.add(\"scope.0\", \"scope.\" + CFID);\n             result = serverRunning.postForResponse(\"/oauth/authorize\", headers, formData);\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/AutologinIT.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/AutologinIT.java\nindex a362cf62b..8cd06fa89 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/AutologinIT.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/AutologinIT.java\n@@ -13,7 +13,6 @@\n package org.cloudfoundry.identity.uaa.integration.feature;\n \n import org.cloudfoundry.identity.uaa.integration.util.IntegrationTestUtils;\n-import org.cloudfoundry.identity.uaa.security.web.CookieBasedCsrfTokenRepository;\n import org.cloudfoundry.identity.uaa.test.UaaTestAccounts;\n import org.junit.After;\n import org.junit.Assert;\n@@ -44,8 +43,8 @@ import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n+import static org.cloudfoundry.identity.uaa.security.web.CookieBasedCsrfTokenRepository.DEFAULT_CSRF_COOKIE_NAME;\n import static org.junit.Assert.assertEquals;\n-import static org.springframework.security.oauth2.common.util.OAuth2Utils.USER_OAUTH_APPROVAL;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(classes = DefaultIntegrationTestConfig.class)\n@@ -126,9 +125,9 @@ public class AutologinIT {\n \n         //generate an autologin code with our credentials\n         ResponseEntity<Map> autologinResponseEntity = restOperations.exchange(baseUrl + \"/autologin\",\n-            HttpMethod.POST,\n-            new HttpEntity<>(requestBody.toSingleValueMap(), headers),\n-            Map.class);\n+                                                                              HttpMethod.POST,\n+                                                                              new HttpEntity<>(requestBody.toSingleValueMap(), headers),\n+                                                                              Map.class);\n         String autologinCode = (String) autologinResponseEntity.getBody().get(\"code\");\n \n         //start the authorization flow - this will issue a login event\n@@ -144,28 +143,32 @@ public class AutologinIT {\n         //rest template that does NOT follow redirects\n         RestTemplate template = new RestTemplate(new DefaultIntegrationTestConfig.HttpClientFactory());\n         headers.remove(\"Authorization\");\n-        ResponseEntity<Map> authorizeResponse = template.exchange(authorizeUrl,\n-            HttpMethod.GET,\n-            new HttpEntity<>(new HashMap<String,String>(),headers),\n-            Map.class);\n+        headers.add(HttpHeaders.ACCEPT, MediaType.TEXT_HTML_VALUE);\n+        ResponseEntity<String> authorizeResponse =\n+            template.exchange(authorizeUrl,\n+                              HttpMethod.GET,\n+                              new HttpEntity<>(new HashMap<String, String>(), headers),\n+                              String.class);\n \n \n         //we are now logged in. retrieve the JSESSIONID\n         List<String> cookies = authorizeResponse.getHeaders().get(\"Set-Cookie\");\n-        assertEquals(1, cookies.size());\n+        assertEquals(2, cookies.size());\n         headers = getAppBasicAuthHttpHeaders();\n         headers.add(\"Cookie\", cookies.get(0));\n+        headers.add(\"Cookie\", cookies.get(1));\n \n         //if we receive a 200, then we must approve our scopes\n         if (HttpStatus.OK == authorizeResponse.getStatusCode()) {\n             authorizeUrl = UriComponentsBuilder.fromHttpUrl(baseUrl)\n                 .path(\"/oauth/authorize\")\n-                .queryParam(USER_OAUTH_APPROVAL, \"true\")\n+                .queryParam(\"user_oauth_approval\", \"true\")\n+                .queryParam(DEFAULT_CSRF_COOKIE_NAME, IntegrationTestUtils.extractCookieCsrf(authorizeResponse.getBody()))\n                 .build().toUriString();\n             authorizeResponse = template.exchange(authorizeUrl,\n-                HttpMethod.POST,\n-                new HttpEntity<>(new HashMap<String,String>(),headers),\n-                Map.class);\n+                                                  HttpMethod.POST,\n+                                                  new HttpEntity<>(new HashMap<String,String>(),headers),\n+                                                  String.class);\n         }\n \n         //approval is complete, we receive a token code back\n@@ -195,9 +198,9 @@ public class AutologinIT {\n \n         headers.set(headers.ACCEPT, MediaType.TEXT_HTML_VALUE);\n         ResponseEntity<String> loginResponse = template.exchange(baseUrl + \"/login\",\n-            HttpMethod.GET,\n-            new HttpEntity<>(null, headers),\n-            String.class);\n+                                                                 HttpMethod.GET,\n+                                                                 new HttpEntity<>(null, headers),\n+                                                                 String.class);\n \n         if (loginResponse.getHeaders().containsKey(\"Set-Cookie\")) {\n             for (String cookie : loginResponse.getHeaders().get(\"Set-Cookie\")) {\n@@ -205,22 +208,27 @@ public class AutologinIT {\n             }\n         }\n         String csrf = IntegrationTestUtils.extractCookieCsrf(loginResponse.getBody());\n-        requestBody.add(CookieBasedCsrfTokenRepository.DEFAULT_CSRF_COOKIE_NAME, csrf);\n+        requestBody.add(DEFAULT_CSRF_COOKIE_NAME, csrf);\n \n         headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);\n         loginResponse = restOperations.exchange(baseUrl + \"/login.do\",\n-            HttpMethod.POST,\n-            new HttpEntity<>(requestBody, headers),\n-            String.class);\n+                                                HttpMethod.POST,\n+                                                new HttpEntity<>(requestBody, headers),\n+                                                String.class);\n         cookies = loginResponse.getHeaders().get(\"Set-Cookie\");\n         assertEquals(3, cookies.size());\n         headers.clear();\n         for (String cookie : loginResponse.getHeaders().get(\"Set-Cookie\")) {\n-            headers.add(\"Cookie\", cookie);\n+            if (!cookie.contains(\"1970\")) { //deleted cookie\n+                headers.add(\"Cookie\", cookie);\n+            }\n         }\n-        restOperations.exchange(baseUrl + \"/profile\",\n-            HttpMethod.GET,\n-            new HttpEntity<>(null, headers),Void.class);\n+        headers.add(HttpHeaders.ACCEPT, MediaType.TEXT_HTML_VALUE);\n+        ResponseEntity<String> profilePage =\n+            restOperations.exchange(baseUrl + \"/profile\",\n+                                    HttpMethod.GET,\n+                                    new HttpEntity<>(null, headers), String.class);\n+\n \n         String revokeApprovalsUrl = UriComponentsBuilder.fromHttpUrl(baseUrl)\n             .path(\"/profile\")\n@@ -228,10 +236,11 @@ public class AutologinIT {\n         requestBody.clear();\n         requestBody.add(\"clientId\",\"app\");\n         requestBody.add(\"delete\",\"\");\n+        requestBody.add(DEFAULT_CSRF_COOKIE_NAME, IntegrationTestUtils.extractCookieCsrf(profilePage.getBody()));\n         ResponseEntity<Void> revokeResponse = template.exchange(revokeApprovalsUrl,\n-            HttpMethod.POST,\n-            new HttpEntity<>(requestBody, headers),\n-            Void.class);\n+                                                                HttpMethod.POST,\n+                                                                new HttpEntity<>(requestBody, headers),\n+                                                                Void.class);\n         assertEquals(HttpStatus.FOUND, revokeResponse.getStatusCode());\n     }\n \n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/OpenIdTokenGrantsIT.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/OpenIdTokenGrantsIT.java\nindex 2e57e4990..a7997eb5a 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/OpenIdTokenGrantsIT.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/OpenIdTokenGrantsIT.java\n@@ -58,6 +58,7 @@ import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n+import static org.cloudfoundry.identity.uaa.security.web.CookieBasedCsrfTokenRepository.DEFAULT_CSRF_COOKIE_NAME;\n import static org.hamcrest.Matchers.containsInAnyOrder;\n import static org.hamcrest.Matchers.empty;\n import static org.hamcrest.Matchers.is;\n@@ -349,6 +350,7 @@ public class OpenIdTokenGrantsIT {\n \n             formData.clear();\n             formData.add(USER_OAUTH_APPROVAL, \"true\");\n+            formData.add(DEFAULT_CSRF_COOKIE_NAME, IntegrationTestUtils.extractCookieCsrf(response.getBody()));\n             result = restOperations.exchange(loginUrl + \"/oauth/authorize\", HttpMethod.POST, new HttpEntity<>(formData, headers), Void.class);\n             assertEquals(HttpStatus.FOUND, result.getStatusCode());\n             location = UriUtils.decode(result.getHeaders().getLocation().toString(), \"UTF-8\");\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/util/IntegrationTestUtils.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/util/IntegrationTestUtils.java\nindex a8c4632dd..2ccf3f966 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/util/IntegrationTestUtils.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/util/IntegrationTestUtils.java\n@@ -84,6 +84,7 @@ import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n import static org.cloudfoundry.identity.uaa.provider.ExternalIdentityProviderDefinition.USER_NAME_ATTRIBUTE_PREFIX;\n+import static org.cloudfoundry.identity.uaa.security.web.CookieBasedCsrfTokenRepository.DEFAULT_CSRF_COOKIE_NAME;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n@@ -1062,6 +1063,7 @@ public class IntegrationTestUtils {\n \n             formData.clear();\n             formData.add(USER_OAUTH_APPROVAL, \"true\");\n+            formData.add(DEFAULT_CSRF_COOKIE_NAME, IntegrationTestUtils.extractCookieCsrf(response.getBody()));\n             result = serverRunning.postForResponse(\"/oauth/authorize\", headers, formData);\n             assertEquals(HttpStatus.FOUND, result.getStatusCode());\n             location = result.getHeaders().getLocation().toString();\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/audit/AuditCheckMockMvcTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/audit/AuditCheckMockMvcTests.java\nindex d17f008e7..d7e88d2c4 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/audit/AuditCheckMockMvcTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/audit/AuditCheckMockMvcTests.java\n@@ -593,6 +593,7 @@ public class AuditCheckMockMvcTests extends InjectedMockContextTest {\n             \"loginsecret\",\n             \"oauth.login\");\n         MockHttpServletRequestBuilder userPost = post(\"/oauth/authorize\")\n+            .with(cookieCsrf())\n             .accept(MediaType.APPLICATION_JSON_VALUE)\n             .contentType(MediaType.APPLICATION_JSON)\n             .header(\"Authorization\", \"Bearer \" + loginToken)\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/token/AbstractTokenMockMvcTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/token/AbstractTokenMockMvcTests.java\nindex ea41764d1..d10c54ff3 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/token/AbstractTokenMockMvcTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/token/AbstractTokenMockMvcTests.java\n@@ -170,6 +170,26 @@ public abstract class AbstractTokenMockMvcTests extends InjectedMockContextTest\n         return userProvisioning.retrieve(user.getId());\n     }\n \n+    protected ScimUser syncGroups(ScimUser user) {\n+        if (user == null) {\n+            return user;\n+        }\n+\n+        Set<ScimGroup> directGroups = groupMembershipManager.getGroupsWithMember(user.getId(), false);\n+        Set<ScimGroup> indirectGroups = groupMembershipManager.getGroupsWithMember(user.getId(), true);\n+        indirectGroups.removeAll(directGroups);\n+        Set<ScimUser.Group> groups = new HashSet<ScimUser.Group>();\n+        for (ScimGroup group : directGroups) {\n+            groups.add(new ScimUser.Group(group.getId(), group.getDisplayName(), ScimUser.Group.Type.DIRECT));\n+        }\n+        for (ScimGroup group : indirectGroups) {\n+            groups.add(new ScimUser.Group(group.getId(), group.getDisplayName(), ScimUser.Group.Type.INDIRECT));\n+        }\n+\n+        user.setGroups(groups);\n+        return user;\n+    }\n+\n     protected ScimGroupMember addMember(ScimUser user, ScimGroup group) {\n         ScimGroupMember gm = new ScimGroupMember(user.getId());\n         try {\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/token/TokenMvcMockTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/token/TokenMvcMockTests.java\nindex b63a067b0..11356a174 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/token/TokenMvcMockTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/token/TokenMvcMockTests.java\n@@ -89,6 +89,7 @@ import java.util.Map;\n import java.util.Set;\n import java.util.TreeSet;\n \n+import static org.cloudfoundry.identity.uaa.mock.util.MockMvcUtils.CookieCsrfPostProcessor.cookieCsrf;\n import static org.cloudfoundry.identity.uaa.mock.util.MockMvcUtils.createClient;\n import static org.cloudfoundry.identity.uaa.mock.util.MockMvcUtils.createUser;\n import static org.cloudfoundry.identity.uaa.mock.util.MockMvcUtils.getClientCredentialsOAuthAccessToken;\n@@ -742,6 +743,7 @@ public class TokenMvcMockTests extends AbstractTokenMockMvcTests {\n         MvcResult result  = getMockMvc().perform(\n             post(\"/oauth/authorize\")\n                 .session(session)\n+                .with(cookieCsrf())\n                 .param(OAuth2Utils.USER_OAUTH_APPROVAL, \"true\")\n                 .param(\"scope.0\",\"openid\")\n         ).andExpect(status().is3xxRedirection()).andReturn();\n@@ -787,6 +789,7 @@ public class TokenMvcMockTests extends AbstractTokenMockMvcTests {\n             post(\"/oauth/authorize\")\n                 .session(session)\n                 .param(OAuth2Utils.USER_OAUTH_APPROVAL, \"true\")\n+                .with(cookieCsrf())\n                 .param(\"scope.0\", \"openid\")\n         ).andExpect(status().is3xxRedirection()).andReturn();\n \n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/util/MockMvcUtils.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/util/MockMvcUtils.java\nindex 6f63ea0ba..2ea4392b7 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/util/MockMvcUtils.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/util/MockMvcUtils.java\n@@ -1026,20 +1026,34 @@ public final class MockMvcUtils {\n             CsrfTokenRepository repository = new CookieBasedCsrfTokenRepository();\n             CsrfToken token = repository.generateToken(request);\n             repository.saveToken(token, request, new MockHttpServletResponse());\n-            String tokenValue = useInvalidToken ? \"invalid\" + token.getToken() : token.getToken();\n+            String tokenValue = token.getToken();\n             Cookie cookie = new Cookie(token.getParameterName(), tokenValue);\n             cookie.setHttpOnly(true);\n             Cookie[] cookies = request.getCookies();\n             if (cookies==null) {\n                 request.setCookies(cookie);\n             } else {\n-                Cookie[] newcookies = new Cookie[cookies.length+1];\n+                addCsrfCookie(request, cookie, cookies);\n+            }\n+            request.setParameter(token.getParameterName(), useInvalidToken ? \"invalid\" + tokenValue : tokenValue);\n+            return request;\n+        }\n+\n+        protected void addCsrfCookie(MockHttpServletRequest request, Cookie cookie, Cookie[] cookies) {\n+            boolean replaced = false;\n+            for (int i=0; i<cookies.length; i++) {\n+                Cookie c = cookies[i];\n+                if (cookie.getName()==c.getName()) {\n+                    cookies[i] = cookie;\n+                    replaced = true;\n+                }\n+            }\n+            if (!replaced) {\n+                Cookie[] newcookies = new Cookie[cookies.length + 1];\n                 System.arraycopy(cookies, 0, newcookies, 0, cookies.length);\n                 newcookies[cookies.length] = cookie;\n                 request.setCookies(newcookies);\n             }\n-            request.setParameter(token.getParameterName(), tokenValue);\n-            return request;\n         }\n \n         public static CookieCsrfPostProcessor cookieCsrf() {\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "logical and structural changes", "source_commit": "cded6164a3b90e791688a954069aea3cfde59b69", "source_date": "Tue Aug 30 09:45:35 2016 -0700", "source_tag": "3.7.0", "target_commit": "f3d8a9e1ee1acac5bf1f8487ac9461f4cf4505c2", "target_date": "Tue Aug 30 13:00:32 2016 -0700", "target_tag": "3.4.4", "FAIL TO PASS": ["org.cloudfoundry.identity.uaa.mock.DefaultConfigurationTestSuite > org.cloudfoundry.identity.uaa.mock.approvals.ApprovalsMockMvcTests.test_post_approval_csrf", "org.cloudfoundry.identity.uaa.mock.DefaultConfigurationTestSuite > org.cloudfoundry.identity.uaa.mock.approvals.ApprovalsMockMvcTests.test_get_approvals", "org.cloudfoundry.identity.uaa.mock.DefaultConfigurationTestSuite > org.cloudfoundry.identity.uaa.mock.approvals.ApprovalsMockMvcTests.test_oauth_authorize_without_csrf"], "PASS TO PASS": ["org.cloudfoundry.identity.uaa.authentication.manager.DynamicLdapAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneEndpointsMockMvcTests", ":cloudfoundry-identity-model:processResources", "org.cloudfoundry.identity.uaa.mock.authentication.AuthzAuthenticationManagerConfigurationTests", "/uaa/uaa/src/test/java/org/springframework/security/ldap/server/ApacheDsSSLContainer.java", ":cloudfoundry-identity-model:jar", "org.cloudfoundry.identity.uaa.login.XFrameOptionsTheories", ":cloudfoundry-identity-server:processTestResources", "org.cloudfoundry.identity.uaa.mock.token.TokenKeyEndpointDocs", "org.cloudfoundry.identity.uaa.mock.token.CheckTokenEndpointDocs", ":cloudfoundry-identity-uaa:compileTestJava/uaa/uaa/src/test/java/org/springframework/security/ldap/server/ApacheDsSSLContainer.java", ":cloudfoundry-identity-uaa:processTestResources", ":cloudfoundry-identity-server:testClasses", ":cloudfoundry-identity-server:compileTestJava", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneResolvingMockMvcTest", ":cloudfoundry-identity-server:compileJava", "org.cloudfoundry.identity.uaa.db.TestZonifyGroupSchema_V2_4_1", "org.cloudfoundry.identity.uaa.mock.zones.DisableUserManagementSecurityFilterMockMvcTest", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserEndpointDocs", ":cloudfoundry-identity-server:processResources", "org.cloudfoundry.identity.uaa.login.TokenEndpointDocs", ":cloudfoundry-identity-uaa:compileTestJava", "org.cloudfoundry.identity.uaa.invitations.InvitationsEndpointDocs", "org.cloudfoundry.identity.uaa.login.LoginMockMvcTests", ":cloudfoundry-identity-model:compileJava", "org.cloudfoundry.identity.uaa.login.BootstrapTests", "org.cloudfoundry.identity.uaa.login.AccountsControllerMockMvcTests", "org.cloudfoundry.identity.uaa.mock.ldap.LdapMockMvcTests", "org.cloudfoundry.identity.uaa.mock.password.PasswordChangeEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.provider.saml.LoginSamlAuthenticationProviderTests", ":cloudfoundry-identity-uaa:testClasses", ":cloudfoundry-identity-server:classes", ":cloudfoundry-identity-uaa:classes", "org.cloudfoundry.identity.uaa.BootstrapTests", ":cloudfoundry-identity-model:classes", ":cloudfoundry-identity-uaa:compileJava", "org.cloudfoundry.identity.uaa.UaaConfigurationTests", "org.cloudfoundry.identity.uaa.login.AuthorizeEndpointDocs", ":cloudfoundry-identity-uaa:processResources", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.mock.clients.ClientAdminEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.authentication.manager.DynamicZoneAwareAuthenticationManagerTest", ":cloudfoundry-identity-model:mainOutputResourcesDir", "org.cloudfoundry.identity.uaa.mock.DefaultDocsTestSuite", "org.cloudfoundry.identity.uaa.invitations.InvitationsEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.mock.token.TokenMvcMockTests", "org.cloudfoundry.identity.uaa.mock.approvals.ApprovalsMockMvcTests", "org.cloudfoundry.identity.uaa.mock.providers.IdentityProviderEndpointsMockMvcTests", "org.cloudfoundry.identity.uaa.mock.token.TokenKeyEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.scim.endpoints.PasswordResetEndpointMockMvcTests", "org.cloudfoundry.identity.uaa.mock.providers.IdentityProviderEndpointsDocs", "org.cloudfoundry.identity.uaa.mock.oauth.CheckDefaultAuthoritiesMvcMockTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserEndpointsMockMvcTests", ":cloudfoundry-identity-model:gitInfo", "org.cloudfoundry.identity.uaa.client.ClientMetadataAdminEndpointsMockMvcTest", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsDocs", "org.cloudfoundry.identity.uaa.mock.audit.AuditCheckMockMvcTests", "org.cloudfoundry.identity.uaa.login.ResetPasswordControllerMockMvcTests", ":cloudfoundry-identity-server:jar", "org.cloudfoundry.identity.uaa.mock.config.HealthzShouldNotBeProtectedMockMvcTests", ":cloudfoundry-identity-model:buildInfo", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneSwitchingFilterMockMvcTest", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserLookupMockMvcTests", "org.cloudfoundry.identity.uaa.login.util.LocalUaaRestTemplateMockMvcTests", "org.cloudfoundry.identity.uaa.login.PasscodeMockMvcTests", "org.cloudfoundry.identity.uaa.mock.zones.IdentityZoneEndpointDocs", "org.cloudfoundry.identity.uaa.mock.zones.DisableInternalUserManagementFilterMockMvcTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimExternalGroupMappingsEndpointsDocs", "org.cloudfoundry.identity.uaa.mock.DefaultConfigurationTestSuite", "org.cloudfoundry.identity.uaa.mock.config.LockoutPolicyTests", "org.cloudfoundry.identity.uaa.scim.endpoints.UserIdConversionEndpointDocs", "org.cloudfoundry.identity.uaa.mock.codestore.ExpiringCodeStoreMockMvcTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlIDPRefreshMockMvcTests", "org.cloudfoundry.identity.uaa.login.InvitationsServiceMockMvcTests"]}
{"ecosystem": "maven", "repo": "tomcat", "instance_id": "tomcat_797", "original_commit_message": "Remove support for the identity T-E header value", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/java/org/apache/coyote/http11/Http11Processor.java b/java/org/apache/coyote/http11/Http11Processor.java\nindex f43efe1e72..3b8ed2fc4b 100644\n--- a/java/org/apache/coyote/http11/Http11Processor.java\n+++ b/java/org/apache/coyote/http11/Http11Processor.java\n@@ -212,11 +212,8 @@ public class Http11Processor extends AbstractProcessor {\n \n         // Parsing trims and converts to lower case.\n \n-        if (encodingName.equals(\"identity\")) {\n-            // Skip\n-        } else if (encodingName.equals(\"chunked\")) {\n-            inputBuffer.addActiveFilter\n-                (inputFilters[Constants.CHUNKED_FILTER]);\n+        if (encodingName.equals(\"chunked\")) {\n+            inputBuffer.addActiveFilter(inputFilters[Constants.CHUNKED_FILTER]);\n             contentDelimitation = true;\n         } else {\n             for (int i = pluggableFilterIndex; i < inputFilters.length; i++) {\n@@ -759,7 +756,6 @@ public class Http11Processor extends AbstractProcessor {\n                 List<String> encodingNames = new ArrayList<>();\n                 if (TokenList.parseTokenList(headers.values(\"transfer-encoding\"), encodingNames)) {\n                     for (String encodingName : encodingNames) {\n-                        // \"identity\" codings are ignored\n                         addInputFilter(inputFilters, encodingName);\n                     }\n                 } else {\n\n\n</patch>\n<test_patch>\ndiff --git a/test/org/apache/coyote/http11/TestHttp11Processor.java b/test/org/apache/coyote/http11/TestHttp11Processor.java\nindex b6f7a6b865..3287127e30 100644\n--- a/test/org/apache/coyote/http11/TestHttp11Processor.java\n+++ b/test/org/apache/coyote/http11/TestHttp11Processor.java\n@@ -253,31 +253,6 @@ public class TestHttp11Processor extends TomcatBaseTest {\n     }\n \n \n-    @Test\n-    public void testWithTEIdentity() throws Exception {\n-        getTomcatInstanceTestWebapp(false, true);\n-\n-        String request =\n-            \"POST /test/echo-params.jsp HTTP/1.1\" + SimpleHttpClient.CRLF +\n-            \"Host: any\" + SimpleHttpClient.CRLF +\n-            \"Transfer-encoding: identity\" + SimpleHttpClient.CRLF +\n-            \"Content-Length: 9\" + SimpleHttpClient.CRLF +\n-            \"Content-Type: application/x-www-form-urlencoded\" +\n-                    SimpleHttpClient.CRLF +\n-            \"Connection: close\" + SimpleHttpClient.CRLF +\n-                SimpleHttpClient.CRLF +\n-            \"test=data\";\n-\n-        Client client = new Client(getPort());\n-        client.setRequest(new String[] {request});\n-\n-        client.connect();\n-        client.processRequest();\n-        Assert.assertTrue(client.isResponse200());\n-        Assert.assertTrue(client.getResponseBody().contains(\"test - data\"));\n-    }\n-\n-\n     @Test\n     public void testWithTESavedRequest() throws Exception {\n         getTomcatInstanceTestWebapp(false, true);\n@@ -1859,4 +1834,74 @@ public class TestHttp11Processor extends TomcatBaseTest {\n             // NO-OP\n         }\n     }\n+\n+\n+    @Test\n+    public void testTEHeaderUnknown01() throws Exception {\n+        doTestTEHeaderUnknown(\"identity\");\n+    }\n+\n+\n+    @Test\n+    public void testTEHeaderUnknown02() throws Exception {\n+        doTestTEHeaderUnknown(\"identity, chunked\");\n+    }\n+\n+\n+    @Test\n+    public void testTEHeaderUnknown03() throws Exception {\n+        doTestTEHeaderUnknown(\"unknown, chunked\");\n+    }\n+\n+\n+    @Test\n+    public void testTEHeaderUnknown04() throws Exception {\n+        doTestTEHeaderUnknown(\"void\");\n+    }\n+\n+\n+    @Test\n+    public void testTEHeaderUnknown05() throws Exception {\n+        doTestTEHeaderUnknown(\"void, chunked\");\n+    }\n+\n+\n+    @Test\n+    public void testTEHeaderUnknown06() throws Exception {\n+        doTestTEHeaderUnknown(\"void, identity\");\n+    }\n+\n+\n+    @Test\n+    public void testTEHeaderUnknown07() throws Exception {\n+        doTestTEHeaderUnknown(\"identity, void\");\n+    }\n+\n+\n+    private void doTestTEHeaderUnknown(String headerValue) throws Exception {\n+        Tomcat tomcat = getTomcatInstance();\n+\n+        // No file system docBase required\n+        Context ctx = tomcat.addContext(\"\", null);\n+\n+        // Add servlet\n+        Tomcat.addServlet(ctx, \"TesterServlet\", new TesterServlet(false));\n+        ctx.addServletMappingDecoded(\"/foo\", \"TesterServlet\");\n+\n+        tomcat.start();\n+\n+        String request =\n+                \"GET /foo HTTP/1.1\" + SimpleHttpClient.CRLF +\n+                \"Host: localhost:\" + getPort() + SimpleHttpClient.CRLF +\n+                \"Transfer-Encoding: \" + headerValue + SimpleHttpClient.CRLF +\n+                SimpleHttpClient.CRLF;\n+\n+        Client client = new Client(tomcat.getConnector().getLocalPort());\n+        client.setRequest(new String[] {request});\n+\n+        client.connect();\n+        client.processRequest(false);\n+\n+        Assert.assertTrue(client.isResponse501());\n+    }\n }\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "eee0d024c1b3171560c92eaba79dd6eb8eb11bcd", "source_date": "Tue Jun 8 11:46:59 2021 +0100", "source_tag": "10.0.7", "target_commit": "45d70a86a901cbd534f8f570bed2aec9f7f7b88e", "target_date": "Tue Jun 8 11:47:33 2021 +0100", "target_tag": "9.0.47", "FAIL TO PASS": ["testTEHeaderUnknown01", "testTEHeaderUnknown02"], "PASS TO PASS": ["testRequestBodySwallowing", "testBug57621a", "testTEHeaderUnknown06", "testMultipleHostHeader01", "testBug53677b", "testInconsistentHostHeader03", "testPipelining", "testTEHeaderUnknown04", "testWithTEChunkedWithCL", "testMultipleHostHeader02", "testInconsistentHostHeader06", "testKeepAliveHeader09", "testKeepAliveHeader04", "testTEHeaderUnknown05", "testTEHeaderUnknown03", "testSlowUploadTimeoutWithLongerUploadTimeout", "testTEHeaderUnknown07", "testBug53677a", "testMissingHostHeader", "testKeepAliveHeader08", "testKeepAliveHeader05", "testBlankHostHeader01", "testChunking11NoContentLength", "testKeepAliveHeader02", "testInconsistentHostHeader02", "testWithTEVoid", "testKeepAliveHeader01", "testNon2xxResponseWithExpectation", "testKeepAliveHeader12", "testKeepAliveHeader07", "testBug57621b", "testBlankHostHeader02", "testWithTEBuffered", "testConsistentHostHeader01", "testNoChunking11NoContentLengthConnectionClose", "testInconsistentHostHeader04", "testWithUnknownExpectation", "testBug59310", "testInconsistentHostHeader01", "testKeepAliveHeader11", "testPipeliningBug64974", "testWithTEUnsupported", "testSlowUploadTimeoutWithoutLongerUploadTimeout", "testWithTEChunked", "testBug55772", "testKeepAliveHeader06", "testBug61086", "testKeepAliveHeader03", "testWithTESavedRequest", "testInconsistentHostHeader05", "testConsistentHostHeader02", "testConsistentHostHeader03", "testKeepAliveHeader10", "testResponseWithErrorChunked", "testNon2xxResponseWithoutExpectation"]}
{"ecosystem": "maven", "repo": "tomcat", "instance_id": "tomcat_798", "original_commit_message": "Remove support for the identity T-E header value", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/java/org/apache/coyote/http11/Http11Processor.java b/java/org/apache/coyote/http11/Http11Processor.java\nindex f43efe1e72..3b8ed2fc4b 100644\n--- a/java/org/apache/coyote/http11/Http11Processor.java\n+++ b/java/org/apache/coyote/http11/Http11Processor.java\n@@ -212,11 +212,8 @@ public class Http11Processor extends AbstractProcessor {\n \n         // Parsing trims and converts to lower case.\n \n-        if (encodingName.equals(\"identity\")) {\n-            // Skip\n-        } else if (encodingName.equals(\"chunked\")) {\n-            inputBuffer.addActiveFilter\n-                (inputFilters[Constants.CHUNKED_FILTER]);\n+        if (encodingName.equals(\"chunked\")) {\n+            inputBuffer.addActiveFilter(inputFilters[Constants.CHUNKED_FILTER]);\n             contentDelimitation = true;\n         } else {\n             for (int i = pluggableFilterIndex; i < inputFilters.length; i++) {\n@@ -759,7 +756,6 @@ public class Http11Processor extends AbstractProcessor {\n                 List<String> encodingNames = new ArrayList<>();\n                 if (TokenList.parseTokenList(headers.values(\"transfer-encoding\"), encodingNames)) {\n                     for (String encodingName : encodingNames) {\n-                        // \"identity\" codings are ignored\n                         addInputFilter(inputFilters, encodingName);\n                     }\n                 } else {\n\n\n</patch>\n<test_patch>\ndiff --git a/test/org/apache/coyote/http11/TestHttp11Processor.java b/test/org/apache/coyote/http11/TestHttp11Processor.java\nindex b6f7a6b865..3287127e30 100644\n--- a/test/org/apache/coyote/http11/TestHttp11Processor.java\n+++ b/test/org/apache/coyote/http11/TestHttp11Processor.java\n@@ -253,31 +253,6 @@ public class TestHttp11Processor extends TomcatBaseTest {\n     }\n \n \n-    @Test\n-    public void testWithTEIdentity() throws Exception {\n-        getTomcatInstanceTestWebapp(false, true);\n-\n-        String request =\n-            \"POST /test/echo-params.jsp HTTP/1.1\" + SimpleHttpClient.CRLF +\n-            \"Host: any\" + SimpleHttpClient.CRLF +\n-            \"Transfer-encoding: identity\" + SimpleHttpClient.CRLF +\n-            \"Content-Length: 9\" + SimpleHttpClient.CRLF +\n-            \"Content-Type: application/x-www-form-urlencoded\" +\n-                    SimpleHttpClient.CRLF +\n-            \"Connection: close\" + SimpleHttpClient.CRLF +\n-                SimpleHttpClient.CRLF +\n-            \"test=data\";\n-\n-        Client client = new Client(getPort());\n-        client.setRequest(new String[] {request});\n-\n-        client.connect();\n-        client.processRequest();\n-        Assert.assertTrue(client.isResponse200());\n-        Assert.assertTrue(client.getResponseBody().contains(\"test - data\"));\n-    }\n-\n-\n     @Test\n     public void testWithTESavedRequest() throws Exception {\n         getTomcatInstanceTestWebapp(false, true);\n@@ -1859,4 +1834,74 @@ public class TestHttp11Processor extends TomcatBaseTest {\n             // NO-OP\n         }\n     }\n+\n+\n+    @Test\n+    public void testTEHeaderUnknown01() throws Exception {\n+        doTestTEHeaderUnknown(\"identity\");\n+    }\n+\n+\n+    @Test\n+    public void testTEHeaderUnknown02() throws Exception {\n+        doTestTEHeaderUnknown(\"identity, chunked\");\n+    }\n+\n+\n+    @Test\n+    public void testTEHeaderUnknown03() throws Exception {\n+        doTestTEHeaderUnknown(\"unknown, chunked\");\n+    }\n+\n+\n+    @Test\n+    public void testTEHeaderUnknown04() throws Exception {\n+        doTestTEHeaderUnknown(\"void\");\n+    }\n+\n+\n+    @Test\n+    public void testTEHeaderUnknown05() throws Exception {\n+        doTestTEHeaderUnknown(\"void, chunked\");\n+    }\n+\n+\n+    @Test\n+    public void testTEHeaderUnknown06() throws Exception {\n+        doTestTEHeaderUnknown(\"void, identity\");\n+    }\n+\n+\n+    @Test\n+    public void testTEHeaderUnknown07() throws Exception {\n+        doTestTEHeaderUnknown(\"identity, void\");\n+    }\n+\n+\n+    private void doTestTEHeaderUnknown(String headerValue) throws Exception {\n+        Tomcat tomcat = getTomcatInstance();\n+\n+        // No file system docBase required\n+        Context ctx = tomcat.addContext(\"\", null);\n+\n+        // Add servlet\n+        Tomcat.addServlet(ctx, \"TesterServlet\", new TesterServlet(false));\n+        ctx.addServletMappingDecoded(\"/foo\", \"TesterServlet\");\n+\n+        tomcat.start();\n+\n+        String request =\n+                \"GET /foo HTTP/1.1\" + SimpleHttpClient.CRLF +\n+                \"Host: localhost:\" + getPort() + SimpleHttpClient.CRLF +\n+                \"Transfer-Encoding: \" + headerValue + SimpleHttpClient.CRLF +\n+                SimpleHttpClient.CRLF;\n+\n+        Client client = new Client(tomcat.getConnector().getLocalPort());\n+        client.setRequest(new String[] {request});\n+\n+        client.connect();\n+        client.processRequest(false);\n+\n+        Assert.assertTrue(client.isResponse501());\n+    }\n }\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "eee0d024c1b3171560c92eaba79dd6eb8eb11bcd", "source_date": "Tue Jun 8 11:46:59 2021 +0100", "source_tag": "10.0.7", "target_commit": "3202703e6d635e39b74262e81f0cb4bcbe2170dc", "target_date": "Tue Jun 8 11:48:02 2021 +0100", "target_tag": "8.5.67", "FAIL TO PASS": ["testTEHeaderUnknown01", "testTEHeaderUnknown02"], "PASS TO PASS": ["testRequestBodySwallowing", "testBug57621a", "testTEHeaderUnknown06", "testMultipleHostHeader01", "testBug53677b", "testInconsistentHostHeader03", "testPipelining", "testTEHeaderUnknown04", "testWithTEChunkedWithCL", "testMultipleHostHeader02", "testInconsistentHostHeader06", "testKeepAliveHeader09", "testKeepAliveHeader04", "testTEHeaderUnknown05", "testTEHeaderUnknown03", "testSlowUploadTimeoutWithLongerUploadTimeout", "testTEHeaderUnknown07", "testBug53677a", "testMissingHostHeader", "testKeepAliveHeader08", "testKeepAliveHeader05", "testBlankHostHeader01", "testChunking11NoContentLength", "testKeepAliveHeader02", "testInconsistentHostHeader02", "testWithTEVoid", "testKeepAliveHeader01", "testNon2xxResponseWithExpectation", "testKeepAliveHeader12", "testKeepAliveHeader07", "testBug57621b", "testBlankHostHeader02", "testWithTEBuffered", "testConsistentHostHeader01", "testNoChunking11NoContentLengthConnectionClose", "testInconsistentHostHeader04", "testWithUnknownExpectation", "testBug59310", "testInconsistentHostHeader01", "testKeepAliveHeader11", "testPipeliningBug64974", "testWithTEUnsupported", "testSlowUploadTimeoutWithoutLongerUploadTimeout", "testWithTEChunked", "testBug55772", "testKeepAliveHeader06", "testBug61086", "testKeepAliveHeader03", "testWithTESavedRequest", "testInconsistentHostHeader05", "testConsistentHostHeader02", "testConsistentHostHeader03", "testKeepAliveHeader10", "testResponseWithErrorChunked", "testNon2xxResponseWithoutExpectation"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_1313", "original_commit_message": "Wrap trustmanager in custom trustmanager\nSigned-off-by: Priyata Agrawal <pagrawal@pivotal.io>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/provider/ldap/ProcessLdapProperties.java b/server/src/main/java/org/cloudfoundry/identity/uaa/provider/ldap/ProcessLdapProperties.java\nindex a2846d631..0a71c5a7c 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/provider/ldap/ProcessLdapProperties.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/provider/ldap/ProcessLdapProperties.java\n@@ -14,6 +14,8 @@\n \n package org.cloudfoundry.identity.uaa.provider.ldap;\n \n+import java.security.KeyManagementException;\n+import java.security.NoSuchAlgorithmException;\n import java.util.LinkedHashMap;\n import java.util.Map;\n \n@@ -21,6 +23,7 @@ public class ProcessLdapProperties {\n \n     public static final String LDAP_SOCKET_FACTORY = \"java.naming.ldap.factory.socket\";\n     public static final String SKIP_SSL_VERIFICATION_SOCKET_FACTORY = \"org.apache.directory.api.util.DummySSLSocketFactory\";\n+    public static final String EXPIRY_CHECKING_SOCKET_FACTORY = \"org.cloudfoundry.identity.uaa.security.LdapSocketFactory\";\n \n     private boolean disableSslVerification;\n     private String baseUrl;\n@@ -30,10 +33,14 @@ public class ProcessLdapProperties {\n         this.disableSslVerification = disableSslVerification;\n     }\n \n-    public Map process(Map map) {\n+    public Map process(Map map) throws KeyManagementException, NoSuchAlgorithmException {\n         Map result = new LinkedHashMap(map);\n-        if (isDisableSslVerification() && isLdapsUrl()) {\n-            result.put(LDAP_SOCKET_FACTORY, SKIP_SSL_VERIFICATION_SOCKET_FACTORY);\n+        if(isLdapsUrl()) {\n+            if (isDisableSslVerification()) {\n+                result.put(LDAP_SOCKET_FACTORY, SKIP_SSL_VERIFICATION_SOCKET_FACTORY);\n+            } else {\n+                result.put(LDAP_SOCKET_FACTORY, EXPIRY_CHECKING_SOCKET_FACTORY);\n+            }\n         }\n         return result;\n     }\n\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/security/LdapSocketFactory.java b/server/src/main/java/org/cloudfoundry/identity/uaa/security/LdapSocketFactory.java\nnew file mode 100644\nindex 000000000..f26977ede\n--- /dev/null\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/security/LdapSocketFactory.java\n@@ -0,0 +1,72 @@\n+package org.cloudfoundry.identity.uaa.security;\n+\n+import javax.net.SocketFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocketFactory;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.X509TrustManager;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+import java.security.SecureRandom;\n+\n+public class LdapSocketFactory  extends SSLSocketFactory {\n+\n+  private static SocketFactory instance;\n+  private SSLSocketFactory delegate;\n+\n+  public static SocketFactory getDefault() {\n+    if(instance == null) {\n+      instance = new LdapSocketFactory();\n+    }\n+\n+    return instance;\n+  }\n+\n+  public LdapSocketFactory() {\n+    try {\n+      X509TrustManager trustManager = new X509ExpiryCheckingTrustManager();\n+      TrustManager[] tma = new TrustManager[]{trustManager};\n+      SSLContext sc = SSLContext.getInstance(\"TLS\");\n+      sc.init(null, tma, new SecureRandom());\n+      this.delegate = sc.getSocketFactory();\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  @Override\n+  public String[] getDefaultCipherSuites() {\n+    return delegate.getDefaultCipherSuites();\n+  }\n+\n+  @Override\n+  public String[] getSupportedCipherSuites() {\n+    return delegate.getSupportedCipherSuites();\n+  }\n+\n+  @Override\n+  public Socket createSocket(Socket socket, String s, int i, boolean b) throws IOException {\n+    return delegate.createSocket(socket, s, i, b);\n+  }\n+\n+  @Override\n+  public Socket createSocket(String s, int i) throws IOException{\n+    return delegate.createSocket(s, i);\n+  }\n+\n+  @Override\n+  public Socket createSocket(String s, int i, InetAddress inetAddress, int i1) throws IOException {\n+    return delegate.createSocket(s, i, inetAddress, i1);\n+  }\n+\n+  @Override\n+  public Socket createSocket(InetAddress inetAddress, int i) throws IOException {\n+    return delegate.createSocket(inetAddress, i);\n+  }\n+\n+  @Override\n+  public Socket createSocket(InetAddress inetAddress, int i, InetAddress inetAddress1, int i1) throws IOException {\n+    return delegate.createSocket(inetAddress, i, inetAddress1, i1);\n+  }\n+}\n\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/security/X509ExpiryCheckingTrustManager.java b/server/src/main/java/org/cloudfoundry/identity/uaa/security/X509ExpiryCheckingTrustManager.java\nnew file mode 100644\nindex 000000000..f483934e4\n--- /dev/null\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/security/X509ExpiryCheckingTrustManager.java\n@@ -0,0 +1,65 @@\n+package org.cloudfoundry.identity.uaa.security;\n+\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509TrustManager;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+\n+public class X509ExpiryCheckingTrustManager implements X509TrustManager {\n+\n+    private X509TrustManager delegate;\n+\n+    public X509ExpiryCheckingTrustManager() {\n+        try {\n+            TrustManagerFactory tmf;\n+            tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+            tmf.init((KeyStore) null);\n+            X509TrustManager x509Tm = null;\n+            for (TrustManager tm : tmf.getTrustManagers()) {\n+                if (tm instanceof X509TrustManager) {\n+                    x509Tm = (X509TrustManager) tm;\n+                    break;\n+                }\n+            }\n+            delegate = x509Tm;\n+        } catch (NoSuchAlgorithmException | KeyStoreException e) {\n+        }\n+    }\n+\n+    protected void setDelegate(X509TrustManager delegate) {\n+        this.delegate = delegate;\n+    }\n+\n+    @Override\n+    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n+        if (delegate == null) {\n+            throw new CertificateException();\n+        } else {\n+            delegate.checkClientTrusted(x509Certificates, s);\n+        }\n+    }\n+\n+    @Override\n+    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n+        if (delegate == null) {\n+            throw new CertificateException();\n+        } else {\n+            delegate.checkServerTrusted(x509Certificates, s);\n+        }\n+        for (X509Certificate certificate : x509Certificates) {\n+            certificate.checkValidity();\n+        }\n+    }\n+\n+    @Override\n+    public X509Certificate[] getAcceptedIssuers() {\n+        if (delegate != null) {\n+            return delegate.getAcceptedIssuers();\n+        }\n+        return new X509Certificate[0];\n+    }\n+}\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/provider/ldap/ProcessLdapPropertiesTest.java b/server/src/test/java/org/cloudfoundry/identity/uaa/provider/ldap/ProcessLdapPropertiesTest.java\nindex 757dd491d..b66f5a4c6 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/provider/ldap/ProcessLdapPropertiesTest.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/provider/ldap/ProcessLdapPropertiesTest.java\n@@ -35,4 +35,15 @@ public class ProcessLdapPropertiesTest {\n         process.setBaseUrl(\"ldaps://localhost:636\");\n         assertEquals(ProcessLdapProperties.SKIP_SSL_VERIFICATION_SOCKET_FACTORY, process.process(properties).get(LDAP_SOCKET_FACTORY));\n     }\n-}\n\\ No newline at end of file\n+\n+    @Test\n+    public void process_whenSslValidationIsEnabled() throws Exception {\n+        Map<String,String> properties = new HashMap<>();\n+        ProcessLdapProperties process = new ProcessLdapProperties(\"ldap://localhost:389\", false);\n+        assertNull(process.process(properties).get(LDAP_SOCKET_FACTORY));\n+        process.setDisableSslVerification(false);\n+        assertNull(process.process(properties).get(LDAP_SOCKET_FACTORY));\n+        process.setBaseUrl(\"ldaps://localhost:636\");\n+        assertEquals(ProcessLdapProperties.EXPIRY_CHECKING_SOCKET_FACTORY, process.process(properties).get(LDAP_SOCKET_FACTORY));\n+    }\n+}\n\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/security/LdapSocketFactoryTest.java b/server/src/test/java/org/cloudfoundry/identity/uaa/security/LdapSocketFactoryTest.java\nnew file mode 100644\nindex 000000000..873453c2d\n--- /dev/null\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/security/LdapSocketFactoryTest.java\n@@ -0,0 +1,7 @@\n+package org.cloudfoundry.identity.uaa.security;\n+\n+import static org.junit.Assert.*;\n+\n+public class LdapSocketFactoryTest {\n+\n+}\n\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/security/X509ExpiryCheckingTrustManagerTest.java b/server/src/test/java/org/cloudfoundry/identity/uaa/security/X509ExpiryCheckingTrustManagerTest.java\nnew file mode 100644\nindex 000000000..55622d9e7\n--- /dev/null\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/security/X509ExpiryCheckingTrustManagerTest.java\n@@ -0,0 +1,59 @@\n+package org.cloudfoundry.identity.uaa.security;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.springframework.security.saml.trust.X509TrustManager;\n+\n+import java.security.cert.CertificateExpiredException;\n+import java.security.cert.X509Certificate;\n+\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.verify;\n+\n+public class X509ExpiryCheckingTrustManagerTest {\n+\n+  @Test\n+  public void checkServerTrusted_throwsExceptionWhenCertIsExpired() throws Exception {\n+    X509ExpiryCheckingTrustManager manager = new X509ExpiryCheckingTrustManager();\n+    X509TrustManager mockedDelegate = Mockito.mock(X509TrustManager.class);\n+    manager.setDelegate(mockedDelegate);\n+    X509Certificate certificate = Mockito.mock(X509Certificate.class);\n+    X509Certificate[] x509Certificates = {certificate};\n+\n+    doNothing().when(mockedDelegate).checkServerTrusted(x509Certificates, \"string\");\n+    doThrow(new CertificateExpiredException()).when(certificate).checkValidity();\n+    try {\n+      manager.checkServerTrusted(x509Certificates,\"string\");\n+      Assert.fail();\n+    } catch (CertificateExpiredException e) {\n+      verify(mockedDelegate).checkServerTrusted(x509Certificates, \"string\");\n+      verify(certificate).checkValidity();\n+    }\n+  }\n+\n+  @Test\n+  public void checkClientTrusted_callsDelegate() throws Exception {\n+    X509ExpiryCheckingTrustManager manager = new X509ExpiryCheckingTrustManager();\n+    X509TrustManager mockedDelegate = Mockito.mock(X509TrustManager.class);\n+    manager.setDelegate(mockedDelegate);\n+\n+    X509Certificate certificate = Mockito.mock(X509Certificate.class);\n+    X509Certificate[] x509Certificates = {certificate};\n+\n+    doNothing().when(mockedDelegate).checkClientTrusted(x509Certificates, \"string\");\n+    manager.checkClientTrusted(x509Certificates, \"string\");\n+    verify(mockedDelegate).checkClientTrusted(x509Certificates, \"string\");\n+  }\n+\n+  @Test\n+  public void checkAcceptedIssuers_callsDelegate() throws Exception {\n+    X509ExpiryCheckingTrustManager manager = new X509ExpiryCheckingTrustManager();\n+    X509TrustManager mockedDelegate = Mockito.mock(X509TrustManager.class);\n+    manager.setDelegate(mockedDelegate);\n+\n+    manager.getAcceptedIssuers();\n+    verify(mockedDelegate).getAcceptedIssuers();\n+  }\n+}\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/LdapLoginIT.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/LdapLoginIT.java\nnew file mode 100644\nindex 000000000..9a4eee59e\n--- /dev/null\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/LdapLoginIT.java\n@@ -0,0 +1,195 @@\n+package org.cloudfoundry.identity.uaa.integration.feature;\n+\n+import org.cloudfoundry.identity.uaa.ServerRunning;\n+import org.cloudfoundry.identity.uaa.constants.OriginKeys;\n+import org.cloudfoundry.identity.uaa.integration.util.IntegrationTestUtils;\n+import org.cloudfoundry.identity.uaa.integration.util.ScreenshotOnFail;\n+import org.cloudfoundry.identity.uaa.login.test.LoginServerClassRunner;\n+import org.cloudfoundry.identity.uaa.provider.IdentityProvider;\n+import org.cloudfoundry.identity.uaa.provider.LdapIdentityProviderDefinition;\n+import org.cloudfoundry.identity.uaa.scim.ScimUser;\n+import org.cloudfoundry.identity.uaa.test.UaaTestAccounts;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebDriver;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.security.oauth2.client.test.TestAccounts;\n+import org.springframework.security.oauth2.common.util.RandomValueStringGenerator;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.web.client.RestOperations;\n+import org.springframework.web.client.RestTemplate;\n+\n+import static org.cloudfoundry.identity.uaa.integration.util.IntegrationTestUtils.doesSupportZoneDNS;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assume.assumeTrue;\n+\n+@RunWith(LoginServerClassRunner.class)\n+@ContextConfiguration(classes = DefaultIntegrationTestConfig.class)\n+public class LdapLoginIT {\n+\n+\n+\n+    @Autowired\n+    @Rule\n+    public IntegrationTestRule integrationTestRule;\n+\n+    @Rule\n+    public ScreenshotOnFail screenShootRule = new ScreenshotOnFail();\n+\n+    @Autowired\n+    RestOperations restOperations;\n+\n+    @Autowired\n+    WebDriver webDriver;\n+\n+    @Value(\"${integration.test.base_url}\")\n+    String baseUrl;\n+\n+    @Autowired\n+    TestClient testClient;\n+\n+    ServerRunning serverRunning = ServerRunning.isRunning();\n+\n+\n+    @Before\n+    public void clearWebDriverOfCookies() throws Exception {\n+        screenShootRule.setWebDriver(webDriver);\n+        webDriver.get(baseUrl + \"/logout.do\");\n+        webDriver.get(baseUrl.replace(\"localhost\", \"testzone1.localhost\") + \"/logout.do\");\n+        webDriver.get(baseUrl.replace(\"localhost\", \"testzone2.localhost\") + \"/logout.do\");\n+        webDriver.manage().deleteAllCookies();\n+    }\n+\n+    @Test\n+    public void ldapLogin_withValidSelfSignedCert() throws Exception {\n+        //ensure we are able to resolve DNS for hostname testzone2.localhost\n+        assumeTrue(\"Expected testzone1/2/3/4.localhost to resolve to 127.0.0.1\", doesSupportZoneDNS());\n+        String zoneId = \"testzone2\";\n+        String zoneUrl = baseUrl.replace(\"localhost\", \"testzone2.localhost\");\n+\n+        //identity client token\n+        RestTemplate identityClient = IntegrationTestUtils.getClientCredentialsTemplate(\n+          IntegrationTestUtils.getClientCredentialsResource(baseUrl, new String[]{\"zones.write\", \"zones.read\", \"scim.zones\"}, \"identity\", \"identitysecret\")\n+        );\n+        //admin client token - to create users\n+        RestTemplate adminClient = IntegrationTestUtils.getClientCredentialsTemplate(\n+          IntegrationTestUtils.getClientCredentialsResource(baseUrl, new String[0], \"admin\", \"adminsecret\")\n+        );\n+        //create the zone\n+        IntegrationTestUtils.createZoneOrUpdateSubdomain(identityClient, baseUrl, zoneId, zoneId);\n+\n+        //create a zone admin user\n+        String email = new RandomValueStringGenerator().generate() +\"@samltesting.org\";\n+        ScimUser user = IntegrationTestUtils.createUser(adminClient, baseUrl,email ,\"firstname\", \"lastname\", email, true);\n+        IntegrationTestUtils.makeZoneAdmin(identityClient, baseUrl, user.getId(), zoneId);\n+\n+        //get the zone admin token\n+        String zoneAdminToken =\n+          IntegrationTestUtils.getAuthorizationCodeToken(serverRunning,\n+            UaaTestAccounts.standard(serverRunning),\n+            \"identity\",\n+            \"identitysecret\",\n+            email,\n+            \"secr3T\");\n+\n+        LdapIdentityProviderDefinition ldapIdentityProviderDefinition = LdapIdentityProviderDefinition.searchAndBindMapGroupToScopes(\n+          \"ldaps://52.87.212.253:636/\",\n+          \"cn=admin,dc=test,dc=com\",\n+          \"password\",\n+          \"dc=test,dc=com\",\n+          \"cn={0}\",\n+          \"ou=scopes,dc=test,dc=com\",\n+          \"member={0}\",\n+          \"mail\",\n+          null,\n+          false,\n+          true,\n+          true,\n+          100,\n+          false);\n+\n+        IdentityProvider provider = new IdentityProvider();\n+        provider.setIdentityZoneId(zoneId);\n+        provider.setType(OriginKeys.LDAP);\n+        provider.setActive(true);\n+        provider.setConfig(ldapIdentityProviderDefinition);\n+        provider.setOriginKey(OriginKeys.LDAP);\n+        provider.setName(\"simplesamlphp for uaa\");\n+        provider = IntegrationTestUtils.createOrUpdateProvider(zoneAdminToken,baseUrl,provider);\n+\n+        webDriver.get(zoneUrl + \"/login\");\n+        webDriver.findElement(By.name(\"username\")).sendKeys(\"marissa4\");\n+        webDriver.findElement(By.name(\"password\")).sendKeys(\"ldap4\");\n+        webDriver.findElement(By.xpath(\"//input[@value='Sign in']\")).click();\n+        assertThat(webDriver.findElement(By.cssSelector(\"h1\")).getText(), Matchers.containsString(\"Where to\"));\n+    }\n+\n+    @Test\n+    public void ldapLogin_withExpiredSelfSignedCert() throws Exception {\n+        //ensure we are able to resolve DNS for hostname testzone1.localhost\n+        assumeTrue(\"Expected testzone1/2/3/4.localhost to resolve to 127.0.0.1\", doesSupportZoneDNS());\n+        String zoneId = \"testzone1\";\n+        String zoneUrl = baseUrl.replace(\"localhost\", \"testzone1.localhost\");\n+\n+        //identity client token\n+        RestTemplate identityClient = IntegrationTestUtils.getClientCredentialsTemplate(\n+                IntegrationTestUtils.getClientCredentialsResource(baseUrl, new String[]{\"zones.write\", \"zones.read\", \"scim.zones\"}, \"identity\", \"identitysecret\")\n+        );\n+        //admin client token - to create users\n+        RestTemplate adminClient = IntegrationTestUtils.getClientCredentialsTemplate(\n+                IntegrationTestUtils.getClientCredentialsResource(baseUrl, new String[0], \"admin\", \"adminsecret\")\n+        );\n+        //create the zone\n+        IntegrationTestUtils.createZoneOrUpdateSubdomain(identityClient, baseUrl, zoneId, zoneId);\n+\n+        //create a zone admin user\n+        String email = new RandomValueStringGenerator().generate() +\"@samltesting.org\";\n+        ScimUser user = IntegrationTestUtils.createUser(adminClient, baseUrl,email ,\"firstname\", \"lastname\", email, true);\n+        IntegrationTestUtils.makeZoneAdmin(identityClient, baseUrl, user.getId(), zoneId);\n+\n+        //get the zone admin token\n+        String zoneAdminToken =\n+                IntegrationTestUtils.getAuthorizationCodeToken(serverRunning,\n+                        UaaTestAccounts.standard(serverRunning),\n+                        \"identity\",\n+                        \"identitysecret\",\n+                        email,\n+                        \"secr3T\");\n+\n+        LdapIdentityProviderDefinition ldapIdentityProviderDefinition = LdapIdentityProviderDefinition.searchAndBindMapGroupToScopes(\n+                \"ldaps://52.20.5.106:636/\",\n+                \"cn=admin,dc=test,dc=com\",\n+                \"password\",\n+                \"dc=test,dc=com\",\n+                \"cn={0}\",\n+                \"ou=scopes,dc=test,dc=com\",\n+                \"member={0}\",\n+                \"mail\",\n+                null,\n+                false,\n+                true,\n+                true,\n+                100,\n+                false);\n+\n+        IdentityProvider provider = new IdentityProvider();\n+        provider.setIdentityZoneId(zoneId);\n+        provider.setType(OriginKeys.LDAP);\n+        provider.setActive(true);\n+        provider.setConfig(ldapIdentityProviderDefinition);\n+        provider.setOriginKey(OriginKeys.LDAP);\n+        provider.setName(\"simplesamlphp for uaa\");\n+        provider = IntegrationTestUtils.createOrUpdateProvider(zoneAdminToken,baseUrl,provider);\n+\n+        webDriver.get(zoneUrl + \"/login\");\n+        webDriver.findElement(By.name(\"username\")).sendKeys(\"marissa4\");\n+        webDriver.findElement(By.name(\"password\")).sendKeys(\"ldap4\");\n+        webDriver.findElement(By.xpath(\"//input[@value='Sign in']\")).click();\n+        assertThat(webDriver.findElement(By.cssSelector(\"h1\")).getText(), Matchers.containsString(\"Welcome to The Twiglet Zone[\" + zoneId + \"]!\"));\n+    }\n+}\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "f97049df1c6c03effda5049c41704ac831ff3925", "source_date": "Thu Jul 14 15:47:15 2016 -0700", "source_tag": "3.5.0", "target_commit": "bc91ccd2029e8f1cea0c647f0c9aad4585f7a2c8", "target_date": "Tue Jul 19 17:28:27 2016 -0700", "target_tag": "3.3.0", "FAIL TO PASS": ["/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/security/X509ExpiryCheckingTrustManagerTest.java", "/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/provider/ldap/ProcessLdapPropertiesTest.java", ":cloudfoundry-identity-server:compileTestJava/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/security/X509ExpiryCheckingTrustManagerTest.java"], "PASS TO PASS": [":cloudfoundry-identity-model:mainOutputResourcesDir", ":cloudfoundry-identity-model:buildInfo", ":cloudfoundry-identity-model:compileJava", ":cloudfoundry-identity-model:processResources", ":cloudfoundry-identity-model:jar", ":cloudfoundry-identity-model:gitInfo", ":cloudfoundry-identity-model:classes", ":cloudfoundry-identity-server:classes", ":cloudfoundry-identity-server:jar", ":cloudfoundry-identity-server:compileTestJava", ":cloudfoundry-identity-server:compileJava", ":cloudfoundry-identity-server:processResources"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_291", "original_commit_message": "Fixed a settings leak possibility in the date template filter.\nThis is a security fix.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/utils/formats.py b/django/utils/formats.py\nindex d2bdda458e..8334682e68 100644\n--- a/django/utils/formats.py\n+++ b/django/utils/formats.py\n@@ -30,6 +30,24 @@ ISO_INPUT_FORMATS = {\n }\n \n \n+FORMAT_SETTINGS = frozenset([\n+    'DECIMAL_SEPARATOR',\n+    'THOUSAND_SEPARATOR',\n+    'NUMBER_GROUPING',\n+    'FIRST_DAY_OF_WEEK',\n+    'MONTH_DAY_FORMAT',\n+    'TIME_FORMAT',\n+    'DATE_FORMAT',\n+    'DATETIME_FORMAT',\n+    'SHORT_DATE_FORMAT',\n+    'SHORT_DATETIME_FORMAT',\n+    'YEAR_MONTH_FORMAT',\n+    'DATE_INPUT_FORMATS',\n+    'TIME_INPUT_FORMATS',\n+    'DATETIME_INPUT_FORMATS',\n+])\n+\n+\n def reset_format_cache():\n     \"\"\"Clear any cached formats.\n \n@@ -92,6 +110,8 @@ def get_format(format_type, lang=None, use_l10n=None):\n     be localized (or not), overriding the value of settings.USE_L10N.\n     \"\"\"\n     format_type = force_str(format_type)\n+    if format_type not in FORMAT_SETTINGS:\n+        return format_type\n     if use_l10n or (use_l10n is None and settings.USE_L10N):\n         if lang is None:\n             lang = get_language()\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/i18n/tests.py b/tests/i18n/tests.py\nindex 1de7b11b81..fd332c596e 100644\n--- a/tests/i18n/tests.py\n+++ b/tests/i18n/tests.py\n@@ -1249,6 +1249,9 @@ class FormattingTests(SimpleTestCase):\n                 '<input id=\"id_cents_paid\" name=\"cents_paid\" type=\"hidden\" value=\"59,47\" />'\n             )\n \n+    def test_format_arbitrary_settings(self):\n+        self.assertEqual(get_format('DEBUG'), 'DEBUG')\n+\n \n class MiscTests(SimpleTestCase):\n \n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "316bc3fc9437c5960c24baceb93c73f1939711e4", "source_date": "Tue Nov 24 11:20:29 2015 -0500", "source_tag": "1.10", "target_commit": "9f83fc2f66f5a0bac7c291aec55df66050bb6991", "target_date": "Tue Nov 24 11:31:10 2015 -0500", "target_tag": "1.8.7", "FAIL TO PASS": ["i18n.tests.FormattingTests.test_format_arbitrary_settings"], "PASS TO PASS": ["i18n.tests.TranslationTests.test_lazy_pickle", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_direct_switch", "Checks that current language is not automatically saved to", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_direct_switch_trans", "i18n.tests.TestModels.test_lazy", "i18n.tests.MiscTests.test_backwards_compatibility", "i18n.tests.MultipleLocaleActivationTests.test_single_locale_activation", "i18n.tests.TranslationTests.test_bad_placeholder_1", "i18n.tests.FormattingTests.test_l10n_disabled", "i18n.tests.TestLanguageInfo.test_unknown_language_code", "i18n.tests.MiscTests.test_cache_resetting", "i18n.tests.TestModels.test_safestr", "i18n.tests.TranslationFilesMissing.test_failure_finding_default_mo_files", "i18n.tests.TranslationTests.test_language_bidi", "i18n.tests.MiscTests.test_support_for_deprecated_chinese_language_codes", "i18n.tests.MiscTests.test_get_language_from_path_real", "i18n.tests.TranslationTests.test_to_locale", "i18n.tests.CountrySpecificLanguageTests.test_specific_language_codes", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_loadi18n", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_loadi18n_direct_switch", "i18n.tests.TestLanguageInfo.test_localized_language_info", "i18n.tests.TranslationTests.test_maclines", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_loadi18n_deactivate", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_deactivate", "i18n.tests.LocalePathsResolutionOrderI18NTests.test_locale_paths_override_app_translation", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_trans", "i18n.tests.LocalePathsResolutionOrderI18NTests.test_locale_paths_translation", "i18n.tests.FormattingTests.test_locale_independent", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale", "i18n.tests.TranslationTests.test_to_language", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_deactivate_trans", "i18n.tests.TranslationTests.test_override_exit", "i18n.tests.FormattingTests.test_get_format_modules_stability", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_filter_direct_switch", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_filter_deactivate", "i18n.tests.MiscTests.test_percent_formatting_in_blocktrans", "i18n.tests.MiscTests.test_special_fallback_language", "i18n.tests.TranslationTests.test_bad_placeholder_2", "i18n.tests.TestLanguageInfo.test_fallback_language_code", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_direct_switch_btrans", "i18n.tests.DjangoFallbackResolutionOrderI18NTests.test_django_fallback", "i18n.tests.TranslationTests.test_ungettext_lazy_long", "i18n.tests.TranslationTests.test_ungettext_lazy", "i18n.tests.TranslationTests.test_plural", "i18n.tests.MiscTests.test_get_language_from_path_null", "i18n.tests.FormattingTests.test_sub_locales", "i18n.tests.TestLanguageInfo.test_unknown_language_code_and_country_code", "i18n.tests.FormattingTests.test_iter_format_modules", "i18n.tests.FormattingTests.test_l10n_enabled", "i18n.tests.FormattingTests.test_get_format_modules_lang", "gettext() returns a bytestring if input is bytestring.", "i18n.tests.MiscTests.test_parse_literal_http_header", "i18n.tests.TranslationTests.test_safe_status", "i18n.tests.MiscTests.test_parse_spec_http_header", "i18n.tests.MiscTests.test_parse_language_cookie", "i18n.tests.FormattingTests.test_localized_input", "i18n.tests.TranslationTests.test_lazy_objects", "i18n.tests.FormattingTests.test_localized_as_text_as_hidden_input", "i18n.tests.FormattingTests.test_false_like_locale_formats", "i18n.tests.LocaleMiddlewareTests.test_streaming_response", "i18n.tests.TranslationTests.test_lazy_and_bytestrings", "i18n.tests.FormattingTests.test_sanitize_separators", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_filter", "i18n.tests.TranslationTests.test_template_tags_pgettext", "i18n.tests.FormattingTests.test_iter_format_modules_stability", "i18n.tests.CountrySpecificLanguageTests.test_get_language_from_request", "i18n.tests.TranslationThreadSafetyTests.test_bug14894_translation_activate_thread_safety", "i18n.tests.TranslationTests.test_override_decorator", "i18n.tests.TranslationTests.test_string_concat", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_btrans", "i18n.tests.TranslationTests.test_pgettext", "i18n.tests.TranslationTests.test_empty_value", "i18n.tests.MiscTests.test_percent_in_translatable_block", "i18n.tests.MiscTests.test_english_fallback", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_deactivate_btrans", "i18n.tests.TranslationTests.test_override", "i18n.tests.TestLanguageInfo.test_unknown_only_country_code", "i18n.tests.AppResolutionOrderI18NTests.  Applying sites.0001_initial...test_app_translation", "i18n.tests.FormattingTests.test_localize_templatetag_and_filter", "i18n.tests.CountrySpecificLanguageTests.test_check_for_language"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_1314", "original_commit_message": "Wrap trustmanager in custom trustmanager\nSigned-off-by: Priyata Agrawal <pagrawal@pivotal.io>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/provider/ldap/ProcessLdapProperties.java b/server/src/main/java/org/cloudfoundry/identity/uaa/provider/ldap/ProcessLdapProperties.java\nindex a2846d631..0a71c5a7c 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/provider/ldap/ProcessLdapProperties.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/provider/ldap/ProcessLdapProperties.java\n@@ -14,6 +14,8 @@\n \n package org.cloudfoundry.identity.uaa.provider.ldap;\n \n+import java.security.KeyManagementException;\n+import java.security.NoSuchAlgorithmException;\n import java.util.LinkedHashMap;\n import java.util.Map;\n \n@@ -21,6 +23,7 @@ public class ProcessLdapProperties {\n \n     public static final String LDAP_SOCKET_FACTORY = \"java.naming.ldap.factory.socket\";\n     public static final String SKIP_SSL_VERIFICATION_SOCKET_FACTORY = \"org.apache.directory.api.util.DummySSLSocketFactory\";\n+    public static final String EXPIRY_CHECKING_SOCKET_FACTORY = \"org.cloudfoundry.identity.uaa.security.LdapSocketFactory\";\n \n     private boolean disableSslVerification;\n     private String baseUrl;\n@@ -30,10 +33,14 @@ public class ProcessLdapProperties {\n         this.disableSslVerification = disableSslVerification;\n     }\n \n-    public Map process(Map map) {\n+    public Map process(Map map) throws KeyManagementException, NoSuchAlgorithmException {\n         Map result = new LinkedHashMap(map);\n-        if (isDisableSslVerification() && isLdapsUrl()) {\n-            result.put(LDAP_SOCKET_FACTORY, SKIP_SSL_VERIFICATION_SOCKET_FACTORY);\n+        if(isLdapsUrl()) {\n+            if (isDisableSslVerification()) {\n+                result.put(LDAP_SOCKET_FACTORY, SKIP_SSL_VERIFICATION_SOCKET_FACTORY);\n+            } else {\n+                result.put(LDAP_SOCKET_FACTORY, EXPIRY_CHECKING_SOCKET_FACTORY);\n+            }\n         }\n         return result;\n     }\n\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/security/LdapSocketFactory.java b/server/src/main/java/org/cloudfoundry/identity/uaa/security/LdapSocketFactory.java\nnew file mode 100644\nindex 000000000..f26977ede\n--- /dev/null\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/security/LdapSocketFactory.java\n@@ -0,0 +1,72 @@\n+package org.cloudfoundry.identity.uaa.security;\n+\n+import javax.net.SocketFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocketFactory;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.X509TrustManager;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+import java.security.SecureRandom;\n+\n+public class LdapSocketFactory  extends SSLSocketFactory {\n+\n+  private static SocketFactory instance;\n+  private SSLSocketFactory delegate;\n+\n+  public static SocketFactory getDefault() {\n+    if(instance == null) {\n+      instance = new LdapSocketFactory();\n+    }\n+\n+    return instance;\n+  }\n+\n+  public LdapSocketFactory() {\n+    try {\n+      X509TrustManager trustManager = new X509ExpiryCheckingTrustManager();\n+      TrustManager[] tma = new TrustManager[]{trustManager};\n+      SSLContext sc = SSLContext.getInstance(\"TLS\");\n+      sc.init(null, tma, new SecureRandom());\n+      this.delegate = sc.getSocketFactory();\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  @Override\n+  public String[] getDefaultCipherSuites() {\n+    return delegate.getDefaultCipherSuites();\n+  }\n+\n+  @Override\n+  public String[] getSupportedCipherSuites() {\n+    return delegate.getSupportedCipherSuites();\n+  }\n+\n+  @Override\n+  public Socket createSocket(Socket socket, String s, int i, boolean b) throws IOException {\n+    return delegate.createSocket(socket, s, i, b);\n+  }\n+\n+  @Override\n+  public Socket createSocket(String s, int i) throws IOException{\n+    return delegate.createSocket(s, i);\n+  }\n+\n+  @Override\n+  public Socket createSocket(String s, int i, InetAddress inetAddress, int i1) throws IOException {\n+    return delegate.createSocket(s, i, inetAddress, i1);\n+  }\n+\n+  @Override\n+  public Socket createSocket(InetAddress inetAddress, int i) throws IOException {\n+    return delegate.createSocket(inetAddress, i);\n+  }\n+\n+  @Override\n+  public Socket createSocket(InetAddress inetAddress, int i, InetAddress inetAddress1, int i1) throws IOException {\n+    return delegate.createSocket(inetAddress, i, inetAddress1, i1);\n+  }\n+}\n\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/security/X509ExpiryCheckingTrustManager.java b/server/src/main/java/org/cloudfoundry/identity/uaa/security/X509ExpiryCheckingTrustManager.java\nnew file mode 100644\nindex 000000000..f483934e4\n--- /dev/null\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/security/X509ExpiryCheckingTrustManager.java\n@@ -0,0 +1,65 @@\n+package org.cloudfoundry.identity.uaa.security;\n+\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509TrustManager;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+\n+public class X509ExpiryCheckingTrustManager implements X509TrustManager {\n+\n+    private X509TrustManager delegate;\n+\n+    public X509ExpiryCheckingTrustManager() {\n+        try {\n+            TrustManagerFactory tmf;\n+            tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+            tmf.init((KeyStore) null);\n+            X509TrustManager x509Tm = null;\n+            for (TrustManager tm : tmf.getTrustManagers()) {\n+                if (tm instanceof X509TrustManager) {\n+                    x509Tm = (X509TrustManager) tm;\n+                    break;\n+                }\n+            }\n+            delegate = x509Tm;\n+        } catch (NoSuchAlgorithmException | KeyStoreException e) {\n+        }\n+    }\n+\n+    protected void setDelegate(X509TrustManager delegate) {\n+        this.delegate = delegate;\n+    }\n+\n+    @Override\n+    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n+        if (delegate == null) {\n+            throw new CertificateException();\n+        } else {\n+            delegate.checkClientTrusted(x509Certificates, s);\n+        }\n+    }\n+\n+    @Override\n+    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n+        if (delegate == null) {\n+            throw new CertificateException();\n+        } else {\n+            delegate.checkServerTrusted(x509Certificates, s);\n+        }\n+        for (X509Certificate certificate : x509Certificates) {\n+            certificate.checkValidity();\n+        }\n+    }\n+\n+    @Override\n+    public X509Certificate[] getAcceptedIssuers() {\n+        if (delegate != null) {\n+            return delegate.getAcceptedIssuers();\n+        }\n+        return new X509Certificate[0];\n+    }\n+}\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/provider/ldap/ProcessLdapPropertiesTest.java b/server/src/test/java/org/cloudfoundry/identity/uaa/provider/ldap/ProcessLdapPropertiesTest.java\nindex 757dd491d..b66f5a4c6 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/provider/ldap/ProcessLdapPropertiesTest.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/provider/ldap/ProcessLdapPropertiesTest.java\n@@ -35,4 +35,15 @@ public class ProcessLdapPropertiesTest {\n         process.setBaseUrl(\"ldaps://localhost:636\");\n         assertEquals(ProcessLdapProperties.SKIP_SSL_VERIFICATION_SOCKET_FACTORY, process.process(properties).get(LDAP_SOCKET_FACTORY));\n     }\n-}\n\\ No newline at end of file\n+\n+    @Test\n+    public void process_whenSslValidationIsEnabled() throws Exception {\n+        Map<String,String> properties = new HashMap<>();\n+        ProcessLdapProperties process = new ProcessLdapProperties(\"ldap://localhost:389\", false);\n+        assertNull(process.process(properties).get(LDAP_SOCKET_FACTORY));\n+        process.setDisableSslVerification(false);\n+        assertNull(process.process(properties).get(LDAP_SOCKET_FACTORY));\n+        process.setBaseUrl(\"ldaps://localhost:636\");\n+        assertEquals(ProcessLdapProperties.EXPIRY_CHECKING_SOCKET_FACTORY, process.process(properties).get(LDAP_SOCKET_FACTORY));\n+    }\n+}\n\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/security/LdapSocketFactoryTest.java b/server/src/test/java/org/cloudfoundry/identity/uaa/security/LdapSocketFactoryTest.java\nnew file mode 100644\nindex 000000000..873453c2d\n--- /dev/null\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/security/LdapSocketFactoryTest.java\n@@ -0,0 +1,7 @@\n+package org.cloudfoundry.identity.uaa.security;\n+\n+import static org.junit.Assert.*;\n+\n+public class LdapSocketFactoryTest {\n+\n+}\n\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/security/X509ExpiryCheckingTrustManagerTest.java b/server/src/test/java/org/cloudfoundry/identity/uaa/security/X509ExpiryCheckingTrustManagerTest.java\nnew file mode 100644\nindex 000000000..55622d9e7\n--- /dev/null\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/security/X509ExpiryCheckingTrustManagerTest.java\n@@ -0,0 +1,59 @@\n+package org.cloudfoundry.identity.uaa.security;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.springframework.security.saml.trust.X509TrustManager;\n+\n+import java.security.cert.CertificateExpiredException;\n+import java.security.cert.X509Certificate;\n+\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.verify;\n+\n+public class X509ExpiryCheckingTrustManagerTest {\n+\n+  @Test\n+  public void checkServerTrusted_throwsExceptionWhenCertIsExpired() throws Exception {\n+    X509ExpiryCheckingTrustManager manager = new X509ExpiryCheckingTrustManager();\n+    X509TrustManager mockedDelegate = Mockito.mock(X509TrustManager.class);\n+    manager.setDelegate(mockedDelegate);\n+    X509Certificate certificate = Mockito.mock(X509Certificate.class);\n+    X509Certificate[] x509Certificates = {certificate};\n+\n+    doNothing().when(mockedDelegate).checkServerTrusted(x509Certificates, \"string\");\n+    doThrow(new CertificateExpiredException()).when(certificate).checkValidity();\n+    try {\n+      manager.checkServerTrusted(x509Certificates,\"string\");\n+      Assert.fail();\n+    } catch (CertificateExpiredException e) {\n+      verify(mockedDelegate).checkServerTrusted(x509Certificates, \"string\");\n+      verify(certificate).checkValidity();\n+    }\n+  }\n+\n+  @Test\n+  public void checkClientTrusted_callsDelegate() throws Exception {\n+    X509ExpiryCheckingTrustManager manager = new X509ExpiryCheckingTrustManager();\n+    X509TrustManager mockedDelegate = Mockito.mock(X509TrustManager.class);\n+    manager.setDelegate(mockedDelegate);\n+\n+    X509Certificate certificate = Mockito.mock(X509Certificate.class);\n+    X509Certificate[] x509Certificates = {certificate};\n+\n+    doNothing().when(mockedDelegate).checkClientTrusted(x509Certificates, \"string\");\n+    manager.checkClientTrusted(x509Certificates, \"string\");\n+    verify(mockedDelegate).checkClientTrusted(x509Certificates, \"string\");\n+  }\n+\n+  @Test\n+  public void checkAcceptedIssuers_callsDelegate() throws Exception {\n+    X509ExpiryCheckingTrustManager manager = new X509ExpiryCheckingTrustManager();\n+    X509TrustManager mockedDelegate = Mockito.mock(X509TrustManager.class);\n+    manager.setDelegate(mockedDelegate);\n+\n+    manager.getAcceptedIssuers();\n+    verify(mockedDelegate).getAcceptedIssuers();\n+  }\n+}\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/LdapLoginIT.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/LdapLoginIT.java\nnew file mode 100644\nindex 000000000..9a4eee59e\n--- /dev/null\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/LdapLoginIT.java\n@@ -0,0 +1,195 @@\n+package org.cloudfoundry.identity.uaa.integration.feature;\n+\n+import org.cloudfoundry.identity.uaa.ServerRunning;\n+import org.cloudfoundry.identity.uaa.constants.OriginKeys;\n+import org.cloudfoundry.identity.uaa.integration.util.IntegrationTestUtils;\n+import org.cloudfoundry.identity.uaa.integration.util.ScreenshotOnFail;\n+import org.cloudfoundry.identity.uaa.login.test.LoginServerClassRunner;\n+import org.cloudfoundry.identity.uaa.provider.IdentityProvider;\n+import org.cloudfoundry.identity.uaa.provider.LdapIdentityProviderDefinition;\n+import org.cloudfoundry.identity.uaa.scim.ScimUser;\n+import org.cloudfoundry.identity.uaa.test.UaaTestAccounts;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebDriver;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.security.oauth2.client.test.TestAccounts;\n+import org.springframework.security.oauth2.common.util.RandomValueStringGenerator;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.web.client.RestOperations;\n+import org.springframework.web.client.RestTemplate;\n+\n+import static org.cloudfoundry.identity.uaa.integration.util.IntegrationTestUtils.doesSupportZoneDNS;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assume.assumeTrue;\n+\n+@RunWith(LoginServerClassRunner.class)\n+@ContextConfiguration(classes = DefaultIntegrationTestConfig.class)\n+public class LdapLoginIT {\n+\n+\n+\n+    @Autowired\n+    @Rule\n+    public IntegrationTestRule integrationTestRule;\n+\n+    @Rule\n+    public ScreenshotOnFail screenShootRule = new ScreenshotOnFail();\n+\n+    @Autowired\n+    RestOperations restOperations;\n+\n+    @Autowired\n+    WebDriver webDriver;\n+\n+    @Value(\"${integration.test.base_url}\")\n+    String baseUrl;\n+\n+    @Autowired\n+    TestClient testClient;\n+\n+    ServerRunning serverRunning = ServerRunning.isRunning();\n+\n+\n+    @Before\n+    public void clearWebDriverOfCookies() throws Exception {\n+        screenShootRule.setWebDriver(webDriver);\n+        webDriver.get(baseUrl + \"/logout.do\");\n+        webDriver.get(baseUrl.replace(\"localhost\", \"testzone1.localhost\") + \"/logout.do\");\n+        webDriver.get(baseUrl.replace(\"localhost\", \"testzone2.localhost\") + \"/logout.do\");\n+        webDriver.manage().deleteAllCookies();\n+    }\n+\n+    @Test\n+    public void ldapLogin_withValidSelfSignedCert() throws Exception {\n+        //ensure we are able to resolve DNS for hostname testzone2.localhost\n+        assumeTrue(\"Expected testzone1/2/3/4.localhost to resolve to 127.0.0.1\", doesSupportZoneDNS());\n+        String zoneId = \"testzone2\";\n+        String zoneUrl = baseUrl.replace(\"localhost\", \"testzone2.localhost\");\n+\n+        //identity client token\n+        RestTemplate identityClient = IntegrationTestUtils.getClientCredentialsTemplate(\n+          IntegrationTestUtils.getClientCredentialsResource(baseUrl, new String[]{\"zones.write\", \"zones.read\", \"scim.zones\"}, \"identity\", \"identitysecret\")\n+        );\n+        //admin client token - to create users\n+        RestTemplate adminClient = IntegrationTestUtils.getClientCredentialsTemplate(\n+          IntegrationTestUtils.getClientCredentialsResource(baseUrl, new String[0], \"admin\", \"adminsecret\")\n+        );\n+        //create the zone\n+        IntegrationTestUtils.createZoneOrUpdateSubdomain(identityClient, baseUrl, zoneId, zoneId);\n+\n+        //create a zone admin user\n+        String email = new RandomValueStringGenerator().generate() +\"@samltesting.org\";\n+        ScimUser user = IntegrationTestUtils.createUser(adminClient, baseUrl,email ,\"firstname\", \"lastname\", email, true);\n+        IntegrationTestUtils.makeZoneAdmin(identityClient, baseUrl, user.getId(), zoneId);\n+\n+        //get the zone admin token\n+        String zoneAdminToken =\n+          IntegrationTestUtils.getAuthorizationCodeToken(serverRunning,\n+            UaaTestAccounts.standard(serverRunning),\n+            \"identity\",\n+            \"identitysecret\",\n+            email,\n+            \"secr3T\");\n+\n+        LdapIdentityProviderDefinition ldapIdentityProviderDefinition = LdapIdentityProviderDefinition.searchAndBindMapGroupToScopes(\n+          \"ldaps://52.87.212.253:636/\",\n+          \"cn=admin,dc=test,dc=com\",\n+          \"password\",\n+          \"dc=test,dc=com\",\n+          \"cn={0}\",\n+          \"ou=scopes,dc=test,dc=com\",\n+          \"member={0}\",\n+          \"mail\",\n+          null,\n+          false,\n+          true,\n+          true,\n+          100,\n+          false);\n+\n+        IdentityProvider provider = new IdentityProvider();\n+        provider.setIdentityZoneId(zoneId);\n+        provider.setType(OriginKeys.LDAP);\n+        provider.setActive(true);\n+        provider.setConfig(ldapIdentityProviderDefinition);\n+        provider.setOriginKey(OriginKeys.LDAP);\n+        provider.setName(\"simplesamlphp for uaa\");\n+        provider = IntegrationTestUtils.createOrUpdateProvider(zoneAdminToken,baseUrl,provider);\n+\n+        webDriver.get(zoneUrl + \"/login\");\n+        webDriver.findElement(By.name(\"username\")).sendKeys(\"marissa4\");\n+        webDriver.findElement(By.name(\"password\")).sendKeys(\"ldap4\");\n+        webDriver.findElement(By.xpath(\"//input[@value='Sign in']\")).click();\n+        assertThat(webDriver.findElement(By.cssSelector(\"h1\")).getText(), Matchers.containsString(\"Where to\"));\n+    }\n+\n+    @Test\n+    public void ldapLogin_withExpiredSelfSignedCert() throws Exception {\n+        //ensure we are able to resolve DNS for hostname testzone1.localhost\n+        assumeTrue(\"Expected testzone1/2/3/4.localhost to resolve to 127.0.0.1\", doesSupportZoneDNS());\n+        String zoneId = \"testzone1\";\n+        String zoneUrl = baseUrl.replace(\"localhost\", \"testzone1.localhost\");\n+\n+        //identity client token\n+        RestTemplate identityClient = IntegrationTestUtils.getClientCredentialsTemplate(\n+                IntegrationTestUtils.getClientCredentialsResource(baseUrl, new String[]{\"zones.write\", \"zones.read\", \"scim.zones\"}, \"identity\", \"identitysecret\")\n+        );\n+        //admin client token - to create users\n+        RestTemplate adminClient = IntegrationTestUtils.getClientCredentialsTemplate(\n+                IntegrationTestUtils.getClientCredentialsResource(baseUrl, new String[0], \"admin\", \"adminsecret\")\n+        );\n+        //create the zone\n+        IntegrationTestUtils.createZoneOrUpdateSubdomain(identityClient, baseUrl, zoneId, zoneId);\n+\n+        //create a zone admin user\n+        String email = new RandomValueStringGenerator().generate() +\"@samltesting.org\";\n+        ScimUser user = IntegrationTestUtils.createUser(adminClient, baseUrl,email ,\"firstname\", \"lastname\", email, true);\n+        IntegrationTestUtils.makeZoneAdmin(identityClient, baseUrl, user.getId(), zoneId);\n+\n+        //get the zone admin token\n+        String zoneAdminToken =\n+                IntegrationTestUtils.getAuthorizationCodeToken(serverRunning,\n+                        UaaTestAccounts.standard(serverRunning),\n+                        \"identity\",\n+                        \"identitysecret\",\n+                        email,\n+                        \"secr3T\");\n+\n+        LdapIdentityProviderDefinition ldapIdentityProviderDefinition = LdapIdentityProviderDefinition.searchAndBindMapGroupToScopes(\n+                \"ldaps://52.20.5.106:636/\",\n+                \"cn=admin,dc=test,dc=com\",\n+                \"password\",\n+                \"dc=test,dc=com\",\n+                \"cn={0}\",\n+                \"ou=scopes,dc=test,dc=com\",\n+                \"member={0}\",\n+                \"mail\",\n+                null,\n+                false,\n+                true,\n+                true,\n+                100,\n+                false);\n+\n+        IdentityProvider provider = new IdentityProvider();\n+        provider.setIdentityZoneId(zoneId);\n+        provider.setType(OriginKeys.LDAP);\n+        provider.setActive(true);\n+        provider.setConfig(ldapIdentityProviderDefinition);\n+        provider.setOriginKey(OriginKeys.LDAP);\n+        provider.setName(\"simplesamlphp for uaa\");\n+        provider = IntegrationTestUtils.createOrUpdateProvider(zoneAdminToken,baseUrl,provider);\n+\n+        webDriver.get(zoneUrl + \"/login\");\n+        webDriver.findElement(By.name(\"username\")).sendKeys(\"marissa4\");\n+        webDriver.findElement(By.name(\"password\")).sendKeys(\"ldap4\");\n+        webDriver.findElement(By.xpath(\"//input[@value='Sign in']\")).click();\n+        assertThat(webDriver.findElement(By.cssSelector(\"h1\")).getText(), Matchers.containsString(\"Welcome to The Twiglet Zone[\" + zoneId + \"]!\"));\n+    }\n+}\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "f97049df1c6c03effda5049c41704ac831ff3925", "source_date": "Thu Jul 14 15:47:15 2016 -0700", "source_tag": "3.5.0", "target_commit": "0a78612f981c541ad2d997e6a365f2a0b3e799d9", "target_date": "Tue Jul 19 17:27:02 2016 -0700", "target_tag": "3.4.2", "FAIL TO PASS": ["/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/security/X509ExpiryCheckingTrustManagerTest.java", "/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/provider/ldap/ProcessLdapPropertiesTest.java", ":cloudfoundry-identity-server:compileTestJava/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/security/X509ExpiryCheckingTrustManagerTest.java"], "PASS TO PASS": [":cloudfoundry-identity-model:mainOutputResourcesDir", ":cloudfoundry-identity-model:buildInfo", ":cloudfoundry-identity-model:compileJava", ":cloudfoundry-identity-model:processResources", ":cloudfoundry-identity-model:jar", ":cloudfoundry-identity-model:gitInfo", ":cloudfoundry-identity-model:classes", ":cloudfoundry-identity-server:classes", ":cloudfoundry-identity-server:jar", ":cloudfoundry-identity-server:compileTestJava", ":cloudfoundry-identity-server:compileJava", ":cloudfoundry-identity-server:processResources"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_294", "original_commit_message": "Fixed a settings leak possibility in the date template filter.\nThis is a security fix.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/utils/formats.py b/django/utils/formats.py\nindex d2bdda458e..8334682e68 100644\n--- a/django/utils/formats.py\n+++ b/django/utils/formats.py\n@@ -30,6 +30,24 @@ ISO_INPUT_FORMATS = {\n }\n \n \n+FORMAT_SETTINGS = frozenset([\n+    'DECIMAL_SEPARATOR',\n+    'THOUSAND_SEPARATOR',\n+    'NUMBER_GROUPING',\n+    'FIRST_DAY_OF_WEEK',\n+    'MONTH_DAY_FORMAT',\n+    'TIME_FORMAT',\n+    'DATE_FORMAT',\n+    'DATETIME_FORMAT',\n+    'SHORT_DATE_FORMAT',\n+    'SHORT_DATETIME_FORMAT',\n+    'YEAR_MONTH_FORMAT',\n+    'DATE_INPUT_FORMATS',\n+    'TIME_INPUT_FORMATS',\n+    'DATETIME_INPUT_FORMATS',\n+])\n+\n+\n def reset_format_cache():\n     \"\"\"Clear any cached formats.\n \n@@ -92,6 +110,8 @@ def get_format(format_type, lang=None, use_l10n=None):\n     be localized (or not), overriding the value of settings.USE_L10N.\n     \"\"\"\n     format_type = force_str(format_type)\n+    if format_type not in FORMAT_SETTINGS:\n+        return format_type\n     if use_l10n or (use_l10n is None and settings.USE_L10N):\n         if lang is None:\n             lang = get_language()\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/i18n/tests.py b/tests/i18n/tests.py\nindex 1de7b11b81..fd332c596e 100644\n--- a/tests/i18n/tests.py\n+++ b/tests/i18n/tests.py\n@@ -1249,6 +1249,9 @@ class FormattingTests(SimpleTestCase):\n                 '<input id=\"id_cents_paid\" name=\"cents_paid\" type=\"hidden\" value=\"59,47\" />'\n             )\n \n+    def test_format_arbitrary_settings(self):\n+        self.assertEqual(get_format('DEBUG'), 'DEBUG')\n+\n \n class MiscTests(SimpleTestCase):\n \n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "316bc3fc9437c5960c24baceb93c73f1939711e4", "source_date": "Tue Nov 24 11:20:29 2015 -0500", "source_tag": "1.10", "target_commit": "8a01c6b53169ee079cb21ac5919fdafcc8c5e172", "target_date": "Mon Nov 16 21:06:32 2015 -0500", "target_tag": "1.7.11", "FAIL TO PASS": ["i18n.tests.FormattingTests.test_format_arbitrary_settings"], "PASS TO PASS": ["i18n.tests.TranslationTests.test_lazy_pickle", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_direct_switch", "i18n.contenttypes.tests.ContentTypeTests.test_field_override", "i18n.patterns.tests.URLResponseTests.test_wrong_nl_prefix", "Checks that current language is not automatically saved to", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_direct_switch_trans", "i18n.tests.TestModels.test_lazy", "i18n.patterns.tests.URLRedirectWithoutTrailingSlashTests.test_not_prefixed_redirect", "i18n.tests.MiscTests.test_backwards_compatibility", "i18n.patterns.tests.URLPrefixTests.test_prefixed", "i18n.tests.MultipleLocaleActivationTests.test_single_locale_activation", "i18n.tests.TranslationTests.test_bad_placeholder_1", "i18n.tests.FormattingTests.test_l10n_disabled", "i18n.patterns.tests.URLVaryAcceptLanguageTests.test_no_prefix_response", "i18n.tests.TestLanguageInfo.test_unknown_language_code", "i18n.tests.MiscTests.test_cache_resetting", "i18n.tests.TestModels.test_safestr", "i18n.patterns.tests.URLResponseTests.test_wrong_en_prefix", "i18n.tests.MiscTests.test_support_for_deprecated_chinese_language_codes", "i18n.tests.MiscTests.test_get_language_from_path_real", "i18n.patterns.tests.URLRedirectWithoutTrailingSlashTests.test_en_redirect", "i18n.tests.TranslationTests.test_to_locale", "i18n.tests.CountrySpecificLanguageTests.test_specific_language_codes", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_loadi18n", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_loadi18n_direct_switch", "i18n.tests.TestLanguageInfo.test_localized_language_info", "i18n.tests.TranslationTests.test_maclines", "i18n.patterns.tests.URLResponseTests.test_pt_br_url", "i18n.patterns.tests.URLRedirectTests.test_nl_redirect", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_deactivate", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_loadi18n_deactivate", "i18n.tests.LocalePathsResolutionOrderI18NTests.test_locale_paths_override_app_translation", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_trans", "i18n.tests.LocalePathsResolutionOrderI18NTests.test_locale_paths_translation", "i18n.tests.FormattingTests.test_locale_independent", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale", "i18n.tests.TranslationTests.test_to_language", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_deactivate_trans", "i18n.tests.FormattingTests.test_get_format_modules_stability", "i18n.patterns.tests.URLPrefixTests.test_invalid_prefix_use", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_filter_direct_switch", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_filter_deactivate", "i18n.patterns.tests.URLTagTests.test_kwargs", "i18n.tests.AppResolutionOrderI18NTests.test_app_translation", "i18n.patterns.tests.URLRedirectWithoutTrailingSlashSettingTests.test_en_redirect", "i18n.tests.MiscTests.test_percent_formatting_in_blocktrans", "i18n.patterns.tests.URLRedirectTests.test_pl_pl_redirect", "i18n.tests.TranslationTests.test_bad_placeholder_2", "i18n.patterns.tests.PathUnusedTests.  Applying sessions.0001_initial...test_no_lang_activate", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_direct_switch_btrans", "i18n.contenttypes.tests.ContentTypeTests.test_verbose_name", "i18n.tests.DjangoFallbackResolutionOrderI18NTests.test_django_fallback", "i18n.tests.TranslationTests.test_ungettext_lazy_long", "i18n.patterns.tests.URLNamespaceTests.test_account_register", "i18n.tests.TranslationTests.test_ungettext_lazy", "i18n.patterns.tests.URLRedirectTests.test_en_redirect_wrong_url", "i18n.tests.MiscTests.test_get_language_from_path_null", "i18n.tests.FormattingTests.test_sub_locales", "i18n.tests.TestLanguageInfo.test_unknown_language_code_and_country_code", "i18n.tests.FormattingTests.test_iter_format_modules", "i18n.tests.FormattingTests.test_l10n_enabled", "i18n.tests.FormattingTests.test_get_format_modules_lang", "i18n.patterns.tests.URLTranslationTests.test_no_prefix_translated", "i18n.patterns.tests.URLResponseTests.test_en_url", "i18n.tests.MiscTests.test_parse_literal_http_header", "i18n.tests.TranslationTests.test_safe_status", "i18n.tests.MiscTests.test_parse_spec_http_header", "i18n.tests.MiscTests.test_parse_language_cookie", "i18n.tests.FormattingTests.test_localized_input", "i18n.tests.TranslationTests.test_lazy_objects", "i18n.patterns.tests.URLTagTests.test_strings_only", "i18n.patterns.tests.URLRedirectTests.test_en_redirect", "i18n.tests.FormattingTests.test_localized_as_text_as_hidden_input", "i18n.patterns.tests.URLDisabledTests.test_prefixed_i18n_disabled", "i18n.tests.FormattingTests.test_false_like_locale_formats", "i18n.tests.LocaleMiddlewareTests.test_streaming_response", "i18n.tests.TranslationTests.test_lazy_and_bytestrings", "i18n.patterns.tests.URLRedirectTests.test_custom_redirect_class", "i18n.patterns.tests.URLRedirectTests.test_nl_redirect_wrong_url", "i18n.tests.FormattingTests.test_sanitize_separators", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_filter", "i18n.tests.TranslationTests.test_template_tags_pgettext", "i18n.tests.FormattingTests.test_iter_format_modules_stability", "i18n.tests.CountrySpecificLanguageTests.test_get_language_from_request", "i18n.tests.TranslationThreadSafetyTests.test_bug14894_translation_activate_thread_safety", "i18n.tests.TranslationTests.test_string_concat", "i18n.patterns.tests.URLResponseTests.test_nl_url", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_btrans", "i18n.patterns.tests.URLRedirectTests.test_pt_br_redirect", "i18n.tests.TranslationTests.test_pgettext", "i18n.patterns.tests.URLPrefixTests.test_not_prefixed", "i18n.patterns.tests.URLTagTests.test_context", "i18n.tests.MiscTests.test_percent_in_translatable_block", "i18n.patterns.tests.URLRedirectWithoutTrailingSlashSettingTests.test_not_prefixed_redirect", "i18n.patterns.tests.URLTranslationTests.test_users_url", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_deactivate_btrans", "i18n.tests.TranslationTests.test_override", "i18n.patterns.tests.URLRedirectTests.test_no_prefix_response", "i18n.tests.TestLanguageInfo.test_unknown_only_country_code", "i18n.patterns.tests.URLVaryAcceptLanguageTests.test_en_redirect", "i18n.patterns.tests.URLTagTests.test_args", "i18n.tests.FormattingTests.test_localize_templatetag_and_filter", "i18n.tests.CountrySpecificLanguageTests.test_check_for_language", "i18n.patterns.tests.URLResponseTests.test_not_prefixed_with_prefix"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_295", "original_commit_message": "Fixed a settings leak possibility in the date template filter.\nThis is a security fix.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/utils/formats.py b/django/utils/formats.py\nindex d2bdda458e..8334682e68 100644\n--- a/django/utils/formats.py\n+++ b/django/utils/formats.py\n@@ -30,6 +30,24 @@ ISO_INPUT_FORMATS = {\n }\n \n \n+FORMAT_SETTINGS = frozenset([\n+    'DECIMAL_SEPARATOR',\n+    'THOUSAND_SEPARATOR',\n+    'NUMBER_GROUPING',\n+    'FIRST_DAY_OF_WEEK',\n+    'MONTH_DAY_FORMAT',\n+    'TIME_FORMAT',\n+    'DATE_FORMAT',\n+    'DATETIME_FORMAT',\n+    'SHORT_DATE_FORMAT',\n+    'SHORT_DATETIME_FORMAT',\n+    'YEAR_MONTH_FORMAT',\n+    'DATE_INPUT_FORMATS',\n+    'TIME_INPUT_FORMATS',\n+    'DATETIME_INPUT_FORMATS',\n+])\n+\n+\n def reset_format_cache():\n     \"\"\"Clear any cached formats.\n \n@@ -92,6 +110,8 @@ def get_format(format_type, lang=None, use_l10n=None):\n     be localized (or not), overriding the value of settings.USE_L10N.\n     \"\"\"\n     format_type = force_str(format_type)\n+    if format_type not in FORMAT_SETTINGS:\n+        return format_type\n     if use_l10n or (use_l10n is None and settings.USE_L10N):\n         if lang is None:\n             lang = get_language()\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/i18n/tests.py b/tests/i18n/tests.py\nindex 1de7b11b81..fd332c596e 100644\n--- a/tests/i18n/tests.py\n+++ b/tests/i18n/tests.py\n@@ -1249,6 +1249,9 @@ class FormattingTests(SimpleTestCase):\n                 '<input id=\"id_cents_paid\" name=\"cents_paid\" type=\"hidden\" value=\"59,47\" />'\n             )\n \n+    def test_format_arbitrary_settings(self):\n+        self.assertEqual(get_format('DEBUG'), 'DEBUG')\n+\n \n class MiscTests(SimpleTestCase):\n \n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "316bc3fc9437c5960c24baceb93c73f1939711e4", "source_date": "Tue Nov 24 11:20:29 2015 -0500", "source_tag": "1.10", "target_commit": "3ebbda0aef9e7a90ac6208bb8f9bc21228e2c7da", "target_date": "Tue Nov 24 12:04:55 2015 -0500", "target_tag": "1.9", "FAIL TO PASS": ["i18n.tests.FormattingTests.test_format_arbitrary_settings"], "PASS TO PASS": ["i18n.tests.TranslationTests.test_lazy_pickle", "i18n.test_percents.RenderingTemplatesWithPercentSigns.test_translates_with_percent_symbol_using_context", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_direct_switch", "i18n.patterns.tests.URLResponseTests.test_wrong_nl_prefix", "Checks that current language is not automatically saved to", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_direct_switch_trans", "i18n.tests.TestModels.test_lazy", "i18n.patterns.tests.URLRedirectWithoutTrailingSlashTests.test_not_prefixed_redirect", "i18n.patterns.tests.URLPrefixTests.test_prefixed", "i18n.test_percents.RenderingTemplatesWithPercentSigns.test_translates_with_percent_symbol_in_the_middle", "i18n.tests.MultipleLocaleActivationTests.test_single_locale_activation", "i18n.tests.TranslationTests.test_bad_placeholder_1", "i18n.patterns.tests.URLRedirectWithScriptAliasTests.test_language_prefix_with_script_prefix", "i18n.tests.FormattingTests.test_l10n_disabled", "i18n.patterns.tests.URLVaryAcceptLanguageTests.test_no_prefix_response", "i18n.tests.TestLanguageInfo.test_unknown_language_code", "i18n.tests.MiscTests.test_cache_resetting", "i18n.tests.TestModels.test_safestr", "i18n.tests.TranslationFilesMissing.test_failure_finding_default_mo_files", "i18n.patterns.tests.URLResponseTests.test_wrong_en_prefix", "i18n.patterns.tests.URLTranslationTests.test_translate_url_utility", "i18n.tests.TranslationTests.test_language_bidi", "i18n.tests.MiscTests.test_support_for_deprecated_chinese_language_codes", "i18n.patterns.tests.PathUnusedTests.test_no_lang_activate", "i18n.tests.MiscTests.test_get_language_from_path_real", "i18n.patterns.tests.URLRedirectWithoutTrailingSlashTests.test_en_redirect", "i18n.tests.TranslationTests.test_to_locale", "i18n.tests.CountrySpecificLanguageTests.test_specific_language_codes", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_loadi18n", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_loadi18n_direct_switch", "i18n.tests.TestLanguageInfo.test_localized_language_info", "i18n.tests.TranslationTests.test_maclines", "i18n.patterns.tests.URLResponseTests.test_pt_br_url", "i18n.patterns.tests.URLRedirectTests.test_nl_redirect", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_deactivate", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_loadi18n_deactivate", "i18n.tests.LocalePathsResolutionOrderI18NTests.test_locale_paths_override_app_translation", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_trans", "i18n.tests.LocalePathsResolutionOrderI18NTests.test_locale_paths_translation", "i18n.tests.FormattingTests.test_locale_independent", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale", "i18n.tests.TranslationTests.test_to_language", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_deactivate_trans", "i18n.tests.TranslationTests.test_override_exit", "i18n.tests.FormattingTests.test_get_format_modules_stability", "i18n.patterns.tests.URLPrefixTests.test_invalid_prefix_use", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_filter_direct_switch", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_filter_deactivate", "i18n.patterns.tests.URLTagTests.test_kwargs", "i18n.tests.AppResolutionOrderI18NTests.test_app_translation", "i18n.patterns.tests.URLRedirectWithoutTrailingSlashSettingTests.test_en_redirect", "i18n.tests.MiscTests.test_percent_formatting_in_blocktrans", "i18n.contenttypes.tests.ContentTypeTests.  Applying sites.0002_alter_domain_unique...test_verbose_name", "i18n.tests.MiscTests.test_special_fallback_language", "i18n.patterns.tests.URLRedirectTests.test_pl_pl_redirect", "i18n.tests.TestLanguageInfo.test_fallback_language_code", "i18n.tests.TranslationTests.test_bad_placeholder_2", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_direct_switch_btrans", "i18n.tests.DjangoFallbackResolutionOrderI18NTests.test_django_fallback", "i18n.patterns.tests.URLNamespaceTests.test_account_register", "i18n.tests.TranslationTests.test_ungettext_lazy", "i18n.patterns.tests.URLRedirectTests.test_en_redirect_wrong_url", "i18n.tests.TranslationTests.test_plural", "i18n.tests.MiscTests.test_get_language_from_path_null", "i18n.tests.FormattingTests.test_sub_locales", "i18n.tests.TestLanguageInfo.test_unknown_language_code_and_country_code", "i18n.tests.FormattingTests.test_iter_format_modules", "i18n.tests.FormattingTests.test_l10n_enabled", "i18n.tests.FormattingTests.test_get_format_modules_lang", "i18n.patterns.tests.URLTranslationTests.test_no_prefix_translated", "i18n.patterns.tests.URLResponseTests.test_en_url", "i18n.test_percents.RenderingTemplatesWithPercentSigns.test_translates_with_string_that_look_like_fmt_spec_with_trans", "i18n.tests.MiscTests.test_parse_literal_http_header", "i18n.tests.TranslationTests.test_safe_status", "i18n.tests.MiscTests.test_parse_spec_http_header", "i18n.tests.MiscTests.test_parse_language_cookie", "i18n.tests.FormattingTests.test_localized_input", "i18n.tests.TranslationTests.test_lazy_objects", "i18n.patterns.tests.URLTagTests.test_strings_only", "i18n.patterns.tests.URLRedirectTests.test_en_redirect", "i18n.tests.FormattingTests.test_localized_as_text_as_hidden_input", "i18n.patterns.tests.URLDisabledTests.test_prefixed_i18n_disabled", "i18n.tests.FormattingTests.test_false_like_locale_formats", "i18n.tests.LocaleMiddlewareTests.test_streaming_response", "i18n.patterns.tests.URLRedirectTests.test_custom_redirect_class", "i18n.patterns.tests.URLRedirectTests.test_nl_redirect_wrong_url", "i18n.tests.FormattingTests.test_sanitize_separators", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_filter", "i18n.tests.TranslationTests.test_template_tags_pgettext", "i18n.test_percents.RenderingTemplatesWithPercentSigns.test_translates_with_a_percent_symbol_at_the_end", "i18n.tests.FormattingTests.test_iter_format_modules_stability", "i18n.tests.CountrySpecificLanguageTests.test_get_language_from_request", "i18n.tests.TranslationThreadSafetyTests.test_bug14894_translation_activate_thread_safety", "i18n.tests.TranslationTests.test_override_decorator", "i18n.tests.TranslationTests.test_string_concat", "i18n.test_percents.RenderingTemplatesWithPercentSigns.test_translates_multiple_percent_signs", "i18n.patterns.tests.URLResponseTests.test_nl_url", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_btrans", "i18n.patterns.tests.URLRedirectTests.test_pt_br_redirect", "i18n.tests.TranslationTests.test_pgettext", "i18n.patterns.tests.URLPrefixTests.test_not_prefixed", "i18n.tests.TranslationTests.test_empty_value", "i18n.patterns.tests.URLTagTests.test_context", "i18n.tests.MiscTests.test_percent_in_translatable_block", "i18n.tests.MiscTests.test_english_fallback", "i18n.patterns.tests.URLRedirectWithoutTrailingSlashSettingTests.test_not_prefixed_redirect", "i18n.patterns.tests.URLTranslationTests.test_users_url", "i18n.tests.MultipleLocaleActivationTests.test_multiple_locale_deactivate_btrans", "i18n.tests.TranslationTests.test_override", "i18n.patterns.tests.URLRedirectTests.test_no_prefix_response", "i18n.tests.TestLanguageInfo.test_unknown_only_country_code", "i18n.patterns.tests.URLVaryAcceptLanguageTests.test_en_redirect", "i18n.patterns.tests.URLTagTests.test_args", "i18n.tests.FormattingTests.test_localize_templatetag_and_filter", "i18n.tests.CountrySpecificLanguageTests.test_check_for_language", "i18n.patterns.tests.URLResponseTests.test_not_prefixed_with_prefix"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_303", "original_commit_message": "[1.8.x] Made is_safe_url() reject URLs that start with control characters.\nThis is a security fix; disclosure to follow shortly.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/utils/http.py b/django/utils/http.py\nindex 33515eb410..34c17424f6 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -5,6 +5,7 @@ import calendar\n import datetime\n import re\n import sys\n+import unicodedata\n from binascii import Error as BinasciiError\n from email.utils import formatdate\n \n@@ -272,9 +273,10 @@ def is_safe_url(url, host=None):\n \n     Always returns ``False`` on an empty url.\n     \"\"\"\n+    if url is not None:\n+        url = url.strip()\n     if not url:\n         return False\n-    url = url.strip()\n     # Chrome treats \\ completely as /\n     url = url.replace('\\\\', '/')\n     # Chrome considers any URL with more than two slashes to be absolute, but\n@@ -288,5 +290,10 @@ def is_safe_url(url, host=None):\n     # allow this syntax.\n     if not url_info.netloc and url_info.scheme:\n         return False\n+    # Forbid URLs that start with control characters. Some browsers (like\n+    # Chrome) ignore quite a few control characters at the start of a\n+    # URL and might consider the URL as scheme relative.\n+    if unicodedata.category(url[0])[0] == 'C':\n+        return False\n     return ((not url_info.netloc or url_info.netloc == host) and\n             (not url_info.scheme or url_info.scheme in ['http', 'https']))\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex 7e48fe70a7..74c6905294 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -115,7 +115,9 @@ class TestUtilsHttp(unittest.TestCase):\n                         'http:\\/example.com',\n                         'http:/\\example.com',\n                         'javascript:alert(\"XSS\")',\n-                        '\\njavascript:alert(x)'):\n+                        '\\njavascript:alert(x)',\n+                        '\\x08//example.com',\n+                        '\\n'):\n             self.assertFalse(http.is_safe_url(bad_url, host='testserver'), \"%s should be blocked\" % bad_url)\n         for good_url in ('/view/?param=http://example.com',\n                      '/view/?param=https://example.com',\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "770427c2896a078925abfca2317486b284d22f04", "source_date": "Wed Mar 18 19:23:21 2015 -0400", "source_tag": "1.8", "target_commit": "5510f070711540aaa8d3707776cd77494e688ef9", "target_date": "Wed Mar 18 08:47:43 2015 -0400", "target_tag": "1.6.11", "FAIL TO PASS": ["utils_tests.test_http.TestUtilsHttp.test_is_safe_url"], "PASS TO PASS": ["utils_tests.test_http.HttpDateProcessingTests.testParsingAsctime", "utils_tests.test_http.TestUtilsHttp.test_same_origin_false", "utils_tests.test_http.TestUtilsHttp.test_urlencode", "utils_tests.test_http.HttpDateProcessingTests.testParsingRfc850", "utils_tests.test_http.TestUtilsHttp.test_base36", "utils_tests.test_http.HttpDateProcessingTests.testParsingRfc1123", "utils_tests.test_http.ETagProcessingTests.testParsing", "utils_tests.test_http.ETagProcessingTests.testQuoting", "utils_tests.test_http.TestUtilsHttp.test_same_origin_true"]}
{"ecosystem": "maven", "repo": "tomcat", "instance_id": "tomcat_819", "original_commit_message": "Process T-E header from both HTTP 1.0 and HTTP 1.1. clients", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/java/org/apache/coyote/http11/Http11Processor.java b/java/org/apache/coyote/http11/Http11Processor.java\nindex 3b8ed2fc4b..2aad58a325 100644\n--- a/java/org/apache/coyote/http11/Http11Processor.java\n+++ b/java/org/apache/coyote/http11/Http11Processor.java\n@@ -750,7 +750,9 @@ public class Http11Processor extends AbstractProcessor {\n         InputFilter[] inputFilters = inputBuffer.getFilters();\n \n         // Parse transfer-encoding header\n-        if (http11) {\n+        // HTTP specs say an HTTP 1.1 server should accept any recognised\n+        // HTTP 1.x header from a 1.x client unless the specs says otherwise.\n+        if (!http09) {\n             MessageBytes transferEncodingValueMB = headers.getValue(\"transfer-encoding\");\n             if (transferEncodingValueMB != null) {\n                 List<String> encodingNames = new ArrayList<>();\n\n\n</patch>\n<test_patch>\ndiff --git a/test/org/apache/coyote/http11/TestHttp11Processor.java b/test/org/apache/coyote/http11/TestHttp11Processor.java\nindex 3287127e30..1c7d3cc872 100644\n--- a/test/org/apache/coyote/http11/TestHttp11Processor.java\n+++ b/test/org/apache/coyote/http11/TestHttp11Processor.java\n@@ -1904,4 +1904,32 @@ public class TestHttp11Processor extends TomcatBaseTest {\n \n         Assert.assertTrue(client.isResponse501());\n     }\n+\n+\n+    @Test\n+    public void testWithTEChunkedHttp10() throws Exception {\n+\n+        getTomcatInstanceTestWebapp(false, true);\n+\n+        String request =\n+            \"POST /test/echo-params.jsp HTTP/1.0\" + SimpleHttpClient.CRLF +\n+            \"Host: any\" + SimpleHttpClient.CRLF +\n+            \"Transfer-encoding: chunked\" + SimpleHttpClient.CRLF +\n+            \"Content-Type: application/x-www-form-urlencoded\" +\n+                    SimpleHttpClient.CRLF +\n+            \"Connection: close\" + SimpleHttpClient.CRLF +\n+            SimpleHttpClient.CRLF +\n+            \"9\" + SimpleHttpClient.CRLF +\n+            \"test=data\" + SimpleHttpClient.CRLF +\n+            \"0\" + SimpleHttpClient.CRLF +\n+            SimpleHttpClient.CRLF;\n+\n+        Client client = new Client(getPort());\n+        client.setRequest(new String[] {request});\n+\n+        client.connect();\n+        client.processRequest();\n+        Assert.assertTrue(client.isResponse200());\n+        Assert.assertTrue(client.getResponseBody().contains(\"test - data\"));\n+    }\n }\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "506134f957a4be2c5b4a9334f7b3435fc954dbc1", "source_date": "Tue Jun 8 11:47:04 2021 +0100", "source_tag": "10.0.7", "target_commit": "05f9e8b00f5d9251fcd3c95dcfd6cf84177f46c8", "target_date": "Tue Jun 8 11:47:38 2021 +0100", "target_tag": "9.0.47", "FAIL TO PASS": ["testWithTEChunkedHttp10"], "PASS TO PASS": ["testRequestBodySwallowing", "testBug57621a", "testTEHeaderUnknown06", "testMultipleHostHeader01", "testBug53677b", "testInconsistentHostHeader03", "testPipelining", "testTEHeaderUnknown04", "testWithTEChunkedWithCL", "testMultipleHostHeader02", "testInconsistentHostHeader06", "testKeepAliveHeader09", "testTEHeaderUnknown02", "testKeepAliveHeader04", "testTEHeaderUnknown05", "testTEHeaderUnknown03", "testSlowUploadTimeoutWithLongerUploadTimeout", "testTEHeaderUnknown07", "testBug53677a", "testMissingHostHeader", "testKeepAliveHeader08", "testKeepAliveHeader05", "testBlankHostHeader01", "testChunking11NoContentLength", "testKeepAliveHeader02", "testInconsistentHostHeader02", "testWithTEVoid", "testKeepAliveHeader01", "testNon2xxResponseWithExpectation", "testKeepAliveHeader12", "testKeepAliveHeader07", "testBug57621b", "testBlankHostHeader02", "testWithTEBuffered", "testConsistentHostHeader01", "testNoChunking11NoContentLengthConnectionClose", "testInconsistentHostHeader04", "testWithUnknownExpectation", "testBug59310", "testInconsistentHostHeader01", "testKeepAliveHeader11", "testPipeliningBug64974", "testWithTEUnsupported", "testSlowUploadTimeoutWithoutLongerUploadTimeout", "testWithTEChunked", "testBug55772", "testKeepAliveHeader06", "testBug61086", "testKeepAliveHeader03", "testWithTESavedRequest", "testInconsistentHostHeader05", "testConsistentHostHeader02", "testConsistentHostHeader03", "testKeepAliveHeader10", "testTEHeaderUnknown01", "testResponseWithErrorChunked", "testNon2xxResponseWithoutExpectation"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_308", "original_commit_message": "[1.2.X] Fixed a security issue in the file session backend.  Disclosure and new release forthcoming.\ngit-svn-id: http://code.djangoproject.com/svn/django/branches/releases/1.2.X@15468 bcc190cf-cafb-0310-a4f2-bffc1f526a37", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/contrib/sessions/backends/file.py b/django/contrib/sessions/backends/file.py\nindex 3f6350345f..c3516ea328 100644\n--- a/django/contrib/sessions/backends/file.py\n+++ b/django/contrib/sessions/backends/file.py\n@@ -26,6 +26,8 @@ class SessionStore(SessionBase):\n         self.file_prefix = settings.SESSION_COOKIE_NAME\n         super(SessionStore, self).__init__(session_key)\n \n+    VALID_KEY_CHARS = set(\"abcdef0123456789\")\n+\n     def _key_to_file(self, session_key=None):\n         \"\"\"\n         Get the file associated with this session key.\n@@ -36,9 +38,9 @@ class SessionStore(SessionBase):\n         # Make sure we're not vulnerable to directory traversal. Session keys\n         # should always be md5s, so they should never contain directory\n         # components.\n-        if os.path.sep in session_key:\n+        if not set(session_key).issubset(self.VALID_KEY_CHARS):\n             raise SuspiciousOperation(\n-                \"Invalid characters (directory components) in session key\")\n+                \"Invalid characters in session key\")\n \n         return os.path.join(self.storage_path, self.file_prefix + session_key)\n \n\n\n</patch>\n<test_patch>\ndiff --git a/django/contrib/sessions/tests.py b/django/contrib/sessions/tests.py\nindex f0a3c4ec8c..01faab859c 100644\n--- a/django/contrib/sessions/tests.py\n+++ b/django/contrib/sessions/tests.py\n@@ -129,6 +129,17 @@ True\n >>> file_session = FileSession(file_session.session_key)\n >>> file_session.save()\n \n+# Ensure we don't allow directory traversal\n+>>> FileSession(\"a/b/c\").load()\n+Traceback (innermost last):\n+    ...\n+SuspiciousOperation: Invalid characters in session key\n+\n+>>> FileSession(\"a\\\\b\\\\c\").load()\n+Traceback (innermost last):\n+    ...\n+SuspiciousOperation: Invalid characters in session key\n+\n # Make sure the file backend checks for a good storage dir\n >>> settings.SESSION_FILE_PATH = \"/if/this/directory/exists/you/have/a/weird/computer\"\n >>> FileSession()\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "194566480b15cf4e294d3f03ff587019b74044b2", "source_date": "Wed Feb 9 02:13:59 2011 +0000", "source_tag": "1.2.5", "target_commit": "570a32a047ea56265646217264b0d3dab1a14dbd", "target_date": "Wed Feb 9 02:14:24 2011 +0000", "target_tag": "1.1.4", "FAIL TO PASS": ["django.contrib.sessions.tests", "Doctest: django.contrib.sessions.tests"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_309", "original_commit_message": "[4.2.x] Fixed CVE-2023-41164 -- Fixed potential DoS in django.utils.encoding.uri_to_iri().\nThanks MProgrammer (https://hackerone.com/mprogrammer) for the report.\nCo-authored-by: nessita <124304+nessita@users.noreply.github.com>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/utils/encoding.py b/django/utils/encoding.py\nindex 43847b5385..23473930fd 100644\n--- a/django/utils/encoding.py\n+++ b/django/utils/encoding.py\n@@ -219,6 +219,7 @@ def repercent_broken_unicode(path):\n     repercent-encode any octet produced that is not part of a strictly legal\n     UTF-8 octet sequence.\n     \"\"\"\n+    changed_parts = []\n     while True:\n         try:\n             path.decode()\n@@ -226,9 +227,10 @@ def repercent_broken_unicode(path):\n             # CVE-2019-14235: A recursion shouldn't be used since the exception\n             # handling uses massive amounts of memory\n             repercent = quote(path[e.start : e.end], safe=b\"/#%[]=:;$&()+,!?*@'~\")\n-            path = path[: e.start] + repercent.encode() + path[e.end :]\n+            changed_parts.append(path[: e.start] + repercent.encode())\n+            path = path[e.end :]\n         else:\n-            return path\n+            return b\"\".join(changed_parts) + path\n \n \n def filepath_to_uri(path):\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/utils_tests/test_encoding.py b/tests/utils_tests/test_encoding.py\nindex 6dea260b84..2b52b1607c 100644\n--- a/tests/utils_tests/test_encoding.py\n+++ b/tests/utils_tests/test_encoding.py\n@@ -1,9 +1,10 @@\n import datetime\n+import inspect\n import sys\n import unittest\n from pathlib import Path\n from unittest import mock\n-from urllib.parse import quote_plus\n+from urllib.parse import quote, quote_plus\n \n from django.test import SimpleTestCase\n from django.utils.encoding import (\n@@ -120,6 +121,24 @@ class TestEncodingUtils(SimpleTestCase):\n         except RecursionError:\n             self.fail(\"Unexpected RecursionError raised.\")\n \n+    def test_repercent_broken_unicode_small_fragments(self):\n+        data = b\"test\\xfctest\\xfctest\\xfc\"\n+        decoded_paths = []\n+\n+        def mock_quote(*args, **kwargs):\n+            # The second frame is the call to repercent_broken_unicode().\n+            decoded_paths.append(inspect.currentframe().f_back.f_locals[\"path\"])\n+            return quote(*args, **kwargs)\n+\n+        with mock.patch(\"django.utils.encoding.quote\", mock_quote):\n+            self.assertEqual(repercent_broken_unicode(data), b\"test%FCtest%FCtest%FC\")\n+\n+        # decode() is called on smaller fragment of the path each time.\n+        self.assertEqual(\n+            decoded_paths,\n+            [b\"test\\xfctest\\xfctest\\xfc\", b\"test\\xfctest\\xfc\", b\"test\\xfc\"],\n+        )\n+\n \n class TestRFC3987IEncodingUtils(unittest.TestCase):\n     def test_filepath_to_uri(self):\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "9c51b4dcfa0cefcb48231f4d71cafa80821f87b9", "source_date": "Mon Sep 4 12:05:35 2023 +0200", "source_tag": "4.2.5", "target_commit": "6f030b1149bd8fa4ba90452e77cb3edc095ce54e", "target_date": "Mon Sep 4 12:23:18 2023 +0200", "target_tag": "3.2.21", "FAIL TO PASS": ["utils_tests.test_encoding.TestEncodingUtils.test_repercent_broken_unicode_small_fragments"], "PASS TO PASS": ["utils_tests.test_encoding.TestRFC3987IEncodingUtils.test_uri_to_iri", "utils_tests.test_encoding.TestEncodingUtils.test_force_bytes_memory_view", "utils_tests.test_encoding.TestEncodingUtils.test_force_bytes_strings_only", "utils_tests.test_encoding.TestEncodingUtils.test_smart_str", "utils_tests.test_encoding.TestRFC3987IEncodingUtils.test_iri_to_uri", "Broken __str__ actually raises an error.", "utils_tests.test_encoding.TestRFC3987IEncodingUtils.test_filepath_to_uri", "utils_tests.test_encoding.TestRFC3987IEncodingUtils.test_escape_uri_path", "utils_tests.test_encoding.TestEncodingUtils.test_force_str_lazy", "utils_tests.test_encoding.TestEncodingUtils.test_smart_bytes", "utils_tests.test_encoding.TestEncodingUtils.test_repercent_broken_unicode_recursion_error", "force_bytes knows how to convert to bytes an exception", "utils_tests.test_encoding.TestEncodingUtils.test_force_str_DjangoUnicodeDecodeError", "utils_tests.test_encoding.TestEncodingUtils.test_force_bytes_encoding", "utils_tests.test_encoding.TestRFC3987IEncodingUtils.test_complementarity", "utils_tests.test_encoding.TestEncodingUtils.test_get_default_encoding"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_307", "original_commit_message": "[1.8.x] Made is_safe_url() reject URLs that start with control characters.\nThis is a security fix; disclosure to follow shortly.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/utils/http.py b/django/utils/http.py\nindex 33515eb410..34c17424f6 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -5,6 +5,7 @@ import calendar\n import datetime\n import re\n import sys\n+import unicodedata\n from binascii import Error as BinasciiError\n from email.utils import formatdate\n \n@@ -272,9 +273,10 @@ def is_safe_url(url, host=None):\n \n     Always returns ``False`` on an empty url.\n     \"\"\"\n+    if url is not None:\n+        url = url.strip()\n     if not url:\n         return False\n-    url = url.strip()\n     # Chrome treats \\ completely as /\n     url = url.replace('\\\\', '/')\n     # Chrome considers any URL with more than two slashes to be absolute, but\n@@ -288,5 +290,10 @@ def is_safe_url(url, host=None):\n     # allow this syntax.\n     if not url_info.netloc and url_info.scheme:\n         return False\n+    # Forbid URLs that start with control characters. Some browsers (like\n+    # Chrome) ignore quite a few control characters at the start of a\n+    # URL and might consider the URL as scheme relative.\n+    if unicodedata.category(url[0])[0] == 'C':\n+        return False\n     return ((not url_info.netloc or url_info.netloc == host) and\n             (not url_info.scheme or url_info.scheme in ['http', 'https']))\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex 7e48fe70a7..74c6905294 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -115,7 +115,9 @@ class TestUtilsHttp(unittest.TestCase):\n                         'http:\\/example.com',\n                         'http:/\\example.com',\n                         'javascript:alert(\"XSS\")',\n-                        '\\njavascript:alert(x)'):\n+                        '\\njavascript:alert(x)',\n+                        '\\x08//example.com',\n+                        '\\n'):\n             self.assertFalse(http.is_safe_url(bad_url, host='testserver'), \"%s should be blocked\" % bad_url)\n         for good_url in ('/view/?param=http://example.com',\n                      '/view/?param=https://example.com',\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "770427c2896a078925abfca2317486b284d22f04", "source_date": "Wed Mar 18 19:23:21 2015 -0400", "source_tag": "1.8", "target_commit": "2a4113dbd532ce952308992633d802dc169a75f1", "target_date": "Wed Mar 18 08:51:51 2015 -0400", "target_tag": "1.7.7", "FAIL TO PASS": ["utils_tests.test_http.TestUtilsHttp.test_is_safe_url"], "PASS TO PASS": ["utils_tests.test_http.TestUtilsHttp.test_same_origin_false", "utils_tests.test_http.TestUtilsHttp.test_urlencode", "utils_tests.test_http.HttpDateProcessingTests.test_parsing_asctime", "utils_tests.test_http.ETagProcessingTests.test_quoting", "utils_tests.test_http.HttpDateProcessingTests.test_parsing_rfc1123", "utils_tests.test_http.TestUtilsHttp.test_base36", "utils_tests.test_http.ETagProcessingTests.  Applying sessions.0001_initial...test_parsing", "utils_tests.test_http.TestUtilsHttp.test_urlsafe_base64_roundtrip", "utils_tests.test_http.HttpDateProcessingTests.test_parsing_rfc850", "utils_tests.test_http.TestUtilsHttp.test_same_origin_true"]}
{"ecosystem": "maven", "repo": "tomcat", "instance_id": "tomcat_823", "original_commit_message": "Process T-E header from both HTTP 1.0 and HTTP 1.1. clients", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/java/org/apache/coyote/http11/Http11Processor.java b/java/org/apache/coyote/http11/Http11Processor.java\nindex 3b8ed2fc4b..2aad58a325 100644\n--- a/java/org/apache/coyote/http11/Http11Processor.java\n+++ b/java/org/apache/coyote/http11/Http11Processor.java\n@@ -750,7 +750,9 @@ public class Http11Processor extends AbstractProcessor {\n         InputFilter[] inputFilters = inputBuffer.getFilters();\n \n         // Parse transfer-encoding header\n-        if (http11) {\n+        // HTTP specs say an HTTP 1.1 server should accept any recognised\n+        // HTTP 1.x header from a 1.x client unless the specs says otherwise.\n+        if (!http09) {\n             MessageBytes transferEncodingValueMB = headers.getValue(\"transfer-encoding\");\n             if (transferEncodingValueMB != null) {\n                 List<String> encodingNames = new ArrayList<>();\n\n\n</patch>\n<test_patch>\ndiff --git a/test/org/apache/coyote/http11/TestHttp11Processor.java b/test/org/apache/coyote/http11/TestHttp11Processor.java\nindex 3287127e30..1c7d3cc872 100644\n--- a/test/org/apache/coyote/http11/TestHttp11Processor.java\n+++ b/test/org/apache/coyote/http11/TestHttp11Processor.java\n@@ -1904,4 +1904,32 @@ public class TestHttp11Processor extends TomcatBaseTest {\n \n         Assert.assertTrue(client.isResponse501());\n     }\n+\n+\n+    @Test\n+    public void testWithTEChunkedHttp10() throws Exception {\n+\n+        getTomcatInstanceTestWebapp(false, true);\n+\n+        String request =\n+            \"POST /test/echo-params.jsp HTTP/1.0\" + SimpleHttpClient.CRLF +\n+            \"Host: any\" + SimpleHttpClient.CRLF +\n+            \"Transfer-encoding: chunked\" + SimpleHttpClient.CRLF +\n+            \"Content-Type: application/x-www-form-urlencoded\" +\n+                    SimpleHttpClient.CRLF +\n+            \"Connection: close\" + SimpleHttpClient.CRLF +\n+            SimpleHttpClient.CRLF +\n+            \"9\" + SimpleHttpClient.CRLF +\n+            \"test=data\" + SimpleHttpClient.CRLF +\n+            \"0\" + SimpleHttpClient.CRLF +\n+            SimpleHttpClient.CRLF;\n+\n+        Client client = new Client(getPort());\n+        client.setRequest(new String[] {request});\n+\n+        client.connect();\n+        client.processRequest();\n+        Assert.assertTrue(client.isResponse200());\n+        Assert.assertTrue(client.getResponseBody().contains(\"test - data\"));\n+    }\n }\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "506134f957a4be2c5b4a9334f7b3435fc954dbc1", "source_date": "Tue Jun 8 11:47:04 2021 +0100", "source_tag": "10.0.7", "target_commit": "da0e7cb093cf68b052d9175e469dbd0464441b0b", "target_date": "Tue Jun 8 11:48:05 2021 +0100", "target_tag": "8.5.67", "FAIL TO PASS": ["testWithTEChunkedHttp10"], "PASS TO PASS": ["testRequestBodySwallowing", "testBug57621a", "testTEHeaderUnknown06", "testMultipleHostHeader01", "testBug53677b", "testInconsistentHostHeader03", "testPipelining", "testTEHeaderUnknown04", "testWithTEChunkedWithCL", "testMultipleHostHeader02", "testInconsistentHostHeader06", "testKeepAliveHeader09", "testTEHeaderUnknown02", "testKeepAliveHeader04", "testTEHeaderUnknown05", "testTEHeaderUnknown03", "testSlowUploadTimeoutWithLongerUploadTimeout", "testTEHeaderUnknown07", "testBug53677a", "testMissingHostHeader", "testKeepAliveHeader08", "testKeepAliveHeader05", "testBlankHostHeader01", "testChunking11NoContentLength", "testKeepAliveHeader02", "testInconsistentHostHeader02", "testWithTEVoid", "testKeepAliveHeader01", "testNon2xxResponseWithExpectation", "testKeepAliveHeader12", "testKeepAliveHeader07", "testBug57621b", "testBlankHostHeader02", "testWithTEBuffered", "testConsistentHostHeader01", "testNoChunking11NoContentLengthConnectionClose", "testInconsistentHostHeader04", "testWithUnknownExpectation", "testBug59310", "testInconsistentHostHeader01", "testKeepAliveHeader11", "testPipeliningBug64974", "testWithTEUnsupported", "testSlowUploadTimeoutWithoutLongerUploadTimeout", "testWithTEChunked", "testBug55772", "testKeepAliveHeader06", "testBug61086", "testKeepAliveHeader03", "testWithTESavedRequest", "testInconsistentHostHeader05", "testConsistentHostHeader02", "testConsistentHostHeader03", "testKeepAliveHeader10", "testTEHeaderUnknown01", "testResponseWithErrorChunked", "testNon2xxResponseWithoutExpectation"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_311", "original_commit_message": "[4.2.x] Fixed CVE-2023-41164 -- Fixed potential DoS in django.utils.encoding.uri_to_iri().\nThanks MProgrammer (https://hackerone.com/mprogrammer) for the report.\nCo-authored-by: nessita <124304+nessita@users.noreply.github.com>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/utils/encoding.py b/django/utils/encoding.py\nindex 43847b5385..23473930fd 100644\n--- a/django/utils/encoding.py\n+++ b/django/utils/encoding.py\n@@ -219,6 +219,7 @@ def repercent_broken_unicode(path):\n     repercent-encode any octet produced that is not part of a strictly legal\n     UTF-8 octet sequence.\n     \"\"\"\n+    changed_parts = []\n     while True:\n         try:\n             path.decode()\n@@ -226,9 +227,10 @@ def repercent_broken_unicode(path):\n             # CVE-2019-14235: A recursion shouldn't be used since the exception\n             # handling uses massive amounts of memory\n             repercent = quote(path[e.start : e.end], safe=b\"/#%[]=:;$&()+,!?*@'~\")\n-            path = path[: e.start] + repercent.encode() + path[e.end :]\n+            changed_parts.append(path[: e.start] + repercent.encode())\n+            path = path[e.end :]\n         else:\n-            return path\n+            return b\"\".join(changed_parts) + path\n \n \n def filepath_to_uri(path):\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/utils_tests/test_encoding.py b/tests/utils_tests/test_encoding.py\nindex 6dea260b84..2b52b1607c 100644\n--- a/tests/utils_tests/test_encoding.py\n+++ b/tests/utils_tests/test_encoding.py\n@@ -1,9 +1,10 @@\n import datetime\n+import inspect\n import sys\n import unittest\n from pathlib import Path\n from unittest import mock\n-from urllib.parse import quote_plus\n+from urllib.parse import quote, quote_plus\n \n from django.test import SimpleTestCase\n from django.utils.encoding import (\n@@ -120,6 +121,24 @@ class TestEncodingUtils(SimpleTestCase):\n         except RecursionError:\n             self.fail(\"Unexpected RecursionError raised.\")\n \n+    def test_repercent_broken_unicode_small_fragments(self):\n+        data = b\"test\\xfctest\\xfctest\\xfc\"\n+        decoded_paths = []\n+\n+        def mock_quote(*args, **kwargs):\n+            # The second frame is the call to repercent_broken_unicode().\n+            decoded_paths.append(inspect.currentframe().f_back.f_locals[\"path\"])\n+            return quote(*args, **kwargs)\n+\n+        with mock.patch(\"django.utils.encoding.quote\", mock_quote):\n+            self.assertEqual(repercent_broken_unicode(data), b\"test%FCtest%FCtest%FC\")\n+\n+        # decode() is called on smaller fragment of the path each time.\n+        self.assertEqual(\n+            decoded_paths,\n+            [b\"test\\xfctest\\xfctest\\xfc\", b\"test\\xfctest\\xfc\", b\"test\\xfc\"],\n+        )\n+\n \n class TestRFC3987IEncodingUtils(unittest.TestCase):\n     def test_filepath_to_uri(self):\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "9c51b4dcfa0cefcb48231f4d71cafa80821f87b9", "source_date": "Mon Sep 4 12:05:35 2023 +0200", "source_tag": "4.2.5", "target_commit": "ba00bc5ec6a7eff5e08be438f7b5b0e9574e8ff0", "target_date": "Mon Sep 4 12:14:21 2023 +0200", "target_tag": "4.1.11", "FAIL TO PASS": ["utils_tests.test_encoding.TestEncodingUtils.test_repercent_broken_unicode_small_fragments"], "PASS TO PASS": ["utils_tests.test_encoding.TestRFC3987IEncodingUtils.test_uri_to_iri", "utils_tests.test_encoding.TestEncodingUtils.test_force_bytes_memory_view", "utils_tests.test_encoding.TestEncodingUtils.test_force_bytes_strings_only", "utils_tests.test_encoding.TestEncodingUtils.test_smart_str", "utils_tests.test_encoding.TestRFC3987IEncodingUtils.test_iri_to_uri", "Broken __str__ actually raises an error.", "utils_tests.test_encoding.TestRFC3987IEncodingUtils.test_filepath_to_uri", "utils_tests.test_encoding.TestRFC3987IEncodingUtils.test_escape_uri_path", "utils_tests.test_encoding.TestEncodingUtils.test_force_str_lazy", "utils_tests.test_encoding.TestEncodingUtils.test_smart_bytes", "utils_tests.test_encoding.TestEncodingUtils.test_repercent_broken_unicode_recursion_error", "force_bytes knows how to convert to bytes an exception", "utils_tests.test_encoding.TestEncodingUtils.test_force_str_DjangoUnicodeDecodeError", "utils_tests.test_encoding.TestEncodingUtils.test_force_bytes_encoding", "utils_tests.test_encoding.TestRFC3987IEncodingUtils.test_complementarity", "utils_tests.test_encoding.TestEncodingUtils.test_get_default_encoding"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_318", "original_commit_message": "[1.7.x] Stripped headers containing underscores to prevent spoofing in WSGI environ.\nThis is a security fix. Disclosure following shortly.\nThanks to Jedediah Smith for the report.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex 090a694c3e..cc1ff9b4a1 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -155,6 +155,17 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler, object):\n \n         sys.stderr.write(msg)\n \n+    def get_environ(self):\n+        # Strip all headers with underscores in the name before constructing\n+        # the WSGI environ. This prevents header-spoofing based on ambiguity\n+        # between underscores and dashes both normalized to underscores in WSGI\n+        # env vars. Nginx and Apache 2.4+ both do this as well.\n+        for k, v in self.headers.items():\n+            if '_' in k:\n+                del self.headers[k]\n+\n+        return super(WSGIRequestHandler, self).get_environ()\n+\n \n def run(addr, port, wsgi_handler, ipv6=False, threading=False):\n     server_address = (addr, port)\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/servers/test_basehttp.py b/tests/servers/test_basehttp.py\nnew file mode 100644\nindex 0000000000..6bca608d17\n--- /dev/null\n+++ b/tests/servers/test_basehttp.py\n@@ -0,0 +1,67 @@\n+import sys\n+\n+from django.core.servers.basehttp import WSGIRequestHandler\n+from django.test import TestCase\n+from django.utils.six import BytesIO, StringIO\n+\n+\n+class Stub(object):\n+    def __init__(self, **kwargs):\n+        self.__dict__.update(kwargs)\n+\n+\n+class WSGIRequestHandlerTestCase(TestCase):\n+\n+    def test_strips_underscore_headers(self):\n+        \"\"\"WSGIRequestHandler ignores headers containing underscores.\n+\n+        This follows the lead of nginx and Apache 2.4, and is to avoid\n+        ambiguity between dashes and underscores in mapping to WSGI environ,\n+        which can have security implications.\n+        \"\"\"\n+        def test_app(environ, start_response):\n+            \"\"\"A WSGI app that just reflects its HTTP environ.\"\"\"\n+            start_response('200 OK', [])\n+            http_environ_items = sorted(\n+                '%s:%s' % (k, v) for k, v in environ.items()\n+                if k.startswith('HTTP_')\n+            )\n+            yield (','.join(http_environ_items)).encode('utf-8')\n+\n+        rfile = BytesIO()\n+        rfile.write(b\"GET / HTTP/1.0\\r\\n\")\n+        rfile.write(b\"Some-Header: good\\r\\n\")\n+        rfile.write(b\"Some_Header: bad\\r\\n\")\n+        rfile.write(b\"Other_Header: bad\\r\\n\")\n+        rfile.seek(0)\n+\n+        # WSGIRequestHandler closes the output file; we need to make this a\n+        # no-op so we can still read its contents.\n+        class UnclosableBytesIO(BytesIO):\n+            def close(self):\n+                pass\n+\n+        wfile = UnclosableBytesIO()\n+\n+        def makefile(mode, *a, **kw):\n+            if mode == 'rb':\n+                return rfile\n+            elif mode == 'wb':\n+                return wfile\n+\n+        request = Stub(makefile=makefile)\n+        server = Stub(base_environ={}, get_app=lambda: test_app)\n+\n+        # We don't need to check stderr, but we don't want it in test output\n+        old_stderr = sys.stderr\n+        sys.stderr = StringIO()\n+        try:\n+            # instantiating a handler runs the request as side effect\n+            WSGIRequestHandler(request, '192.168.0.2', server)\n+        finally:\n+            sys.stderr = old_stderr\n+\n+        wfile.seek(0)\n+        body = list(wfile.readlines())[-1]\n+\n+        self.assertEqual(body, b'HTTP_SOME_HEADER:good')\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "41b4bc73ee0da7b2e09f4af47fc1fd21144c710f", "source_date": "Tue Jan 13 13:02:56 2015 -0500", "source_tag": "1.7.3", "target_commit": "d7597b31d5c03106eeba4be14a33b32a5e25f4ee", "target_date": "Tue Jan 13 13:10:11 2015 -0500", "target_tag": "1.6.10", "FAIL TO PASS": ["WSGIRequestHandler ignores headers containing underscores.", "servers.test_basehttp.WSGIRequestHandlerTestCase.test_strips_underscore_headers"], "PASS TO PASS": []}
{"ecosystem": "maven", "repo": "tomcat", "instance_id": "tomcat_830", "original_commit_message": "Ensure chunked, if present, is the last encoding in the list", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/java/org/apache/coyote/http11/Http11Processor.java b/java/org/apache/coyote/http11/Http11Processor.java\nindex 2aad58a325..1886f22c5a 100644\n--- a/java/org/apache/coyote/http11/Http11Processor.java\n+++ b/java/org/apache/coyote/http11/Http11Processor.java\n@@ -209,9 +209,20 @@ public class Http11Processor extends AbstractProcessor {\n      * supported, a 501 response will be returned to the client.\n      */\n     private void addInputFilter(InputFilter[] inputFilters, String encodingName) {\n+        if (contentDelimitation) {\n+            // Chunked has already been specified and it must be the final\n+            // encoding.\n+            // 400 - Bad request\n+            response.setStatus(400);\n+            setErrorState(ErrorState.CLOSE_CLEAN, null);\n+            if (log.isDebugEnabled()) {\n+                log.debug(sm.getString(\"http11processor.request.prepare\") +\n+                          \" Tranfer encoding lists chunked before [\" + encodingName + \"]\");\n+            }\n+            return;\n+        }\n \n         // Parsing trims and converts to lower case.\n-\n         if (encodingName.equals(\"chunked\")) {\n             inputBuffer.addActiveFilter(inputFilters[Constants.CHUNKED_FILTER]);\n             contentDelimitation = true;\n\n\n</patch>\n<test_patch>\ndiff --git a/test/org/apache/coyote/http11/TestHttp11Processor.java b/test/org/apache/coyote/http11/TestHttp11Processor.java\nindex 1c7d3cc872..cad207b7ab 100644\n--- a/test/org/apache/coyote/http11/TestHttp11Processor.java\n+++ b/test/org/apache/coyote/http11/TestHttp11Processor.java\n@@ -1838,47 +1838,53 @@ public class TestHttp11Processor extends TomcatBaseTest {\n \n     @Test\n     public void testTEHeaderUnknown01() throws Exception {\n-        doTestTEHeaderUnknown(\"identity\");\n+        doTestTEHeaderInvalid(\"identity\", false);\n     }\n \n \n     @Test\n     public void testTEHeaderUnknown02() throws Exception {\n-        doTestTEHeaderUnknown(\"identity, chunked\");\n+        doTestTEHeaderInvalid(\"identity, chunked\", false);\n     }\n \n \n     @Test\n     public void testTEHeaderUnknown03() throws Exception {\n-        doTestTEHeaderUnknown(\"unknown, chunked\");\n+        doTestTEHeaderInvalid(\"unknown, chunked\", false);\n     }\n \n \n     @Test\n     public void testTEHeaderUnknown04() throws Exception {\n-        doTestTEHeaderUnknown(\"void\");\n+        doTestTEHeaderInvalid(\"void\", false);\n     }\n \n \n     @Test\n     public void testTEHeaderUnknown05() throws Exception {\n-        doTestTEHeaderUnknown(\"void, chunked\");\n+        doTestTEHeaderInvalid(\"void, chunked\", false);\n     }\n \n \n     @Test\n     public void testTEHeaderUnknown06() throws Exception {\n-        doTestTEHeaderUnknown(\"void, identity\");\n+        doTestTEHeaderInvalid(\"void, identity\", false);\n     }\n \n \n     @Test\n     public void testTEHeaderUnknown07() throws Exception {\n-        doTestTEHeaderUnknown(\"identity, void\");\n+        doTestTEHeaderInvalid(\"identity, void\", false);\n     }\n \n \n-    private void doTestTEHeaderUnknown(String headerValue) throws Exception {\n+    @Test\n+    public void testTEHeaderChunkedNotLast01() throws Exception {\n+        doTestTEHeaderInvalid(\"chunked, void\", true);\n+    }\n+\n+\n+    private void doTestTEHeaderInvalid(String headerValue, boolean badRequest) throws Exception {\n         Tomcat tomcat = getTomcatInstance();\n \n         // No file system docBase required\n@@ -1902,7 +1908,11 @@ public class TestHttp11Processor extends TomcatBaseTest {\n         client.connect();\n         client.processRequest(false);\n \n-        Assert.assertTrue(client.isResponse501());\n+        if (badRequest) {\n+            Assert.assertTrue(client.isResponse400());\n+        } else {\n+            Assert.assertTrue(client.isResponse501());\n+        }\n     }\n \n \n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "19d11556d0db99df291df33605f137976d152475", "source_date": "Tue Jun 8 11:47:07 2021 +0100", "source_tag": "10.0.7", "target_commit": "8874fa02e9b36baa9ca6b226c0882c0190ca5a02", "target_date": "Tue Jun 8 11:48:08 2021 +0100", "target_tag": "8.5.67", "FAIL TO PASS": ["testTEHeaderChunkedNotLast01"], "PASS TO PASS": ["testRequestBodySwallowing", "testBug57621a", "testTEHeaderUnknown06", "testWithTEChunkedHttp10", "testBug53677b", "testMultipleHostHeader01", "testInconsistentHostHeader03", "testPipelining", "testTEHeaderUnknown04", "testWithTEChunkedWithCL", "testMultipleHostHeader02", "testInconsistentHostHeader06", "testKeepAliveHeader09", "testTEHeaderUnknown02", "testKeepAliveHeader04", "testTEHeaderUnknown05", "testTEHeaderUnknown03", "testSlowUploadTimeoutWithLongerUploadTimeout", "testTEHeaderUnknown07", "testBug53677a", "testMissingHostHeader", "testKeepAliveHeader08", "testKeepAliveHeader05", "testBlankHostHeader01", "testChunking11NoContentLength", "testKeepAliveHeader02", "testInconsistentHostHeader02", "testWithTEVoid", "testKeepAliveHeader01", "testNon2xxResponseWithExpectation", "testKeepAliveHeader12", "testKeepAliveHeader07", "testBug57621b", "testBlankHostHeader02", "testWithTEBuffered", "testConsistentHostHeader01", "testNoChunking11NoContentLengthConnectionClose", "testInconsistentHostHeader04", "testWithUnknownExpectation", "testBug59310", "testInconsistentHostHeader01", "testKeepAliveHeader11", "testPipeliningBug64974", "testWithTEUnsupported", "testSlowUploadTimeoutWithoutLongerUploadTimeout", "testWithTEChunked", "testBug55772", "testKeepAliveHeader06", "testBug61086", "testKeepAliveHeader03", "testWithTESavedRequest", "testInconsistentHostHeader05", "testConsistentHostHeader02", "testConsistentHostHeader03", "testKeepAliveHeader10", "testTEHeaderUnknown01", "testResponseWithErrorChunked", "testNon2xxResponseWithoutExpectation"]}
{"ecosystem": "maven", "repo": "tomcat", "instance_id": "tomcat_832", "original_commit_message": "Ensure chunked, if present, is the last encoding in the list", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/java/org/apache/coyote/http11/Http11Processor.java b/java/org/apache/coyote/http11/Http11Processor.java\nindex 2aad58a325..1886f22c5a 100644\n--- a/java/org/apache/coyote/http11/Http11Processor.java\n+++ b/java/org/apache/coyote/http11/Http11Processor.java\n@@ -209,9 +209,20 @@ public class Http11Processor extends AbstractProcessor {\n      * supported, a 501 response will be returned to the client.\n      */\n     private void addInputFilter(InputFilter[] inputFilters, String encodingName) {\n+        if (contentDelimitation) {\n+            // Chunked has already been specified and it must be the final\n+            // encoding.\n+            // 400 - Bad request\n+            response.setStatus(400);\n+            setErrorState(ErrorState.CLOSE_CLEAN, null);\n+            if (log.isDebugEnabled()) {\n+                log.debug(sm.getString(\"http11processor.request.prepare\") +\n+                          \" Tranfer encoding lists chunked before [\" + encodingName + \"]\");\n+            }\n+            return;\n+        }\n \n         // Parsing trims and converts to lower case.\n-\n         if (encodingName.equals(\"chunked\")) {\n             inputBuffer.addActiveFilter(inputFilters[Constants.CHUNKED_FILTER]);\n             contentDelimitation = true;\n\n\n</patch>\n<test_patch>\ndiff --git a/test/org/apache/coyote/http11/TestHttp11Processor.java b/test/org/apache/coyote/http11/TestHttp11Processor.java\nindex 1c7d3cc872..cad207b7ab 100644\n--- a/test/org/apache/coyote/http11/TestHttp11Processor.java\n+++ b/test/org/apache/coyote/http11/TestHttp11Processor.java\n@@ -1838,47 +1838,53 @@ public class TestHttp11Processor extends TomcatBaseTest {\n \n     @Test\n     public void testTEHeaderUnknown01() throws Exception {\n-        doTestTEHeaderUnknown(\"identity\");\n+        doTestTEHeaderInvalid(\"identity\", false);\n     }\n \n \n     @Test\n     public void testTEHeaderUnknown02() throws Exception {\n-        doTestTEHeaderUnknown(\"identity, chunked\");\n+        doTestTEHeaderInvalid(\"identity, chunked\", false);\n     }\n \n \n     @Test\n     public void testTEHeaderUnknown03() throws Exception {\n-        doTestTEHeaderUnknown(\"unknown, chunked\");\n+        doTestTEHeaderInvalid(\"unknown, chunked\", false);\n     }\n \n \n     @Test\n     public void testTEHeaderUnknown04() throws Exception {\n-        doTestTEHeaderUnknown(\"void\");\n+        doTestTEHeaderInvalid(\"void\", false);\n     }\n \n \n     @Test\n     public void testTEHeaderUnknown05() throws Exception {\n-        doTestTEHeaderUnknown(\"void, chunked\");\n+        doTestTEHeaderInvalid(\"void, chunked\", false);\n     }\n \n \n     @Test\n     public void testTEHeaderUnknown06() throws Exception {\n-        doTestTEHeaderUnknown(\"void, identity\");\n+        doTestTEHeaderInvalid(\"void, identity\", false);\n     }\n \n \n     @Test\n     public void testTEHeaderUnknown07() throws Exception {\n-        doTestTEHeaderUnknown(\"identity, void\");\n+        doTestTEHeaderInvalid(\"identity, void\", false);\n     }\n \n \n-    private void doTestTEHeaderUnknown(String headerValue) throws Exception {\n+    @Test\n+    public void testTEHeaderChunkedNotLast01() throws Exception {\n+        doTestTEHeaderInvalid(\"chunked, void\", true);\n+    }\n+\n+\n+    private void doTestTEHeaderInvalid(String headerValue, boolean badRequest) throws Exception {\n         Tomcat tomcat = getTomcatInstance();\n \n         // No file system docBase required\n@@ -1902,7 +1908,11 @@ public class TestHttp11Processor extends TomcatBaseTest {\n         client.connect();\n         client.processRequest(false);\n \n-        Assert.assertTrue(client.isResponse501());\n+        if (badRequest) {\n+            Assert.assertTrue(client.isResponse400());\n+        } else {\n+            Assert.assertTrue(client.isResponse501());\n+        }\n     }\n \n \n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "19d11556d0db99df291df33605f137976d152475", "source_date": "Tue Jun 8 11:47:07 2021 +0100", "source_tag": "10.0.7", "target_commit": "a2c3dc4c96168743ac0bab613709a5bbdaec41d0", "target_date": "Tue Jun 8 11:47:41 2021 +0100", "target_tag": "9.0.47", "FAIL TO PASS": ["testTEHeaderChunkedNotLast01"], "PASS TO PASS": ["testRequestBodySwallowing", "testBug57621a", "testTEHeaderUnknown06", "testWithTEChunkedHttp10", "testBug53677b", "testMultipleHostHeader01", "testInconsistentHostHeader03", "testPipelining", "testTEHeaderUnknown04", "testWithTEChunkedWithCL", "testMultipleHostHeader02", "testInconsistentHostHeader06", "testKeepAliveHeader09", "testTEHeaderUnknown02", "testKeepAliveHeader04", "testTEHeaderUnknown05", "testTEHeaderUnknown03", "testSlowUploadTimeoutWithLongerUploadTimeout", "testTEHeaderUnknown07", "testBug53677a", "testMissingHostHeader", "testKeepAliveHeader08", "testKeepAliveHeader05", "testBlankHostHeader01", "testChunking11NoContentLength", "testKeepAliveHeader02", "testInconsistentHostHeader02", "testWithTEVoid", "testKeepAliveHeader01", "testNon2xxResponseWithExpectation", "testKeepAliveHeader12", "testKeepAliveHeader07", "testBug57621b", "testBlankHostHeader02", "testWithTEBuffered", "testConsistentHostHeader01", "testNoChunking11NoContentLengthConnectionClose", "testInconsistentHostHeader04", "testWithUnknownExpectation", "testBug59310", "testInconsistentHostHeader01", "testKeepAliveHeader11", "testPipeliningBug64974", "testWithTEUnsupported", "testSlowUploadTimeoutWithoutLongerUploadTimeout", "testWithTEChunked", "testBug55772", "testKeepAliveHeader06", "testBug61086", "testKeepAliveHeader03", "testWithTESavedRequest", "testInconsistentHostHeader05", "testConsistentHostHeader02", "testConsistentHostHeader03", "testKeepAliveHeader10", "testTEHeaderUnknown01", "testResponseWithErrorChunked", "testNon2xxResponseWithoutExpectation"]}
{"ecosystem": "maven", "repo": "tomcat", "instance_id": "tomcat_834", "original_commit_message": "Fix BZ 64467. Improve performance of closing idle streams", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/java/org/apache/coyote/http2/Http2UpgradeHandler.java b/java/org/apache/coyote/http2/Http2UpgradeHandler.java\nindex e0feae7c4c..f50601bb6d 100644\n--- a/java/org/apache/coyote/http2/Http2UpgradeHandler.java\n+++ b/java/org/apache/coyote/http2/Http2UpgradeHandler.java\n@@ -1473,11 +1473,11 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH\n     }\n \n \n-    private void closeIdleStreams(int newMaxActiveRemoteStreamId) throws Http2Exception {\n-        for (int i = maxActiveRemoteStreamId + 2; i < newMaxActiveRemoteStreamId; i += 2) {\n-            Stream stream = getStream(i, false);\n-            if (stream != null) {\n-                stream.closeIfIdle();\n+    private void closeIdleStreams(int newMaxActiveRemoteStreamId) {\n+        for (Entry<Integer,Stream> entry : streams.entrySet()) {\n+            if (entry.getKey().intValue() > maxActiveRemoteStreamId &&\n+                    entry.getKey().intValue() < newMaxActiveRemoteStreamId) {\n+                entry.getValue().closeIfIdle();\n             }\n         }\n         maxActiveRemoteStreamId = newMaxActiveRemoteStreamId;\n\n\n</patch>\n<test_patch>\ndiff --git a/test/org/apache/coyote/http2/TestHttp2Section_5_1.java b/test/org/apache/coyote/http2/TestHttp2Section_5_1.java\nindex 2a466814e1..f878653ecf 100644\n--- a/test/org/apache/coyote/http2/TestHttp2Section_5_1.java\n+++ b/test/org/apache/coyote/http2/TestHttp2Section_5_1.java\n@@ -147,21 +147,44 @@ public class TestHttp2Section_5_1 extends Http2TestBase {\n \n     @Test\n     public void testImplicitClose() throws Exception {\n+        doTestImplicitClose(5);\n+    }\n+\n+\n+    // https://bz.apache.org/bugzilla/show_bug.cgi?id=64467\n+    @Test\n+    public void testImplicitCloseLargeId() throws Exception {\n+        doTestImplicitClose(Integer.MAX_VALUE - 8);\n+    }\n+\n+\n+    private void doTestImplicitClose(int lastStreamId) throws Exception {\n+\n+        long startFirst = System.nanoTime();\n         http2Connect();\n+        long durationFirst = System.nanoTime() - startFirst;\n \n         sendPriority(3, 0, 16);\n-        sendPriority(5, 0, 16);\n+        sendPriority(lastStreamId, 0, 16);\n \n-        sendSimpleGetRequest(5);\n+        long startSecond = System.nanoTime();\n+        sendSimpleGetRequest(lastStreamId);\n         readSimpleGetResponse();\n-        Assert.assertEquals(getSimpleResponseTrace(5), output.getTrace());\n+        long durationSecond = System.nanoTime() - startSecond;\n+\n+        Assert.assertEquals(getSimpleResponseTrace(lastStreamId), output.getTrace());\n         output.clearTrace();\n \n+        // Allow second request to take up to 5 times first request or up to 1 second - whichever is the larger - mainly\n+        // to allow for CI systems under load that can exhibit significant timing variation.\n+        Assert.assertTrue(\"First request took [\" + durationFirst/1000000 + \"ms], second request took [\" +\n+                durationSecond/1000000 + \"ms]\", durationSecond < 1000000000 || durationSecond < durationFirst * 3);\n+\n         // Should trigger an error since stream 3 should have been implicitly\n         // closed.\n         sendSimpleGetRequest(3);\n \n-        handleGoAwayResponse(5);\n+        handleGoAwayResponse(lastStreamId);\n     }\n \n \n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "9434a44d3449d620b1be70206819f8275b4a7509", "source_date": "Fri May 22 11:27:49 2020 +0100", "source_tag": "10.0.0", "target_commit": "c8acd2ab7371e39aeca7c306f3b5380f00afe552", "target_date": "Fri May 22 11:41:14 2020 +0100", "target_tag": "8.5.56", "FAIL TO PASS": ["testImplicitCloseLargeId"], "PASS TO PASS": ["testExceedMaxActiveStreams", "testClosedInvalidFrame01", "testIdleStateInvalidFrame02", "testClosedInvalidFrame02", "halfClosedRemoteInvalidFrame", "testIdleStateInvalidFrame01", "testClientSendEvenStream", "testImplicitClose", "testErrorOnWaitingStream", "testClientSendOldStream"]}
{"ecosystem": "maven", "repo": "tomcat", "instance_id": "tomcat_835", "original_commit_message": "Fix BZ 64467. Improve performance of closing idle streams", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/java/org/apache/coyote/http2/Http2UpgradeHandler.java b/java/org/apache/coyote/http2/Http2UpgradeHandler.java\nindex e0feae7c4c..f50601bb6d 100644\n--- a/java/org/apache/coyote/http2/Http2UpgradeHandler.java\n+++ b/java/org/apache/coyote/http2/Http2UpgradeHandler.java\n@@ -1473,11 +1473,11 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH\n     }\n \n \n-    private void closeIdleStreams(int newMaxActiveRemoteStreamId) throws Http2Exception {\n-        for (int i = maxActiveRemoteStreamId + 2; i < newMaxActiveRemoteStreamId; i += 2) {\n-            Stream stream = getStream(i, false);\n-            if (stream != null) {\n-                stream.closeIfIdle();\n+    private void closeIdleStreams(int newMaxActiveRemoteStreamId) {\n+        for (Entry<Integer,Stream> entry : streams.entrySet()) {\n+            if (entry.getKey().intValue() > maxActiveRemoteStreamId &&\n+                    entry.getKey().intValue() < newMaxActiveRemoteStreamId) {\n+                entry.getValue().closeIfIdle();\n             }\n         }\n         maxActiveRemoteStreamId = newMaxActiveRemoteStreamId;\n\n\n</patch>\n<test_patch>\ndiff --git a/test/org/apache/coyote/http2/TestHttp2Section_5_1.java b/test/org/apache/coyote/http2/TestHttp2Section_5_1.java\nindex 2a466814e1..f878653ecf 100644\n--- a/test/org/apache/coyote/http2/TestHttp2Section_5_1.java\n+++ b/test/org/apache/coyote/http2/TestHttp2Section_5_1.java\n@@ -147,21 +147,44 @@ public class TestHttp2Section_5_1 extends Http2TestBase {\n \n     @Test\n     public void testImplicitClose() throws Exception {\n+        doTestImplicitClose(5);\n+    }\n+\n+\n+    // https://bz.apache.org/bugzilla/show_bug.cgi?id=64467\n+    @Test\n+    public void testImplicitCloseLargeId() throws Exception {\n+        doTestImplicitClose(Integer.MAX_VALUE - 8);\n+    }\n+\n+\n+    private void doTestImplicitClose(int lastStreamId) throws Exception {\n+\n+        long startFirst = System.nanoTime();\n         http2Connect();\n+        long durationFirst = System.nanoTime() - startFirst;\n \n         sendPriority(3, 0, 16);\n-        sendPriority(5, 0, 16);\n+        sendPriority(lastStreamId, 0, 16);\n \n-        sendSimpleGetRequest(5);\n+        long startSecond = System.nanoTime();\n+        sendSimpleGetRequest(lastStreamId);\n         readSimpleGetResponse();\n-        Assert.assertEquals(getSimpleResponseTrace(5), output.getTrace());\n+        long durationSecond = System.nanoTime() - startSecond;\n+\n+        Assert.assertEquals(getSimpleResponseTrace(lastStreamId), output.getTrace());\n         output.clearTrace();\n \n+        // Allow second request to take up to 5 times first request or up to 1 second - whichever is the larger - mainly\n+        // to allow for CI systems under load that can exhibit significant timing variation.\n+        Assert.assertTrue(\"First request took [\" + durationFirst/1000000 + \"ms], second request took [\" +\n+                durationSecond/1000000 + \"ms]\", durationSecond < 1000000000 || durationSecond < durationFirst * 3);\n+\n         // Should trigger an error since stream 3 should have been implicitly\n         // closed.\n         sendSimpleGetRequest(3);\n \n-        handleGoAwayResponse(5);\n+        handleGoAwayResponse(lastStreamId);\n     }\n \n \n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "9434a44d3449d620b1be70206819f8275b4a7509", "source_date": "Fri May 22 11:27:49 2020 +0100", "source_tag": "10.0.0", "target_commit": "9a0231683a77e2957cea0fdee88b193b30b0c976", "target_date": "Fri May 22 11:40:44 2020 +0100", "target_tag": "9.0.36", "FAIL TO PASS": ["testImplicitCloseLargeId[0]"], "PASS TO PASS": ["testErrorOnWaitingStream[0]", "halfClosedRemoteInvalidFrame[0]", "testClosedInvalidFrame01[0]", "testIdleStateInvalidFrame02[0]", "testImplicitClose[0]", "testIdleStateInvalidFrame01[0]", "testClientSendEvenStream[0]", "testExceedMaxActiveStreams[0]", "testClosedInvalidFrame02[0]", "testClientSendOldStream[0]"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_324", "original_commit_message": "Fix a security issue in the auth system. Disclosure and new release forthcoming.\ngit-svn-id: http://code.djangoproject.com/svn/django/branches/releases/1.2.X@15034 bcc190cf-cafb-0310-a4f2-bffc1f526a37", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/contrib/auth/urls.py b/django/contrib/auth/urls.py\nindex 4f8a102e66..42b4e8f212 100644\n--- a/django/contrib/auth/urls.py\n+++ b/django/contrib/auth/urls.py\n@@ -1,4 +1,4 @@\n-# These URLs are normally mapped to /admin/urls.py. This URLs file is \n+# These URLs are normally mapped to /admin/urls.py. This URLs file is\n # provided as a convenience to those who want to deploy these URLs elsewhere.\n # This file is also used to provide a reliable view deployment for test purposes.\n \n@@ -11,7 +11,7 @@ urlpatterns = patterns('',\n     (r'^password_change/done/$', 'django.contrib.auth.views.password_change_done'),\n     (r'^password_reset/$', 'django.contrib.auth.views.password_reset'),\n     (r'^password_reset/done/$', 'django.contrib.auth.views.password_reset_done'),\n-    (r'^reset/(?P<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$', 'django.contrib.auth.views.password_reset_confirm'),\n+    (r'^reset/(?P<uidb36>[0-9A-Za-z]{1,13})-(?P<token>[0-9A-Za-z]{1,13}-[0-9A-Za-z]{1,20})/$', 'django.contrib.auth.views.password_reset_confirm'),\n     (r'^reset/done/$', 'django.contrib.auth.views.password_reset_complete'),\n )\n \n\ndiff --git a/django/utils/http.py b/django/utils/http.py\nindex f0b1af9c58..2fb60078e5 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -73,8 +73,13 @@ def http_date(epoch_seconds=None):\n \n def base36_to_int(s):\n     \"\"\"\n-    Convertd a base 36 string to an integer\n+    Converts a base 36 string to an ``int``. To prevent\n+    overconsumption of server resources, raises ``ValueError` if the\n+    input is longer than 13 base36 digits (13 digits is sufficient to\n+    base36-encode any 64-bit integer).\n     \"\"\"\n+    if len(s) > 13:\n+        raise ValueError(\"Base36 input too large\")\n     return int(s, 36)\n \n def int_to_base36(i):\n\n</patch>\n<test_patch>\ndiff --git a/django/contrib/auth/tests/tokens.py b/django/contrib/auth/tests/tokens.py\nindex e9e90493be..9211e062f1 100644\n--- a/django/contrib/auth/tests/tokens.py\n+++ b/django/contrib/auth/tests/tokens.py\n@@ -50,3 +50,14 @@ class TokenGeneratorTest(TestCase):\n \n         p2 = Mocked(date.today() + timedelta(settings.PASSWORD_RESET_TIMEOUT_DAYS + 1))\n         self.assertFalse(p2.check_token(user, tk1))\n+\n+    def test_date_length(self):\n+        \"\"\"\n+        Make sure we don't allow overly long dates, causing a potential DoS.\n+        \"\"\"\n+        user = User.objects.create_user('ima1337h4x0r', 'test4@example.com', 'p4ssw0rd')\n+        p0 = PasswordResetTokenGenerator()\n+\n+        # This will put a 14-digit base36 timestamp into the token, which is too large.\n+        tk1 = p0._make_token_with_timestamp(user, 175455491841851871349)\n+        self.assertFalse(p0.check_token(user, tk1))\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "d5d8942a160685c403d381a279e72e09de5489a9", "source_date": "Thu Dec 23 03:46:37 2010 +0000", "source_tag": "1.2.4", "target_commit": "7f8dd9cbac074389af8d8fd235bf2cb657227b9a", "target_date": "Thu Dec 23 03:47:58 2010 +0000", "target_tag": "1.1.3", "FAIL TO PASS": ["Doctest: django.contrib.auth.tests.__test__.TOKEN_GENERATOR_TESTS"], "PASS TO PASS": ["django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_known_user", "Doctest: django.contrib.auth.tests.__test__.BASIC_TESTS", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_complete", "Logout with custom query string redirects to specified resource", "Logout with query string redirects to specified resource", "Logout without next_page option renders the default template", "django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_unknown_user", "django.contrib.auth.tests.views.ChangePasswordTest.No json fixture 'initial_data' in '/djtest_password_change_fails_with_invalid_old_password", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_invalid", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_different_passwords", "django.contrib.auth.tests.views.LoginTest.test_security_check", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_invalid_post", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_last_login", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_fails_with_mismatched_passwords", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_no_remote_user", "Email is sent if a valid email address is provided for password reset", "django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_no_remote_user", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_last_login", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_unknown_user", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_no_remote_user", "django.contrib.auth.tests.views.LoginTest.test_current_site_in_context_after_login", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_valid", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_known_user", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_known_user", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_unknown_user", "Doctest: django.contrib.auth.tests.__test__.FORM_TESTS", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_succeeds", "Error is raised if the provided email address isn't currently registered", "django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_last_login", "Logout with next_page option given redirects to specified resource"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_330", "original_commit_message": "[4.0.x] Fixed CVE-2021-45116 -- Fixed potential information disclosure in dictsort template filter.\nThanks to Dennis Brinkrolf for the report.\nCo-authored-by: Adam Johnson <me@adamj.eu>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 5ccef38048..aaa55f39c4 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -22,7 +22,7 @@ from django.utils.text import (\n from django.utils.timesince import timesince, timeuntil\n from django.utils.translation import gettext, ngettext\n \n-from .base import Variable, VariableDoesNotExist\n+from .base import VARIABLE_ATTRIBUTE_SEPARATOR\n from .library import Library\n \n register = Library()\n@@ -503,7 +503,7 @@ def striptags(value):\n def _property_resolver(arg):\n     \"\"\"\n     When arg is convertible to float, behave like operator.itemgetter(arg)\n-    Otherwise, behave like Variable(arg).resolve\n+    Otherwise, chain __getitem__() and getattr().\n \n     >>> _property_resolver(1)('abc')\n     'b'\n@@ -521,7 +521,19 @@ def _property_resolver(arg):\n     try:\n         float(arg)\n     except ValueError:\n-        return Variable(arg).resolve\n+        if VARIABLE_ATTRIBUTE_SEPARATOR + '_' in arg or arg[0] == '_':\n+            raise AttributeError('Access to private variables is forbidden.')\n+        parts = arg.split(VARIABLE_ATTRIBUTE_SEPARATOR)\n+\n+        def resolve(value):\n+            for part in parts:\n+                try:\n+                    value = value[part]\n+                except (AttributeError, IndexError, KeyError, TypeError, ValueError):\n+                    value = getattr(value, part)\n+            return value\n+\n+        return resolve\n     else:\n         return itemgetter(arg)\n \n@@ -534,7 +546,7 @@ def dictsort(value, arg):\n     \"\"\"\n     try:\n         return sorted(value, key=_property_resolver(arg))\n-    except (TypeError, VariableDoesNotExist):\n+    except (AttributeError, TypeError):\n         return ''\n \n \n@@ -546,7 +558,7 @@ def dictsortreversed(value, arg):\n     \"\"\"\n     try:\n         return sorted(value, key=_property_resolver(arg), reverse=True)\n-    except (TypeError, VariableDoesNotExist):\n+    except (AttributeError, TypeError):\n         return ''\n \n \n\n\n</patch>\n<test_patch>\ndiff --git a/tests/template_tests/filter_tests/test_dictsort.py b/tests/template_tests/filter_tests/test_dictsort.py\nindex 00c2bd42cb..3de247fd86 100644\n--- a/tests/template_tests/filter_tests/test_dictsort.py\n+++ b/tests/template_tests/filter_tests/test_dictsort.py\n@@ -1,9 +1,58 @@\n-from django.template.defaultfilters import dictsort\n+from django.template.defaultfilters import _property_resolver, dictsort\n from django.test import SimpleTestCase\n \n \n+class User:\n+    password = 'abc'\n+\n+    _private = 'private'\n+\n+    @property\n+    def test_property(self):\n+        return 'cde'\n+\n+    def test_method(self):\n+        \"\"\"This is just a test method.\"\"\"\n+\n+\n class FunctionTests(SimpleTestCase):\n \n+    def test_property_resolver(self):\n+        user = User()\n+        dict_data = {'a': {\n+            'b1': {'c': 'result1'},\n+            'b2': user,\n+            'b3': {'0': 'result2'},\n+            'b4': [0, 1, 2],\n+        }}\n+        list_data = ['a', 'b', 'c']\n+        tests = [\n+            ('a.b1.c', dict_data, 'result1'),\n+            ('a.b2.password', dict_data, 'abc'),\n+            ('a.b2.test_property', dict_data, 'cde'),\n+            # The method should not get called.\n+            ('a.b2.test_method', dict_data, user.test_method),\n+            ('a.b3.0', dict_data, 'result2'),\n+            (0, list_data, 'a'),\n+        ]\n+        for arg, data, expected_value in tests:\n+            with self.subTest(arg=arg):\n+                self.assertEqual(_property_resolver(arg)(data), expected_value)\n+        # Invalid lookups.\n+        fail_tests = [\n+            ('a.b1.d', dict_data, AttributeError),\n+            ('a.b2.password.0', dict_data, AttributeError),\n+            ('a.b2._private', dict_data, AttributeError),\n+            ('a.b4.0', dict_data, AttributeError),\n+            ('a', list_data, AttributeError),\n+            ('0', list_data, TypeError),\n+            (4, list_data, IndexError),\n+        ]\n+        for arg, data, expected_exception in fail_tests:\n+            with self.subTest(arg=arg):\n+                with self.assertRaises(expected_exception):\n+                    _property_resolver(arg)(data)\n+\n     def test_sort(self):\n         sorted_dicts = dictsort(\n             [{'age': 23, 'name': 'Barbara-Ann'},\n@@ -21,7 +70,7 @@ class FunctionTests(SimpleTestCase):\n \n     def test_dictsort_complex_sorting_key(self):\n         \"\"\"\n-        Since dictsort uses template.Variable under the hood, it can sort\n+        Since dictsort uses dict.get()/getattr() under the hood, it can sort\n         on keys like 'foo.bar'.\n         \"\"\"\n         data = [\n@@ -60,3 +109,9 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(dictsort('Hello!', 'age'), '')\n         self.assertEqual(dictsort({'a': 1}, 'age'), '')\n         self.assertEqual(dictsort(1, 'age'), '')\n+\n+    def test_invalid_args(self):\n+        \"\"\"Fail silently if invalid lookups are passed.\"\"\"\n+        self.assertEqual(dictsort([{}], '._private'), '')\n+        self.assertEqual(dictsort([{'_private': 'test'}], '_private'), '')\n+        self.assertEqual(dictsort([{'nested': {'_private': 'test'}}], 'nested._private'), '')\n\ndiff --git a/tests/template_tests/filter_tests/test_dictsortreversed.py b/tests/template_tests/filter_tests/test_dictsortreversed.py\nindex ada199e127..e2e24e3128 100644\n--- a/tests/template_tests/filter_tests/test_dictsortreversed.py\n+++ b/tests/template_tests/filter_tests/test_dictsortreversed.py\n@@ -46,3 +46,9 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(dictsortreversed('Hello!', 'age'), '')\n         self.assertEqual(dictsortreversed({'a': 1}, 'age'), '')\n         self.assertEqual(dictsortreversed(1, 'age'), '')\n+\n+    def test_invalid_args(self):\n+        \"\"\"Fail silently if invalid lookups are passed.\"\"\"\n+        self.assertEqual(dictsortreversed([{}], '._private'), '')\n+        self.assertEqual(dictsortreversed([{'_private': 'test'}], '_private'), '')\n+        self.assertEqual(dictsortreversed([{'nested': {'_private': 'test'}}], 'nested._private'), '')\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "2a8ec7f546d6d5806e221ec948c5146b55bd7489", "source_date": "Tue Jan 4 10:10:14 2022 +0100", "source_tag": "4.0.1", "target_commit": "c9f648ccfac5ab90fb2829a66da4f77e68c7f93a", "target_date": "Tue Jan 4 10:20:31 2022 +0100", "target_tag": "2.2.26", "FAIL TO PASS": ["template_tests.filter_tests.test_dictsort.FunctionTests.test_invalid_args", "template_tests.filter_tests.test_dictsortreversed.FunctionTests.test_invalid_args", "template_tests.filter_tests.test_dictsort.FunctionTests.test_property_resolver"], "PASS TO PASS": ["template_tests.filter_tests.test_dictsort.FunctionTests.test_dictsort_complex_sorting_key", "template_tests.filter_tests.test_dictsortreversed.FunctionTests.test_sort_list_of_tuples", "template_tests.filter_tests.test_dictsortreversed.FunctionTests.test_sort_list_of_tuple_like_dicts", "template_tests.filter_tests.test_dictsort.FunctionTests.test_sort_list_of_tuple_like_dicts", "template_tests.filter_tests.test_dictsortreversed.FunctionTests.test_invalid_values", "template_tests.filter_tests.test_dictsort.FunctionTests.test_invalid_values", "template_tests.filter_tests.test_dictsort.FunctionTests.test_sort", "template_tests.filter_tests.test_dictsortreversed.FunctionTests.test_sort", "template_tests.filter_tests.test_dictsort.FunctionTests.test_sort_list_of_tuples"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_331", "original_commit_message": "[4.0.x] Fixed CVE-2021-45116 -- Fixed potential information disclosure in dictsort template filter.\nThanks to Dennis Brinkrolf for the report.\nCo-authored-by: Adam Johnson <me@adamj.eu>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 5ccef38048..aaa55f39c4 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -22,7 +22,7 @@ from django.utils.text import (\n from django.utils.timesince import timesince, timeuntil\n from django.utils.translation import gettext, ngettext\n \n-from .base import Variable, VariableDoesNotExist\n+from .base import VARIABLE_ATTRIBUTE_SEPARATOR\n from .library import Library\n \n register = Library()\n@@ -503,7 +503,7 @@ def striptags(value):\n def _property_resolver(arg):\n     \"\"\"\n     When arg is convertible to float, behave like operator.itemgetter(arg)\n-    Otherwise, behave like Variable(arg).resolve\n+    Otherwise, chain __getitem__() and getattr().\n \n     >>> _property_resolver(1)('abc')\n     'b'\n@@ -521,7 +521,19 @@ def _property_resolver(arg):\n     try:\n         float(arg)\n     except ValueError:\n-        return Variable(arg).resolve\n+        if VARIABLE_ATTRIBUTE_SEPARATOR + '_' in arg or arg[0] == '_':\n+            raise AttributeError('Access to private variables is forbidden.')\n+        parts = arg.split(VARIABLE_ATTRIBUTE_SEPARATOR)\n+\n+        def resolve(value):\n+            for part in parts:\n+                try:\n+                    value = value[part]\n+                except (AttributeError, IndexError, KeyError, TypeError, ValueError):\n+                    value = getattr(value, part)\n+            return value\n+\n+        return resolve\n     else:\n         return itemgetter(arg)\n \n@@ -534,7 +546,7 @@ def dictsort(value, arg):\n     \"\"\"\n     try:\n         return sorted(value, key=_property_resolver(arg))\n-    except (TypeError, VariableDoesNotExist):\n+    except (AttributeError, TypeError):\n         return ''\n \n \n@@ -546,7 +558,7 @@ def dictsortreversed(value, arg):\n     \"\"\"\n     try:\n         return sorted(value, key=_property_resolver(arg), reverse=True)\n-    except (TypeError, VariableDoesNotExist):\n+    except (AttributeError, TypeError):\n         return ''\n \n \n\n\n</patch>\n<test_patch>\ndiff --git a/tests/template_tests/filter_tests/test_dictsort.py b/tests/template_tests/filter_tests/test_dictsort.py\nindex 00c2bd42cb..3de247fd86 100644\n--- a/tests/template_tests/filter_tests/test_dictsort.py\n+++ b/tests/template_tests/filter_tests/test_dictsort.py\n@@ -1,9 +1,58 @@\n-from django.template.defaultfilters import dictsort\n+from django.template.defaultfilters import _property_resolver, dictsort\n from django.test import SimpleTestCase\n \n \n+class User:\n+    password = 'abc'\n+\n+    _private = 'private'\n+\n+    @property\n+    def test_property(self):\n+        return 'cde'\n+\n+    def test_method(self):\n+        \"\"\"This is just a test method.\"\"\"\n+\n+\n class FunctionTests(SimpleTestCase):\n \n+    def test_property_resolver(self):\n+        user = User()\n+        dict_data = {'a': {\n+            'b1': {'c': 'result1'},\n+            'b2': user,\n+            'b3': {'0': 'result2'},\n+            'b4': [0, 1, 2],\n+        }}\n+        list_data = ['a', 'b', 'c']\n+        tests = [\n+            ('a.b1.c', dict_data, 'result1'),\n+            ('a.b2.password', dict_data, 'abc'),\n+            ('a.b2.test_property', dict_data, 'cde'),\n+            # The method should not get called.\n+            ('a.b2.test_method', dict_data, user.test_method),\n+            ('a.b3.0', dict_data, 'result2'),\n+            (0, list_data, 'a'),\n+        ]\n+        for arg, data, expected_value in tests:\n+            with self.subTest(arg=arg):\n+                self.assertEqual(_property_resolver(arg)(data), expected_value)\n+        # Invalid lookups.\n+        fail_tests = [\n+            ('a.b1.d', dict_data, AttributeError),\n+            ('a.b2.password.0', dict_data, AttributeError),\n+            ('a.b2._private', dict_data, AttributeError),\n+            ('a.b4.0', dict_data, AttributeError),\n+            ('a', list_data, AttributeError),\n+            ('0', list_data, TypeError),\n+            (4, list_data, IndexError),\n+        ]\n+        for arg, data, expected_exception in fail_tests:\n+            with self.subTest(arg=arg):\n+                with self.assertRaises(expected_exception):\n+                    _property_resolver(arg)(data)\n+\n     def test_sort(self):\n         sorted_dicts = dictsort(\n             [{'age': 23, 'name': 'Barbara-Ann'},\n@@ -21,7 +70,7 @@ class FunctionTests(SimpleTestCase):\n \n     def test_dictsort_complex_sorting_key(self):\n         \"\"\"\n-        Since dictsort uses template.Variable under the hood, it can sort\n+        Since dictsort uses dict.get()/getattr() under the hood, it can sort\n         on keys like 'foo.bar'.\n         \"\"\"\n         data = [\n@@ -60,3 +109,9 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(dictsort('Hello!', 'age'), '')\n         self.assertEqual(dictsort({'a': 1}, 'age'), '')\n         self.assertEqual(dictsort(1, 'age'), '')\n+\n+    def test_invalid_args(self):\n+        \"\"\"Fail silently if invalid lookups are passed.\"\"\"\n+        self.assertEqual(dictsort([{}], '._private'), '')\n+        self.assertEqual(dictsort([{'_private': 'test'}], '_private'), '')\n+        self.assertEqual(dictsort([{'nested': {'_private': 'test'}}], 'nested._private'), '')\n\ndiff --git a/tests/template_tests/filter_tests/test_dictsortreversed.py b/tests/template_tests/filter_tests/test_dictsortreversed.py\nindex ada199e127..e2e24e3128 100644\n--- a/tests/template_tests/filter_tests/test_dictsortreversed.py\n+++ b/tests/template_tests/filter_tests/test_dictsortreversed.py\n@@ -46,3 +46,9 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(dictsortreversed('Hello!', 'age'), '')\n         self.assertEqual(dictsortreversed({'a': 1}, 'age'), '')\n         self.assertEqual(dictsortreversed(1, 'age'), '')\n+\n+    def test_invalid_args(self):\n+        \"\"\"Fail silently if invalid lookups are passed.\"\"\"\n+        self.assertEqual(dictsortreversed([{}], '._private'), '')\n+        self.assertEqual(dictsortreversed([{'_private': 'test'}], '_private'), '')\n+        self.assertEqual(dictsortreversed([{'nested': {'_private': 'test'}}], 'nested._private'), '')\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "2a8ec7f546d6d5806e221ec948c5146b55bd7489", "source_date": "Tue Jan 4 10:10:14 2022 +0100", "source_tag": "4.0.1", "target_commit": "c7fe895bca06daf12cc1670b56eaf72a1ef27a16", "target_date": "Tue Jan 4 10:19:49 2022 +0100", "target_tag": "3.2.11", "FAIL TO PASS": ["template_tests.filter_tests.test_dictsortreversed.FunctionTests.test_invalid_args", "template_tests.filter_tests.test_dictsort.FunctionTests.test_invalid_args", "Fail silently if invalid lookups are passed.", "template_tests.filter_tests.test_dictsort.FunctionTests.test_property_resolver"], "PASS TO PASS": ["Since dictsort uses dict.get()/getattr() under the hood, it can sort", "template_tests.filter_tests.test_dictsortreversed.FunctionTests.test_sort_list_of_tuples", "template_tests.filter_tests.test_dictsortreversed.FunctionTests.test_sort_list_of_tuple_like_dicts", "template_tests.filter_tests.test_dictsort.FunctionTests.test_sort_list_of_tuple_like_dicts", "template_tests.filter_tests.test_dictsortreversed.FunctionTests.test_sort", "If dictsort is passed something other than a list of dictionaries,", "template_tests.filter_tests.test_dictsort.FunctionTests.test_sort_list_of_tuples", "If dictsortreversed is passed something other than a list of"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_339", "original_commit_message": "[1.2.X] Fixed security issue in AdminFileWidget. Disclosure and release forthcoming.\ngit-svn-id: http://code.djangoproject.com/svn/django/branches/releases/1.2.X@15471 bcc190cf-cafb-0310-a4f2-bffc1f526a37", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/contrib/admin/widgets.py b/django/contrib/admin/widgets.py\nindex 516869f1ef..472f69dcf0 100644\n--- a/django/contrib/admin/widgets.py\n+++ b/django/contrib/admin/widgets.py\n@@ -96,7 +96,7 @@ class AdminFileWidget(forms.FileInput):\n         output = []\n         if value and hasattr(value, \"url\"):\n             output.append('%s <a target=\"_blank\" href=\"%s\">%s</a> <br />%s ' % \\\n-                (_('Currently:'), value.url, value, _('Change:')))\n+                (_('Currently:'), escape(value.url), escape(value), _('Change:')))\n         output.append(super(AdminFileWidget, self).render(name, value, attrs))\n         return mark_safe(u''.join(output))\n \n\n\n</patch>\n<test_patch>\ndiff --git a/tests/regressiontests/admin_widgets/tests.py b/tests/regressiontests/admin_widgets/tests.py\nindex e43ab83e9d..cf3f965c14 100644\n--- a/tests/regressiontests/admin_widgets/tests.py\n+++ b/tests/regressiontests/admin_widgets/tests.py\n@@ -239,6 +239,22 @@ class AdminFileWidgetTest(DjangoTestCase):\n             '<input type=\"file\" name=\"test\" />',\n         )\n \n+    def test_render_escapes_html(self):\n+        class StrangeFieldFile(object):\n+            url = \"something?chapter=1&sect=2&copy=3&lang=en\"\n+\n+            def __unicode__(self):\n+                return u'''something<div onclick=\"alert('oops')\">.jpg'''\n+\n+        widget = AdminFileWidget()\n+        field = StrangeFieldFile()\n+        output = widget.render('myfile', field)\n+        self.assertFalse(field.url in output)\n+        self.assertTrue(u'href=\"something?chapter=1&amp;sect=2&amp;copy=3&amp;lang=en\"' in output)\n+        self.assertFalse(unicode(field) in output)\n+        self.assertTrue(u'something&lt;div onclick=&quot;alert(&#39;oops&#39;)&quot;&gt;.jpg' in output)\n+\n+\n \n class ForeignKeyRawIdWidgetTest(DjangoTestCase):\n     def test_render(self):\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "1f814a9547842dcfabdae09573055984af9d3fab", "source_date": "Wed Feb 9 02:44:16 2011 +0000", "source_tag": "1.2.5", "target_commit": "1966786d2dde73e17f39cf340eb33fcb5d73904e", "target_date": "Wed Feb 9 02:48:48 2011 +0000", "target_tag": "1.1.4", "FAIL TO PASS": ["regressiontests.admin_widgets.tests.AdminFileWidgetTest.Trying '/django/tests/regressiontests/atest_render_escapes_html", "regressiontests.admin_widgets.tests.AdminFileWidgetTest.test_render_escapes_html"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "keystone", "instance_id": "keystone_341", "original_commit_message": "Adds a whitelist for endpoint catalog substitution\nChange-Id: If02327d70d0143d805969fe927898f08eb84c4c2\nCloses-Bug: #1354208", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/keystone/catalog/core.py b/keystone/catalog/core.py\nindex b910389df..a8fbc9543 100644\n--- a/keystone/catalog/core.py\n+++ b/keystone/catalog/core.py\n@@ -23,6 +23,7 @@ from keystone.common import cache\n from keystone.common import dependency\n from keystone.common import driver_hints\n from keystone.common import manager\n+from keystone.common import utils\n from keystone import config\n from keystone import exception\n from keystone.i18n import _\n@@ -46,6 +47,9 @@ def format_url(url, substitutions):\n     :returns: a formatted URL\n \n     \"\"\"\n+    substitutions = utils.WhiteListedItemFilter(\n+        CONF.catalog.endpoint_substitution_whitelist,\n+        substitutions)\n     try:\n         result = url.replace('$(', '%(') % substitutions\n     except AttributeError:\n\ndiff --git a/keystone/common/config.py b/keystone/common/config.py\nindex 04ec51704..4b06b5395 100644\n--- a/keystone/common/config.py\n+++ b/keystone/common/config.py\n@@ -792,6 +792,17 @@ FILE_OPTIONS = {\n         cfg.IntOpt('list_limit',\n                    help='Maximum number of entities that will be returned '\n                         'in a catalog collection.'),\n+        cfg.ListOpt('endpoint_substitution_whitelist',\n+                    default=['tenant_id', 'user_id', 'public_bind_host',\n+                             'admin_bind_host', 'compute_host', 'compute_port',\n+                             'admin_port', 'public_port', 'public_endpoint',\n+                             'admin_endpoint'],\n+                    help='(Deprecated) List of possible substitutions for use '\n+                         'in formatting endpoints. Use caution when modifying '\n+                         'this list. It will give users with permission to '\n+                         'create endpoints the ability to see those values '\n+                         'in your configuration file. This option will be '\n+                         'removed in Juno.'),\n     ],\n     'kvs': [\n         cfg.ListOpt('backends', default=[],\n\ndiff --git a/keystone/common/utils.py b/keystone/common/utils.py\nindex 4fe97c8a8..cbfd48cc0 100644\n--- a/keystone/common/utils.py\n+++ b/keystone/common/utils.py\n@@ -526,3 +526,15 @@ def make_dirs(path, mode=None, user=None, group=None, log=None):\n             raise EnvironmentError(\"makedirs('%s'): %s\" % (path, exc.strerror))\n \n     set_permissions(path, mode, user, group, log)\n+\n+\n+class WhiteListedItemFilter(object):\n+\n+    def __init__(self, whitelist, data):\n+        self._whitelist = set(whitelist or [])\n+        self._data = data\n+\n+    def __getitem__(self, name):\n+        if name not in self._whitelist:\n+            raise KeyError\n+        return self._data[name]\n\n\n</patch>\n<test_patch>\ndiff --git a/keystone/tests/unit/catalog/test_core.py b/keystone/tests/unit/catalog/test_core.py\nindex 7b142ed98..684e1dc0b 100644\n--- a/keystone/tests/unit/catalog/test_core.py\n+++ b/keystone/tests/unit/catalog/test_core.py\n@@ -10,14 +10,26 @@\n # License for the specific language governing permissions and limitations\n # under the License.\n \n+from oslo.config import fixture as config_fixture\n import testtools\n \n from keystone.catalog import core\n+from keystone import config\n from keystone import exception\n \n \n+CONF = config.CONF\n+\n+\n class FormatUrlTests(testtools.TestCase):\n \n+    def setUp(self):\n+        super(FormatUrlTests, self).setUp()\n+        fixture = self.useFixture(config_fixture.Config(CONF))\n+        fixture.config(\n+            group='catalog',\n+            endpoint_substitution_whitelist=['host', 'port', 'part1', 'part2'])\n+\n     def test_successful_formatting(self):\n         url_template = 'http://%(host)s:%(port)d/%(part1)s/%(part2)s'\n         values = {'host': 'server', 'port': 9090, 'part1': 'A', 'part2': 'B'}\n@@ -53,3 +65,12 @@ class FormatUrlTests(testtools.TestCase):\n \n         _test(None)\n         _test(object())\n+\n+    def test_substitution_with_key_not_whitelisted(self):\n+        url_template = 'http://%(host)s:%(port)d/%(part1)s/%(part2)s/%(part3)s'\n+        values = {'host': 'server', 'port': 9090,\n+                  'part1': 'A', 'part2': 'B', 'part3': 'C'}\n+        self.assertRaises(exception.MalformedEndpoint,\n+                          core.format_url,\n+                          url_template,\n+                          values)\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location & namespace changes", "source_commit": "2989ff257e4fde6a168e25b926805e700406aa80", "source_date": "Tue Sep 16 14:59:15 2014 +0000", "source_tag": "8.0.0", "target_commit": "52714633c9a4dae5e60279217090859aa6dbcb4f", "target_date": "Tue Sep 16 14:59:18 2014 +0000", "target_tag": "2013.2.4", "FAIL TO PASS": ["keystone.tests.unit.catalog.test_core.FormatUrlTests.test_raises_malformed_on_wrong_type", "keystone.tests.unit.catalog.test_core.FormatUrlTests.test_successful_formatting", "keystone.tests.unit.catalog.test_core.FormatUrlTests.test_raises_malformed_on_missing_key", "keystone.tests.unit.catalog.test_core.FormatUrlTests.test_substitution_with_key_not_whitelisted", "keystone.tests.unit.catalog.test_core.FormatUrlTests.test_raises_malformed_on_incomplete_format"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_342", "original_commit_message": "Fixed CVE-2022-36359 -- Escaped filename in Content-Disposition header.\nThanks to Motoyasu Saburi for the report.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/http/response.py b/django/http/response.py\nindex 2bcd549f34..7a0dd688f7 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -575,7 +575,9 @@ class FileResponse(StreamingHttpResponse):\n             disposition = \"attachment\" if self.as_attachment else \"inline\"\n             try:\n                 filename.encode(\"ascii\")\n-                file_expr = 'filename=\"{}\"'.format(filename)\n+                file_expr = 'filename=\"{}\"'.format(\n+                    filename.replace(\"\\\\\", \"\\\\\\\\\").replace('\"', r\"\\\"\")\n+                )\n             except UnicodeEncodeError:\n                 file_expr = \"filename*=utf-8''{}\".format(quote(filename))\n             self.headers[\"Content-Disposition\"] = \"{}; {}\".format(\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex af90b1170d..952fe4dd7c 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -143,6 +143,41 @@ class FileResponseTests(SimpleTestCase):\n                     '%s; filename=\"%s\"' % (header_disposition, header_filename),\n                 )\n \n+    def test_content_disposition_escaping(self):\n+        # fmt: off\n+        tests = [\n+            (\n+                'multi-part-one\";\\\" dummy\".txt',\n+                r\"multi-part-one\\\";\\\" dummy\\\".txt\"\n+            ),\n+        ]\n+        # fmt: on\n+        # Non-escape sequence backslashes are path segments on Windows, and are\n+        # eliminated by an os.path.basename() check in FileResponse.\n+        if sys.platform != \"win32\":\n+            # fmt: off\n+            tests += [\n+                (\n+                    'multi-part-one\\\\\";\\\" dummy\".txt',\n+                    r\"multi-part-one\\\\\\\";\\\" dummy\\\".txt\"\n+                ),\n+                (\n+                    'multi-part-one\\\\\";\\\\\\\" dummy\".txt',\n+                    r\"multi-part-one\\\\\\\";\\\\\\\" dummy\\\".txt\"\n+                )\n+            ]\n+            # fmt: on\n+        for filename, escaped in tests:\n+            with self.subTest(filename=filename, escaped=escaped):\n+                response = FileResponse(\n+                    io.BytesIO(b\"binary content\"), filename=filename, as_attachment=True\n+                )\n+                response.close()\n+                self.assertEqual(\n+                    response.headers[\"Content-Disposition\"],\n+                    f'attachment; filename=\"{escaped}\"',\n+                )\n+\n     def test_content_disposition_buffer(self):\n         response = FileResponse(io.BytesIO(b\"binary content\"))\n         self.assertFalse(response.has_header(\"Content-Disposition\"))\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "bd062445cffd3f6cc6dcd20d13e2abed818fa173", "source_date": "Wed Aug 3 08:46:31 2022 +0200", "source_tag": "4.2", "target_commit": "b7d9529cbe0af4adabb6ea5d01ed8dcce3668fb3", "target_date": "Wed Aug 3 08:48:00 2022 +0200", "target_tag": "4.0.7", "FAIL TO PASS": ["responses.test_fileresponse.FileResponseTests.test_content_disposition_escaping"], "PASS TO PASS": ["If compressed responses are served with the uncompressed Content-Type", "responses.test_fileresponse.FileResponseTests.test_repr", "responses.test_fileresponse.FileResponseTests.test_unicode_attachment", "responses.test_fileresponse.FileResponseTests.test_file_from_disk_response", "responses.test_fileresponse.FileResponseTests.test_file_from_buffer_unnamed_attachment", "responses.test_fileresponse.FileResponseTests.test_file_from_disk_as_attachment", "responses.test_fileresponse.FileResponseTests.test_file_from_named_pipe_response"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_343", "original_commit_message": "Fixed CVE-2022-36359 -- Escaped filename in Content-Disposition header.\nThanks to Motoyasu Saburi for the report.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/http/response.py b/django/http/response.py\nindex 2bcd549f34..7a0dd688f7 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -575,7 +575,9 @@ class FileResponse(StreamingHttpResponse):\n             disposition = \"attachment\" if self.as_attachment else \"inline\"\n             try:\n                 filename.encode(\"ascii\")\n-                file_expr = 'filename=\"{}\"'.format(filename)\n+                file_expr = 'filename=\"{}\"'.format(\n+                    filename.replace(\"\\\\\", \"\\\\\\\\\").replace('\"', r\"\\\"\")\n+                )\n             except UnicodeEncodeError:\n                 file_expr = \"filename*=utf-8''{}\".format(quote(filename))\n             self.headers[\"Content-Disposition\"] = \"{}; {}\".format(\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex af90b1170d..952fe4dd7c 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -143,6 +143,41 @@ class FileResponseTests(SimpleTestCase):\n                     '%s; filename=\"%s\"' % (header_disposition, header_filename),\n                 )\n \n+    def test_content_disposition_escaping(self):\n+        # fmt: off\n+        tests = [\n+            (\n+                'multi-part-one\";\\\" dummy\".txt',\n+                r\"multi-part-one\\\";\\\" dummy\\\".txt\"\n+            ),\n+        ]\n+        # fmt: on\n+        # Non-escape sequence backslashes are path segments on Windows, and are\n+        # eliminated by an os.path.basename() check in FileResponse.\n+        if sys.platform != \"win32\":\n+            # fmt: off\n+            tests += [\n+                (\n+                    'multi-part-one\\\\\";\\\" dummy\".txt',\n+                    r\"multi-part-one\\\\\\\";\\\" dummy\\\".txt\"\n+                ),\n+                (\n+                    'multi-part-one\\\\\";\\\\\\\" dummy\".txt',\n+                    r\"multi-part-one\\\\\\\";\\\\\\\" dummy\\\".txt\"\n+                )\n+            ]\n+            # fmt: on\n+        for filename, escaped in tests:\n+            with self.subTest(filename=filename, escaped=escaped):\n+                response = FileResponse(\n+                    io.BytesIO(b\"binary content\"), filename=filename, as_attachment=True\n+                )\n+                response.close()\n+                self.assertEqual(\n+                    response.headers[\"Content-Disposition\"],\n+                    f'attachment; filename=\"{escaped}\"',\n+                )\n+\n     def test_content_disposition_buffer(self):\n         response = FileResponse(io.BytesIO(b\"binary content\"))\n         self.assertFalse(response.has_header(\"Content-Disposition\"))\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "bd062445cffd3f6cc6dcd20d13e2abed818fa173", "source_date": "Wed Aug 3 08:46:31 2022 +0200", "source_tag": "4.2", "target_commit": "b3e4494d759202a3b6bf247fd34455bf13be5b80", "target_date": "Wed Aug 3 08:48:33 2022 +0200", "target_tag": "3.2.15", "FAIL TO PASS": ["responses.test_fileresponse.FileResponseTests.test_content_disposition_escaping"], "PASS TO PASS": ["System check identified no issues (0 silenced).", "responses.test_fileresponse.FileResponseTests.test_unicode_attachment", "responses.test_fileresponse.FileResponseTests.test_file_from_disk_response", "responses.test_fileresponse.FileResponseTests.test_file_from_buffer_unnamed_attachment", "responses.test_fileresponse.FileResponseTests.test_file_from_disk_as_attachment", "responses.test_fileresponse.FileResponseTests.test_file_from_named_pipe_response"]}
{"ecosystem": "maven", "repo": "tomcat", "instance_id": "tomcat_856", "original_commit_message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=61120\nDo not ignore path parameters when processing HTTP/2 requests.\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1796090 13f79535-47bb-0310-9956-ffa450edef68", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/java/org/apache/coyote/http2/Stream.java b/java/org/apache/coyote/http2/Stream.java\nindex 2e795cc94b..0a0e208f0c 100644\n--- a/java/org/apache/coyote/http2/Stream.java\n+++ b/java/org/apache/coyote/http2/Stream.java\n@@ -18,6 +18,7 @@ package org.apache.coyote.http2;\n \n import java.io.IOException;\n import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n import java.security.AccessController;\n import java.security.PrivilegedActionException;\n import java.security.PrivilegedExceptionAction;\n@@ -299,18 +300,18 @@ class Stream extends AbstractStream implements HeaderEmitter {\n                         getConnectionId(), getIdentifier()));\n             }\n             int queryStart = value.indexOf('?');\n+            String uri;\n             if (queryStart == -1) {\n-                coyoteRequest.requestURI().setString(value);\n-                coyoteRequest.decodedURI().setString(\n-                        coyoteRequest.getURLDecoder().convert(value, false));\n+                uri = value;\n             } else {\n-                String uri = value.substring(0, queryStart);\n+                uri = value.substring(0, queryStart);\n                 String query = value.substring(queryStart + 1);\n-                coyoteRequest.requestURI().setString(uri);\n-                coyoteRequest.decodedURI().setString(\n-                        coyoteRequest.getURLDecoder().convert(uri, false));\n                 coyoteRequest.queryString().setString(query);\n             }\n+            // Bug 61120. Set the URI as bytes rather than String so any path\n+            // parameters are correctly processed\n+            byte[] uriBytes = uri.getBytes(StandardCharsets.ISO_8859_1);\n+            coyoteRequest.requestURI().setBytes(uriBytes, 0, uriBytes.length);\n             break;\n         }\n         case \":authority\": {\n\n\n</patch>\n<test_patch>\ndiff --git a/test/org/apache/coyote/http2/TestStream.java b/test/org/apache/coyote/http2/TestStream.java\nnew file mode 100644\nindex 0000000000..52ff0165d6\n--- /dev/null\n+++ b/test/org/apache/coyote/http2/TestStream.java\n@@ -0,0 +1,97 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.coyote.http2;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import org.apache.catalina.Context;\n+import org.apache.catalina.startup.Tomcat;\n+\n+public class TestStream extends Http2TestBase {\n+\n+    /*\n+     * https://bz.apache.org/bugzilla/show_bug.cgi?id=61120\n+     */\n+    @Test\n+    public void testPathParam() throws Exception {\n+\n+        enableHttp2();\n+\n+        Tomcat tomcat = getTomcatInstance();\n+\n+        Context ctxt = tomcat.addContext(\"\", null);\n+        Tomcat.addServlet(ctxt, \"simple\", new SimpleServlet());\n+        ctxt.addServletMappingDecoded(\"/simple\", \"simple\");\n+        Tomcat.addServlet(ctxt, \"pathparam\", new PathParam());\n+        ctxt.addServletMappingDecoded(\"/pathparam\", \"pathparam\");\n+\n+        tomcat.start();\n+\n+        openClientConnection();\n+        doHttpUpgrade();\n+        sendClientPreface();\n+        validateHttp2InitialResponse();\n+\n+        byte[] frameHeader = new byte[9];\n+        ByteBuffer headersPayload = ByteBuffer.allocate(128);\n+        buildGetRequest(frameHeader, headersPayload, null, 3,\n+                \"/pathparam;jsessionid=\" + PathParam.EXPECTED_SESSION_ID);\n+        writeFrame(frameHeader, headersPayload);\n+\n+        readSimpleGetResponse();\n+\n+        Assert.assertEquals(\n+                \"3-HeadersStart\\n\" +\n+                \"3-Header-[:status]-[200]\\n\" +\n+                \"3-Header-[content-type]-[text/plain;charset=UTF-8]\\n\" +\n+                \"3-Header-[date]-[Wed, 11 Nov 2015 19:18:42 GMT]\\n\" +\n+                \"3-HeadersEnd\\n\" +\n+                \"3-Body-2\\n\" +\n+                \"3-EndOfStream\\n\", output.getTrace());\n+    }\n+\n+\n+    private static final class PathParam extends HttpServlet {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        public static final String EXPECTED_SESSION_ID = \"0123456789ABCDEF\";\n+\n+        @Override\n+        protected void doGet(HttpServletRequest request, HttpServletResponse response)\n+                throws ServletException, IOException {\n+\n+            response.setContentType(\"text/plain\");\n+            response.setCharacterEncoding(\"UTF-8\");\n+\n+            if (EXPECTED_SESSION_ID.equals(request.getRequestedSessionId())) {\n+                response.getWriter().write(\"OK\");\n+            } else {\n+                response.getWriter().write(\"FAIL\");\n+            }\n+        }\n+    }\n+}\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "cf181edc9a8c239cde704cffc3c503425bdcae2b", "source_date": "Wed May 24 19:35:00 2017 +0000", "source_tag": "9.0.0", "target_commit": "dacb030b85fe0e0b3da87469e23d0f31252fdede", "target_date": "Wed May 24 19:36:12 2017 +0000", "target_tag": "8.5.16", "FAIL TO PASS": ["testPathParam"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_353", "original_commit_message": "Fixed is_safe_url() to reject URLs that use a scheme other than HTTP/S.\nThis is a security fix; disclosure to follow shortly.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/utils/http.py b/django/utils/http.py\nindex e397acad5b..9b36ab91d7 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -252,11 +252,12 @@ def same_origin(url1, url2):\n def is_safe_url(url, host=None):\n     \"\"\"\n     Return ``True`` if the url is a safe redirection (i.e. it doesn't point to\n-    a different host).\n+    a different host and uses a safe scheme).\n \n     Always returns ``False`` on an empty url.\n     \"\"\"\n     if not url:\n         return False\n-    netloc = urllib_parse.urlparse(url)[1]\n-    return not netloc or netloc == host\n+    url_info = urllib_parse.urlparse(url)\n+    return (not url_info.netloc or url_info.netloc == host) and \\\n+        (not url_info.scheme or url_info.scheme in ['http', 'https'])\n\n</patch>\n<test_patch>\ndiff --git a/django/contrib/auth/tests/test_views.py b/django/contrib/auth/tests/test_views.py\nindex 22ccbfd225..7839b0b9f9 100644\n--- a/django/contrib/auth/tests/test_views.py\n+++ b/django/contrib/auth/tests/test_views.py\n@@ -446,7 +446,8 @@ class LoginTest(AuthViewsTestCase):\n         for bad_url in ('http://example.com',\n                         'https://example.com',\n                         'ftp://exampel.com',\n-                        '//example.com'):\n+                        '//example.com',\n+                        'javascript:alert(\"XSS\")'):\n \n             nasty_url = '%(url)s?%(next)s=%(bad_url)s' % {\n                 'url': login_url,\n@@ -467,6 +468,7 @@ class LoginTest(AuthViewsTestCase):\n                          '/view?param=ftp://exampel.com',\n                          'view/?param=//example.com',\n                          'https:///',\n+                         'HTTPS:///',\n                          '//testserver/',\n                          '/url%20with%20spaces/'):  # see ticket #12534\n             safe_url = '%(url)s?%(next)s=%(good_url)s' % {\n@@ -661,7 +663,8 @@ class LogoutTest(AuthViewsTestCase):\n         for bad_url in ('http://example.com',\n                         'https://example.com',\n                         'ftp://exampel.com',\n-                        '//example.com'):\n+                        '//example.com',\n+                        'javascript:alert(\"XSS\")'):\n             nasty_url = '%(url)s?%(next)s=%(bad_url)s' % {\n                 'url': logout_url,\n                 'next': REDIRECT_FIELD_NAME,\n@@ -680,6 +683,7 @@ class LogoutTest(AuthViewsTestCase):\n                          '/view?param=ftp://exampel.com',\n                          'view/?param=//example.com',\n                          'https:///',\n+                         'HTTPS:///',\n                          '//testserver/',\n                          '/url%20with%20spaces/'):  # see ticket #12534\n             safe_url = '%(url)s?%(next)s=%(good_url)s' % {\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "namespace changes", "source_commit": "ae3535169af804352517b7fea94a42a1c9c4b762", "source_date": "Tue Aug 13 11:06:22 2013 -0500", "source_tag": "1.7", "target_commit": "ec67af0bd609c412b76eaa4cc89968a2a8e5ad6a", "target_date": "Tue Aug 13 11:00:13 2013 -0500", "target_tag": "1.4.6", "FAIL TO PASS": ["django.contrib.auth.tests.views.LoginTest.test_security_check", "django.contrib.auth.tests.views.LogoutTest.test_security_check"], "PASS TO PASS": ["django.contrib.auth.tests.decorators.LoginRequiredTestCase.testLoginRequired", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_low_level_pkbdf2", "django.contrib.auth.tests.context_processors.AuthContextProcessorTests.test_user_attrs", "django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_known_user", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_bad_algorithm", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_pkbdf2", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_upgrade", "django.contrib.auth.tests.auth_backends.NoBackendsTest.test_raises_exception", "django.contrib.auth.tests.views.LoginURLSettings.test_remote_login_url", "django.contrib.auth.tests.models.UserManagerTestCase.test_create_user_email_domain_normalize", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_unusable_password", "Check the creation and properties of a superuser", "django.contrib.auth.tests.views.LogoutTest.test_logout_with_overridden_redirect_url", "django.contrib.auth.tests.auth_backends.AnonymousUserBackendTest.test_has_perm", "django.contrib.auth.tests.models.UserManagerTestCase.test_create_user_email_domain_normalize_with_whitespace", "django.contrib.auth.tests.tokens.TokenGeneratorTest.test_make_token", "django.contrib.auth.tests.views.LoginURLSettings.test_remote_login_url_with_next_querystring", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_no_remote_user", "django.contrib.auth.tests.auth_backends.InActiveUserBackendTest.test_has_module_perms", "Email is sent if a valid email address is provided for password reset", "Email is sent if a valid email address is provided for password reset when a custom from_email is provided.", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_invalid_user", "django.contrib.auth.tests.auth_backends.RowlevelBackendTest.test_get_group_permissions", "django.contrib.auth.tests.views.LoginURLSettings.test_standard_login_url", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_md5", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_no_remote_user", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_sha1", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_known_user", "Check the properties of the anonymous user", "django.contrib.auth.tests.auth_backends.BackendTest.test_has_perm", "django.contrib.auth.tests.forms.AuthenticationFormTest.test_success", "django.contrib.auth.tests.models.UserManagerTestCase.test_create_user", "django.contrib.auth.tests.views.LogoutTest.test_14377", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_unknown_user", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_succeeds", "Error is raised if the provided email address isn't currently registered", "Logout with next_page option given redirects to specified resource", "django.contrib.auth.tests.forms.AuthenticationFormTest.test_inactive_user", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_inactive_user", "django.contrib.auth.tests.auth_backends.NoInActiveUserBackendTest.test_has_perm", "django.contrib.auth.tests.auth_backends.NoInActiveUserBackendTest.test_has_module_perms", "django.contrib.auth.tests.auth_backends.AnonymousUserBackendTest.test_has_perms", "Poisoned HTTP_HOST headers can't be used for reset emails", "django.contrib.auth.tests.management.GetDefaultUsernameTestCase.test_simple", "Logout without next_page option renders the default template", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_invalid", "django.contrib.auth.tests.auth_backends.RowlevelBackendTest.test_has_perm", "django.contrib.auth.tests.forms.UserCreationFormTest.test_password_verification", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_invalid_post", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_unusable", "Executing the changepassword management command should change joe's password", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_done_fails", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_nonexistant_email", "Named URLs should be reversible", "django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_no_remote_user", "django.contrib.auth.tests.forms.PasswordChangeFormTest.test_success", "django.contrib.auth.tests.tokens.TokenGeneratorTest.test_date_length", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_no_upgrade_on_incorrect_pass", "django.contrib.auth.tests.signals.SignalTestCase.test_logout_anonymous", "django.contrib.auth.tests.forms.UserChangeFormTest.test_username_validity", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_done_succeeds", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_unsalted_md5", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_cleaned_data", "django.contrib.auth.tests.forms.UserChangeFormTest.test_bug_14242", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_custom_email_subject", "django.contrib.auth.tests.auth_backends.BackendTest.test_custom_perms", "django.contrib.auth.tests.forms.AuthenticationFormTest.test_invalid_username", "django.contrib.auth.tests.forms.UserCreationFormTest.test_user_already_exists", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_complete", "django.contrib.auth.tests.auth_backends.AnonymousUserBackendTest.test_get_all_permissions", "django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_unknown_user", "django.contrib.auth.tests.views.LoginURLSettings.test_https_login_url", "django.contrib.auth.tests.context_processors.AuthContextProcessorTests.test_session_is_accessed", "django.contrib.auth.tests.forms.SetPasswordFormTest.test_password_verification", "django.contrib.auth.tests.models.NaturalKeysTestCase.test_user_natural_key", "django.contrib.auth.tests.forms.PasswordChangeFormTest.test_field_order", "django.contrib.auth.tests.forms.UserChangeFormTest.test_bug_17944_unknown_password_algorithm", "django.contrib.auth.tests.forms.AuthenticationFormTest.test_inactive_user_i18n", "django.contrib.auth.tests.decorators.LoginRequiredTestCase.testView", "django.contrib.auth.tests.forms.UserChangeFormTest.test_bug_17944_empty_password", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_last_login", "django.contrib.auth.tests.views.LoginURLSettings.test_login_url_with_querystring", "django.contrib.auth.tests.models.LoadDataWithoutNaturalKeysTestCase.test_user_is_created_and_added_to_group", "If the reset view is marked as being for admin, the HTTP_HOST header is used for a domain override.", "django.contrib.auth.tests.management.GetDefaultUsernameTestCase.test_existing", "django.contrib.auth.tests.forms.PasswordChangeFormTest.test_password_verification", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_fails_with_invalid_old_password", "django.contrib.auth.tests.models.NaturalKeysTestCase.test_group_natural_key", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_bug_5605", "django.contrib.auth.tests.models.UserManagerTestCase.test_empty_username", "django.contrib.auth.tests.forms.UserChangeFormTest.test_bug_17944_unmanageable_password", "django.contrib.auth.tests.forms.PasswordChangeFormTest.test_incorrect_password", "A superuser has all permissions. Refs #14795", "django.contrib.auth.tests.decorators.LoginRequiredTestCase.testLoginRequiredNextUrl", "django.contrib.auth.tests.context_processors.AuthContextProcessorTests.test_session_not_accessed", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_unsalted_sha1", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_known_user", "Poisoned HTTP_HOST headers can't be used for reset emails on admin views", "django.contrib.auth.tests.forms.UserCreationFormTest.test_invalid_data", "django.contrib.auth.tests.signals.SignalTestCase.test_logout", "django.contrib.auth.tests.tokens.TokenGeneratorTest.test_timeout", "django.contrib.auth.tests.context_processors.AuthContextProcessorTests.test_perms_attrs", "django.contrib.auth.tests.decorators.LoginRequiredTestCase.testCallable", "django.contrib.auth.tests.auth_backends.InActiveUserBackendTest.test_has_perm", "django.contrib.auth.tests.tokens.TokenGeneratorTest.test_10265", "django.contrib.auth.tests.models.UserManagerTestCase.test_create_user_email_domain_normalize_rfc3696", "django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_last_login", "django.contrib.auth.tests.models.LoadDataWithNaturalKeysTestCase.test_user_is_created_and_added_to_group", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_crypt", "django.contrib.auth.tests.forms.SetPasswordFormTest.test_success", "django.contrib.auth.tests.signals.SignalTestCase.test_login", "django.contrib.auth.tests.auth_backends.RowlevelBackendTest.test_get_all_permissions", "django.contrib.auth.tests.forms.UserCreationFormTest.test_both_passwords", "django.contrib.auth.tests.context_processors.AuthContextProcessorTests.test_message_attrs", "Logout with custom query string redirects to specified resource", "Logout with query string redirects to specified resource", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_different_passwords", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_invalid_email", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_overflow_user", "Check that users can be created without an email", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_fails_with_mismatched_passwords", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_no_upgrade", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_last_login", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_unknown_user", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_low_level_pbkdf2_sha1", "django.contrib.auth.tests.auth_backends.AnonymousUserBackendTest.test_has_module_perms", "django.contrib.auth.tests.management.ChangepasswordManagementCommandTestCase.test_that_max_tries_exits_1", "django.contrib.auth.tests.management.GetDefaultUsernameTestCase.test_i18n", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_valid", "django.contrib.auth.tests.views.LoginTest.test_current_site_in_context_after_login", "Check that users can be created and can set their password", "Check the operation of the createsuperuser management command", "django.contrib.auth.tests.models.ProfileTestCase.test_site_profile_not_available", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_simple", "django.contrib.auth.tests.forms.UserCreationFormTest.test_success", "Regressiontest for #12462"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_354", "original_commit_message": "Fixed is_safe_url() to reject URLs that use a scheme other than HTTP/S.\nThis is a security fix; disclosure to follow shortly.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/utils/http.py b/django/utils/http.py\nindex e397acad5b..9b36ab91d7 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -252,11 +252,12 @@ def same_origin(url1, url2):\n def is_safe_url(url, host=None):\n     \"\"\"\n     Return ``True`` if the url is a safe redirection (i.e. it doesn't point to\n-    a different host).\n+    a different host and uses a safe scheme).\n \n     Always returns ``False`` on an empty url.\n     \"\"\"\n     if not url:\n         return False\n-    netloc = urllib_parse.urlparse(url)[1]\n-    return not netloc or netloc == host\n+    url_info = urllib_parse.urlparse(url)\n+    return (not url_info.netloc or url_info.netloc == host) and \\\n+        (not url_info.scheme or url_info.scheme in ['http', 'https'])\n\n</patch>\n<test_patch>\ndiff --git a/django/contrib/auth/tests/test_views.py b/django/contrib/auth/tests/test_views.py\nindex 22ccbfd225..7839b0b9f9 100644\n--- a/django/contrib/auth/tests/test_views.py\n+++ b/django/contrib/auth/tests/test_views.py\n@@ -446,7 +446,8 @@ class LoginTest(AuthViewsTestCase):\n         for bad_url in ('http://example.com',\n                         'https://example.com',\n                         'ftp://exampel.com',\n-                        '//example.com'):\n+                        '//example.com',\n+                        'javascript:alert(\"XSS\")'):\n \n             nasty_url = '%(url)s?%(next)s=%(bad_url)s' % {\n                 'url': login_url,\n@@ -467,6 +468,7 @@ class LoginTest(AuthViewsTestCase):\n                          '/view?param=ftp://exampel.com',\n                          'view/?param=//example.com',\n                          'https:///',\n+                         'HTTPS:///',\n                          '//testserver/',\n                          '/url%20with%20spaces/'):  # see ticket #12534\n             safe_url = '%(url)s?%(next)s=%(good_url)s' % {\n@@ -661,7 +663,8 @@ class LogoutTest(AuthViewsTestCase):\n         for bad_url in ('http://example.com',\n                         'https://example.com',\n                         'ftp://exampel.com',\n-                        '//example.com'):\n+                        '//example.com',\n+                        'javascript:alert(\"XSS\")'):\n             nasty_url = '%(url)s?%(next)s=%(bad_url)s' % {\n                 'url': logout_url,\n                 'next': REDIRECT_FIELD_NAME,\n@@ -680,6 +683,7 @@ class LogoutTest(AuthViewsTestCase):\n                          '/view?param=ftp://exampel.com',\n                          'view/?param=//example.com',\n                          'https:///',\n+                         'HTTPS:///',\n                          '//testserver/',\n                          '/url%20with%20spaces/'):  # see ticket #12534\n             safe_url = '%(url)s?%(next)s=%(good_url)s' % {\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "ae3535169af804352517b7fea94a42a1c9c4b762", "source_date": "Tue Aug 13 11:06:22 2013 -0500", "source_tag": "1.7", "target_commit": "1a274ccd6bc1afbdac80344c9b6e5810c1162b5f", "target_date": "Tue Aug 13 11:03:49 2013 -0500", "target_tag": "1.5.2", "FAIL TO PASS": ["django.contrib.auth.tests.views.LoginTest.test_security_check", "django.contrib.auth.tests.views.LogoutTest.test_security_check"], "PASS TO PASS": ["django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_header_disappears", "django.contrib.auth.tests.decorators.LoginRequiredTestCase.testLoginRequired", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_low_level_pkbdf2", "django.contrib.auth.tests.handlers.ModWsgiHandlerTestCase.test_check_password_custom_user", "django.contrib.auth.tests.context_processors.AuthContextProcessorTests.test_user_attrs", "django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_known_user", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_bad_algorithm", "django.contrib.auth.tests.views.LoginTest.test_login_csrf_rotate", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_pkbdf2", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_upgrade", "django.contrib.auth.tests.auth_backends.NoBackendsTest.test_raises_exception", "django.contrib.auth.tests.views.LoginURLSettings.test_remote_login_url", "django.contrib.auth.tests.models.UserManagerTestCase.test_create_user_email_domain_normalize", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_unusable_password", "django.contrib.auth.tests.basic.BasicTestCase.test_createsuperuser_nolocale", "django.contrib.auth.tests.forms.AuthenticationFormTest.test_username_field_label", "Check the creation and properties of a superuser", "USERNAME_FIELD should not appear in REQUIRED_FIELDS.", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_header_disappears", "Regressiontest for #12462", "django.contrib.auth.tests.views.LogoutTest.test_logout_with_overridden_redirect_url", "django.contrib.auth.tests.auth_backends.AnonymousUserBackendTest.test_has_perm", "django.contrib.auth.tests.models.UserManagerTestCase.test_create_user_email_domain_normalize_with_whitespace", "django.contrib.auth.tests.tokens.TokenGeneratorTest.test_make_token", "django.contrib.auth.tests.views.LoginURLSettings.test_remote_login_url_with_next_querystring", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_no_remote_user", "django.contrib.auth.tests.views.ChangelistTests.test_changelist_disallows_password_lookups", "django.contrib.auth.tests.context_processors.PermWrapperTests.test_permwrapper_in", "django.contrib.auth.tests.auth_backends.InActiveUserBackendTest.test_has_module_perms", "Email is sent if a valid email address is provided for password reset", "Email is sent if a valid email address is provided for password reset when a custom from_email is provided.", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_invalid_user", "django.contrib.auth.tests.auth_backends.RowlevelBackendTest.test_get_group_permissions", "django.contrib.auth.tests.views.LoginURLSettings.test_standard_login_url", "django.contrib.auth.tests.auth_backends.ExtensionUserModelBackendTest.test_has_perm", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_md5", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_no_remote_user", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_sha1", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_known_user", "Check the properties of the anonymous user", "django.contrib.auth.tests.forms.AuthenticationFormTest.test_success", "django.contrib.auth.tests.forms.UserChangeFormTest.test_bug_19349_bound_password_field", "django.contrib.auth.tests.views.LogoutTest.test_14377", "django.contrib.auth.tests.models.UserManagerTestCase.test_create_user", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_unknown_user", "django.contrib.auth.tests.management.GetDefaultUsernameTestCase.test_actual_implementation", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_succeeds", "Error is raised if the provided email address isn't currently registered", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_inactive_user", "Logout with next_page option given redirects to specified resource", "django.contrib.auth.tests.forms.AuthenticationFormTest.test_inactive_user", "django.contrib.auth.tests.management.CreatesuperuserManagementCommandTestCase.test_email_in_username", "A superuser can be created when a custom User model is in use", "django.contrib.auth.tests.auth_backends.AnonymousUserBackendTest.test_has_perms", "django.contrib.auth.tests.management.PermissionDuplicationTestCase.test_duplicated_permissions", "django.contrib.auth.tests.auth_backends.CustomPermissionsUserModelBackendTest.test_has_perm", "A Custom superuser won't be created when a required field isn't provided", "Poisoned HTTP_HOST headers can't be used for reset emails", "django.contrib.auth.tests.management.GetDefaultUsernameTestCase.test_simple", "Logout without next_page option renders the default template", "django.contrib.auth.tests.context_processors.PermWrapperTests.test_permlookupdict_in", "django.contrib.auth.tests.models.IsActiveTestCase.test_is_active_field_default", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_invalid", "django.contrib.auth.tests.auth_backends.RowlevelBackendTest.test_has_perm", "django.contrib.auth.tests.forms.UserCreationFormTest.test_password_verification", "django.contrib.auth.tests.auth_backends.ExtensionUserModelBackendTest.test_custom_perms", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_invalid_post", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_unusable", "Executing the changepassword management command should change joe's password", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_done_fails", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_nonexistant_email", "Named URLs should be reversible", "django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_no_remote_user", "django.contrib.auth.tests.forms.PasswordChangeFormTest.test_success", "django.contrib.auth.tests.tokens.TokenGeneratorTest.test_date_length", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_no_upgrade_on_incorrect_pass", "django.contrib.auth.tests.signals.SignalTestCase.test_logout_anonymous", "django.contrib.auth.tests.forms.UserChangeFormTest.test_username_validity", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_done_succeeds", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_unsalted_md5", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_cleaned_data", "django.contrib.auth.tests.forms.UserChangeFormTest.test_bug_14242", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_custom_email_subject", "django.contrib.auth.tests.auth_backends.CustomPermissionsUserModelBackendTest.test_custom_perms", "A non-unique USERNAME_FIELD should raise a model validation error.", "django.contrib.auth.tests.forms.AuthenticationFormTest.test_invalid_username", "django.contrib.auth.tests.forms.UserCreationFormTest.test_user_already_exists", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_complete", "django.contrib.auth.tests.auth_backends.ModelBackendTest.test_has_perm", "django.contrib.auth.tests.auth_backends.AnonymousUserBackendTest.test_get_all_permissions", "django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_unknown_user", "django.contrib.auth.tests.views.LoginURLSettings.test_https_login_url", "django.contrib.auth.tests.context_processors.AuthContextProcessorTests.test_session_is_accessed", "django.contrib.auth.tests.forms.SetPasswordFormTest.test_password_verification", "django.contrib.auth.tests.models.NaturalKeysTestCase.test_user_natural_key", "django.contrib.auth.tests.auth_backends.ModelBackendTest.test_custom_perms", "The current user model can be swapped out for another", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_header_disappears", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_bad_encoded", "django.contrib.auth.tests.forms.UserChangeFormTest.test_bug_17944_unknown_password_algorithm", "django.contrib.auth.tests.forms.AuthenticationFormTest.test_inactive_user_i18n", "django.contrib.auth.tests.decorators.LoginRequiredTestCase.testView", "django.contrib.auth.tests.forms.UserChangeFormTest.test_bug_17944_empty_password", "django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest.test_last_login", "django.contrib.auth.tests.views.LoginURLSettings.test_login_url_with_querystring", "The current user model must point to an installed model", "django.contrib.auth.tests.models.LoadDataWithoutNaturalKeysTestCase.test_user_is_created_and_added_to_group", "If the reset view is marked as being for admin, the HTTP_HOST header is used for a domain override.", "django.contrib.auth.tests.management.GetDefaultUsernameTestCase.test_existing", "django.contrib.auth.tests.forms.PasswordChangeFormTest.test_password_verification", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_fails_with_invalid_old_password", "django.contrib.auth.tests.models.NaturalKeysTestCase.test_group_natural_key", "django.contrib.auth.tests.handlers.ModWsgiHandlerTestCase.test_groups_for_user", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_bug_5605", "django.contrib.auth.tests.models.UserManagerTestCase.test_empty_username", "django.contrib.auth.tests.forms.UserChangeFormTest.test_bug_17944_unmanageable_password", "django.contrib.auth.tests.forms.PasswordChangeFormTest.test_incorrect_password", "A superuser has all permissions. Refs #14795", "django.contrib.auth.tests.decorators.LoginRequiredTestCase.testLoginRequiredNextUrl", "django.contrib.auth.tests.context_processors.AuthContextProcessorTests.test_session_not_accessed", "The current user model can be retrieved", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_known_user", "Poisoned HTTP_HOST headers can't be used for reset emails on admin views", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_unsalted_sha1", "django.contrib.auth.tests.forms.UserCreationFormTest.test_invalid_data", "django.contrib.auth.tests.signals.SignalTestCase.test_logout", "django.contrib.auth.tests.tokens.TokenGeneratorTest.test_timeout", "django.contrib.auth.tests.context_processors.AuthContextProcessorTests.test_perms_attrs", "django.contrib.auth.tests.decorators.LoginRequiredTestCase.testCallable", "django.contrib.auth.tests.auth_backends.InActiveUserBackendTest.test_has_perm", "django.contrib.auth.tests.tokens.TokenGeneratorTest.test_10265", "django.contrib.auth.tests.models.UserManagerTestCase.test_create_user_email_domain_normalize_rfc3696", "django.contrib.auth.tests.remote_user.RemoteUserCustomTest.test_last_login", "django.contrib.auth.tests.models.LoadDataWithNaturalKeysTestCase.test_user_is_created_and_added_to_group", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_crypt", "django.contrib.auth.tests.forms.SetPasswordFormTest.test_success", "django.contrib.auth.tests.forms.ReadOnlyPasswordHashWidgetTest.test_bug_19349_render_with_none_value", "django.contrib.auth.tests.signals.SignalTestCase.test_login", "django.contrib.auth.tests.auth_backends.RowlevelBackendTest.test_get_all_permissions", "django.contrib.auth.tests.forms.UserCreationFormTest.test_both_passwords", "django.contrib.auth.tests.views.CustomUserPasswordResetTest.test_confirm_valid_custom_user", "django.contrib.auth.tests.context_processors.AuthContextProcessorTests.test_perm_in_perms_attrs", "django.contrib.auth.tests.context_processors.AuthContextProcessorTests.test_message_attrs", "Logout with custom query string redirects to specified resource", "The change form does not return the password value", "Logout with query string redirects to specified resource", "django.contrib.auth.tests.models.IsActiveTestCase.test_builtin_user_isactive", "django.contrib.auth.tests.management.CreatesuperuserManagementCommandTestCase.test_verbosity_zero", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_different_passwords", "django.contrib.auth.tests.forms.PasswordResetFormTest.test_invalid_email", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_overflow_user", "Check that users can be created without an email", "django.contrib.auth.tests.views.ChangePasswordTest.test_password_change_fails_with_mismatched_passwords", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_no_upgrade", "The alternate user setting must point to something in the format app.model", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_last_login", "django.contrib.auth.tests.auth_backends.CustomUserModelBackendAuthenticateTest.test_authenticate", "django.contrib.auth.tests.remote_user.RemoteUserTest.test_unknown_user", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_low_level_pbkdf2_sha1", "django.contrib.auth.tests.basic.BasicTestCase.test_createsuperuser_non_ascii_verbose_name", "django.contrib.auth.tests.handlers.ModWsgiHandlerTestCase.test_check_password", "django.contrib.auth.tests.forms.UserChangeFormTest.test_unsuable_password", "Ensure that only `last_login` is updated in `update_last_login`", "django.contrib.auth.tests.auth_backends.AnonymousUserBackendTest.test_has_module_perms", "django.contrib.auth.tests.management.ChangepasswordManagementCommandTestCase.test_that_max_tries_exits_1", "django.contrib.auth.tests.management.GetDefaultUsernameTestCase.test_i18n", "django.contrib.auth.tests.views.LoginTest.test_current_site_in_context_after_login", "django.contrib.auth.tests.views.PasswordResetTest.test_confirm_valid", "Check that users can be created and can set their password", "Check the operation of the createsuperuser management command", "django.contrib.auth.tests.models.ProfileTestCase.test_site_profile_not_available", "django.contrib.auth.tests.hashers.TestUtilsHashPass.test_simple", "django.contrib.auth.tests.forms.UserCreationFormTest.test_success", "django.contrib.auth.tests.forms.PasswordChangeFormTest.test_field_order"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_371", "original_commit_message": "[1.11.x] Fixed CVE-2017-12794 -- Fixed XSS possibility in traceback section of technical 500 debug page.\nThis is a security fix.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/views/debug.py b/django/views/debug.py\nindex 57dbff2259..6db3cf52d0 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -774,38 +774,37 @@ r\"\"\"{% if request %} at {{ request.path_info|escape }}{% endif %}</title>\n   <h2>Traceback <span class=\"commands\">{% if not is_email %}<a href=\"#\" onclick=\"return switchPastebinFriendly(this);\">\n     Switch to copy-and-paste view</a></span>{% endif %}\n   </h2>\n-  {% autoescape off %}\n   <div id=\"browserTraceback\">\n     <ul class=\"traceback\">\n       {% for frame in frames %}\n         {% ifchanged frame.exc_cause %}{% if frame.exc_cause %}\n           <li><h3>\n           {% if frame.exc_cause_explicit %}\n-            The above exception ({{ frame.exc_cause }}) was the direct cause of the following exception:\n+            The above exception ({{ frame.exc_cause|force_escape }}) was the direct cause of the following exception:\n           {% else %}\n-            During handling of the above exception ({{ frame.exc_cause }}), another exception occurred:\n+            During handling of the above exception ({{ frame.exc_cause|force_escape }}), another exception occurred:\n           {% endif %}\n         </h3></li>\n         {% endif %}{% endifchanged %}\n         <li class=\"frame {{ frame.type }}\">\n-          <code>{{ frame.filename|escape }}</code> in <code>{{ frame.function|escape }}</code>\n+          <code>{{ frame.filename }}</code> in <code>{{ frame.function }}</code>\n \n           {% if frame.context_line %}\n             <div class=\"context\" id=\"c{{ frame.id }}\">\n               {% if frame.pre_context and not is_email %}\n                 <ol start=\"{{ frame.pre_context_lineno }}\" class=\"pre-context\" id=\"pre{{ frame.id }}\">\n                 {% for line in frame.pre_context %}\n-                  <li onclick=\"toggle('pre{{ frame.id }}', 'post{{ frame.id }}')\"><pre>{{ line|escape }}</pre></li>\n+                  <li onclick=\"toggle('pre{{ frame.id }}', 'post{{ frame.id }}')\"><pre>{{ line }}</pre></li>\n                 {% endfor %}\n                 </ol>\n               {% endif %}\n               <ol start=\"{{ frame.lineno }}\" class=\"context-line\">\n                 <li onclick=\"toggle('pre{{ frame.id }}', 'post{{ frame.id }}')\"><pre>\n-\"\"\"            \"\"\"{{ frame.context_line|escape }}</pre>{% if not is_email %} <span>...</span>{% endif %}</li></ol>\n+\"\"\"            \"\"\"{{ frame.context_line }}</pre>{% if not is_email %} <span>...</span>{% endif %}</li></ol>\n               {% if frame.post_context and not is_email  %}\n                 <ol start='{{ frame.lineno|add:\"1\" }}' class=\"post-context\" id=\"post{{ frame.id }}\">\n                   {% for line in frame.post_context %}\n-                  <li onclick=\"toggle('pre{{ frame.id }}', 'post{{ frame.id }}')\"><pre>{{ line|escape }}</pre></li>\n+                  <li onclick=\"toggle('pre{{ frame.id }}', 'post{{ frame.id }}')\"><pre>{{ line }}</pre></li>\n                   {% endfor %}\n               </ol>\n               {% endif %}\n@@ -830,7 +829,7 @@ r\"\"\"{% if request %} at {{ request.path_info|escape }}{% endif %}</title>\n               <tbody>\n                 {% for var in frame.vars|dictsort:0 %}\n                   <tr>\n-                    <td>{{ var.0|force_escape }}</td>\n+                    <td>{{ var.0 }}</td>\n                     <td class=\"code\"><pre>{{ var.1 }}</pre></td>\n                   </tr>\n                 {% endfor %}\n@@ -841,7 +840,6 @@ r\"\"\"{% if request %} at {{ request.path_info|escape }}{% endif %}</title>\n       {% endfor %}\n     </ul>\n   </div>\n-  {% endautoescape %}\n   <form action=\"http://dpaste.com/\" name=\"pasteform\" id=\"pasteform\" method=\"post\">\n {% if not is_email %}\n   <div id=\"pastebinTraceback\" class=\"pastebin\">\n@@ -887,9 +885,9 @@ In template {{ template_info.name }}, error at line {{ template_info.line }}\n \n Traceback:{% for frame in frames %}\n {% ifchanged frame.exc_cause %}{% if frame.exc_cause %}{% if frame.exc_cause_explicit %}\n-The above exception ({{ frame.exc_cause }}) was the direct cause of the following exception:\n+The above exception ({{ frame.exc_cause|force_escape }}) was the direct cause of the following exception:\n {% else %}\n-During handling of the above exception ({{ frame.exc_cause }}), another exception occurred:\n+During handling of the above exception ({{ frame.exc_cause|force_escape }}), another exception occurred:\n {% endif %}{% endif %}{% endifchanged %}\n File \"{{ frame.filename|escape }}\" in {{ frame.function|escape }}\n {% if frame.context_line %}  {{ frame.lineno }}. {{ frame.context_line|escape }}{% endif %}{% endfor %}\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/view_tests/tests/py3_test_debug.py b/tests/view_tests/tests/py3_test_debug.py\nindex 30201bae53..316179ae3e 100644\n--- a/tests/view_tests/tests/py3_test_debug.py\n+++ b/tests/view_tests/tests/py3_test_debug.py\n@@ -9,6 +9,7 @@ error (raise ... from ...) can't be silenced using NOQA.\n import sys\n \n from django.test import RequestFactory, TestCase\n+from django.utils.safestring import mark_safe\n from django.views.debug import ExceptionReporter\n \n \n@@ -20,10 +21,10 @@ class Py3ExceptionReporterTests(TestCase):\n         request = self.rf.get('/test_view/')\n         try:\n             try:\n-                raise AttributeError('Top level')\n+                raise AttributeError(mark_safe('<p>Top level</p>'))\n             except AttributeError as explicit:\n                 try:\n-                    raise ValueError('Second exception') from explicit\n+                    raise ValueError('<p>Second exception</p>') from explicit\n                 except ValueError:\n                     raise IndexError('Final exception')\n         except Exception:\n@@ -37,9 +38,9 @@ class Py3ExceptionReporterTests(TestCase):\n         html = reporter.get_traceback_html()\n         # Both messages are twice on page -- one rendered as html,\n         # one as plain text (for pastebin)\n-        self.assertEqual(2, html.count(explicit_exc.format(\"Top level\")))\n-        self.assertEqual(2, html.count(implicit_exc.format(\"Second exception\")))\n+        self.assertEqual(2, html.count(explicit_exc.format('&lt;p&gt;Top level&lt;/p&gt;')))\n+        self.assertEqual(2, html.count(implicit_exc.format('&lt;p&gt;Second exception&lt;/p&gt;')))\n \n         text = reporter.get_traceback_text()\n-        self.assertIn(explicit_exc.format(\"Top level\"), text)\n-        self.assertIn(implicit_exc.format(\"Second exception\"), text)\n+        self.assertIn(explicit_exc.format('<p>Top level</p>'), text)\n+        self.assertIn(implicit_exc.format('<p>Second exception</p>'), text)\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "e35a0c56086924f331e9422daa266e907a4784cc", "source_date": "Tue Sep 5 11:05:43 2017 -0400", "source_tag": "1.11.5", "target_commit": "58e08e80e362db79eb0fd775dc81faad90dca47a", "target_date": "Tue Sep 5 11:19:56 2017 -0400", "target_tag": "1.10.8", "FAIL TO PASS": ["view_tests.tests.py3_test_debug.Py3ExceptionReporterTests.  Applying sites.0002_alter_domain_unique...test_reporting_of_nested_exceptions", "view_tests.tests.py3_test_debug.Py3ExceptionReporterTests.test_reporting_of_nested_exceptions"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_380", "original_commit_message": "[1.10.x] Fixed XSS in admin's add/change related popup.\nThis is a security fix.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/views/debug.py b/django/views/debug.py\nindex 56329325d3..eac0a77605 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -636,13 +636,13 @@ TECHNICAL_500_TEMPLATE = (\"\"\"\n       var s = link.getElementsByTagName('span')[0];\n       var uarr = String.fromCharCode(0x25b6);\n       var darr = String.fromCharCode(0x25bc);\n-      s.innerHTML = s.innerHTML == uarr ? darr : uarr;\n+      s.textContent = s.textContent == uarr ? darr : uarr;\n       return false;\n     }\n     function switchPastebinFriendly(link) {\n       s1 = \"Switch to copy-and-paste view\";\n       s2 = \"Switch back to interactive view\";\n-      link.innerHTML = link.innerHTML.trim() == s1 ? s2: s1;\n+      link.textContent = link.textContent.trim() == s1 ? s2: s1;\n       toggle('browserTraceback', 'pastebinTraceback');\n       return false;\n     }\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 443c63081c..8d663e589b 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -4450,11 +4450,11 @@ class SeleniumTests(AdminSeleniumTestCase):\n         self.wait_for_text('#content h1', 'Change section')\n         name_input = self.selenium.find_element_by_id('id_name')\n         name_input.clear()\n-        name_input.send_keys('edited section')\n+        name_input.send_keys('<i>edited section</i>')\n         self.selenium.find_element_by_xpath('//input[@value=\"Save\"]').click()\n         self.selenium.switch_to.window(self.selenium.window_handles[0])\n         select = Select(self.selenium.find_element_by_id('id_form-0-section'))\n-        self.assertEqual(select.first_selected_option.text, 'edited section')\n+        self.assertEqual(select.first_selected_option.text, '<i>edited section</i>')\n \n         # Add popup\n         self.selenium.find_element_by_id('add_id_form-0-section').click()\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "6fa150b2f8b601668083042324c4add534143cb1", "source_date": "Mon Jul 18 11:17:19 2016 -0400", "source_tag": "1.10", "target_commit": "d03bf6fe4e9bf5b07de62c1a271c4b41a7d3d158", "target_date": "Fri Jul 15 09:23:32 2016 -0400", "target_tag": "1.9.8", "FAIL TO PASS": ["admin_views.tests.SeleniumAdminViewsFirefoxTests.test_list_editable_popups"], "PASS TO PASS": ["admin_views.tests.AdminViewUnicodeTest.test_unicode_delete", "admin_views.tests.AdminCustomTemplateTests.test_extended_bodyclass_change_list", "admin_views.tests.AdminViewPermissionsTest.test_login_redirect_for_direct_get", "admin_views.tests.TestLabelVisibility.test_mixin", "Test add view restricts access and actually adds items.", "admin_views.tests.NamespacedAdminKeepChangeListFiltersTests.test_changelist_view", "admin_views.tests.AdminViewStringPrimaryKeyTest.test_get_history_view", "admin_views.tests.AdminViewListEditable.test_post_messages", "Ensure that non field errors are displayed for each of the", "'View on site should' work properly with char fields", "admin_views.tests.AdminActionsTest.test_popup_template_escaping", "Check the never-cache status of the JavaScript i18n view", "admin_views.tests.AdminViewBasicTest.test_disallowed_filtering", "admin_views.tests.UserAdminTest.test_password_mismatch", "admin_views.tests.UserAdminTest.test_form_url_present_in_context", "admin_views.tests.AdminCustomQuerysetTest.test_change_view", "Regression test for #19327", "Check that an inline with an editable ordering fields is", "admin_views.tests.AdminSearchTest.test_with_fk_to_field", "admin_views.tests.AdminViewPermissionsTest.test_disabled_staff_permissions_when_logged_in", "Check the never-cache status of a model edit page", "admin_views.tests.AdminSearchTest.test_beginning_matches", "A model with a primary key that ends with add or is `add` should be visible", "admin_views.tests.AdminViewBasicTest.test_basic_edit_GET_string_PK", "As soon as an object is added using \"Save and continue editing\"", "Tests that a ModelAdmin without any actions still gets jQuery included in page", "admin_views.tests.AdminCustomQuerysetTest.test_changelist_view", "admin_views.tests.AdminViewPermissionsTest.test_history_view_bad_url", "admin_views.tests.NamespacedAdminKeepChangeListFiltersTests.test_url_prefix", "admin_views.tests.DateHierarchyTests.test_within_month", "Test for ticket 2445 changes to admin.", "admin_views.tests.AdminCustomSaveRelatedTests.test_should_be_able_to_edit_related_objects_on_add_view", "admin_views.tests.CustomModelAdminTest.test_custom_admin_site_login_template", "admin_views.tests.AdminViewBasicTest.test_i18n_language_non_english_default", "Ensure that the default behavior is followed if view_on_site is True", "admin_views.tests.AdminViewListEditable.test_non_form_errors_is_errorlist", "    Creating table admin_views_bo", "admin_views.tests.PrePopulatedTest.test_prepopulated_on", "A model with an integer PK can be saved as inlines. Regression for #10992", "admin_views.tests.AdminViewBasicTest.test_edit_save_as", "Ensure incorrect lookup parameters are handled gracefully.", "admin_views.tests.GetFormsetsWithInlinesArgumentTest.test_implicitly_generated_pk", "admin_views.tests.AdminCustomQuerysetTest.test_history_view_custom_qs", "admin_views.tests.AdminInlineFileUploadTest.test_inline_file_upload_edit_validation_error_post", "admin_views.tests.CSSTest.test_index_css_classes", "admin_views.tests.AdminViewBasicTest.test_basic_add_GET", "Cancelling the deletion of an object takes the user back one page.", "Ensure that the 'View on site' button is not displayed if view_on_site is False", "admin_views.tests.AdminViewLogoutTests.test_client_logout_url_can_be_used_to_login", "admin_views.tests.AdminViewBasicTest.test_change_list_sorting_model_meta", "admin_views.tests.AdminViewListEditable.test_post_submission", "admin_views.tests.AdminKeepChangeListFiltersTests.test_assert_url_equal", "admin_views.tests.TestLabelVisibility.test_all_fields_visible", "admin_views.tests.SaveAsTests.test_save_as_new_with_validation_errors_with_inlines", "Check the never-cache status of a model delete page", "admin_views.tests.AdminViewBasicTest.test_change_list_null_boolean_display", "admin_views.tests.TestEtagWithAdminView.test_admin", "admin_views.tests.AdminViewListEditable.test_list_editable_pagination", "admin_views.tests.TestCustomChangeList.test_custom_changelist", "admin_views.tests.AdminViewPermissionsTest.test_disabled_permissions_when_logged_in", "admin_views.tests.AdminViewPermissionsTest.test_login_successfully_redirects_to_original_URL", "admin_views.tests.AdminViewBasicTest.test_change_list_sorting_model_admin_reverse", "admin_views.tests.CSSTest.test_field_prefix_css_classes", "Tests a custom action defined in a ModelAdmin method", "admin_views.tests.AdminActionsTest.test_model_admin_default_delete_action_protected", "admin_views.tests.AdminViewListEditable.test_list_editable_action_choices", "JavaScript-assisted auto-focus on first usable form field.", "admin_views.tests.AdminCustomTemplateTests.test_extended_bodyclass_template_change_password", "Tests a custom action defined in a function", "admin_views.tests.AdminViewBasicTest.test_proxy_model_content_type_is_used_for_log_entries", "admin_views.tests.CSSTest.test_changelist_field_classes", "admin_views.tests.AdminCustomTemplateTests.test_extended_bodyclass_template_index", "admin_views.tests.AdminViewStringPrimaryKeyTest.test_logentry_save", "admin_views.tests.AdminActionsTest.test_default_redirect", "admin_views.tests.CSSTest.test_app_model_in_delete_confirmation_body_class", "admin_views.tests.AdminViewBasicTest.test_change_list_sorting_callable", "admin_views.tests.CSSTest.test_app_model_in_delete_selected_confirmation_body_class", "admin_views.tests.AdminViewPermissionsTest.test_conditionally_show_change_section_link", "admin_views.tests.AdminViewListEditable.test_list_editable_popup", "admin_views.tests.GroupAdminTest.test_group_permission_performance", "Ensure that hidden pk fields aren't displayed in the table body and", "Ensure that inline models which inherit from a common parent are correctly handled by admin.", "admin_views.tests.AdminSearchTest.test_reset_link", "admin_views.tests.AdminUserMessageTest.test_message_info", "admin_views.tests.AdminUserMessageTest.test_message_success", "Check the never-cache status of a model add page", "admin_views.tests.CustomModelAdminTest.test_custom_admin_site_view", "admin_views.tests.NamespacedAdminKeepChangeListFiltersTests.test_delete_view", "admin_views.tests.UserAdminTest.test_save_button", "If USE_THOUSAND_SEPARATOR is set, make sure that the ids for", "admin_views.tests.AdminActionsTest.test_user_message_on_no_action", "admin_views.tests.AdminViewBasicTest.test_popup_add_POST", "admin_views.tests.AdminViewLogoutTests.test_logout", "admin_views.tests.AdminJavaScriptTest.test_js_minified_only_if_debug_is_false", "admin_views.tests.AdminUserMessageTest.test_message_debug", "admin_views.tests.AdminCustomTemplateTests.test_filter_with_custom_template", "Check the never-cache status of logout view", "admin_views.tests.AdminViewListEditable.test_changelist_input_html", "admin_views.tests.AdminViewOnSiteTests.test_change_view_form_and_formsets_run_validation", "admin_views.tests.AdminViewBasicTest.test_i18n_language_non_english_fallback", "admin_views.tests.AdminViewBasicTest.test_named_group_field_choices_change_list", "admin_views.tests.PrePopulatedTest.test_prepopulated_maxlength_localized", "admin_views.tests.ReadonlyTest.test_readonly_post", "admin_views.tests.AdminCustomTemplateTests.test_extended_bodyclass_template_delete_selected_confirmation", "Ensure admin changelist filters do not contain objects excluded via limit_choices_to.", "admin_views.tests.AdminCustomTemplateTests.test_extended_bodyclass_template_login", "admin_views.tests.SecureViewTests.test_secure_view_shows_login_if_not_logged_in", "admin_views.tests.AdminViewBasicTest.test_basic_inheritance_GET_string_PK", "admin_views.tests.AdminViewBasicTest.test_change_list_sorting_override_model_admin", "admin_views.tests.RawIdFieldsTest.test_list_display_method_same_name_as_reverse_accessor", "admin_views.tests.AdminViewBasicTest.test_basic_add_POST", "Tests a custom action that returns an HttpResponse with 403 code.", "admin_views.tests.AdminCustomQuerysetTest.test_edit_model_modeladmin_defer_qs", "admin_views.tests.AdminViewBasicTest.test_relation_spanning_filters", "admin_views.tests.SecureViewTests.test_staff_member_required_decorator_works_with_argument", "admin_views.tests.SeleniumAdminViewsFirefoxTests.test_collapsible_fieldset", "admin_views.tests.AdminKeepChangeListFiltersTests.test_changelist_view", "admin_views.tests.ReadonlyTest.test_correct_autoescaping", "User addition through a FK popup should return the appropriate JavaScript response.", "admin_views.tests.UserAdminTest.test_save_continue_editing_button", "The link from the recent actions list referring to the changeform of the object should be quoted", "admin_views.tests.CustomModelAdminTest.test_pwd_change_custom_template", "admin_views.tests.AdminViewUnicodeTest.test_unicode_edit", "LogEntry.get_edited_object returns the edited object of a given LogEntry object", "Ensure that the right link is displayed if view_on_site is a callable", "admin_views.tests.DateHierarchyTests.test_multiple_years", "admin_views.tests.ReadonlyTest.test_readonly_manytomany_backwards_ref", "Check the never-cache status of the password change view", "Check the never-cache status of a model index", "admin_views.tests.AdminViewBasicTest.test_sort_indicators_admin_order", "admin_views.tests.AdminViewBasicTest.test_named_group_field_choices_filter", "admin_views.tests.UserAdminTest.test_save_add_another_button", "Similarly as test_pk_hidden_fields, but when the hidden pk fields are", "admin_views.tests.AdminViewListEditable.test_inheritance_2", "admin_views.tests.CustomModelAdminTest.test_custom_admin_site_password_change_done_template", "admin_views.tests.AdminSearchTest.test_pluggable_search", "admin_views.tests.GetFormsetsWithInlinesArgumentTest.test_explicitly_provided_pk", "admin_views.tests.CustomModelAdminTest.test_custom_admin_site_app_index_view_and_template", "A model with an explicit autofield primary key can be saved as inlines. Regression for #8093", "admin_views.tests.ReadonlyTest.test_readonly_get", "admin_views.tests.AdminViewBasicTest.test_multiple_sort_same_field", "admin_views.tests.AdminViewBasicTest.test_change_list_sorting_preserve_queryset_ordering", "admin_views.tests.AdminViewListEditable.test_list_editable_ordering", "Check the never-cache status of a model history page", "admin_views.tests.AdminActionsTest.test_popup_template_response", "admin_views.tests.AdminViewBasicTest.test_admin_static_template_tag", "admin_views.tests.AdminViewPermissionsTest.test_has_module_permission", "admin_views.tests.AdminViewPermissionsTest.test_login", "admin_views.tests.TestGenericRelations.test_generic_content_object_in_list_display", "Check the never-cache status of the main index", "admin_views.tests.UserAdminTest.test_user_permission_performance", "admin_views.tests.AdminViewBasicTest.test_change_list_sorting_model", "admin_views.tests.SaveAsTests.test_save_as_new_with_validation_errors", "admin_views.tests.AdminViewBasicTest.test_allows_attributeerror_to_bubble_up", "A simple model can be saved as inlines", "Regression test for 20182", "admin_views.tests.GroupAdminTest.test_save_button", "admin_views.tests.AdminViewBasicTest.test_trailing_slash_required", "admin_views.tests.AdminViewListEditable.test_inheritance", "admin_views.tests.DateHierarchyTests.test_single", "admin_views.tests.AdminCustomSaveRelatedTests.test_should_be_able_to_edit_related_objects_on_changelist_view", "admin_views.tests.AdminViewPermissionsTest.test_shortcut_view_only_available_to_staff", "admin_views.tests.AdminActionsTest.test_actions_ordering", "admin_views.tests.NamespacedAdminKeepChangeListFiltersTests.test_assert_url_equal", "Object history button link should work and contain the pk value quoted.", "admin_views.tests.AdminViewBasicTest.test_changelist_with_no_change_url", "admin_views.tests.TestInlineNotEditable.test_GET_parent_add", "admin_views.tests.AdminSearchTest.test_exact_matches", "admin_views.tests.AdminSearchTest.test_no_total_count", "admin_views.tests.SeleniumAdminViewsFirefoxTests.test_populate_existing_object", "admin_views.tests.AdminDocsTest.test_tags", "admin_views.tests.AdminViewBasicTest.test_basic_edit_GET", "A model with a primary key that ends with history should be visible", "Delete view should restrict access and actually delete items.", "Check the never-cache status of login views", "admin_views.tests.AdminActionsTest.test_selection_counter", "admin_views.tests.AdminViewBasicTest.test_L10N_deactivated", "admin_views.tests.AdminViewListEditable.test_custom_pk", "Tests a custom action that returns a StreamingHttpResponse.", "admin_views.tests.AdminViewBasicTest.test_logout_and_password_change_URLs", "admin_views.tests.AdminKeepChangeListFiltersTests.test_change_view", "admin_views.tests.AdminViewBasicTest.test_edit_save_as_delete_inline", "admin_views.tests.SeleniumAdminViewsFirefoxTests.test_inline_uuid_pk_add_with_popup", "admin_views.tests.AdminCustomTemplateTests.test_extended_bodyclass_template_delete_confirmation", "admin_views.tests.AdminViewOnSiteTests.test_add_view_form_and_formsets_run_validation", "An inherited model can be saved as inlines. Regression for #11042", "admin_views.tests.AdminViewPermissionsTest.test_app_index_fail_early", "admin_views.tests.AdminViewListEditable.test_list_editable_action_submit", "Regression test for 14880", "admin_views.tests.SeleniumAdminViewsFirefoxTests.test_list_editable_raw_id_fields", "User deletion through a FK popup should return the appropriate JavaScript response.", "Regression test for #13004", "admin_views.tests.AdminViewFormUrlTest.test_initial_data_can_be_overridden", "Tests that the checkbox column class is present in the response", "User change through a FK popup should return the appropriate JavaScript response.", "admin_views.tests.CustomModelAdminTest.test_custom_admin_site_login_form", "admin_views.tests.AdminActionsTest.test_model_admin_default_delete_action_no_change_url", "admin_views.tests.CustomModelAdminTest.test_custom_admin_site_logout_template", "admin_views.tests.SaveAsTests.test_save_as_new_with_inlines_with_validation_errors", "admin_views.tests.AdminCustomQuerysetTest.test_edit_model_modeladmin_only_qs", "admin_views.tests.AdminViewBasicTest.test_allowed_filtering_15103", "Ensure is_null is handled correctly.", "admin_views.tests.CustomModelAdminTest.test_custom_admin_site_password_change_with_extra_context", "admin_views.tests.AdminViewBasicTest.test_basic_edit_POST", "admin_views.tests.AdminViewPermissionsTest.test_overriding_has_module_permission", "admin_views.tests.ReadonlyTest.test_user_password_change_limited_queryset", "admin_views.tests.CustomModelAdminTest.test_custom_admin_site_index_view_and_template", "Check the never-cache status of the password change done view", "admin_views.tests.AdminKeepChangeListFiltersTests.test_add_view", "admin_views.tests.AdminViewBasicTest.test_basic_edit_GET_old_url_redirect", "Change view should restrict access and allow users to edit items.", "The link from the delete confirmation page referring back to the changeform of the object should be quoted", "admin_views.tests.AdminViewBasicTest.test_add_with_GET_args", "admin_views.tests.CSSTest.test_app_model_in_form_body_class", "Actions should not be shown in popups.", "If a LogEntry is missing content_type it will not display it in span tag under the hyperlink.", "admin_views.tests.AdminCustomQuerysetTest.test_changelist_view_count_queries", "admin_views.tests.AdminViewBasicTest.test_change_list_sorting_multiple", "admin_views.tests.DateHierarchyTests.test_empty", "admin_views.tests.AdminViewBasicTest.test_resolve_admin_views", "Tests a ModelAdmin without any action", "admin_views.tests.PrePopulatedTest.test_prepopulated_off", "admin_views.tests.AdminViewBasicTest.test_invalid_appindex_url", "Check that a search that mentions sibling models", "admin_views.tests.AdminCustomTemplateTests.test_custom_model_admin_templates", "admin_views.tests.AdminKeepChangeListFiltersTests.test_delete_view", "admin_views.tests.AdminCustomTemplateTests.test_extended_bodyclass_template_change_form", "admin_views.tests.AdminViewStringPrimaryKeyTest.test_logentry_get_admin_url", "Ensure save as actually creates a new person", "History view should restrict access.", "admin_views.tests.ReadonlyTest.test_readonly_field_overrides", "admin_views.tests.AdminViewBasicTest.test_popup_dismiss_related", "A model with a character PK can be saved as inlines. Regression for #10992", "admin_views.tests.ReadonlyTest.test_readonly_text_field", "admin_views.tests.AdminViewBasicTest.test_hide_change_password", "admin_views.tests.CSSTest.test_app_model_in_app_index_body_class", "admin_views.tests.SeleniumAdminViewsFirefoxTests.test_inline_uuid_pk_edit_with_popup", "Check the never-cache status of an application index", "admin_views.tests.AdminViewPermissionsTest.test_conditionally_show_delete_section_link", "admin_views.tests.CSSTest.test_app_model_in_list_body_class", "Ensure that the 'View on site' button is displayed if view_on_site is True", "admin_views.tests.ReadonlyTest.test_change_form_renders_correct_null_choice_value", "admin_views.tests.AdminViewBasicTest.test_change_list_sorting_model_admin", "Ensure that the view_on_site value is either a boolean or a callable", "A model with a primary key that ends with delete should be visible", "admin_views.tests.CustomModelAdminTest.test_custom_admin_site_password_change_template", "admin_views.tests.AdminViewBasicTest.test_adminsite_display_site_url", "admin_views.tests.AdminViewBasicTest.test_disallowed_to_field", "admin_views.tests.ReadonlyTest.test_readonly_onetoone_backwards_ref", "admin_views.tests.NamespacedAdminKeepChangeListFiltersTests.test_change_view", "admin_views.tests.AdminViewPermissionsTest.test_login_page_notice_for_non_staff_users", "Ensure None is returned if model doesn't have get_absolute_url", "admin_views.tests.NamespacedAdminKeepChangeListFiltersTests.test_add_view", "Link to the changeform of the object in changelist should use reverse() and be quoted -- #18072", "admin_views.tests.AdminDocsTest.test_filters", "admin_views.tests.AdminViewPermissionsTest.test_change_view_save_as_new", "admin_views.tests.SeleniumAdminViewsFirefoxTests.test_cancel_delete_related_confirmation", "admin_views.tests.AdminCustomQuerysetTest.test_add_model_modeladmin_only_qs", "admin_views.tests.TestLabelVisibility.test_all_fields_hidden", "admin_views.tests.AdminCustomQuerysetTest.test_add_model_modeladmin_defer_qs", "admin_views.tests.ValidXHTMLTests.test_lang_name_present", "admin_views.tests.AdminViewPermissionsTest.test_conditionally_show_add_section_link", "Retrieving the object using urlencoded form of primary key should work", "Tests the default delete action defined as a ModelAdmin method", "admin_views.tests.AdminViewListEditable.test_non_form_errors", "admin_views.tests.AdminViewPermissionsTest.test_login_has_permission", "admin_views.tests.AdminActionsTest.test_user_message_on_none_selected", "admin_views.tests.AdminUserMessageTest.test_message_warning", "admin_views.tests.AdminUserMessageTest.test_message_extra_tags", "admin_views.tests.AdminActionsTest.test_multiple_actions_form", "admin_views.tests.AdminUserMessageTest.test_message_error", "admin_views.tests.AdminKeepChangeListFiltersTests.test_url_prefix", "admin_views.tests.AdminCustomSaveRelatedTests.test_should_be_able_to_edit_related_objects_on_change_view", "admin_views.tests.DateHierarchyTests.test_within_year", "admin_views.tests.AdminViewFormUrlTest.test_change_form_URL_has_correct_value", "admin_views.tests.AdminViewBasicTest.test_change_view_with_show_delete_extra_context", "Admin index views don't break when user's ModelAdmin removes standard urls"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_386", "original_commit_message": "[5.0.x] Fixed CVE-2024-39614 -- Mitigated potential DoS in get_supported_language_variant().\nLanguage codes are now parsed with a maximum length limit of 500 chars.\nThanks to MProgrammer for the report.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py\nindex a629528717..4439fdad3f 100644\n--- a/django/utils/translation/trans_real.py\n+++ b/django/utils/translation/trans_real.py\n@@ -32,9 +32,10 @@ _default = None\n CONTEXT_SEPARATOR = \"\\x04\"\n \n # Maximum number of characters that will be parsed from the Accept-Language\n-# header to prevent possible denial of service or memory exhaustion attacks.\n-# About 10x longer than the longest value shown on MDN’s Accept-Language page.\n-ACCEPT_LANGUAGE_HEADER_MAX_LENGTH = 500\n+# header or cookie to prevent possible denial of service or memory exhaustion\n+# attacks. About 10x longer than the longest value shown on MDN’s\n+# Accept-Language page.\n+LANGUAGE_CODE_MAX_LENGTH = 500\n \n # Format of Accept-Language header values. From RFC 9110 Sections 12.4.2 and\n # 12.5.4, and RFC 5646 Section 2.1.\n@@ -498,11 +499,25 @@ def get_supported_language_variant(lang_code, strict=False):\n     If `strict` is False (the default), look for a country-specific variant\n     when neither the language code nor its generic variant is found.\n \n+    The language code is truncated to a maximum length to avoid potential\n+    denial of service attacks.\n+\n     lru_cache should have a maxsize to prevent from memory exhaustion attacks,\n     as the provided language codes are taken from the HTTP request. See also\n     <https://www.djangoproject.com/weblog/2007/oct/26/security-fix/>.\n     \"\"\"\n     if lang_code:\n+        # Truncate the language code to a maximum length to avoid potential\n+        # denial of service attacks.\n+        if len(lang_code) > LANGUAGE_CODE_MAX_LENGTH:\n+            if (\n+                not strict\n+                and (index := lang_code.rfind(\"-\", 0, LANGUAGE_CODE_MAX_LENGTH)) > 0\n+            ):\n+                # There is a generic variant under the maximum length accepted length.\n+                lang_code = lang_code[:index]\n+            else:\n+                raise ValueError(\"'lang_code' exceeds the maximum accepted length\")\n         # If 'zh-hant-tw' is not supported, try special fallback or subsequent\n         # language codes i.e. 'zh-hant' and 'zh'.\n         possible_lang_codes = [lang_code]\n@@ -626,13 +641,13 @@ def parse_accept_lang_header(lang_string):\n     functools.lru_cache() to avoid repetitive parsing of common header values.\n     \"\"\"\n     # If the header value doesn't exceed the maximum allowed length, parse it.\n-    if len(lang_string) <= ACCEPT_LANGUAGE_HEADER_MAX_LENGTH:\n+    if len(lang_string) <= LANGUAGE_CODE_MAX_LENGTH:\n         return _parse_accept_lang_header(lang_string)\n \n     # If there is at least one comma in the value, parse up to the last comma\n     # before the max length, skipping any truncated parts at the end of the\n     # header value.\n-    if (index := lang_string.rfind(\",\", 0, ACCEPT_LANGUAGE_HEADER_MAX_LENGTH)) > 0:\n+    if (index := lang_string.rfind(\",\", 0, LANGUAGE_CODE_MAX_LENGTH)) > 0:\n         return _parse_accept_lang_header(lang_string[:index])\n \n     # Don't attempt to parse if there is only one language-range value which is\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/i18n/tests.py b/tests/i18n/tests.py\nindex d44ddb9f83..c023d75291 100644\n--- a/tests/i18n/tests.py\n+++ b/tests/i18n/tests.py\n@@ -58,6 +58,7 @@ from django.utils.translation.reloader import (\n     translation_file_changed,\n     watch_for_translation_changes,\n )\n+from django.utils.translation.trans_real import LANGUAGE_CODE_MAX_LENGTH\n \n from .forms import CompanyForm, I18nForm, SelectDateForm\n from .models import Company, TestModel\n@@ -1672,6 +1673,16 @@ class MiscTests(SimpleTestCase):\n             g(\"xyz\")\n         with self.assertRaises(LookupError):\n             g(\"xy-zz\")\n+        msg = \"'lang_code' exceeds the maximum accepted length\"\n+        with self.assertRaises(LookupError):\n+            g(\"x\" * LANGUAGE_CODE_MAX_LENGTH)\n+        with self.assertRaisesMessage(ValueError, msg):\n+            g(\"x\" * (LANGUAGE_CODE_MAX_LENGTH + 1))\n+        # 167 * 3 = 501 which is LANGUAGE_CODE_MAX_LENGTH + 1.\n+        self.assertEqual(g(\"en-\" * 167), \"en\")\n+        with self.assertRaisesMessage(ValueError, msg):\n+            g(\"en-\" * 167, strict=True)\n+        self.assertEqual(g(\"en-\" * 30000), \"en\")  # catastrophic test\n \n     def test_get_supported_language_variant_null(self):\n         g = trans_null.get_supported_language_variant\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "8e7a44e4bec0f11474699c3111a5e0a45afe7f49", "source_date": "Tue Jul 9 10:03:38 2024 -0300", "source_tag": "5.0.7", "target_commit": "17358fb35fb7217423d4c4877ccb6d1a3a40b1c3", "target_date": "Tue Jul 9 10:40:50 2024 -0300", "target_tag": "4.2.14", "FAIL TO PASS": ["unittest.loader._FailedTest.i18n.tests"], "PASS TO PASS": ["i18n.patterns.tests.URLResponseTests.test_pt_br_url", "i18n.patterns.tests.URLRedirectTests.test_nl_redirect", "i18n.test_percents.RenderingTemplatesWithPercentSigns.test_translates_with_percent_symbol_using_context", "i18n.patterns.tests.RequestURLConfTests.test_request_urlconf_considered", "i18n.patterns.tests.URLResponseTests.test_wrong_nl_prefix", "i18n.patterns.tests.URLResponseTests.test_nl_url", "i18n.test_percents.RenderingTemplatesWithPercentSigns.test_translates_multiple_percent_signs", "i18n.patterns.tests.URLTranslationTests.test_no_prefix_translated", "i18n.test_management.TranslatableFileTests.test_repr", "i18n.patterns.tests.URLResponseTests.test_en_url", "i18n.test_percents.RenderingTemplatesWithPercentSigns.test_translates_with_string_that_look_like_fmt_spec_with_trans", "i18n.patterns.tests.URLRedirectTests.test_pt_br_redirect", "i18n.patterns.tests.URLPrefixTests.test_not_prefixed", "i18n.test_percents.ExtractingStringsWithPercentSigns.test_trans_tag_with_string_that_look_like_fmt_spec", "i18n.patterns.tests.URLRedirectWithoutTrailingSlashTests.test_not_prefixed_redirect", "i18n.patterns.tests.URLPrefixTests.test_invalid_prefix_use", "i18n.patterns.tests.URLTagTests.test_context", "i18n.patterns.tests.URLPrefixTests.test_prefixed", "i18n.patterns.tests.URLPrefixedFalseTranslatedTests.test_translated_path_prefixed_language_other_than_accepted_header", "i18n.patterns.tests.URLTagTests.test_kwargs", "i18n.patterns.tests.URLTagTests.test_strings_only", "i18n.test_percents.RenderingTemplatesWithPercentSigns.test_translates_with_percent_symbol_in_the_middle", "i18n.test_percents.ExtractingStringsWithPercentSigns.test_trans_tag_with_percent_symbol_at_the_end", "i18n.patterns.tests.URLRedirectTests.test_en_redirect", "i18n.patterns.tests.URLResponseTests.test_nl_path", "i18n.test_management.TranslatableFileTests.test_eq", "i18n.patterns.tests.URLRedirectWithScriptAliasTests.test_language_prefix_with_script_prefix", "i18n.patterns.tests.URLResponseTests.test_en_path", "i18n.patterns.tests.URLRedirectWithoutTrailingSlashSettingTests.test_en_redirect", "i18n.patterns.tests.URLTranslationTests.test_reverse_translated_with_captured_kwargs", "i18n.patterns.tests.URLVaryAcceptLanguageTests.test_no_prefix_response", "i18n.patterns.tests.URLDisabledTests.test_prefixed_i18n_disabled", "i18n.test_percents.ExtractingStringsWithPercentSigns.test_trans_tag_with_percent_symbol_in_the_middle", "i18n.patterns.tests.URLRedirectWithoutTrailingSlashSettingTests.test_not_prefixed_redirect", "i18n.test_percents.ExtractingStringsWithPercentSigns.test_adds_python_format_to_all_percent_signs", "i18n.patterns.tests.URLTranslationTests.test_users_url", "i18n.patterns.tests.URLTranslationTests.test_locale_not_interepreted_as_regex", "i18n.patterns.tests.URLRedirectTests.test_pl_pl_redirect", "i18n.patterns.tests.URLResponseTests.test_wrong_en_prefix", "i18n.patterns.tests.URLPrefixedFalseTranslatedTests.test_translated_path_prefixed_language_other_than_cookie_language", "i18n.patterns.tests.URLTranslationTests.test_translate_url_utility", "i18n.patterns.tests.URLRedirectTests.test_no_prefix_response", "i18n.patterns.tests.PathUnusedTests.test_no_lang_activate", "i18n.contenttypes.tests.ContentTypeTests.test_verbose_name", "i18n.patterns.tests.URLRedirectTests.test_custom_redirect_class", "i18n.patterns.tests.URLRedirectWithoutTrailingSlashTests.test_en_redirect", "i18n.patterns.tests.URLRedirectTests.test_nl_redirect_wrong_url", "i18n.patterns.tests.URLNamespaceTests.test_account_register", "i18n.patterns.tests.URLTagTests.test_args", "i18n.patterns.tests.URLPrefixedFalseTranslatedTests.test_translated_path_unprefixed_language_other_than_accepted_header", "i18n.patterns.tests.URLRedirectTests.test_en_redirect_wrong_url", "i18n.patterns.tests.URLPrefixedFalseTranslatedTests.test_translated_path_unprefixed_language_other_than_cookie_language", "The redirect to a prefixed URL depends on 'Accept-Language' and", "i18n.test_percents.RenderingTemplatesWithPercentSigns.test_translates_with_a_percent_symbol_at_the_end", "i18n.patterns.tests.URLResponseTests.test_not_prefixed_with_prefix"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_387", "original_commit_message": "[1.6.x] Prevented reverse() from generating URLs pointing to other hosts.\nThis is a security fix. Disclosure following shortly.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/core/urlresolvers.py b/django/core/urlresolvers.py\nindex b3008e88c4..4f251ab4ce 100644\n--- a/django/core/urlresolvers.py\n+++ b/django/core/urlresolvers.py\n@@ -435,7 +435,11 @@ class RegexURLResolver(LocaleRegexProvider):\n                 candidate_pat = prefix_norm.replace('%', '%%') + result\n                 if re.search('^%s%s' % (prefix_norm, pattern), candidate_pat % candidate_subs, re.UNICODE):\n                     candidate_subs = dict((k, urlquote(v)) for (k, v) in candidate_subs.items())\n-                    return candidate_pat % candidate_subs\n+                    url = candidate_pat % candidate_subs\n+                    # Don't allow construction of scheme relative urls.\n+                    if url.startswith('//'):\n+                        url = '/%%2F%s' % url[2:]\n+                    return url\n         # lookup_view can be URL label, or dotted path, or callable, Any of\n         # these can be passed in at the top, but callables are not friendly in\n         # error messages.\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 249acc1e37..7df4acf88a 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -147,6 +147,9 @@ test_data = (\n     ('defaults', '/defaults_view2/3/', [], {'arg1': 3, 'arg2': 2}),\n     ('defaults', NoReverseMatch, [], {'arg1': 3, 'arg2': 3}),\n     ('defaults', NoReverseMatch, [], {'arg2': 1}),\n+\n+    # Security tests\n+    ('security', '/%2Fexample.com/security/', ['/example.com'], {}),\n )\n \n class NoURLPatternsTests(TestCase):\n\ndiff --git a/tests/urlpatterns_reverse/urls.py b/tests/urlpatterns_reverse/urls.py\nindex ac112c69cb..74c881eb1b 100644\n--- a/tests/urlpatterns_reverse/urls.py\n+++ b/tests/urlpatterns_reverse/urls.py\n@@ -71,4 +71,7 @@ urlpatterns = patterns('',\n     (r'defaults_view2/(?P<arg1>\\d+)/', 'defaults_view', {'arg2': 2}, 'defaults'),\n \n     url('^includes/', include(other_patterns)),\n+\n+    # Security tests\n+    url('(.+)/security/$', empty_view, name='security'),\n )\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location & namespace changes", "source_commit": "da051da8df5e69944745072611351d4cfc6435d5", "source_date": "Wed Aug 20 11:43:43 2014 -0400", "source_tag": "1.6.6", "target_commit": "45ac9d4fb087d21902469fc22643f5201d41a0cd", "target_date": "Wed Aug 20 11:44:02 2014 -0400", "target_tag": "1.5.9", "FAIL TO PASS": ["regressiontests.urlpatterns_reverse.tests.URLPatternReverse.test_urlpattern_reverse"], "PASS TO PASS": ["Names deployed via dynamic URL objects that require namespaces can't be resolved", "regressiontests.urlpatterns_reverse.tests.RequestURLconfTests.test_urlconf_overridden", "regressiontests.urlpatterns_reverse.tests.ReverseShortcutTests.test_redirect_to_object", "regressiontests.urlpatterns_reverse.tests.ErroneousViewTests.test_erroneous_resolve", "regressiontests.urlpatterns_reverse.tests.ResolverMatchTests.test_urlpattern_resolve", "regressiontests.urlpatterns_reverse.tests.URLPatternReverse.test_prefix_format_char", "regressiontests.urlpatterns_reverse.tests.ErroneousViewTests.test_erroneous_reverse", "regressiontests.urlpatterns_reverse.tests.URLPatternReverse.test_prefix_braces", "regressiontests.urlpatterns_reverse.tests.ErrorHandlerResolutionTests.test_callable_handers", "Normal lookups work on names included from other patterns", "Namespaces can be installed anywhere in the URL pattern tree", "A default application namespace can be used for lookup", "regressiontests.urlpatterns_reverse.tests.NamespaceTests.test_special_chars_namespace", "Namespaces can be applied to include()'d urlpatterns", "Namespace prefixes can capture variables: see #15900", "regressiontests.urlpatterns_reverse.tests.ResolverTests.test_non_regex", "regressiontests.urlpatterns_reverse.tests.URLPatternReverse.test_reverse_none", "When using a include with namespaces when there is a regex variable in front of it", "An application namespace without a default is sensitive to the 'current' app can be used for lookup", "regressiontests.urlpatterns_reverse.tests.NoRootUrlConfTests.test_no_handler_exception", "regressiontests.urlpatterns_reverse.tests.ReverseShortcutTests.test_no_illegal_imports", "regressiontests.urlpatterns_reverse.tests.RequestURLconfTests.test_urlconf_overridden_with_null", "regressiontests.urlpatterns_reverse.tests.ViewLoadingTests.test_view_loading", "regressiontests.urlpatterns_reverse.tests.URLPatternReverse.test_prefix_parenthesis", "regressiontests.urlpatterns_reverse.tests.ReverseLazyTest.test_user_permission_with_lazy_reverse", "regressiontests.urlpatterns_reverse.tests.ReverseShortcutTests.test_redirect_view_object", "regressiontests.urlpatterns_reverse.tests.ResolverTests.test_resolver_repr", "regressiontests.urlpatterns_reverse.tests.ReverseLazyTest.test_redirect_with_lazy_reverse", "regressiontests.urlpatterns_reverse.tests.ReverseShortcutTests.test_reverse_by_path_nested", "Dynamic URL objects can be found using a namespace", "regressiontests.urlpatterns_reverse.tests.ResolverMatchTests.test_resolver_match_on_request", "Normal lookups work as expected", "If the urls.py doesn't specify handlers, the defaults are used", "Non-existent namespaces raise errors", "Namespaces can be embedded", "regressiontests.urlpatterns_reverse.tests.NoURLPatternsTests.test_no_urls_exception", "regressiontests.urlpatterns_reverse.tests.RequestURLconfTests.test_urlconf", "regressiontests.urlpatterns_reverse.tests.ReverseShortcutTests.test_redirect_to_url", "regressiontests.urlpatterns_reverse.tests.ReverseShortcutTests.test_redirect_to_view_name", "A default application namespace is sensitive to the 'current' app can be used for lookup", "regressiontests.urlpatterns_reverse.tests.ResolverTests.test_404_tried_urls_have_names", "Namespaces can be nested", "regressiontests.urlpatterns_reverse.tests.ErrorHandlerResolutionTests.test_named_handlers"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_388", "original_commit_message": "[1.6.x] Prevented reverse() from generating URLs pointing to other hosts.\nThis is a security fix. Disclosure following shortly.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/core/urlresolvers.py b/django/core/urlresolvers.py\nindex b3008e88c4..4f251ab4ce 100644\n--- a/django/core/urlresolvers.py\n+++ b/django/core/urlresolvers.py\n@@ -435,7 +435,11 @@ class RegexURLResolver(LocaleRegexProvider):\n                 candidate_pat = prefix_norm.replace('%', '%%') + result\n                 if re.search('^%s%s' % (prefix_norm, pattern), candidate_pat % candidate_subs, re.UNICODE):\n                     candidate_subs = dict((k, urlquote(v)) for (k, v) in candidate_subs.items())\n-                    return candidate_pat % candidate_subs\n+                    url = candidate_pat % candidate_subs\n+                    # Don't allow construction of scheme relative urls.\n+                    if url.startswith('//'):\n+                        url = '/%%2F%s' % url[2:]\n+                    return url\n         # lookup_view can be URL label, or dotted path, or callable, Any of\n         # these can be passed in at the top, but callables are not friendly in\n         # error messages.\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 249acc1e37..7df4acf88a 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -147,6 +147,9 @@ test_data = (\n     ('defaults', '/defaults_view2/3/', [], {'arg1': 3, 'arg2': 2}),\n     ('defaults', NoReverseMatch, [], {'arg1': 3, 'arg2': 3}),\n     ('defaults', NoReverseMatch, [], {'arg2': 1}),\n+\n+    # Security tests\n+    ('security', '/%2Fexample.com/security/', ['/example.com'], {}),\n )\n \n class NoURLPatternsTests(TestCase):\n\ndiff --git a/tests/urlpatterns_reverse/urls.py b/tests/urlpatterns_reverse/urls.py\nindex ac112c69cb..74c881eb1b 100644\n--- a/tests/urlpatterns_reverse/urls.py\n+++ b/tests/urlpatterns_reverse/urls.py\n@@ -71,4 +71,7 @@ urlpatterns = patterns('',\n     (r'defaults_view2/(?P<arg1>\\d+)/', 'defaults_view', {'arg2': 2}, 'defaults'),\n \n     url('^includes/', include(other_patterns)),\n+\n+    # Security tests\n+    url('(.+)/security/$', empty_view, name='security'),\n )\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location & namespace changes", "source_commit": "da051da8df5e69944745072611351d4cfc6435d5", "source_date": "Wed Aug 20 11:43:43 2014 -0400", "source_tag": "1.6.6", "target_commit": "c2fe73133b62a1d9e8f7a6b43966570b14618d7e", "target_date": "Mon Aug 11 09:04:23 2014 -0400", "target_tag": "1.4.14", "FAIL TO PASS": ["regressiontests.urlpatterns_reverse.tests.URLPatternReverse.test_urlpattern_reverse"], "PASS TO PASS": ["Names deployed via dynamic URL objects that require namespaces can't be resolved", "regressiontests.urlpatterns_reverse.tests.RequestURLconfTests.test_urlconf_overridden", "regressiontests.urlpatterns_reverse.tests.ReverseShortcutTests.test_redirect_to_object", "regressiontests.urlpatterns_reverse.tests.ErroneousViewTests.test_erroneous_resolve", "regressiontests.urlpatterns_reverse.tests.ResolverMatchTests.test_urlpattern_resolve", "regressiontests.urlpatterns_reverse.tests.ErrorHandlerResolutionTests.test_callable_handers", "Normal lookups work on names included from other patterns", "Namespaces can be installed anywhere in the URL pattern tree", "A default application namespace can be used for lookup", "regressiontests.urlpatterns_reverse.tests.NamespaceTests.test_special_chars_namespace", "Namespaces can be applied to include()'d urlpatterns", "Namespace prefixes can capture variables: see #15900", "regressiontests.urlpatterns_reverse.tests.ResolverTests.test_non_regex", "regressiontests.urlpatterns_reverse.tests.URLPatternReverse.test_reverse_none", "When using a include with namespaces when there is a regex variable in front of it", "An application namespace without a default is sensitive to the 'current' app can be used for lookup", "regressiontests.urlpatterns_reverse.tests.NoRootUrlConfTests.test_no_handler_exception", "regressiontests.urlpatterns_reverse.tests.ReverseShortcutTests.test_no_illegal_imports", "regressiontests.urlpatterns_reverse.tests.RequestURLconfTests.test_urlconf_overridden_with_null", "regressiontests.urlpatterns_reverse.tests.ReverseLazyTest.test_user_permission_with_lazy_reverse", "regressiontests.urlpatterns_reverse.tests.ReverseShortcutTests.test_redirect_view_object", "regressiontests.urlpatterns_reverse.tests.ReverseLazyTest.test_redirect_with_lazy_reverse", "regressiontests.urlpatterns_reverse.tests.ReverseShortcutTests.test_reverse_by_path_nested", "Dynamic URL objects can be found using a namespace", "Normal lookups work as expected", "If the urls.py doesn't specify handlers, the defaults are used", "Non-existent namespaces raise errors", "Namespaces can be embedded", "regressiontests.urlpatterns_reverse.tests.NoURLPatternsTests.test_no_urls_exception", "regressiontests.urlpatterns_reverse.tests.RequestURLconfTests.test_urlconf", "regressiontests.urlpatterns_reverse.tests.ReverseShortcutTests.test_redirect_to_url", "regressiontests.urlpatterns_reverse.tests.ReverseShortcutTests.test_redirect_to_view_name", "A default application namespace is sensitive to the 'current' app can be used for lookup", "regressiontests.urlpatterns_reverse.tests.ResolverTests.test_404_tried_urls_have_names", "Namespaces can be nested", "regressiontests.urlpatterns_reverse.tests.ErrorHandlerResolutionTests.test_named_handlers"]}
{"ecosystem": "maven", "repo": "xwiki-platform", "instance_id": "xwiki-platform_1413", "original_commit_message": "XWIKI-21337: Apply PDF templates with the rights of their authors", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/pdf/impl/PdfExportImpl.java b/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/pdf/impl/PdfExportImpl.java\nindex 9f471406bc6..b4d86b793d5 100644\n--- a/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/pdf/impl/PdfExportImpl.java\n+++ b/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/pdf/impl/PdfExportImpl.java\n@@ -29,6 +29,7 @@\n import java.io.StringWriter;\n import java.lang.reflect.Type;\n import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n@@ -37,9 +38,9 @@\n \n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.exception.ExceptionUtils;\n import org.apache.commons.lang3.RandomStringUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.velocity.VelocityContext;\n import org.dom4j.Element;\n import org.dom4j.io.OutputFormat;\n@@ -54,8 +55,11 @@\n import org.xwiki.model.reference.DocumentReference;\n import org.xwiki.model.reference.DocumentReferenceResolver;\n import org.xwiki.model.reference.EntityReferenceSerializer;\n+import org.xwiki.security.authorization.AuthorExecutor;\n+import org.xwiki.security.authorization.AuthorizationManager;\n+import org.xwiki.security.authorization.Right;\n+import org.xwiki.user.UserReferenceSerializer;\n import org.xwiki.velocity.VelocityManager;\n-import org.xwiki.velocity.XWikiVelocityException;\n import org.xwiki.xml.EntityResolver;\n import org.xwiki.xml.XMLReaderFactory;\n import org.xwiki.xml.XMLUtils;\n@@ -95,30 +99,37 @@ public class PdfExportImpl implements PdfExport\n     private static final Logger LOGGER = LoggerFactory.getLogger(PdfExportImpl.class);\n \n     /** Document name resolver. */\n-    private static DocumentReferenceResolver<String> referenceResolver =\n+    private final DocumentReferenceResolver<String> referenceResolver =\n         Utils.getComponent(DocumentReferenceResolver.TYPE_STRING, \"currentmixed\");\n \n     /** Document name serializer. */\n-    private static EntityReferenceSerializer<String> referenceSerializer =\n+    private final EntityReferenceSerializer<String> referenceSerializer =\n         Utils.getComponent(EntityReferenceSerializer.TYPE_STRING);\n \n     /** Provides access to document properties. */\n-    private static DocumentAccessBridge dab = Utils.getComponent(DocumentAccessBridge.class);\n+    private final DocumentAccessBridge dab = Utils.getComponent(DocumentAccessBridge.class);\n \n     /** Velocity engine manager, used for interpreting velocity. */\n-    private static VelocityManager velocityManager = Utils.getComponent(VelocityManager.class);\n+    private final VelocityManager velocityManager = Utils.getComponent(VelocityManager.class);\n \n-    private static XMLReaderFactory xmlReaderFactory = Utils.getComponent(XMLReaderFactory.class);\n+    private final XMLReaderFactory xmlReaderFactory = Utils.getComponent(XMLReaderFactory.class);\n+\n+    private final AuthorizationManager authorizationManager = Utils.getComponent(AuthorizationManager.class);\n+\n+    private final AuthorExecutor authorExecutor = Utils.getComponent(AuthorExecutor.class);\n+\n+    private final UserReferenceSerializer<DocumentReference> userReferenceSerializer =\n+        Utils.getComponent(UserReferenceSerializer.TYPE_DOCUMENT_REFERENCE, \"document\");\n \n     /**\n      * Used to get the temporary directory.\n      */\n-    private Environment environment = Utils.getComponent((Type) Environment.class);\n+    private final Environment environment = Utils.getComponent((Type) Environment.class);\n \n     /**\n      * Used to render XSL-FO to PDF.\n      */\n-    private XSLFORenderer xslFORenderer = Utils.getComponent(XSLFORenderer.class, \"fop\");\n+    private final XSLFORenderer xslFORenderer = Utils.getComponent(XSLFORenderer.class, \"fop\");\n \n     @Override\n     public void exportToPDF(XWikiDocument doc, OutputStream out, XWikiContext context) throws XWikiException\n@@ -184,7 +195,7 @@ private String convertToStrictXHtml(String input)\n \n         HTMLCleaner cleaner = Utils.getComponent(HTMLCleaner.class);\n         HTMLCleanerConfiguration config = cleaner.getDefaultConfiguration();\n-        List<HTMLFilter> filters = new ArrayList<HTMLFilter>(config.getFilters());\n+        List<HTMLFilter> filters = new ArrayList<>(config.getFilters());\n         filters.add(Utils.getComponent(HTMLFilter.class, \"uniqueId\"));\n         config.setFilters(filters);\n         String result = HTMLUtils.toString(cleaner.clean(new StringReader(input), config));\n@@ -261,7 +272,7 @@ private void renderXSLFO(String xmlfo, OutputStream out, ExportType type, final\n         throws XWikiException\n     {\n         try {\n-            this.xslFORenderer.render(new ByteArrayInputStream(xmlfo.getBytes(\"UTF-8\")), out, type.getMimeType());\n+            this.xslFORenderer.render(new ByteArrayInputStream(xmlfo.getBytes(StandardCharsets.UTF_8)), out, type.getMimeType());\n         } catch (IllegalStateException e) {\n             throw createException(e, type, XWikiException.ERROR_XWIKI_APP_SEND_RESPONSE_EXCEPTION);\n         } catch (Exception e) {\n@@ -338,7 +349,7 @@ String applyCSS(String html, String css, XWikiContext context)\n \n             // Dom4J 2.1.1 disables external DTDs by default, so we set our own XMLReader.\n             // See https://github.com/dom4j/dom4j/issues/51\n-            XMLReader xmlReader = xmlReaderFactory.createXMLReader();\n+            XMLReader xmlReader = this.xmlReaderFactory.createXMLReader();\n             reader.setXMLReader(xmlReader);\n \n             reader.setEntityResolver(new DefaultEntityResolver());\n@@ -465,28 +476,47 @@ private String getPDFTemplateProperty(String propertyName, XWikiContext context)\n         DocumentReference templateReference;\n         DocumentReference classReference;\n         if (StringUtils.isNotEmpty(pdftemplate)) {\n-            templateReference = referenceResolver.resolve(pdftemplate);\n+            templateReference = this.referenceResolver.resolve(pdftemplate);\n             classReference = new DocumentReference(templateReference.getWikiReference().getName(), \"XWiki\", \"PDFClass\");\n         } else {\n-            templateReference = dab.getCurrentDocumentReference();\n-            String currentWiki = dab.getCurrentDocumentReference().getRoot().getName();\n+            templateReference = this.dab.getCurrentDocumentReference();\n+            String currentWiki = this.dab.getCurrentDocumentReference().getRoot().getName();\n             classReference = new DocumentReference(currentWiki, \"XWiki\", \"PDFClass\");\n         }\n \n-        String result = (String) dab.getProperty(templateReference, classReference, propertyName);\n-        if (StringUtils.isBlank(result)) {\n+        String templateContent = (String) this.dab.getProperty(templateReference, classReference, propertyName);\n+        if (StringUtils.isBlank(templateContent)) {\n             return \"\";\n         }\n-        String templateName = referenceSerializer.serialize(templateReference);\n+\n+        String templateName = this.referenceSerializer.serialize(templateReference);\n+        DocumentReference templateAuthorReference;\n+        String result = templateContent;\n         try {\n-            StringWriter writer = new StringWriter();\n-            VelocityContext vcontext = velocityManager.getVelocityContext();\n-            velocityManager.getVelocityEngine().evaluate(vcontext, writer, templateName, result);\n-            result = writer.toString();\n-        } catch (XWikiVelocityException e) {\n-            LOGGER.warn(\"Error applying Velocity to the [{}] property of the [{}] document. Using the property's value \"\n-                + \"without applying Velocity.\", propertyName, templateName, ExceptionUtils.getRootCauseMessage(e));\n+             templateAuthorReference = this.userReferenceSerializer.serialize(\n+                 this.dab.getDocumentInstance(templateReference).getAuthors().getEffectiveMetadataAuthor());\n+        } catch (Exception e) {\n+            LOGGER.warn(\"Error fetching the author of template [{}] during PDF conversion. Using the [{}] property of \"\n+                + \"the document's value without applying Velocity.\", templateName, propertyName);\n+            return result;\n         }\n+\n+        if (this.authorizationManager.hasAccess(Right.SCRIPT, templateAuthorReference, templateReference)) {\n+            try {\n+                result = this.authorExecutor.call(() -> {\n+                    StringWriter writer = new StringWriter();\n+                    VelocityContext vcontext = this.velocityManager.getVelocityContext();\n+                    this.velocityManager.getVelocityEngine().evaluate(vcontext, writer, templateName,\n+                        templateContent);\n+                    return writer.toString();\n+                }, templateAuthorReference, templateReference);\n+            } catch (Exception e) {\n+                LOGGER.warn(\"Failed to run Velocity engine in author executor. Using the [{}] property of the [{}] \"\n+                    + \"document's value without applying Velocity. Reason: [{}]\",\n+                    propertyName, templateName, ExceptionUtils.getRootCauseMessage(e));\n+            }\n+        }\n+\n         return result;\n     }\n \n\n\n</patch>\n<test_patch>\ndiff --git a/xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/pdf/impl/PdfExportImplTest.java b/xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/pdf/impl/PdfExportImplTest.java\nindex 7532ee3167a..b273f854461 100644\n--- a/xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/pdf/impl/PdfExportImplTest.java\n+++ b/xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/pdf/impl/PdfExportImplTest.java\n@@ -19,23 +19,55 @@\n  */\n package com.xpn.xwiki.pdf.impl;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.StringReader;\n+\n+import javax.xml.parsers.DocumentBuilderFactory;\n+\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.w3c.dom.Document;\n import org.xwiki.bridge.DocumentAccessBridge;\n import org.xwiki.environment.Environment;\n-import org.xwiki.model.reference.DocumentReferenceResolver;\n-import org.xwiki.model.reference.EntityReferenceSerializer;\n+import org.xwiki.job.event.status.JobProgressManager;\n+import org.xwiki.model.reference.DocumentReference;\n+import org.xwiki.observation.ObservationManager;\n+import org.xwiki.security.authorization.AuthorExecutor;\n+import org.xwiki.security.authorization.AuthorizationManager;\n+import org.xwiki.security.authorization.Right;\n+import org.xwiki.template.TemplateManager;\n import org.xwiki.test.annotation.ComponentList;\n+import org.xwiki.test.junit5.mockito.MockComponent;\n+import org.xwiki.user.UserReference;\n+import org.xwiki.user.UserReferenceResolver;\n+import org.xwiki.velocity.VelocityEngine;\n import org.xwiki.velocity.VelocityManager;\n+import org.xwiki.xml.EntityResolver;\n+import org.xwiki.xml.html.HTMLCleaner;\n+import org.xwiki.xml.html.HTMLCleanerConfiguration;\n+import org.xwiki.xml.html.filter.HTMLFilter;\n+import org.xwiki.xml.internal.XMLReaderFactoryComponent;\n+import org.xwiki.xml.internal.html.DefaultHTMLCleanerConfiguration;\n \n import com.xpn.xwiki.XWikiContext;\n import com.xpn.xwiki.doc.XWikiDocument;\n import com.xpn.xwiki.internal.pdf.XSLFORenderer;\n+import com.xpn.xwiki.pdf.api.PdfExport;\n import com.xpn.xwiki.test.MockitoOldcore;\n import com.xpn.xwiki.test.junit5.mockito.InjectMockitoOldcore;\n import com.xpn.xwiki.test.junit5.mockito.OldcoreTest;\n+import com.xpn.xwiki.test.reference.ReferenceComponentList;\n+import com.xpn.xwiki.web.XWikiServletRequestStub;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doReturn;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n import static org.mockito.Mockito.when;\n \n /**\n@@ -44,40 +76,59 @@\n  * @version $Id$\n  */\n @ComponentList({\n-    org.xwiki.xml.internal.XMLReaderFactoryComponent.class,\n+    XMLReaderFactoryComponent.class,\n })\n+@ReferenceComponentList\n @OldcoreTest\n-public class PdfExportImplTest\n+class PdfExportImplTest\n {\n+    private static final DocumentReference AUTHOR_REFERENCE = new DocumentReference(\"xwiki\", \"XWiki\", \"XWikiAdmin\");\n+\n+    private static final DocumentReference DOCUMENT_REFERENCE = new DocumentReference(\"xwiki\", \"XWiki\", \"PDFClass\");\n+\n     @InjectMockitoOldcore\n     private MockitoOldcore oldcore;\n \n-    /**\n-     * Verify that PDF Export can apply some CSS on the XHTML when that XHTML already has some style defined and in\n-     * shorthand notation.\n-     */\n-    @Test\n-    public void applyCSSWhenExistingStyleDefinedUsingShorthandNotation() throws Exception\n+    @Mock\n+    private VelocityEngine velocityEngine;\n+\n+    @MockComponent\n+    private AuthorizationManager authorizationManager;\n+\n+    @MockComponent\n+    private HTMLCleaner htmlCleaner;\n+\n+    @MockComponent\n+    private AuthorExecutor authorExecutor;\n+\n+    private String htmlContent;\n+\n+    private String cssProperties;\n+\n+    private XWikiContext context;\n+\n+    private PdfExportImpl pdfExport;\n+\n+    @BeforeEach\n+    void setUp() throws Exception\n     {\n-        this.oldcore.getMocker().registerMockComponent(DocumentReferenceResolver.TYPE_STRING, \"currentmixed\");\n-        this.oldcore.getMocker().registerMockComponent(EntityReferenceSerializer.TYPE_STRING);\n-        this.oldcore.getMocker().registerMockComponent(DocumentAccessBridge.class);\n-        this.oldcore.getMocker().registerMockComponent(DocumentAccessBridge.class);\n         this.oldcore.getMocker().registerMockComponent(PDFResourceResolver.class);\n         this.oldcore.getMocker().registerMockComponent(Environment.class);\n-        this.oldcore.getMocker().registerMockComponent(VelocityManager.class);\n+        this.oldcore.getMocker().registerMockComponent(TemplateManager.class);\n+        this.oldcore.getMocker().registerMockComponent(ObservationManager.class);\n+        this.oldcore.getMocker().registerMockComponent(JobProgressManager.class);\n+        this.oldcore.getMocker().registerMockComponent(EntityResolver.class);\n         this.oldcore.getMocker().registerMockComponent(XSLFORenderer.class, \"fop\");\n-\n-        PdfExportImpl pdfExport = new PdfExportImpl();\n+        this.oldcore.getMocker().registerMockComponent(HTMLFilter.class, \"uniqueId\");\n \n         // The content below allows us to test several points:\n         // 1) The SPAN below already has some style defined in shorthand notation( \"background\" is shorthand,\n         //    see https://www.w3schools.com/css/css_background.asp). That's important for the test since that's what was\n         //    failing in the past and why this test was written.\n         // 2) We also test that HTML entities are correctly kept since we had issues with this at one point.\n-        String html = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n+        this.htmlContent = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n             + \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\" \"\n-                + \"\\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\">\\n\"\n+            + \"\\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\">\\n\"\n             + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><head>\\n\"\n             + \"<title>\\n\"\n             + \"  Main.ttt - ttt\\n\"\n@@ -98,13 +149,51 @@ public void applyCSSWhenExistingStyleDefinedUsingShorthandNotation() throws Exce\n             + \"\\n\"\n             + \"</body></html>\";\n \n-        String css = \"span { color:red; }\";\n+        this.cssProperties = \"span { color:red; }\";\n \n-        XWikiContext xcontext = this.oldcore.getXWikiContext();\n+        // Set up HTML cleaner.\n+        Document htmlDocument = DocumentBuilderFactory.newInstance().newDocumentBuilder()\n+            .parse(new ByteArrayInputStream(this.htmlContent.getBytes()));\n+        HTMLCleanerConfiguration cleanerConfiguration = new DefaultHTMLCleanerConfiguration();\n+        when(this.htmlCleaner.getDefaultConfiguration()).thenReturn(cleanerConfiguration);\n+        when(this.htmlCleaner.clean(any(StringReader.class), eq(cleanerConfiguration))).thenReturn(htmlDocument);\n+\n+        // Get a mocked Velocity Engine.\n+        VelocityManager velocityManager = this.oldcore.getMocker().registerMockComponent(VelocityManager.class);\n+        when(velocityManager.getVelocityEngine()).thenReturn(this.velocityEngine);\n+\n+        // Prepare a document reference and author reference for the template.\n+        XWikiDocument template = new XWikiDocument(DOCUMENT_REFERENCE);\n+        UserReferenceResolver<DocumentReference> userReferenceResolver =\n+            this.oldcore.getMocker().getInstance(UserReferenceResolver.TYPE_DOCUMENT_REFERENCE, \"document\");\n+        UserReference userReference = userReferenceResolver.resolve(AUTHOR_REFERENCE);\n+        template.getAuthors().setEffectiveMetadataAuthor(userReference);\n+\n+        // Return a non-empty template property.\n+        DocumentAccessBridge dab = this.oldcore.getDocumentAccessBridge();\n+        when(dab.getProperty(template.getDocumentReference(), template.getDocumentReference(), \"style\"))\n+            .thenReturn(this.cssProperties);\n+        when(dab.getDocumentInstance(DOCUMENT_REFERENCE)).thenReturn(template);\n+\n+        // Set necessary parameters in the request.\n+        this.context = this.oldcore.getXWikiContext();\n+        XWikiServletRequestStub request = new XWikiServletRequestStub();\n+        request.put(\"pdftemplate\", \"XWiki.PDFClass\");\n+        this.context.setRequest(request);\n         XWikiDocument doc = mock(XWikiDocument.class);\n-        when(doc.getExternalURL(\"view\", xcontext)).thenReturn(\"http://localhost:8080/export\");\n-        xcontext.setDoc(doc);\n+        when(doc.getExternalURL(\"view\", this.context)).thenReturn(\"http://localhost:8080/export\");\n+        this.context.setDoc(doc);\n \n+        this.pdfExport = new PdfExportImpl();\n+    }\n+\n+    /**\n+     * Verify that PDF Export can apply some CSS on the XHTML when that XHTML already has some style defined and in\n+     * shorthand notation.\n+     */\n+    @Test\n+    void applyCSSWhenExistingStyleDefinedUsingShorthandNotation()\n+    {\n         // - Verify that element's style attributes are normalized and that the SPAN's color is set to red.\n         // - Verify that the accent in the content is still there.\n         //   TODO: right now we output the DOM with DOM4J and use the default of converting entities when using the\n@@ -113,8 +202,8 @@ public void applyCSSWhenExistingStyleDefinedUsingShorthandNotation() throws Exce\n \n         String expected = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n             + \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\" \"\n-                + \"\\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\">\"\n-                + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><head>\\n\"\n+            + \"\\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\">\"\n+            + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><head>\\n\"\n             + \"<title>\\n\"\n             + \"  Main.ttt - ttt\\n\"\n             + \"</title>\\n\"\n@@ -124,15 +213,47 @@ public void applyCSSWhenExistingStyleDefinedUsingShorthandNotation() throws Exce\n             + \"<div id=\\\"xwikimaincontainer\\\">\\n\"\n             + \"<div id=\\\"xwikimaincontainerinner\\\">\\n\\n\"\n             + \"<div id=\\\"xwikicontent\\\">\\n\"\n-                + \"      <p><span style=\\\"color: #f00; background-color: #fff; background-image: none; \"\n-                + \"background-position: 0% 0%; background-size: auto auto; background-origin: padding-box; \"\n-                + \"background-clip: border-box; background-repeat: repeat repeat; \"\n-                + \"background-attachment: scroll; \\\">Hello Clément</span></p>\\n\"\n+            + \"      <p><span style=\\\"color: #f00; background-color: #fff; background-image: none; \"\n+            + \"background-position: 0% 0%; background-size: auto auto; background-origin: padding-box; \"\n+            + \"background-clip: border-box; background-repeat: repeat repeat; \"\n+            + \"background-attachment: scroll; \\\">Hello Clément</span></p>\\n\"\n             + \"          </div>\\n\"\n             + \"</div>\\n\"\n             + \"</div>\\n\\n\"\n             + \"</body></html>\";\n \n-        assertEquals(expected, pdfExport.applyCSS(html, css, xcontext));\n+        assertEquals(expected, this.pdfExport.applyCSS(this.htmlContent, this.cssProperties, this.context));\n+    }\n+\n+    /**\n+     * Verify that the Velocity Engine is never accessed if the user does not have script rights.\n+     */\n+    @Test\n+    void applyPDFTemplateWithoutScriptRights() throws Exception\n+    {\n+        when(this.authorizationManager.hasAccess(Right.SCRIPT, AUTHOR_REFERENCE, DOCUMENT_REFERENCE)).thenReturn(false);\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        this.pdfExport.exportHtml(this.htmlContent, baos, PdfExport.ExportType.PDF, this.context);\n+        verify(this.authorizationManager).hasAccess(Right.SCRIPT, AUTHOR_REFERENCE, DOCUMENT_REFERENCE);\n+        verifyNoInteractions(this.authorExecutor);\n+        verifyNoInteractions(this.velocityEngine);\n+    }\n+\n+    /**\n+     * Verify that the Velocity Engine is not accessed outside an Author Executor.\n+     */\n+    @Test\n+    void applyPDFTemplateWithAuthorExecutor() throws Exception\n+    {\n+        when(this.authorizationManager.hasAccess(Right.SCRIPT, AUTHOR_REFERENCE, DOCUMENT_REFERENCE)).thenReturn(true);\n+\n+        // Do not call the callable to check that the call to the Velocity engine is inside the author executor.\n+        doReturn(\"\").when(this.authorExecutor).call(any(), any(), any());\n+\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        this.pdfExport.exportHtml(this.htmlContent, baos, PdfExport.ExportType.PDF, this.context);\n+        verify(this.authorizationManager).hasAccess(Right.SCRIPT, AUTHOR_REFERENCE, DOCUMENT_REFERENCE);\n+        verify(this.authorExecutor).call(any(), eq(AUTHOR_REFERENCE), eq(DOCUMENT_REFERENCE));\n+        verifyNoInteractions(this.velocityEngine);\n     }\n }\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "d28e21a670c69880b951e415dd2ddd69d273eae9", "source_date": "Thu Nov 16 16:25:01 2023 +0100", "source_tag": "15.10", "target_commit": "a4ad14d9c1605a5ab957237e505ebbb29f5b9d73", "target_date": "Thu Nov 16 16:29:29 2023 +0100", "target_tag": "15.5.4", "FAIL TO PASS": ["com.xpn.xwiki.pdf.impl.PdfExportImplTest.applyPDFTemplateWithoutScriptRights", "com.xpn.xwiki.pdf.impl.PdfExportImplTest.applyPDFTemplateWithAuthorExecutor"], "PASS TO PASS": []}
{"ecosystem": "maven", "repo": "xwiki-platform", "instance_id": "xwiki-platform_1415", "original_commit_message": "XWIKI-21337: Apply PDF templates with the rights of their authors", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/pdf/impl/PdfExportImpl.java b/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/pdf/impl/PdfExportImpl.java\nindex 9f471406bc6..b4d86b793d5 100644\n--- a/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/pdf/impl/PdfExportImpl.java\n+++ b/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/pdf/impl/PdfExportImpl.java\n@@ -29,6 +29,7 @@\n import java.io.StringWriter;\n import java.lang.reflect.Type;\n import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n@@ -37,9 +38,9 @@\n \n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.exception.ExceptionUtils;\n import org.apache.commons.lang3.RandomStringUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.velocity.VelocityContext;\n import org.dom4j.Element;\n import org.dom4j.io.OutputFormat;\n@@ -54,8 +55,11 @@\n import org.xwiki.model.reference.DocumentReference;\n import org.xwiki.model.reference.DocumentReferenceResolver;\n import org.xwiki.model.reference.EntityReferenceSerializer;\n+import org.xwiki.security.authorization.AuthorExecutor;\n+import org.xwiki.security.authorization.AuthorizationManager;\n+import org.xwiki.security.authorization.Right;\n+import org.xwiki.user.UserReferenceSerializer;\n import org.xwiki.velocity.VelocityManager;\n-import org.xwiki.velocity.XWikiVelocityException;\n import org.xwiki.xml.EntityResolver;\n import org.xwiki.xml.XMLReaderFactory;\n import org.xwiki.xml.XMLUtils;\n@@ -95,30 +99,37 @@ public class PdfExportImpl implements PdfExport\n     private static final Logger LOGGER = LoggerFactory.getLogger(PdfExportImpl.class);\n \n     /** Document name resolver. */\n-    private static DocumentReferenceResolver<String> referenceResolver =\n+    private final DocumentReferenceResolver<String> referenceResolver =\n         Utils.getComponent(DocumentReferenceResolver.TYPE_STRING, \"currentmixed\");\n \n     /** Document name serializer. */\n-    private static EntityReferenceSerializer<String> referenceSerializer =\n+    private final EntityReferenceSerializer<String> referenceSerializer =\n         Utils.getComponent(EntityReferenceSerializer.TYPE_STRING);\n \n     /** Provides access to document properties. */\n-    private static DocumentAccessBridge dab = Utils.getComponent(DocumentAccessBridge.class);\n+    private final DocumentAccessBridge dab = Utils.getComponent(DocumentAccessBridge.class);\n \n     /** Velocity engine manager, used for interpreting velocity. */\n-    private static VelocityManager velocityManager = Utils.getComponent(VelocityManager.class);\n+    private final VelocityManager velocityManager = Utils.getComponent(VelocityManager.class);\n \n-    private static XMLReaderFactory xmlReaderFactory = Utils.getComponent(XMLReaderFactory.class);\n+    private final XMLReaderFactory xmlReaderFactory = Utils.getComponent(XMLReaderFactory.class);\n+\n+    private final AuthorizationManager authorizationManager = Utils.getComponent(AuthorizationManager.class);\n+\n+    private final AuthorExecutor authorExecutor = Utils.getComponent(AuthorExecutor.class);\n+\n+    private final UserReferenceSerializer<DocumentReference> userReferenceSerializer =\n+        Utils.getComponent(UserReferenceSerializer.TYPE_DOCUMENT_REFERENCE, \"document\");\n \n     /**\n      * Used to get the temporary directory.\n      */\n-    private Environment environment = Utils.getComponent((Type) Environment.class);\n+    private final Environment environment = Utils.getComponent((Type) Environment.class);\n \n     /**\n      * Used to render XSL-FO to PDF.\n      */\n-    private XSLFORenderer xslFORenderer = Utils.getComponent(XSLFORenderer.class, \"fop\");\n+    private final XSLFORenderer xslFORenderer = Utils.getComponent(XSLFORenderer.class, \"fop\");\n \n     @Override\n     public void exportToPDF(XWikiDocument doc, OutputStream out, XWikiContext context) throws XWikiException\n@@ -184,7 +195,7 @@ private String convertToStrictXHtml(String input)\n \n         HTMLCleaner cleaner = Utils.getComponent(HTMLCleaner.class);\n         HTMLCleanerConfiguration config = cleaner.getDefaultConfiguration();\n-        List<HTMLFilter> filters = new ArrayList<HTMLFilter>(config.getFilters());\n+        List<HTMLFilter> filters = new ArrayList<>(config.getFilters());\n         filters.add(Utils.getComponent(HTMLFilter.class, \"uniqueId\"));\n         config.setFilters(filters);\n         String result = HTMLUtils.toString(cleaner.clean(new StringReader(input), config));\n@@ -261,7 +272,7 @@ private void renderXSLFO(String xmlfo, OutputStream out, ExportType type, final\n         throws XWikiException\n     {\n         try {\n-            this.xslFORenderer.render(new ByteArrayInputStream(xmlfo.getBytes(\"UTF-8\")), out, type.getMimeType());\n+            this.xslFORenderer.render(new ByteArrayInputStream(xmlfo.getBytes(StandardCharsets.UTF_8)), out, type.getMimeType());\n         } catch (IllegalStateException e) {\n             throw createException(e, type, XWikiException.ERROR_XWIKI_APP_SEND_RESPONSE_EXCEPTION);\n         } catch (Exception e) {\n@@ -338,7 +349,7 @@ String applyCSS(String html, String css, XWikiContext context)\n \n             // Dom4J 2.1.1 disables external DTDs by default, so we set our own XMLReader.\n             // See https://github.com/dom4j/dom4j/issues/51\n-            XMLReader xmlReader = xmlReaderFactory.createXMLReader();\n+            XMLReader xmlReader = this.xmlReaderFactory.createXMLReader();\n             reader.setXMLReader(xmlReader);\n \n             reader.setEntityResolver(new DefaultEntityResolver());\n@@ -465,28 +476,47 @@ private String getPDFTemplateProperty(String propertyName, XWikiContext context)\n         DocumentReference templateReference;\n         DocumentReference classReference;\n         if (StringUtils.isNotEmpty(pdftemplate)) {\n-            templateReference = referenceResolver.resolve(pdftemplate);\n+            templateReference = this.referenceResolver.resolve(pdftemplate);\n             classReference = new DocumentReference(templateReference.getWikiReference().getName(), \"XWiki\", \"PDFClass\");\n         } else {\n-            templateReference = dab.getCurrentDocumentReference();\n-            String currentWiki = dab.getCurrentDocumentReference().getRoot().getName();\n+            templateReference = this.dab.getCurrentDocumentReference();\n+            String currentWiki = this.dab.getCurrentDocumentReference().getRoot().getName();\n             classReference = new DocumentReference(currentWiki, \"XWiki\", \"PDFClass\");\n         }\n \n-        String result = (String) dab.getProperty(templateReference, classReference, propertyName);\n-        if (StringUtils.isBlank(result)) {\n+        String templateContent = (String) this.dab.getProperty(templateReference, classReference, propertyName);\n+        if (StringUtils.isBlank(templateContent)) {\n             return \"\";\n         }\n-        String templateName = referenceSerializer.serialize(templateReference);\n+\n+        String templateName = this.referenceSerializer.serialize(templateReference);\n+        DocumentReference templateAuthorReference;\n+        String result = templateContent;\n         try {\n-            StringWriter writer = new StringWriter();\n-            VelocityContext vcontext = velocityManager.getVelocityContext();\n-            velocityManager.getVelocityEngine().evaluate(vcontext, writer, templateName, result);\n-            result = writer.toString();\n-        } catch (XWikiVelocityException e) {\n-            LOGGER.warn(\"Error applying Velocity to the [{}] property of the [{}] document. Using the property's value \"\n-                + \"without applying Velocity.\", propertyName, templateName, ExceptionUtils.getRootCauseMessage(e));\n+             templateAuthorReference = this.userReferenceSerializer.serialize(\n+                 this.dab.getDocumentInstance(templateReference).getAuthors().getEffectiveMetadataAuthor());\n+        } catch (Exception e) {\n+            LOGGER.warn(\"Error fetching the author of template [{}] during PDF conversion. Using the [{}] property of \"\n+                + \"the document's value without applying Velocity.\", templateName, propertyName);\n+            return result;\n         }\n+\n+        if (this.authorizationManager.hasAccess(Right.SCRIPT, templateAuthorReference, templateReference)) {\n+            try {\n+                result = this.authorExecutor.call(() -> {\n+                    StringWriter writer = new StringWriter();\n+                    VelocityContext vcontext = this.velocityManager.getVelocityContext();\n+                    this.velocityManager.getVelocityEngine().evaluate(vcontext, writer, templateName,\n+                        templateContent);\n+                    return writer.toString();\n+                }, templateAuthorReference, templateReference);\n+            } catch (Exception e) {\n+                LOGGER.warn(\"Failed to run Velocity engine in author executor. Using the [{}] property of the [{}] \"\n+                    + \"document's value without applying Velocity. Reason: [{}]\",\n+                    propertyName, templateName, ExceptionUtils.getRootCauseMessage(e));\n+            }\n+        }\n+\n         return result;\n     }\n \n\n\n</patch>\n<test_patch>\ndiff --git a/xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/pdf/impl/PdfExportImplTest.java b/xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/pdf/impl/PdfExportImplTest.java\nindex 7532ee3167a..b273f854461 100644\n--- a/xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/pdf/impl/PdfExportImplTest.java\n+++ b/xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/pdf/impl/PdfExportImplTest.java\n@@ -19,23 +19,55 @@\n  */\n package com.xpn.xwiki.pdf.impl;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.StringReader;\n+\n+import javax.xml.parsers.DocumentBuilderFactory;\n+\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.w3c.dom.Document;\n import org.xwiki.bridge.DocumentAccessBridge;\n import org.xwiki.environment.Environment;\n-import org.xwiki.model.reference.DocumentReferenceResolver;\n-import org.xwiki.model.reference.EntityReferenceSerializer;\n+import org.xwiki.job.event.status.JobProgressManager;\n+import org.xwiki.model.reference.DocumentReference;\n+import org.xwiki.observation.ObservationManager;\n+import org.xwiki.security.authorization.AuthorExecutor;\n+import org.xwiki.security.authorization.AuthorizationManager;\n+import org.xwiki.security.authorization.Right;\n+import org.xwiki.template.TemplateManager;\n import org.xwiki.test.annotation.ComponentList;\n+import org.xwiki.test.junit5.mockito.MockComponent;\n+import org.xwiki.user.UserReference;\n+import org.xwiki.user.UserReferenceResolver;\n+import org.xwiki.velocity.VelocityEngine;\n import org.xwiki.velocity.VelocityManager;\n+import org.xwiki.xml.EntityResolver;\n+import org.xwiki.xml.html.HTMLCleaner;\n+import org.xwiki.xml.html.HTMLCleanerConfiguration;\n+import org.xwiki.xml.html.filter.HTMLFilter;\n+import org.xwiki.xml.internal.XMLReaderFactoryComponent;\n+import org.xwiki.xml.internal.html.DefaultHTMLCleanerConfiguration;\n \n import com.xpn.xwiki.XWikiContext;\n import com.xpn.xwiki.doc.XWikiDocument;\n import com.xpn.xwiki.internal.pdf.XSLFORenderer;\n+import com.xpn.xwiki.pdf.api.PdfExport;\n import com.xpn.xwiki.test.MockitoOldcore;\n import com.xpn.xwiki.test.junit5.mockito.InjectMockitoOldcore;\n import com.xpn.xwiki.test.junit5.mockito.OldcoreTest;\n+import com.xpn.xwiki.test.reference.ReferenceComponentList;\n+import com.xpn.xwiki.web.XWikiServletRequestStub;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doReturn;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n import static org.mockito.Mockito.when;\n \n /**\n@@ -44,40 +76,59 @@\n  * @version $Id$\n  */\n @ComponentList({\n-    org.xwiki.xml.internal.XMLReaderFactoryComponent.class,\n+    XMLReaderFactoryComponent.class,\n })\n+@ReferenceComponentList\n @OldcoreTest\n-public class PdfExportImplTest\n+class PdfExportImplTest\n {\n+    private static final DocumentReference AUTHOR_REFERENCE = new DocumentReference(\"xwiki\", \"XWiki\", \"XWikiAdmin\");\n+\n+    private static final DocumentReference DOCUMENT_REFERENCE = new DocumentReference(\"xwiki\", \"XWiki\", \"PDFClass\");\n+\n     @InjectMockitoOldcore\n     private MockitoOldcore oldcore;\n \n-    /**\n-     * Verify that PDF Export can apply some CSS on the XHTML when that XHTML already has some style defined and in\n-     * shorthand notation.\n-     */\n-    @Test\n-    public void applyCSSWhenExistingStyleDefinedUsingShorthandNotation() throws Exception\n+    @Mock\n+    private VelocityEngine velocityEngine;\n+\n+    @MockComponent\n+    private AuthorizationManager authorizationManager;\n+\n+    @MockComponent\n+    private HTMLCleaner htmlCleaner;\n+\n+    @MockComponent\n+    private AuthorExecutor authorExecutor;\n+\n+    private String htmlContent;\n+\n+    private String cssProperties;\n+\n+    private XWikiContext context;\n+\n+    private PdfExportImpl pdfExport;\n+\n+    @BeforeEach\n+    void setUp() throws Exception\n     {\n-        this.oldcore.getMocker().registerMockComponent(DocumentReferenceResolver.TYPE_STRING, \"currentmixed\");\n-        this.oldcore.getMocker().registerMockComponent(EntityReferenceSerializer.TYPE_STRING);\n-        this.oldcore.getMocker().registerMockComponent(DocumentAccessBridge.class);\n-        this.oldcore.getMocker().registerMockComponent(DocumentAccessBridge.class);\n         this.oldcore.getMocker().registerMockComponent(PDFResourceResolver.class);\n         this.oldcore.getMocker().registerMockComponent(Environment.class);\n-        this.oldcore.getMocker().registerMockComponent(VelocityManager.class);\n+        this.oldcore.getMocker().registerMockComponent(TemplateManager.class);\n+        this.oldcore.getMocker().registerMockComponent(ObservationManager.class);\n+        this.oldcore.getMocker().registerMockComponent(JobProgressManager.class);\n+        this.oldcore.getMocker().registerMockComponent(EntityResolver.class);\n         this.oldcore.getMocker().registerMockComponent(XSLFORenderer.class, \"fop\");\n-\n-        PdfExportImpl pdfExport = new PdfExportImpl();\n+        this.oldcore.getMocker().registerMockComponent(HTMLFilter.class, \"uniqueId\");\n \n         // The content below allows us to test several points:\n         // 1) The SPAN below already has some style defined in shorthand notation( \"background\" is shorthand,\n         //    see https://www.w3schools.com/css/css_background.asp). That's important for the test since that's what was\n         //    failing in the past and why this test was written.\n         // 2) We also test that HTML entities are correctly kept since we had issues with this at one point.\n-        String html = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n+        this.htmlContent = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n             + \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\" \"\n-                + \"\\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\">\\n\"\n+            + \"\\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\">\\n\"\n             + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><head>\\n\"\n             + \"<title>\\n\"\n             + \"  Main.ttt - ttt\\n\"\n@@ -98,13 +149,51 @@ public void applyCSSWhenExistingStyleDefinedUsingShorthandNotation() throws Exce\n             + \"\\n\"\n             + \"</body></html>\";\n \n-        String css = \"span { color:red; }\";\n+        this.cssProperties = \"span { color:red; }\";\n \n-        XWikiContext xcontext = this.oldcore.getXWikiContext();\n+        // Set up HTML cleaner.\n+        Document htmlDocument = DocumentBuilderFactory.newInstance().newDocumentBuilder()\n+            .parse(new ByteArrayInputStream(this.htmlContent.getBytes()));\n+        HTMLCleanerConfiguration cleanerConfiguration = new DefaultHTMLCleanerConfiguration();\n+        when(this.htmlCleaner.getDefaultConfiguration()).thenReturn(cleanerConfiguration);\n+        when(this.htmlCleaner.clean(any(StringReader.class), eq(cleanerConfiguration))).thenReturn(htmlDocument);\n+\n+        // Get a mocked Velocity Engine.\n+        VelocityManager velocityManager = this.oldcore.getMocker().registerMockComponent(VelocityManager.class);\n+        when(velocityManager.getVelocityEngine()).thenReturn(this.velocityEngine);\n+\n+        // Prepare a document reference and author reference for the template.\n+        XWikiDocument template = new XWikiDocument(DOCUMENT_REFERENCE);\n+        UserReferenceResolver<DocumentReference> userReferenceResolver =\n+            this.oldcore.getMocker().getInstance(UserReferenceResolver.TYPE_DOCUMENT_REFERENCE, \"document\");\n+        UserReference userReference = userReferenceResolver.resolve(AUTHOR_REFERENCE);\n+        template.getAuthors().setEffectiveMetadataAuthor(userReference);\n+\n+        // Return a non-empty template property.\n+        DocumentAccessBridge dab = this.oldcore.getDocumentAccessBridge();\n+        when(dab.getProperty(template.getDocumentReference(), template.getDocumentReference(), \"style\"))\n+            .thenReturn(this.cssProperties);\n+        when(dab.getDocumentInstance(DOCUMENT_REFERENCE)).thenReturn(template);\n+\n+        // Set necessary parameters in the request.\n+        this.context = this.oldcore.getXWikiContext();\n+        XWikiServletRequestStub request = new XWikiServletRequestStub();\n+        request.put(\"pdftemplate\", \"XWiki.PDFClass\");\n+        this.context.setRequest(request);\n         XWikiDocument doc = mock(XWikiDocument.class);\n-        when(doc.getExternalURL(\"view\", xcontext)).thenReturn(\"http://localhost:8080/export\");\n-        xcontext.setDoc(doc);\n+        when(doc.getExternalURL(\"view\", this.context)).thenReturn(\"http://localhost:8080/export\");\n+        this.context.setDoc(doc);\n \n+        this.pdfExport = new PdfExportImpl();\n+    }\n+\n+    /**\n+     * Verify that PDF Export can apply some CSS on the XHTML when that XHTML already has some style defined and in\n+     * shorthand notation.\n+     */\n+    @Test\n+    void applyCSSWhenExistingStyleDefinedUsingShorthandNotation()\n+    {\n         // - Verify that element's style attributes are normalized and that the SPAN's color is set to red.\n         // - Verify that the accent in the content is still there.\n         //   TODO: right now we output the DOM with DOM4J and use the default of converting entities when using the\n@@ -113,8 +202,8 @@ public void applyCSSWhenExistingStyleDefinedUsingShorthandNotation() throws Exce\n \n         String expected = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n             + \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\" \"\n-                + \"\\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\">\"\n-                + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><head>\\n\"\n+            + \"\\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\">\"\n+            + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><head>\\n\"\n             + \"<title>\\n\"\n             + \"  Main.ttt - ttt\\n\"\n             + \"</title>\\n\"\n@@ -124,15 +213,47 @@ public void applyCSSWhenExistingStyleDefinedUsingShorthandNotation() throws Exce\n             + \"<div id=\\\"xwikimaincontainer\\\">\\n\"\n             + \"<div id=\\\"xwikimaincontainerinner\\\">\\n\\n\"\n             + \"<div id=\\\"xwikicontent\\\">\\n\"\n-                + \"      <p><span style=\\\"color: #f00; background-color: #fff; background-image: none; \"\n-                + \"background-position: 0% 0%; background-size: auto auto; background-origin: padding-box; \"\n-                + \"background-clip: border-box; background-repeat: repeat repeat; \"\n-                + \"background-attachment: scroll; \\\">Hello Clément</span></p>\\n\"\n+            + \"      <p><span style=\\\"color: #f00; background-color: #fff; background-image: none; \"\n+            + \"background-position: 0% 0%; background-size: auto auto; background-origin: padding-box; \"\n+            + \"background-clip: border-box; background-repeat: repeat repeat; \"\n+            + \"background-attachment: scroll; \\\">Hello Clément</span></p>\\n\"\n             + \"          </div>\\n\"\n             + \"</div>\\n\"\n             + \"</div>\\n\\n\"\n             + \"</body></html>\";\n \n-        assertEquals(expected, pdfExport.applyCSS(html, css, xcontext));\n+        assertEquals(expected, this.pdfExport.applyCSS(this.htmlContent, this.cssProperties, this.context));\n+    }\n+\n+    /**\n+     * Verify that the Velocity Engine is never accessed if the user does not have script rights.\n+     */\n+    @Test\n+    void applyPDFTemplateWithoutScriptRights() throws Exception\n+    {\n+        when(this.authorizationManager.hasAccess(Right.SCRIPT, AUTHOR_REFERENCE, DOCUMENT_REFERENCE)).thenReturn(false);\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        this.pdfExport.exportHtml(this.htmlContent, baos, PdfExport.ExportType.PDF, this.context);\n+        verify(this.authorizationManager).hasAccess(Right.SCRIPT, AUTHOR_REFERENCE, DOCUMENT_REFERENCE);\n+        verifyNoInteractions(this.authorExecutor);\n+        verifyNoInteractions(this.velocityEngine);\n+    }\n+\n+    /**\n+     * Verify that the Velocity Engine is not accessed outside an Author Executor.\n+     */\n+    @Test\n+    void applyPDFTemplateWithAuthorExecutor() throws Exception\n+    {\n+        when(this.authorizationManager.hasAccess(Right.SCRIPT, AUTHOR_REFERENCE, DOCUMENT_REFERENCE)).thenReturn(true);\n+\n+        // Do not call the callable to check that the call to the Velocity engine is inside the author executor.\n+        doReturn(\"\").when(this.authorExecutor).call(any(), any(), any());\n+\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        this.pdfExport.exportHtml(this.htmlContent, baos, PdfExport.ExportType.PDF, this.context);\n+        verify(this.authorizationManager).hasAccess(Right.SCRIPT, AUTHOR_REFERENCE, DOCUMENT_REFERENCE);\n+        verify(this.authorExecutor).call(any(), eq(AUTHOR_REFERENCE), eq(DOCUMENT_REFERENCE));\n+        verifyNoInteractions(this.velocityEngine);\n     }\n }\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "d28e21a670c69880b951e415dd2ddd69d273eae9", "source_date": "Thu Nov 16 16:25:01 2023 +0100", "source_tag": "15.10", "target_commit": "480186f9d2fca880513da8bc5a609674d106cbd3", "target_date": "Thu Nov 16 16:29:38 2023 +0100", "target_tag": "14.10.20", "FAIL TO PASS": ["applyPDFTemplateWithAuthorExecutor", "applyPDFTemplateWithoutScriptRights"], "PASS TO PASS": []}
{"ecosystem": "maven", "repo": "tomcat", "instance_id": "tomcat_1416", "original_commit_message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=60409\nWhen unable to complete sendfile request, ensure the Processor will be added to the cache only once. Patch by markt.\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1771853 13f79535-47bb-0310-9956-ffa450edef68", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/java/org/apache/tomcat/util/net/NioEndpoint.java b/java/org/apache/tomcat/util/net/NioEndpoint.java\nindex 5833b5dd03..2266a213c0 100644\n--- a/java/org/apache/tomcat/util/net/NioEndpoint.java\n+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java\n@@ -888,7 +888,6 @@ public class NioEndpoint extends AbstractJsseEndpoint<NioChannel> {\n                     // Setup the file channel\n                     File f = new File(sd.fileName);\n                     if (!f.exists()) {\n-                        cancelledKey(sk);\n                         return SendfileState.ERROR;\n                     }\n                     @SuppressWarnings(\"resource\") // Closed when channel is closed\n@@ -962,16 +961,12 @@ public class NioEndpoint extends AbstractJsseEndpoint<NioChannel> {\n                 if (log.isDebugEnabled()) log.debug(\"Unable to complete sendfile request:\", x);\n                 if (!calledByProcessor && sc != null) {\n                     close(sc, sk);\n-                } else {\n-                    cancelledKey(sk);\n                 }\n                 return SendfileState.ERROR;\n             } catch (Throwable t) {\n                 log.error(\"\", t);\n                 if (!calledByProcessor && sc != null) {\n                     close(sc, sk);\n-                } else {\n-                    cancelledKey(sk);\n                 }\n                 return SendfileState.ERROR;\n             }\n\n\n</patch>\n<test_patch>\ndiff --git a/test/org/apache/catalina/connector/TestSendFile.java b/test/org/apache/catalina/connector/TestSendFile.java\nindex c12579a664..7844babb5b 100644\n--- a/test/org/apache/catalina/connector/TestSendFile.java\n+++ b/test/org/apache/catalina/connector/TestSendFile.java\n@@ -39,7 +39,6 @@ import javax.servlet.http.HttpServletResponse;\n import static org.junit.Assert.assertEquals;\n \n import org.junit.Assert;\n-import org.junit.Ignore;\n import org.junit.Test;\n \n import org.apache.catalina.Context;\n@@ -157,7 +156,6 @@ public class TestSendFile extends TomcatBaseTest {\n     }\n \n \n-    @Ignore\n     @Test\n     public void testBug60409() throws Exception {\n         Tomcat tomcat = getTomcatInstance();\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "cbc9b18a845d3c8c053ac293dffda6c6c19dd92b", "source_date": "Tue Nov 29 08:34:19 2016 +0000", "source_tag": "9.0.0", "target_commit": "16a57bc885e212839f1d717b94b01d154a36943a", "target_date": "Tue Nov 29 08:38:39 2016 +0000", "target_tag": "8.5.9", "FAIL TO PASS": ["testBug60409"], "PASS TO PASS": ["testSendFile"]}
{"ecosystem": "pypi", "repo": "keystone", "instance_id": "keystone_393", "original_commit_message": "Fix fernet audit ids for v2.0\nThe fernet token provider was doing some weird things with audit ids that\ncaused token rescoping to not work because audit ids were never pulled from the\noriginal token. This commit also enables some tests for v2.0 authentication\nwith the Fernet as the token provider.\nCloses-Bug: 1577558\nChange-Id: Iffbaf505ef50a6c6d97c5340645acb2f6fda7e0e", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/keystone/token/controllers.py b/keystone/token/controllers.py\nindex d8fe2e4f1..ecffa2964 100644\n--- a/keystone/token/controllers.py\n+++ b/keystone/token/controllers.py\n@@ -180,7 +180,8 @@ class Auth(controller.V2Controller):\n         try:\n             token_model_ref = token_model.KeystoneToken(\n                 token_id=old_token,\n-                token_data=self.token_provider_api.validate_token(old_token))\n+                token_data=self.token_provider_api.validate_v2_token(old_token)\n+            )\n         except exception.NotFound as e:\n             raise exception.Unauthorized(e)\n \n\ndiff --git a/keystone/token/providers/fernet/core.py b/keystone/token/providers/fernet/core.py\nindex 8042aab95..ff6fe9cc7 100644\n--- a/keystone/token/providers/fernet/core.py\n+++ b/keystone/token/providers/fernet/core.py\n@@ -15,7 +15,6 @@ from oslo_config import cfg\n from keystone.common import dependency\n from keystone.common import utils as ks_utils\n from keystone.federation import constants as federation_constants\n-from keystone.token import provider\n from keystone.token.providers import common\n from keystone.token.providers.fernet import token_formatters as tf\n \n@@ -145,12 +144,8 @@ class Provider(common.BaseProvider):\n         expires_at = token_data['access']['token']['expires']\n         audit_ids = token_data['access']['token'].get('audit_ids')\n         methods = ['password']\n-        if audit_ids:\n-            parent_audit_id = token_data['access']['token'].get(\n-                'parent_audit_id')\n-            audit_ids = provider.audit_info(parent_audit_id)\n-            if parent_audit_id:\n-                methods.append('token')\n+        if len(audit_ids) > 1:\n+            methods.append('token')\n         project_id = token_data['access']['token'].get('tenant', {}).get('id')\n         domain_id = None\n         trust_id = None\n\n</patch>\n<test_patch>\ndiff --git a/keystone/tests/unit/test_auth.py b/keystone/tests/unit/test_auth.py\nindex bc03fe456..5c276ff7a 100644\n--- a/keystone/tests/unit/test_auth.py\n+++ b/keystone/tests/unit/test_auth.py\n@@ -33,6 +33,7 @@ from keystone import exception\n from keystone.models import token_model\n from keystone.tests import unit\n from keystone.tests.unit import default_fixtures\n+from keystone.tests.unit import ksfixtures\n from keystone.tests.unit.ksfixtures import database\n from keystone import token\n from keystone.token import provider\n@@ -671,6 +672,27 @@ class AuthWithToken(AuthTest):\n                               token_id=token_2_id)\n \n \n+class FernetAuthWithToken(AuthWithToken):\n+    def config_overrides(self):\n+        super(FernetAuthWithToken, self).config_overrides()\n+        self.config_fixture.config(group='token', provider='fernet')\n+        self.useFixture(ksfixtures.KeyRepository(self.config_fixture))\n+\n+    def test_token_auth_with_binding(self):\n+        self.config_fixture.config(group='token', bind=['kerberos'])\n+        body_dict = _build_user_auth()\n+        self.assertRaises(exception.NotImplemented,\n+                          self.controller.authenticate,\n+                          self.context_with_remote_user,\n+                          body_dict)\n+\n+    def test_revoke_with_no_audit_info(self):\n+        self.skipTest('Fernet with v2.0 and revocation is broken')\n+\n+    def test_deleting_role_revokes_token(self):\n+        self.skipTest('Fernet with v2.0 and revocation is broken')\n+\n+\n class AuthWithPasswordCredentials(AuthTest):\n     def test_auth_invalid_user(self):\n         \"\"\"Verify exception is raised if invalid user.\"\"\"\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "0d376025bae61bf5ee19d992c7f336b99ac69240", "source_date": "Wed May 4 07:05:39 2016 +0000", "source_tag": "10.0.0", "target_commit": "ee1dc941042d1f71699971c5c30566af1b348572", "target_date": "Wed May 4 11:53:10 2016 -0700", "target_tag": "9.0.1", "FAIL TO PASS": ["keystone.tests.unit.test_auth.FernetAuthWithToken.test_revoke_by_audit_chain_id_chained_token", "keystone.tests.unit.test_auth.FernetAuthWithToken.test_only_original_audit_id_is_kept", "keystone.tests.unit.test_auth.FernetAuthWithToken.test_auth_unscoped_token_no_project", "keystone.tests.unit.test_auth.FernetAuthWithToken.test_revoke_by_audit_chain_id_original_token"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "wagtail", "instance_id": "wagtail_401", "original_commit_message": "Redirect away from user bulk actions when user has no permissions on users", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/wagtail/users/views/bulk_actions/user_bulk_action.py b/wagtail/users/views/bulk_actions/user_bulk_action.py\nindex 76d05db58d..1cc6aa4dc6 100644\n--- a/wagtail/users/views/bulk_actions/user_bulk_action.py\n+++ b/wagtail/users/views/bulk_actions/user_bulk_action.py\n@@ -1,11 +1,17 @@\n from django.contrib.auth import get_user_model\n \n from wagtail.admin.views.bulk_action import BulkAction\n+from wagtail.admin.views.generic.permissions import PermissionCheckedMixin\n+from wagtail.permission_policies import ModelPermissionPolicy\n from wagtail.users.views.users import get_users_filter_query\n \n+User = get_user_model()\n \n-class UserBulkAction(BulkAction):\n-    models = [get_user_model()]\n+\n+class UserBulkAction(PermissionCheckedMixin, BulkAction):\n+    models = [User]\n+    permission_policy = ModelPermissionPolicy(User)\n+    any_permission_required = [\"add\", \"change\", \"delete\"]\n \n     def get_all_objects_in_listing_query(self, parent_id):\n         listing_objects = self.model.objects.all().values_list(\"pk\", flat=True)\n\n</patch>\n<test_patch>\ndiff --git a/wagtail/users/tests/test_bulk_actions/test_bulk_delete.py b/wagtail/users/tests/test_bulk_actions/test_bulk_delete.py\nindex d508fd8af7..aa911dfbd6 100644\n--- a/wagtail/users/tests/test_bulk_actions/test_bulk_delete.py\n+++ b/wagtail/users/tests/test_bulk_actions/test_bulk_delete.py\n@@ -1,4 +1,5 @@\n from django.contrib.auth import get_user_model\n+from django.contrib.auth.models import Permission\n from django.http import HttpRequest, HttpResponse\n from django.test import TestCase\n from django.urls import reverse\n@@ -51,6 +52,18 @@ class TestUserDeleteView(WagtailTestUtils, TestCase):\n             response, \"wagtailusers/bulk_actions/confirm_bulk_delete.html\"\n         )\n \n+    def test_user_permissions_required(self):\n+        # Log in with a user that doesn't have permission to delete users\n+        user = self.create_user(username=\"editor\", password=\"password\")\n+        admin_permission = Permission.objects.get(\n+            content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"\n+        )\n+        user.user_permissions.add(admin_permission)\n+        self.login(username=\"editor\", password=\"password\")\n+\n+        response = self.client.get(self.url)\n+        self.assertRedirects(response, \"/admin/\")\n+\n     def test_bulk_delete(self):\n         response = self.client.post(self.url)\n \n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "bc96aed6ac53f998b2f4c4bf97e2d4f5fe337e5b", "source_date": "Thu Oct 19 15:00:44 2023 +0100", "source_tag": "5.1.3", "target_commit": "2231f462c75dfe84307fb40577e8c2109a23b27e", "target_date": "Thu Oct 19 14:58:13 2023 +0100", "target_tag": "5.0.5", "FAIL TO PASS": ["wagtail.users.tests.test_bulk_actions.test_bulk_delete.TestUserDeleteView.test_user_permissions_required"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "wagtail", "instance_id": "wagtail_402", "original_commit_message": "Redirect away from user bulk actions when user has no permissions on users", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/wagtail/users/views/bulk_actions/user_bulk_action.py b/wagtail/users/views/bulk_actions/user_bulk_action.py\nindex 76d05db58d..1cc6aa4dc6 100644\n--- a/wagtail/users/views/bulk_actions/user_bulk_action.py\n+++ b/wagtail/users/views/bulk_actions/user_bulk_action.py\n@@ -1,11 +1,17 @@\n from django.contrib.auth import get_user_model\n \n from wagtail.admin.views.bulk_action import BulkAction\n+from wagtail.admin.views.generic.permissions import PermissionCheckedMixin\n+from wagtail.permission_policies import ModelPermissionPolicy\n from wagtail.users.views.users import get_users_filter_query\n \n+User = get_user_model()\n \n-class UserBulkAction(BulkAction):\n-    models = [get_user_model()]\n+\n+class UserBulkAction(PermissionCheckedMixin, BulkAction):\n+    models = [User]\n+    permission_policy = ModelPermissionPolicy(User)\n+    any_permission_required = [\"add\", \"change\", \"delete\"]\n \n     def get_all_objects_in_listing_query(self, parent_id):\n         listing_objects = self.model.objects.all().values_list(\"pk\", flat=True)\n\n</patch>\n<test_patch>\ndiff --git a/wagtail/users/tests/test_bulk_actions/test_bulk_delete.py b/wagtail/users/tests/test_bulk_actions/test_bulk_delete.py\nindex d508fd8af7..aa911dfbd6 100644\n--- a/wagtail/users/tests/test_bulk_actions/test_bulk_delete.py\n+++ b/wagtail/users/tests/test_bulk_actions/test_bulk_delete.py\n@@ -1,4 +1,5 @@\n from django.contrib.auth import get_user_model\n+from django.contrib.auth.models import Permission\n from django.http import HttpRequest, HttpResponse\n from django.test import TestCase\n from django.urls import reverse\n@@ -51,6 +52,18 @@ class TestUserDeleteView(WagtailTestUtils, TestCase):\n             response, \"wagtailusers/bulk_actions/confirm_bulk_delete.html\"\n         )\n \n+    def test_user_permissions_required(self):\n+        # Log in with a user that doesn't have permission to delete users\n+        user = self.create_user(username=\"editor\", password=\"password\")\n+        admin_permission = Permission.objects.get(\n+            content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"\n+        )\n+        user.user_permissions.add(admin_permission)\n+        self.login(username=\"editor\", password=\"password\")\n+\n+        response = self.client.get(self.url)\n+        self.assertRedirects(response, \"/admin/\")\n+\n     def test_bulk_delete(self):\n         response = self.client.post(self.url)\n \n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "bc96aed6ac53f998b2f4c4bf97e2d4f5fe337e5b", "source_date": "Thu Oct 19 15:00:44 2023 +0100", "source_tag": "5.1.3", "target_commit": "0bacd29473107d9d7f5b723a15a683449679756d", "target_date": "Thu Oct 19 14:50:38 2023 +0100", "target_tag": "4.1.9", "FAIL TO PASS": ["wagtail.users.tests.test_bulk_actions.test_bulk_delete.TestUserDeleteView.test_user_permissions_required"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_408", "original_commit_message": "Fixed CVE-2016-2513 -- Fixed user enumeration timing attack during login.\nThis is a security fix.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/contrib/auth/hashers.py b/django/contrib/auth/hashers.py\nindex 5136110fa1..ad0045267c 100644\n--- a/django/contrib/auth/hashers.py\n+++ b/django/contrib/auth/hashers.py\n@@ -4,6 +4,7 @@ import base64\n import binascii\n import hashlib\n import importlib\n+import warnings\n from collections import OrderedDict\n \n from django.conf import settings\n@@ -46,10 +47,17 @@ def check_password(password, encoded, setter=None, preferred='default'):\n     preferred = get_hasher(preferred)\n     hasher = identify_hasher(encoded)\n \n-    must_update = hasher.algorithm != preferred.algorithm\n-    if not must_update:\n-        must_update = preferred.must_update(encoded)\n+    hasher_changed = hasher.algorithm != preferred.algorithm\n+    must_update = hasher_changed or preferred.must_update(encoded)\n     is_correct = hasher.verify(password, encoded)\n+\n+    # If the hasher didn't change (we don't protect against enumeration if it\n+    # does) and the password should get updated, try to close the timing gap\n+    # between the work factor of the current encoded password and the default\n+    # work factor.\n+    if not is_correct and not hasher_changed and must_update:\n+        hasher.harden_runtime(password, encoded)\n+\n     if setter and is_correct and must_update:\n         setter(password)\n     return is_correct\n@@ -216,6 +224,19 @@ class BasePasswordHasher(object):\n     def must_update(self, encoded):\n         return False\n \n+    def harden_runtime(self, password, encoded):\n+        \"\"\"\n+        Bridge the runtime gap between the work factor supplied in `encoded`\n+        and the work factor suggested by this hasher.\n+\n+        Taking PBKDF2 as an example, if `encoded` contains 20000 iterations and\n+        `self.iterations` is 30000, this method should run password through\n+        another 10000 iterations of PBKDF2. Similar approaches should exist\n+        for any hasher that has a work factor. If not, this method should be\n+        defined as a no-op to silence the warning.\n+        \"\"\"\n+        warnings.warn('subclasses of BasePasswordHasher should provide a harden_runtime() method')\n+\n \n class PBKDF2PasswordHasher(BasePasswordHasher):\n     \"\"\"\n@@ -258,6 +279,12 @@ class PBKDF2PasswordHasher(BasePasswordHasher):\n         algorithm, iterations, salt, hash = encoded.split('$', 3)\n         return int(iterations) != self.iterations\n \n+    def harden_runtime(self, password, encoded):\n+        algorithm, iterations, salt, hash = encoded.split('$', 3)\n+        extra_iterations = self.iterations - int(iterations)\n+        if extra_iterations > 0:\n+            self.encode(password, salt, extra_iterations)\n+\n \n class PBKDF2SHA1PasswordHasher(PBKDF2PasswordHasher):\n     \"\"\"\n@@ -305,23 +332,8 @@ class BCryptSHA256PasswordHasher(BasePasswordHasher):\n     def verify(self, password, encoded):\n         algorithm, data = encoded.split('$', 1)\n         assert algorithm == self.algorithm\n-        bcrypt = self._load_library()\n-\n-        # Hash the password prior to using bcrypt to prevent password\n-        # truncation as described in #20138.\n-        if self.digest is not None:\n-            # Use binascii.hexlify() because a hex encoded bytestring is\n-            # Unicode on Python 3.\n-            password = binascii.hexlify(self.digest(force_bytes(password)).digest())\n-        else:\n-            password = force_bytes(password)\n-\n-        # Ensure that our data is a bytestring\n-        data = force_bytes(data)\n-        # force_bytes() necessary for py-bcrypt compatibility\n-        hashpw = force_bytes(bcrypt.hashpw(password, data))\n-\n-        return constant_time_compare(data, hashpw)\n+        encoded_2 = self.encode(password, force_bytes(data))\n+        return constant_time_compare(encoded, encoded_2)\n \n     def safe_summary(self, encoded):\n         algorithm, empty, algostr, work_factor, data = encoded.split('$', 4)\n@@ -338,6 +350,16 @@ class BCryptSHA256PasswordHasher(BasePasswordHasher):\n         algorithm, empty, algostr, rounds, data = encoded.split('$', 4)\n         return int(rounds) != self.rounds\n \n+    def harden_runtime(self, password, encoded):\n+        _, data = encoded.split('$', 1)\n+        salt = data[:29]  # Length of the salt in bcrypt.\n+        rounds = data.split('$')[2]\n+        # work factor is logarithmic, adding one doubles the load.\n+        diff = 2**(self.rounds - int(rounds)) - 1\n+        while diff > 0:\n+            self.encode(password, force_bytes(salt))\n+            diff -= 1\n+\n \n class BCryptPasswordHasher(BCryptSHA256PasswordHasher):\n     \"\"\"\n@@ -385,6 +407,9 @@ class SHA1PasswordHasher(BasePasswordHasher):\n             (_('hash'), mask_hash(hash)),\n         ])\n \n+    def harden_runtime(self, password, encoded):\n+        pass\n+\n \n class MD5PasswordHasher(BasePasswordHasher):\n     \"\"\"\n@@ -413,6 +438,9 @@ class MD5PasswordHasher(BasePasswordHasher):\n             (_('hash'), mask_hash(hash)),\n         ])\n \n+    def harden_runtime(self, password, encoded):\n+        pass\n+\n \n class UnsaltedSHA1PasswordHasher(BasePasswordHasher):\n     \"\"\"\n@@ -445,6 +473,9 @@ class UnsaltedSHA1PasswordHasher(BasePasswordHasher):\n             (_('hash'), mask_hash(hash)),\n         ])\n \n+    def harden_runtime(self, password, encoded):\n+        pass\n+\n \n class UnsaltedMD5PasswordHasher(BasePasswordHasher):\n     \"\"\"\n@@ -478,6 +509,9 @@ class UnsaltedMD5PasswordHasher(BasePasswordHasher):\n             (_('hash'), mask_hash(encoded, show=3)),\n         ])\n \n+    def harden_runtime(self, password, encoded):\n+        pass\n+\n \n class CryptPasswordHasher(BasePasswordHasher):\n     \"\"\"\n@@ -512,3 +546,6 @@ class CryptPasswordHasher(BasePasswordHasher):\n             (_('salt'), salt),\n             (_('hash'), mask_hash(data, show=3)),\n         ])\n+\n+    def harden_runtime(self, password, encoded):\n+        pass\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/auth_tests/test_hashers.py b/tests/auth_tests/test_hashers.py\nindex d79a246276..ecd3f276a9 100644\n--- a/tests/auth_tests/test_hashers.py\n+++ b/tests/auth_tests/test_hashers.py\n@@ -10,9 +10,10 @@ from django.contrib.auth.hashers import (\n     check_password, get_hasher, identify_hasher, is_password_usable,\n     make_password,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, mock\n from django.test.utils import override_settings\n from django.utils import six\n+from django.utils.encoding import force_bytes\n \n try:\n     import crypt\n@@ -214,6 +215,28 @@ class TestUtilsHashPass(SimpleTestCase):\n         finally:\n             hasher.rounds = old_rounds\n \n+    @skipUnless(bcrypt, \"bcrypt not installed\")\n+    def test_bcrypt_harden_runtime(self):\n+        hasher = get_hasher('bcrypt')\n+        self.assertEqual('bcrypt', hasher.algorithm)\n+\n+        with mock.patch.object(hasher, 'rounds', 4):\n+            encoded = make_password('letmein', hasher='bcrypt')\n+\n+        with mock.patch.object(hasher, 'rounds', 6), \\\n+                mock.patch.object(hasher, 'encode', side_effect=hasher.encode):\n+            hasher.harden_runtime('wrong_password', encoded)\n+\n+            # Increasing rounds from 4 to 6 means an increase of 4 in workload,\n+            # therefore hardening should run 3 times to make the timing the\n+            # same (the original encode() call already ran once).\n+            self.assertEqual(hasher.encode.call_count, 3)\n+\n+            # Get the original salt (includes the original workload factor)\n+            algorithm, data = encoded.split('$', 1)\n+            expected_call = (('wrong_password', force_bytes(data[:29])),)\n+            self.assertEqual(hasher.encode.call_args_list, [expected_call] * 3)\n+\n     def test_unusable(self):\n         encoded = make_password(None)\n         self.assertEqual(len(encoded), len(UNUSABLE_PASSWORD_PREFIX) + UNUSABLE_PASSWORD_SUFFIX_LENGTH)\n@@ -337,6 +360,25 @@ class TestUtilsHashPass(SimpleTestCase):\n         finally:\n             hasher.iterations = old_iterations\n \n+    def test_pbkdf2_harden_runtime(self):\n+        hasher = get_hasher('default')\n+        self.assertEqual('pbkdf2_sha256', hasher.algorithm)\n+\n+        with mock.patch.object(hasher, 'iterations', 1):\n+            encoded = make_password('letmein')\n+\n+        with mock.patch.object(hasher, 'iterations', 6), \\\n+                mock.patch.object(hasher, 'encode', side_effect=hasher.encode):\n+            hasher.harden_runtime('wrong_password', encoded)\n+\n+            # Encode should get called once ...\n+            self.assertEqual(hasher.encode.call_count, 1)\n+\n+            # ... with the original salt and 5 iterations.\n+            algorithm, iterations, salt, hash = encoded.split('$', 3)\n+            expected_call = (('wrong_password', salt, 5),)\n+            self.assertEqual(hasher.encode.call_args, expected_call)\n+\n     def test_pbkdf2_upgrade_new_hasher(self):\n         hasher = get_hasher('default')\n         self.assertEqual('pbkdf2_sha256', hasher.algorithm)\n@@ -365,6 +407,20 @@ class TestUtilsHashPass(SimpleTestCase):\n             self.assertTrue(check_password('letmein', encoded, setter))\n             self.assertTrue(state['upgraded'])\n \n+    def test_check_password_calls_harden_runtime(self):\n+        hasher = get_hasher('default')\n+        encoded = make_password('letmein')\n+\n+        with mock.patch.object(hasher, 'harden_runtime'), \\\n+                mock.patch.object(hasher, 'must_update', return_value=True):\n+            # Correct password supplied, no hardening needed\n+            check_password('letmein', encoded)\n+            self.assertEqual(hasher.harden_runtime.call_count, 0)\n+\n+            # Wrong password supplied, hardening needed\n+            check_password('wrong_password', encoded)\n+            self.assertEqual(hasher.harden_runtime.call_count, 1)\n+\n     def test_load_library_no_algorithm(self):\n         with self.assertRaises(ValueError) as e:\n             BasePasswordHasher()._load_library()\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "67b46ba7016da2d259c1ecc7d666d11f5e1cfaab", "source_date": "Tue Mar 1 11:25:28 2016 -0500", "source_tag": "1.10", "target_commit": "f4e6e02f7713a6924d16540be279909ff4091eb6", "target_date": "Mon Feb 29 08:07:17 2016 -0500", "target_tag": "1.8.10", "FAIL TO PASS": ["auth_tests.test_hashers.TestUtilsHashPass.test_pbkdf2_harden_runtime", "auth_tests.test_hashers.TestUtilsHashPass.test_check_password_calls_harden_runtime"], "PASS TO PASS": ["If the provided email is not registered, don't raise any error but", "auth_tests.test_views.LogoutTest.test_security_check", "auth_tests.test_context_processors.AuthContextProcessorTests.test_perm_in_perms_attrs", "auth_tests.test_models.LoadDataWithoutNaturalKeysTestCase.test_user_is_created_and_added_to_group", "auth_tests.test_views.ChangelistTests.test_user_change_email", "auth_tests.test_hashers.TestUtilsHashPass.test_load_library_importerror", "auth_tests.test_auth_backends.RowlevelBackendTest.test_has_perm", "auth_tests.test_forms.AuthenticationFormTest.test_username_field_label_not_set", "auth_tests.test_remote_user.RemoteUserNoCreateTest.test_header_disappears", "auth_tests.test_remote_user.CustomHeaderRemoteUserTest.test_header_disappears", "auth_tests.test_views.PasswordResetTest.test_confirm_complete", "auth_tests.test_views.LoginURLSettings.test_remote_login_url_with_next_querystring", "auth_tests.test_management.CreatesuperuserManagementCommandTestCase.test_skip_if_not_in_TTY", "auth_tests.test_views.LoginRedirectUrlTest.test_default", "auth_tests.test_forms.PasswordResetFormTest.test_save_plaintext_email", "auth_tests.test_views.ChangelistTests.test_user_not_change", "auth_tests.test_decorators.LoginRequiredTestCase.testCallable", "auth_tests.test_forms.UserChangeFormTest.test_bug_14242", "auth_tests.test_decorators.PermissionsRequiredDecoratorTest.test_single_permission_pass", "auth_tests.test_models.LoadDataWithNaturalKeysAndMultipleDatabasesTestCase.test_load_data_with_user_permissions", "Check the creation and properties of a superuser", "auth_tests.test_remote_user.RemoteUserTest.test_user_switch_forces_new_login", "USERNAME_FIELD should not appear in REQUIRED_FIELDS.", "auth_tests.test_decorators.PermissionsRequiredDecoratorTest.test_permissioned_denied_exception_raised", "auth_tests.test_hashers.TestUtilsHashPass.test_load_library_no_algorithm", "auth_tests.test_decorators.PermissionsRequiredDecoratorTest.test_many_permissions_pass", "auth_tests.test_forms.ReadOnlyPasswordHashTest.test_readonly_field_has_changed", "auth_tests.test_signals.SignalTestCase.test_logout", "auth_tests.test_management.CreatesuperuserManagementCommandTestCase.test_non_ascii_verbose_name", "auth_tests.test_views.LogoutTest.test_14377", "auth_tests.test_forms.SetPasswordFormTest.test_password_verification", "auth_tests.test_remote_user.CustomHeaderRemoteUserTest.test_known_user", "auth_tests.test_remote_user.RemoteUserCustomTest.test_known_user", "auth_tests.test_views.ChangePasswordTest.test_password_change_fails_with_mismatched_passwords", "auth_tests.test_remote_user.RemoteUserTest.test_no_remote_user", "auth_tests.test_context_processors.AuthContextProcessorTests.test_session_not_accessed", "auth_tests.test_auth_backends.ImportedBackendTests.test_backend_path", "auth_tests.test_auth_backends.ExtensionUserModelBackendTest.test_anonymous_has_no_permissions", "Email is sent if a valid email address is provided for password reset", "auth_tests.test_models.AbstractUserTestCase.test_email_user", "auth_tests.test_remote_user.RemoteUserNoCreateTest.test_last_login", "auth_tests.test_remote_user.RemoteUserTest.test_last_login", "auth_tests.test_views.LoginTest.test_login_csrf_rotate", "auth_tests.test_hashers.TestUtilsHashPass.test_no_upgrade_on_incorrect_pass", "Email is sent if a valid email address is provided for password reset when a custom from_email is provided.", "auth_tests.test_hashers.TestUtilsHashPass.test_bad_encoded", "auth_tests.test_views.UUIDUserTests.test_admin_password_change", "auth_tests.test_hashers.TestUtilsHashPass.test_low_level_pkbdf2", "auth_tests.test_auth_backends.CustomPermissionsUserModelBackendTest.test_has_perm", "auth_tests.test_hashers.TestUtilsHashPass.test_no_upgrade", "auth_tests.test_views.LoginTest.test_current_site_in_context_after_login", "auth_tests.test_views.PasswordResetTest.test_confirm_redirect_default", "auth_tests.test_views.CustomUserPasswordResetTest.test_confirm_valid_custom_user", "auth_tests.test_forms.AuthenticationFormTest.test_inactive_user", "auth_tests.test_views.ChangelistTests.test_user_change_password", "auth_tests.test_forms.PasswordResetFormTest.test_preserve_username_case", "auth_tests.test_views.PasswordResetTest.test_confirm_different_passwords", "auth_tests.test_views.LoginRedirectUrlTest.test_remote", "auth_tests.test_forms.UserCreationFormTest.test_success", "Check the properties of the anonymous user", "auth_tests.test_hashers.TestUtilsHashPass.test_unsalted_md5", "Logout resolves names or URLs passed as next_page.", "auth_tests.test_forms.UserChangeFormTest.test_bug_17944_empty_password", "auth_tests.test_views.ChangelistTests.test_password_change_bad_url", "auth_tests.test_forms.PasswordChangeFormTest.test_password_verification", "Logout with next_page option given redirects to specified resource", "auth_tests.test_hashers.TestUtilsHashPass.test_bad_algorithm", "A superuser can be created when a custom User model is in use", "user is not authenticated after a backend raises permission denied #2550", "auth_tests.test_decorators.LoginRequiredTestCase.testView", "auth_tests.test_views.PasswordResetTest.test_confirm_invalid_post", "auth_tests.test_context_processors.PermWrapperTests.test_permwrapper_in", "auth_tests.test_views.LoginURLSettings.test_login_url_with_querystring", "auth_tests.test_views.UUIDUserPasswordResetTest.test_confirm_valid_custom_user", "auth_tests.test_views.PasswordResetTest.test_confirm_display_user_from_form", "auth_tests.test_auth_backends.ModelBackendTest.test_inactive_has_no_permissions", "auth_tests.test_management.CreatesuperuserManagementCommandTestCase.test_fields_with_fk", "auth_tests.test_management.PermissionTestCase.test_duplicated_permissions", "auth_tests.test_hashers.TestUtilsHashPass.test_crypt", "A Custom superuser won't be created when a required field isn't provided", "Poisoned HTTP_HOST headers can't be used for reset emails", "auth_tests.test_hashers.TestUtilsHashPass.test_unsalted_sha1", "auth_tests.test_hashers.TestUtilsHashPass.test_low_level_pbkdf2_sha1", "auth_tests.test_management.CreatesuperuserManagementCommandTestCase.test_nolocale", "Logout without next_page option renders the default template", "auth_tests.test_management.CreatesuperuserManagementCommandTestCase.test_fields_with_fk_interactive", "auth_tests.test_signals.SignalTestCase.test_login", "auth_tests.test_views.LoginRedirectUrlTest.test_named", "auth_tests.test_management.CreatesuperuserManagementCommandTestCase.test_passing_stdin", "auth_tests.test_context_processors.PermWrapperTests.test_permlookupdict_in", "auth_tests.test_views.ChangePasswordTest.test_password_change_done_fails", "auth_tests.test_views.LoginTest.test_login_form_contains_request", "auth_tests.test_remote_user.RemoteUserNoCreateTest.test_no_remote_user", "auth_tests.test_management.GetDefaultUsernameTestCase.test_simple", "auth_tests.test_auth_backends.AnonymousUserBackendTest.  Applying sites.0001_initial...test_get_all_permissions", "auth_tests.test_auth_backends.ChangedBackendSettingsTest.test_changed_backend_settings", "auth_tests.test_templates.AuthTemplateTests.test_titles", "auth_tests.test_remote_user.CustomHeaderRemoteUserTest.test_last_login", "Executing the changepassword management command should change joe's password", "auth_tests.test_auth_backends.ExtensionUserModelBackendTest.test_inactive_has_no_permissions", "auth_tests.test_remote_user.CustomHeaderRemoteUserTest.test_unknown_user", "auth_tests.test_forms.UserCreationFormTest.test_password_verification", "Named URLs should be reversible", "auth_tests.test_management.PermissionTestCase.test_default_permissions", "auth_tests.test_forms.AuthenticationFormTest.test_success", "auth_tests.test_auth_backends.ExtensionUserModelBackendTest.test_custom_perms", "auth_tests.test_views.ChangePasswordTest.test_password_change_redirect_custom", "auth_tests.test_views.PasswordResetTest.test_reset_redirect_default", "auth_tests.test_models.IsActiveTestCase.test_builtin_user_isactive", "auth_tests.test_views.ChangelistTests.test_changelist_disallows_password_lookups", "auth_tests.test_hashers.TestUtilsHashPass.test_simple", "auth_tests.test_views.ChangePasswordTest.test_password_change_redirect_default", "auth_tests.test_hashers.TestUtilsHashPass.test_unusable", "auth_tests.test_forms.UserCreationFormTest.test_user_already_exists", "auth_tests.test_forms.UserChangeFormTest.test_bug_19349_bound_password_field", "auth_tests.test_views.PasswordResetTest.test_confirm_invalid_user", "auth_tests.test_context_processors.AuthContextProcessorTests.test_session_is_accessed", "auth_tests.test_views.LoginURLSettings.test_https_login_url", "auth_tests.test_handlers.ModWsgiHandlerTestCase.test_groups_for_user", "auth_tests.test_remote_user.RemoteUserTest.test_known_user", "auth_tests.test_hashers.TestUtilsHashPass.test_sha1", "auth_tests.test_views.PasswordResetTest.test_html_mail_template", "auth_tests.test_context_processors.AuthContextProcessorTests.test_message_attrs", "auth_tests.test_views.PasswordResetTest.test_confirm_overflow_user", "auth_tests.test_auth_backends.AnonymousUserBackendTest.test_has_perms", "auth_tests.test_management.PermissionTestCase.test_verbose_name_length", "auth_tests.test_decorators.LoginRequiredTestCase.testLoginRequiredNextUrl", "auth_tests.test_views.PasswordResetTest.test_confirm_redirect_custom", "auth_tests.test_views.PasswordResetTest.test_confirm_redirect_custom_named", "auth_tests.test_remote_user.RemoteUserNoCreateTest.test_known_user", "A non-unique USERNAME_FIELD should raise a model validation error.", "auth_tests.test_views.SessionAuthenticationTests.test_user_password_change_updates_session", "auth_tests.test_forms.AuthenticationFormTest.test_custom_login_allowed_policy", "auth_tests.test_forms.UserChangeFormTest.test_bug_17944_unmanageable_password", "auth_tests.test_forms.PasswordChangeFormTest.test_field_order", "auth_tests.test_forms.AuthenticationFormTest.test_username_field_label", "auth_tests.test_forms.UserChangeFormTest.test_username_validity", "auth_tests.test_hashers.TestUtilsHashPass.test_unspecified_password", "auth_tests.test_views.ChangePasswordTest.test_password_change_done_succeeds", "auth_tests.test_views.ChangePasswordTest.test_password_change_redirect_custom_named", "auth_tests.test_forms.AuthenticationFormTest.test_inactive_user_i18n", "auth_tests.test_models.UserManagerTestCase.test_create_user", "auth_tests.test_remote_user.RemoteUserNoCreateTest.test_user_switch_forces_new_login", "auth_tests.test_models.UserManagerTestCase.test_create_user_email_domain_normalize_rfc3696", "auth_tests.test_forms.PasswordResetFormTest.test_custom_email_subject", "auth_tests.test_auth_backends.CustomPermissionsUserModelBackendTest.test_inactive_has_no_permissions", "auth_tests.test_forms.AuthenticationFormTest.test_invalid_username", "auth_tests.test_views.LoginURLSettings.test_named_login_url", "auth_tests.test_views.LoginTest.test_security_check", "auth_tests.test_management.ChangepasswordManagementCommandTestCase.test_that_max_tries_exits_1", "#19945.Default User model verbose names are translatable", "auth_tests.test_views.PasswordResetTest.test_confirm_invalid", "auth_tests.test_views.LoginRedirectUrlTest.test_custom", "auth_tests.test_views.RedirectToLoginTests.test_redirect_to_login_with_lazy", "auth_tests.test_models.IsActiveTestCase.test_is_active_field_default", "auth_tests.test_auth_backends.CustomPermissionsUserModelBackendTest.test_anonymous_has_no_permissions", "REQUIRED_FIELDS should be a list.", "auth_tests.test_auth_backends.InActiveUserBackendTest.test_has_module_perms", "The current user model can be swapped out for another", "auth_tests.test_decorators.PermissionsRequiredDecoratorTest.test_permissioned_denied_redirect", "auth_tests.test_handlers.ModWsgiHandlerTestCase.test_check_password", "auth_tests.test_hashers.TestUtilsHashPass.test_pbkdf2_upgrade_new_hasher", "auth_tests.test_models.NaturalKeysTestCase.test_group_natural_key", "auth_tests.test_views.LoginURLSettings.test_remote_login_url", "auth_tests.test_remote_user.RemoteUserTest.test_header_disappears", "auth_tests.test_views.ChangePasswordTest.test_password_change_succeeds", "auth_tests.test_forms.PasswordResetFormTest.test_inactive_user", "If the reset view is marked as being for admin, the HTTP_HOST header is used for a domain override.", "The current user model must point to an installed model", "auth_tests.test_views.LoginTest.test_session_key_flushed_on_login_after_password_change", "auth_tests.test_tokens.TokenGeneratorTest.test_10265", "auth_tests.test_models.UserManagerTestCase.test_create_user_email_domain_normalize", "auth_tests.test_forms.PasswordResetFormTest.test_custom_email_constructor", "auth_tests.test_context_processors.AuthContextProcessorTests.test_perms_attrs", "auth_tests.test_decorators.LoginRequiredTestCase.testLoginRequired", "auth_tests.test_models.NaturalKeysTestCase.test_user_natural_key", "auth_tests.test_remote_user.CustomHeaderRemoteUserTest.test_user_switch_forces_new_login", "auth_tests.test_remote_user.RemoteUserCustomTest.test_last_login", "auth_tests.test_views.PasswordResetTest.test_reset_custom_redirect_named", "auth_tests.test_remote_user.RemoteUserTest.test_unknown_user", "auth_tests.test_auth_backends.PermissionDeniedBackendTest.test_has_perm_denied", "A superuser has all permissions. Refs #14795.", "auth_tests.test_tokens.TokenGeneratorTest.test_make_token", "auth_tests.test_tokens.TokenGeneratorTest.test_timeout", "auth_tests.test_forms.UserChangeFormTest.test_bug_17944_unknown_password_algorithm", "auth_tests.test_remote_user.RemoteUserCustomTest.test_no_remote_user", "auth_tests.test_views.LoginURLSettings.test_lazy_login_url", "The current user model can be retrieved", "Poisoned HTTP_HOST headers can't be used for reset emails on admin views", "auth_tests.test_views.LoginTest.test_session_key_flushed_on_login", "auth_tests.test_management.GetDefaultUsernameTestCase.test_actual_implementation", "auth_tests.test_management.GetDefaultUsernameTestCase.test_existing", "auth_tests.test_auth_backends.UUIDUserTests.test_login", "auth_tests.test_context_processors.AuthContextProcessorTests.test_user_attrs", "auth_tests.test_remote_user.RemoteUserCustomTest.test_header_disappears", "auth_tests.test_auth_backends.PermissionDeniedBackendTest.test_authenticates", "auth_tests.test_forms.UserCreationFormTest.test_invalid_data", "auth_tests.test_models.TestCreateSuperUserSignals.test_create_user", "auth_tests.test_signals.SignalTestCase.test_logout_anonymous", "auth_tests.test_models.UserManagerTestCase.test_create_user_email_domain_normalize_with_whitespace", "auth_tests.test_forms.PasswordResetFormTest.test_invalid_email", "auth_tests.test_views.RedirectToLoginTests.test_redirect_to_login_with_lazy_and_unicode", "auth_tests.test_management.ChangepasswordManagementCommandTestCase.test_that_changepassword_command_works_with_nonascii_output", "auth_tests.test_auth_backends.ImproperlyConfiguredUserModelTest.test_does_not_shadow_exception", "auth_tests.test_auth_backends.AnonymousUserBackendTest.test_has_perm", "auth_tests.test_forms.UserChangeFormTest.test_unusable_password", "auth_tests.test_forms.AuthenticationFormTest.test_username_field_label_empty_string", "auth_tests.test_remote_user.RemoteUserNoCreateTest.test_unknown_user", "auth_tests.test_views.ChangelistTests.test_user_change_different_user_password", "auth_tests.test_management.CreatesuperuserManagementCommandTestCase.test_verbosity_zero", "auth_tests.test_models.LoadDataWithNaturalKeysTestCase.test_user_is_created_and_added_to_group", "auth_tests.test_forms.UserCreationFormTest.test_both_passwords", "Logout with custom query string redirects to specified resource", "The change form does not return the password value", "Check that language stored in session is preserved after logout", "Logout with query string redirects to specified resource", "auth_tests.test_auth_backends.CustomPermissionsUserModelBackendTest.test_custom_perms", "auth_tests.test_views.LoginURLSettings.test_standard_login_url", "A non-unique USERNAME_FIELD should raise an error only if we use the", "auth_tests.test_remote_user.RemoteUserCustomTest.test_unknown_user", "auth_tests.test_auth_backends.ExtensionUserModelBackendTest.test_has_perm", "auth_tests.test_forms.SetPasswordFormTest.test_success", "auth_tests.test_hashers.TestUtilsHashPass.test_pkbdf2", "auth_tests.test_auth_backends.PermissionDeniedBackendTest.test_has_perm", "auth_tests.test_remote_user.RemoteUserCustomTest.test_user_switch_forces_new_login", "auth_tests.test_models.AbstractUserTestCase.test_last_login_default", "auth_tests.test_auth_backends.ModelBackendTest.test_custom_perms", "auth_tests.test_hashers.TestUtilsHashPass.test_upgrade", "auth_tests.test_views.LoginTest.test_login_session_without_hash_session_key", "auth_tests.test_forms.PasswordResetFormTest.test_save_html_email_template_name", "Hasher is run once regardless of whether the user exists. Refs #20760.", "auth_tests.test_middleware.TestSessionAuthenticationMiddleware.test_changed_password_invalidates_session_with_middleware", "auth_tests.test_auth_backends.CustomUserModelBackendAuthenticateTest.test_authenticate", "Check that users can be created without an email", "auth_tests.test_auth_backends.ModelBackendTest.test_has_perm", "auth_tests.test_hashers.TestUtilsHashPass.test_pbkdf2_upgrade", "auth_tests.test_models.UserManagerTestCase.test_empty_username", "auth_tests.test_auth_backends.InActiveUserBackendTest.test_has_perm", "auth_tests.test_hashers.TestUtilsHashPass.test_md5", "auth_tests.test_auth_backends.RowlevelBackendTest.test_get_all_permissions", "auth_tests.test_views.PasswordResetTest.test_reset_custom_redirect", "auth_tests.test_auth_backends.TypeErrorBackendTest.test_type_error_raised", "auth_tests.test_auth_backends.NoBackendsTest.test_raises_exception", "auth_tests.test_forms.PasswordResetFormTest.test_cleaned_data", "The alternate user setting must point to something in the format app.model", "auth_tests.test_forms.PasswordResetFormTest.test_nonexistent_email", "auth_tests.test_auth_backends.ModelBackendTest.test_anonymous_has_no_permissions", "auth_tests.test_forms.PasswordChangeFormTest.test_success", "auth_tests.test_auth_backends.RowlevelBackendTest.test_get_group_permissions", "auth_tests.test_middleware.TestSessionAuthenticationMiddleware.test_changed_password_doesnt_invalidate_session", "auth_tests.test_views.LogoutTest.test_logout_with_overridden_redirect_url", "Ensure that only `last_login` is updated in `update_last_login`", "auth_tests.test_models.TestCreateSuperUserSignals.test_create_superuser", "auth_tests.test_views.PasswordResetTest.test_confirm_valid", "auth_tests.test_remote_user.CustomHeaderRemoteUserTest.test_no_remote_user", "auth_tests.test_handlers.ModWsgiHandlerTestCase.test_check_password_custom_user", "auth_tests.test_management.GetDefaultUsernameTestCase.test_i18n", "Check the operation of the createsuperuser management command", "auth_tests.test_forms.ReadOnlyPasswordHashTest.test_bug_19349_render_with_none_value", "Check that users can be created and can set their password", "auth_tests.test_forms.PasswordChangeFormTest.test_incorrect_password", "auth_tests.test_management.CreatesuperuserManagementCommandTestCase.test_email_in_username", "auth_tests.test_views.ChangePasswordTest.test_password_change_fails_with_invalid_old_password", "auth_tests.test_forms.PasswordResetFormTest.test_unusable_password", "auth_tests.test_auth_backends.AnonymousUserBackendTest.test_has_module_perms", "Regressiontest for #12462"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_409", "original_commit_message": "Fixed CVE-2016-2513 -- Fixed user enumeration timing attack during login.\nThis is a security fix.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/contrib/auth/hashers.py b/django/contrib/auth/hashers.py\nindex 5136110fa1..ad0045267c 100644\n--- a/django/contrib/auth/hashers.py\n+++ b/django/contrib/auth/hashers.py\n@@ -4,6 +4,7 @@ import base64\n import binascii\n import hashlib\n import importlib\n+import warnings\n from collections import OrderedDict\n \n from django.conf import settings\n@@ -46,10 +47,17 @@ def check_password(password, encoded, setter=None, preferred='default'):\n     preferred = get_hasher(preferred)\n     hasher = identify_hasher(encoded)\n \n-    must_update = hasher.algorithm != preferred.algorithm\n-    if not must_update:\n-        must_update = preferred.must_update(encoded)\n+    hasher_changed = hasher.algorithm != preferred.algorithm\n+    must_update = hasher_changed or preferred.must_update(encoded)\n     is_correct = hasher.verify(password, encoded)\n+\n+    # If the hasher didn't change (we don't protect against enumeration if it\n+    # does) and the password should get updated, try to close the timing gap\n+    # between the work factor of the current encoded password and the default\n+    # work factor.\n+    if not is_correct and not hasher_changed and must_update:\n+        hasher.harden_runtime(password, encoded)\n+\n     if setter and is_correct and must_update:\n         setter(password)\n     return is_correct\n@@ -216,6 +224,19 @@ class BasePasswordHasher(object):\n     def must_update(self, encoded):\n         return False\n \n+    def harden_runtime(self, password, encoded):\n+        \"\"\"\n+        Bridge the runtime gap between the work factor supplied in `encoded`\n+        and the work factor suggested by this hasher.\n+\n+        Taking PBKDF2 as an example, if `encoded` contains 20000 iterations and\n+        `self.iterations` is 30000, this method should run password through\n+        another 10000 iterations of PBKDF2. Similar approaches should exist\n+        for any hasher that has a work factor. If not, this method should be\n+        defined as a no-op to silence the warning.\n+        \"\"\"\n+        warnings.warn('subclasses of BasePasswordHasher should provide a harden_runtime() method')\n+\n \n class PBKDF2PasswordHasher(BasePasswordHasher):\n     \"\"\"\n@@ -258,6 +279,12 @@ class PBKDF2PasswordHasher(BasePasswordHasher):\n         algorithm, iterations, salt, hash = encoded.split('$', 3)\n         return int(iterations) != self.iterations\n \n+    def harden_runtime(self, password, encoded):\n+        algorithm, iterations, salt, hash = encoded.split('$', 3)\n+        extra_iterations = self.iterations - int(iterations)\n+        if extra_iterations > 0:\n+            self.encode(password, salt, extra_iterations)\n+\n \n class PBKDF2SHA1PasswordHasher(PBKDF2PasswordHasher):\n     \"\"\"\n@@ -305,23 +332,8 @@ class BCryptSHA256PasswordHasher(BasePasswordHasher):\n     def verify(self, password, encoded):\n         algorithm, data = encoded.split('$', 1)\n         assert algorithm == self.algorithm\n-        bcrypt = self._load_library()\n-\n-        # Hash the password prior to using bcrypt to prevent password\n-        # truncation as described in #20138.\n-        if self.digest is not None:\n-            # Use binascii.hexlify() because a hex encoded bytestring is\n-            # Unicode on Python 3.\n-            password = binascii.hexlify(self.digest(force_bytes(password)).digest())\n-        else:\n-            password = force_bytes(password)\n-\n-        # Ensure that our data is a bytestring\n-        data = force_bytes(data)\n-        # force_bytes() necessary for py-bcrypt compatibility\n-        hashpw = force_bytes(bcrypt.hashpw(password, data))\n-\n-        return constant_time_compare(data, hashpw)\n+        encoded_2 = self.encode(password, force_bytes(data))\n+        return constant_time_compare(encoded, encoded_2)\n \n     def safe_summary(self, encoded):\n         algorithm, empty, algostr, work_factor, data = encoded.split('$', 4)\n@@ -338,6 +350,16 @@ class BCryptSHA256PasswordHasher(BasePasswordHasher):\n         algorithm, empty, algostr, rounds, data = encoded.split('$', 4)\n         return int(rounds) != self.rounds\n \n+    def harden_runtime(self, password, encoded):\n+        _, data = encoded.split('$', 1)\n+        salt = data[:29]  # Length of the salt in bcrypt.\n+        rounds = data.split('$')[2]\n+        # work factor is logarithmic, adding one doubles the load.\n+        diff = 2**(self.rounds - int(rounds)) - 1\n+        while diff > 0:\n+            self.encode(password, force_bytes(salt))\n+            diff -= 1\n+\n \n class BCryptPasswordHasher(BCryptSHA256PasswordHasher):\n     \"\"\"\n@@ -385,6 +407,9 @@ class SHA1PasswordHasher(BasePasswordHasher):\n             (_('hash'), mask_hash(hash)),\n         ])\n \n+    def harden_runtime(self, password, encoded):\n+        pass\n+\n \n class MD5PasswordHasher(BasePasswordHasher):\n     \"\"\"\n@@ -413,6 +438,9 @@ class MD5PasswordHasher(BasePasswordHasher):\n             (_('hash'), mask_hash(hash)),\n         ])\n \n+    def harden_runtime(self, password, encoded):\n+        pass\n+\n \n class UnsaltedSHA1PasswordHasher(BasePasswordHasher):\n     \"\"\"\n@@ -445,6 +473,9 @@ class UnsaltedSHA1PasswordHasher(BasePasswordHasher):\n             (_('hash'), mask_hash(hash)),\n         ])\n \n+    def harden_runtime(self, password, encoded):\n+        pass\n+\n \n class UnsaltedMD5PasswordHasher(BasePasswordHasher):\n     \"\"\"\n@@ -478,6 +509,9 @@ class UnsaltedMD5PasswordHasher(BasePasswordHasher):\n             (_('hash'), mask_hash(encoded, show=3)),\n         ])\n \n+    def harden_runtime(self, password, encoded):\n+        pass\n+\n \n class CryptPasswordHasher(BasePasswordHasher):\n     \"\"\"\n@@ -512,3 +546,6 @@ class CryptPasswordHasher(BasePasswordHasher):\n             (_('salt'), salt),\n             (_('hash'), mask_hash(data, show=3)),\n         ])\n+\n+    def harden_runtime(self, password, encoded):\n+        pass\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/auth_tests/test_hashers.py b/tests/auth_tests/test_hashers.py\nindex d79a246276..ecd3f276a9 100644\n--- a/tests/auth_tests/test_hashers.py\n+++ b/tests/auth_tests/test_hashers.py\n@@ -10,9 +10,10 @@ from django.contrib.auth.hashers import (\n     check_password, get_hasher, identify_hasher, is_password_usable,\n     make_password,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, mock\n from django.test.utils import override_settings\n from django.utils import six\n+from django.utils.encoding import force_bytes\n \n try:\n     import crypt\n@@ -214,6 +215,28 @@ class TestUtilsHashPass(SimpleTestCase):\n         finally:\n             hasher.rounds = old_rounds\n \n+    @skipUnless(bcrypt, \"bcrypt not installed\")\n+    def test_bcrypt_harden_runtime(self):\n+        hasher = get_hasher('bcrypt')\n+        self.assertEqual('bcrypt', hasher.algorithm)\n+\n+        with mock.patch.object(hasher, 'rounds', 4):\n+            encoded = make_password('letmein', hasher='bcrypt')\n+\n+        with mock.patch.object(hasher, 'rounds', 6), \\\n+                mock.patch.object(hasher, 'encode', side_effect=hasher.encode):\n+            hasher.harden_runtime('wrong_password', encoded)\n+\n+            # Increasing rounds from 4 to 6 means an increase of 4 in workload,\n+            # therefore hardening should run 3 times to make the timing the\n+            # same (the original encode() call already ran once).\n+            self.assertEqual(hasher.encode.call_count, 3)\n+\n+            # Get the original salt (includes the original workload factor)\n+            algorithm, data = encoded.split('$', 1)\n+            expected_call = (('wrong_password', force_bytes(data[:29])),)\n+            self.assertEqual(hasher.encode.call_args_list, [expected_call] * 3)\n+\n     def test_unusable(self):\n         encoded = make_password(None)\n         self.assertEqual(len(encoded), len(UNUSABLE_PASSWORD_PREFIX) + UNUSABLE_PASSWORD_SUFFIX_LENGTH)\n@@ -337,6 +360,25 @@ class TestUtilsHashPass(SimpleTestCase):\n         finally:\n             hasher.iterations = old_iterations\n \n+    def test_pbkdf2_harden_runtime(self):\n+        hasher = get_hasher('default')\n+        self.assertEqual('pbkdf2_sha256', hasher.algorithm)\n+\n+        with mock.patch.object(hasher, 'iterations', 1):\n+            encoded = make_password('letmein')\n+\n+        with mock.patch.object(hasher, 'iterations', 6), \\\n+                mock.patch.object(hasher, 'encode', side_effect=hasher.encode):\n+            hasher.harden_runtime('wrong_password', encoded)\n+\n+            # Encode should get called once ...\n+            self.assertEqual(hasher.encode.call_count, 1)\n+\n+            # ... with the original salt and 5 iterations.\n+            algorithm, iterations, salt, hash = encoded.split('$', 3)\n+            expected_call = (('wrong_password', salt, 5),)\n+            self.assertEqual(hasher.encode.call_args, expected_call)\n+\n     def test_pbkdf2_upgrade_new_hasher(self):\n         hasher = get_hasher('default')\n         self.assertEqual('pbkdf2_sha256', hasher.algorithm)\n@@ -365,6 +407,20 @@ class TestUtilsHashPass(SimpleTestCase):\n             self.assertTrue(check_password('letmein', encoded, setter))\n             self.assertTrue(state['upgraded'])\n \n+    def test_check_password_calls_harden_runtime(self):\n+        hasher = get_hasher('default')\n+        encoded = make_password('letmein')\n+\n+        with mock.patch.object(hasher, 'harden_runtime'), \\\n+                mock.patch.object(hasher, 'must_update', return_value=True):\n+            # Correct password supplied, no hardening needed\n+            check_password('letmein', encoded)\n+            self.assertEqual(hasher.harden_runtime.call_count, 0)\n+\n+            # Wrong password supplied, hardening needed\n+            check_password('wrong_password', encoded)\n+            self.assertEqual(hasher.harden_runtime.call_count, 1)\n+\n     def test_load_library_no_algorithm(self):\n         with self.assertRaises(ValueError) as e:\n             BasePasswordHasher()._load_library()\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "67b46ba7016da2d259c1ecc7d666d11f5e1cfaab", "source_date": "Tue Mar 1 11:25:28 2016 -0500", "source_tag": "1.10", "target_commit": "af7d09b0c5c6ab68e629fd9baf736f9dd203b18e", "target_date": "Tue Mar 1 11:38:49 2016 -0500", "target_tag": "1.9.3", "FAIL TO PASS": ["auth_tests.test_hashers.TestUtilsHashPass.test_pbkdf2_harden_runtime", "auth_tests.test_hashers.TestUtilsHashPass.test_check_password_calls_harden_runtime"], "PASS TO PASS": ["auth_tests.test_hashers.TestUtilsHashPass.test_bad_algorithm", "auth_tests.test_hashers.TestUtilsHashPass.test_load_library_importerror", "auth_tests.test_hashers.TestUtilsHashPass.test_unspecified_password", "auth_tests.test_hashers.TestUtilsHashPass.test_pbkdf2", "auth_tests.test_hashers.TestUtilsHashPass.test_crypt", "auth_tests.test_hashers.TestUtilsHashPass.test_unsalted_sha1", "auth_tests.test_hashers.TestUtilsHashPass.test_low_level_pbkdf2_sha1", "auth_tests.test_hashers.TestUtilsHashPass.test_load_library_no_algorithm", "auth_tests.test_hashers.TestUtilsHashPass.test_upgrade", "auth_tests.test_hashers.TestUtilsHashPass.test_pbkdf2_upgrade_new_hasher", "auth_tests.test_hashers.TestUtilsHashPass.test_pbkdf2_upgrade", "auth_tests.test_hashers.TestUtilsHashPass.test_md5", "auth_tests.test_hashers.TestUtilsHashPass.test_low_level_pbkdf2", "auth_tests.test_hashers.TestUtilsHashPass.test_no_upgrade_on_incorrect_pass", "auth_tests.test_hashers.TestUtilsHashPass.test_bad_encoded", "auth_tests.test_hashers.TestUtilsHashPass.test_no_upgrade", "auth_tests.test_hashers.TestUtilsHashPass.test_simple", "auth_tests.test_hashers.TestUtilsHashPass.test_unsalted_md5", "auth_tests.test_hashers.TestUtilsHashPass.test_unusable", "auth_tests.test_hashers.TestUtilsHashPass.test_sha1"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_414", "original_commit_message": "Fixed CVE-2020-24584 -- Fixed permission escalation in intermediate-level directories of the file system cache on Python 3.7+.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/core/cache/backends/filebased.py b/django/core/cache/backends/filebased.py\nindex 3d76f0371b..10779c5545 100644\n--- a/django/core/cache/backends/filebased.py\n+++ b/django/core/cache/backends/filebased.py\n@@ -114,7 +114,13 @@ class FileBasedCache(BaseCache):\n             self._delete(fname)\n \n     def _createdir(self):\n-        os.makedirs(self._dir, 0o700, exist_ok=True)\n+        # Set the umask because os.makedirs() doesn't apply the \"mode\" argument\n+        # to intermediate-level directories.\n+        old_umask = os.umask(0o077)\n+        try:\n+            os.makedirs(self._dir, 0o700, exist_ok=True)\n+        finally:\n+            os.umask(old_umask)\n \n     def _key_to_file(self, key, version=None):\n         \"\"\"\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex c26183f5b2..d5532fa1e6 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -6,12 +6,13 @@ import os\n import pickle\n import re\n import shutil\n+import sys\n import tempfile\n import threading\n import time\n import unittest\n from pathlib import Path\n-from unittest import mock\n+from unittest import mock, skipIf\n \n from django.conf import settings\n from django.core import management, signals\n@@ -1494,6 +1495,28 @@ class FileBasedCacheTests(BaseCacheTests, TestCase):\n         # Returns the default instead of erroring.\n         self.assertEqual(cache.get('foo', 'baz'), 'baz')\n \n+    @skipIf(\n+        sys.platform == 'win32',\n+        'Windows only partially supports umasks and chmod.',\n+    )\n+    def test_cache_dir_permissions(self):\n+        os.rmdir(self.dirname)\n+        dir_path = Path(self.dirname) / 'nested' / 'filebasedcache'\n+        for cache_params in settings.CACHES.values():\n+            cache_params['LOCATION'] = dir_path\n+        setting_changed.send(self.__class__, setting='CACHES', enter=False)\n+        cache.set('foo', 'bar')\n+        self.assertIs(dir_path.exists(), True)\n+        tests = [\n+            dir_path,\n+            dir_path.parent,\n+            dir_path.parent.parent,\n+        ]\n+        for directory in tests:\n+            with self.subTest(directory=directory):\n+                dir_mode = directory.stat().st_mode & 0o777\n+                self.assertEqual(dir_mode, 0o700)\n+\n     def test_get_does_not_ignore_non_filenotfound_exceptions(self):\n         with mock.patch('builtins.open', side_effect=OSError):\n             with self.assertRaises(OSError):\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "1853724acaf17ed7414d54c7d2b5563a25025a71", "source_date": "Tue Sep 1 09:17:23 2020 +0200", "source_tag": "3.2", "target_commit": "2b099caa5923afa8cfb5f1e8c0d56b6e0e81915b", "target_date": "Tue Sep 1 09:35:05 2020 +0200", "target_tag": "3.1.1", "FAIL TO PASS": ["cache.tests.FileBasedCachePathLibTests.test_cache_dir_permissions", "cache.tests.FileBasedCacheTests.test_cache_dir_permissions"], "PASS TO PASS": ["cache.tests.FileBasedCachePathLibTests.test_cache_versioning_get_set_many", "cache.tests.FileBasedCacheTests.test_get_or_set", "cache.tests.DummyCacheTests.test_get_many_invalid_key", "cache.tests.FileBasedCacheTests.test_in", "cache.tests.DummyCacheTests.test_delete", "cache.tests.DefaultNonExpiringCacheKeyTests.test_default_expiration_time_for_keys_is_5_minutes", "cache.tests.DBCacheWithTimeZoneTests.test_cache_write_for_model_instance_with_deferred", "cache.tests.DBCacheWithTimeZoneTests.test_add_fail_on_pickleerror", "cache.tests.FileBasedCachePathLibTests.test_get_or_set_version", "cache.tests.PrefixedCacheUtils.test_get_cache_key_with_query", "cache.tests.FileBasedCachePathLibTests.test_clear_does_not_remove_cache_dir", "cache.tests.LocMemCacheTests.test_get_or_set_callable", "cache.tests.FileBasedCachePathLibTests.test_ignores_non_cache_files", "cache.tests.DBCacheWithTimeZoneTests.test_long_timeout", "cache.tests.LocMemCacheTests.test_decr", "cache.tests.FileBasedCachePathLibTests.test_long_timeout", "cache.tests.LocMemCacheTests.test_touch", "cache.tests.DBCacheWithTimeZoneTests.test_add", "cache.tests.DBCacheTests.test_has_key", "cache.tests.FileBasedCacheTests.test_cache_versioning_incr_decr", "cache.tests.FileBasedCacheTests.test_close", "cache.tests.DummyCacheTests.test_add", "cache.tests.DBCacheWithTimeZoneTests.test_cache_read_for_model_instance_with_deferred", "cache.tests.FileBasedCacheTests.test_cache_versioning_add", "cache.tests.LocMemCacheTests.test_cache_read_for_model_instance_with_deferred", "cache.tests.DBCacheWithTimeZoneTests.test_decr_version", "cache.tests.CacheI18nTest.test_cache_key_i18n_formatting", "cache.tests.FileBasedCacheTests.test_prefix", "cache.tests.DBCacheWithTimeZoneTests.test_simple", "cache.tests.DBCacheWithTimeZoneTests.test_createcachetable_with_table_argument", "cache.tests.FileBasedCacheTests.test_set_many_returns_empty_list_on_success", "cache.tests.FileBasedCacheTests.test_data_types", "cache.tests.DBCacheWithTimeZoneTests.test_cache_versioning_get_set", "cache.tests.CacheI18nTest.test_middleware_doesnt_cache_streaming_response", "cache.tests.DBCacheWithTimeZoneTests.test_delete_nonexistent", "cache.tests.DBCacheTests.test_get_or_set_callable", "cache.tests.DBCacheTests.test_cache_versioning_incr_decr", "cache.tests.DBCacheWithTimeZoneTests.test_decr", "cache.tests.DBCacheWithTimeZoneTests.test_in", "cache.tests.DBCacheTests.test_zero_timeout", "cache.tests.DBCacheTests.test_expiration", "cache.tests.FileBasedCachePathLibTests.test_invalid_key_length", "cache.tests.DummyCacheTests.test_incr", "cache.tests.LocMemCacheTests.test_binary_string", "cache.tests.PrefixedCacheI18nTest.test_cache_key_i18n_translation", "cache.tests.LocMemCacheTests.test_get_many", "cache.tests.FileBasedCachePathLibTests.test_get_or_set_racing", "cache.tests.DBCacheTests.test_get_many", "cache.tests.TestMakeTemplateFragmentKey.test_with_one_vary_on", "cache.tests.LocMemCacheTests.test_in", "cache.tests.DBCacheTests.test_get_or_set_version", "cache.tests.DummyCacheTests.test_data_types", "cache.tests.FileBasedCacheTests.test_zero_cull", "cache.tests.FileBasedCachePathLibTests.test_binary_string", "cache.tests.FileBasedCachePathLibTests.test_prefix", "cache.tests.CacheMiddlewareTest.test_cached_control_private_not_cached", "cache.tests.PrefixedCacheUtils.test_learn_cache_key", "cache.tests.DBCacheWithTimeZoneTests.test_delete", "cache.tests.LocMemCacheTests.test_non_existent", "cache.tests.CacheI18nTest.test_cache_key_i18n_timezone", "cache.tests.FileBasedCachePathLibTests.test_set_fail_on_pickleerror", "cache.tests.DBCacheTests.test_touch", "cache.tests.FileBasedCachePathLibTests.test_cache_write_for_model_instance_with_deferred", "cache.tests.CacheMiddlewareTest.test_middleware", "cache.tests.FileBasedCachePathLibTests.test_expiration", "cache.tests.DummyCacheTests.test_non_existent", "cache.tests.DBCacheTests.test_get_many_num_queries", "cache.tests.LocMemCacheTests.test_get_or_set", "cache.tests.DBCacheTests.test_add", "cache.tests.PrefixedCacheI18nTest.test_cache_key_no_i18n", "cache.tests.FileBasedCacheTests.test_cull_delete_when_store_empty", "cache.tests.LocMemCacheTests.test_cache_read_for_model_instance", "cache.tests.LocMemCacheTests.test_locking_on_pickle", "cache.tests.DBCacheTests.test_get_or_set", "cache.tests.FileBasedCacheTests.test_add_fail_on_pickleerror", "cache.tests.DBCacheTests.test_add_fail_on_pickleerror", "cache.tests.FileBasedCacheTests.test_simple", "cache.tests.DBCacheWithTimeZoneTests.test_binary_string", "cache.tests.CacheUtils.test_cache_key_varies_by_url", "cache.tests.DBCacheTests.test_set_many_expiration", "cache.tests.CacheUtils.test_learn_cache_key", "cache.tests.FileBasedCacheTests.test_set_many_expiration", "cache.tests.LocMemCacheTests.test_cache_write_unpicklable_object", "cache.tests.FileBasedCacheTests.test_delete", "cache.tests.LocMemCacheTests.test_incr_version", "cache.tests.FileBasedCacheTests.test_set_fail_on_pickleerror", "cache.tests.FileBasedCacheTests.test_get_ignores_enoent", "cache.tests.DBCacheTests.test_zero_cull", "cache.tests.CacheMiddlewareTest.test_cache_page_timeout", "cache.tests.TestMakeTemplateFragmentKey.test_with_ints_vary_on", "cache.tests.DBCacheWithTimeZoneTests.test_non_existent", "cache.tests.DBCacheTests.test_cache_versioning_delete", "cache.tests.LocMemCacheTests.test_lru_incr", "cache.tests.PrefixedCacheI18nTest.test_cache_key_i18n_timezone", "cache.tests.TestWithTemplateResponse.test_patch_vary_headers", "cache.tests.DBCacheTests.test_data_types", "cache.tests.FileBasedCachePathLibTests.test_close", "cache.tests.FileBasedCachePathLibTests.test_clear", "cache.tests.DBCacheTests.test_cache_versioning_get_set", "cache.tests.LocMemCacheTests.test_custom_key_func", "cache.tests.DummyCacheTests.test_decr", "cache.tests.FileBasedCacheTests.test_cache_read_for_model_instance_with_deferred", "cache.tests.LocMemCacheTests.test_cull", "cache.tests.DBCacheTests.test_simple", "cache.tests.DBCacheWithTimeZoneTests.test_set_many_expiration", "cache.tests.FileBasedCachePathLibTests.test_cache_versioning_incr_decr", "cache.tests.DBCacheTests.test_close", "cache.tests.FileBasedCachePathLibTests.test_decr", "cache.tests.PrefixedCacheUtils.test_patch_vary_headers", "cache.tests.FileBasedCachePathLibTests.test_get_or_set_callable_returning_none", "cache.tests.DBCacheTests.test_set_many_returns_empty_list_on_success", "cache.tests.CacheMiddlewareTest.test_constructor", "cache.tests.DBCacheTests.test_cull", "cache.tests.DBCacheWithTimeZoneTests.test_get_or_set", "cache.tests.FileBasedCacheTests.test_incr", "cache.tests.LocMemCacheTests.test_decr_version", "cache.tests.DummyCacheTests.test_touch", "cache.tests.FileBasedCacheTests.test_cache_versioning_get_set_many", "cache.tests.PrefixedCacheI18nTest.test_middleware_doesnt_cache_streaming_response", "cache.tests.TestMakeTemplateFragmentKey.test_with_many_vary_on", "cache.tests.DBCacheWithTimeZoneTests.test_delete_many_num_queries", "cache.tests.FileBasedCacheTests.test_clear_does_not_remove_cache_dir", "cache.tests.FileBasedCachePathLibTests.test_delete_nonexistent", "cache.tests.FileBasedCacheTests.test_cache_write_for_model_instance_with_deferred", "cache.tests.DBCacheWithTimeZoneTests.test_get_many", "cache.tests.LocMemCacheTests.test_add", "cache.tests.DBCacheWithTimeZoneTests.test_cache_versioning_incr_decr", "cache.tests.LocMemCacheTests.test_delete_many", "cache.tests.DBCacheWithTimeZoneTests.test_cache_versioning_get_set_many", "cache.tests.FileBasedCachePathLibTests.test_set_many_returns_empty_list_on_success", "cache.tests.LocMemCacheTests.test_zero_cull", "cache.tests.LocMemCacheTests.test_long_timeout", "cache.tests.FileBasedCacheTests.test_non_existent", "cache.tests.DBCacheTests.test_cache_read_for_model_instance_with_deferred", "cache.tests.DBCacheTests.test_cache_write_unpicklable_object", "cache.tests.DummyCacheTests.test_get_many", "cache.tests.LocMemCacheTests.test_set_many", "cache.tests.FileBasedCachePathLibTests.test_cache_write_unpicklable_object", "cache.tests.TestMakeTemplateFragmentKey.test_long_vary_on", "cache.tests.DBCacheWithTimeZoneTests.test_cache_write_unpicklable_object", "cache.tests.FileBasedCachePathLibTests.test_decr_version", "cache.tests.LocMemCacheTests.test_get_or_set_version", "cache.tests.CacheUtils.test_patch_cache_control", "cache.tests.DummyCacheTests.test_set_many", "cache.tests.FileBasedCachePathLibTests.test_cull_delete_when_store_empty", "cache.tests.DBCacheWithTimeZoneTests.test_unicode", "cache.tests.LocMemCacheTests.test_cache_versioning_get_set", "cache.tests.LocMemCacheTests.test_data_types", "cache.tests.FileBasedCacheTests.test_clear", "cache.tests.DBCacheTests.test_default_used_when_none_is_set", "cache.tests.DummyCacheTests.test_unicode", "cache.tests.LocMemCacheTests.test_cache_versioning_incr_decr", "cache.tests.DBCacheTests.test_in", "cache.tests.CreateCacheTableForDBCacheTests.test_createcachetable_observes_database_router", "cache.tests.DBCacheTests.test_custom_key_func", "cache.tests.DBCacheWithTimeZoneTests.test_expiration", "cache.tests.LocMemCacheTests.test_clear", "cache.tests.FileBasedCachePathLibTests.test_cache_versioning_has_key", "cache.tests.LocMemCacheTests.test_cache_write_for_model_instance_with_deferred", "cache.tests.DBCacheWithTimeZoneTests.test_forever_timeout", "cache.tests.CacheUtils.test_patch_vary_headers", "cache.tests.FileBasedCachePathLibTests.test_delete", "cache.tests.FileBasedCacheTests.test_creates_cache_dir_if_nonexistent", "cache.tests.FileBasedCacheTests.test_delete_nonexistent", "cache.tests.FileBasedCacheTests.test_incr_version", "cache.tests.TestMakeTemplateFragmentKey.test_without_vary_on", "cache.tests.CacheHEADTest.test_head_with_cached_get", "cache.tests.DBCacheTests.test_clear", "cache.tests.DBCacheTests.test_prefix", "cache.tests.DBCacheTests.test_second_call_doesnt_crash", "cache.tests.FileBasedCacheTests.test_has_key", "cache.tests.DBCacheWithTimeZoneTests.test_invalid_key_length", "cache.tests.LocMemCacheTests.test_forever_timeout", "cache.tests.DBCacheTests.test_incr_version", "cache.tests.FileBasedCacheTests.test_zero_timeout", "cache.tests.DBCacheWithTimeZoneTests.test_set_many", "cache.tests.FileBasedCacheTests.test_cache_write_unpicklable_object", "cache.tests.LocMemCacheTests.test_has_key", "cache.tests.FileBasedCachePathLibTests.test_non_existent", "cache.tests.PrefixedCacheI18nTest.test_middleware", "cache.tests.FileBasedCachePathLibTests.test_zero_timeout", "cache.tests.LocMemCacheTests.test_incr", "cache.tests.FileBasedCacheTests.test_unicode", "cache.tests.FileBasedCacheTests.test_get_or_set_callable", "cache.tests.FileBasedCacheTests.test_float_timeout", "cache.tests.FileBasedCacheTests.test_invalid_key_length", "cache.tests.LocMemCacheTests.test_set_many_returns_empty_list_on_success", "cache.tests.FileBasedCachePathLibTests.test_add_fail_on_pickleerror", "cache.tests.FileBasedCachePathLibTests.test_cache_versioning_delete", "cache.tests.CacheHEADTest.test_head_caches_correctly", "cache.tests.DBCacheWithTimeZoneTests.test_cull_delete_when_store_empty", "cache.tests.FileBasedCachePathLibTests.test_custom_key_func", "cache.tests.TestMakeTemplateFragmentKey.test_proper_escaping", "cache.tests.DefaultNonExpiringCacheKeyTests.test_caches_with_unset_timeout_set_expiring_key", "cache.tests.FileBasedCacheTests.test_cache_versioning_has_key", "cache.tests.LocMemCacheTests.test_lru_get", "cache.tests.DBCacheTests.test_set_fail_on_pickleerror", "cache.tests.CacheUtils.test_get_cache_key", "cache.tests.DBCacheWithTimeZoneTests.test_delete_many", "cache.tests.LocMemCacheTests.test_invalid_key_length", "cache.tests.DBCacheWithTimeZoneTests.test_set_fail_on_pickleerror", "cache.tests.FileBasedCacheTests.test_delete_many", "cache.tests.LocMemCacheTests.test_invalid_key_characters", "cache.tests.DBCacheTests.test_createcachetable_with_table_argument", "cache.tests.LocMemCacheTests.test_default_used_when_none_is_set", "cache.tests.TestWithTemplateResponse.test_get_cache_key", "cache.tests.FileBasedCacheTests.test_ignores_non_cache_files", "cache.tests.CacheMiddlewareTest.test_304_response_has_http_caching_headers_but_not_cached", "cache.tests.FileBasedCacheTests.test_decr", "cache.tests.FileBasedCachePathLibTests.test_float_timeout", "cache.tests.DBCacheTests.test_invalid_key_length", "cache.tests.FileBasedCacheTests.test_get_or_set_racing", "cache.tests.DBCacheWithTimeZoneTests.test_default_used_when_none_is_set", "cache.tests.FileBasedCacheTests.test_cache_read_for_model_instance", "cache.tests.DBCacheTests.test_get_or_set_callable_returning_none", "cache.tests.LocMemCacheTests.test_cache_versioning_add", "cache.tests.FileBasedCachePathLibTests.test_incr_version", "cache.tests.DBCacheTests.test_float_timeout", "cache.tests.DummyCacheTests.test_expiration", "cache.tests.FileBasedCachePathLibTests.test_get_does_not_ignore_non_filenotfound_exceptions", "cache.tests.LocMemCacheTests.test_cache_versioning_get_set_many", "cache.tests.DBCacheTests.test_delete_nonexistent", "cache.tests.PrefixedCacheI18nTest.test_cache_key_i18n_translation_accept_language", "cache.tests.LocMemCacheTests.test_multiple_caches", "cache.tests.DBCacheTests.test_createcachetable_dry_run_mode", "cache.tests.DBCacheWithTimeZoneTests.test_cache_versioning_has_key", "cache.tests.DummyCacheTests.test_clear", "cache.tests.DBCacheWithTimeZoneTests.test_get_or_set_callable_returning_none", "cache.tests.DBCacheTests.test_binary_string", "cache.tests.DBCacheWithTimeZoneTests.test_get_or_set_racing", "cache.tests.DBCacheTests.test_cache_write_for_model_instance_with_deferred", "cache.tests.LocMemCacheTests.test_cache_versioning_has_key", "cache.tests.FileBasedCachePathLibTests.test_get_ignores_enoent", "cache.tests.CacheI18nTest.test_cache_key_i18n_translation", "cache.tests.FileBasedCachePathLibTests.test_incr", "cache.tests.TestMakeTemplateFragmentKey.test_with_unicode_vary_on", "cache.tests.DBCacheWithTimeZoneTests.test_clear", "cache.tests.FileBasedCacheTests.test_get_many", "cache.tests.FileBasedCachePathLibTests.test_empty_cache_file_considered_expired", "cache.tests.LocMemCacheTests.test_lru_set", "cache.tests.FileBasedCachePathLibTests.test_touch", "cache.tests.LocMemCacheTests.test_unicode", "cache.tests.LocMemCacheTests.test_zero_timeout", "cache.tests.LocMemCacheTests.test_add_fail_on_pickleerror", "cache.tests.FileBasedCacheTests.test_decr_version", "cache.tests.DBCacheTests.test_cache_versioning_get_set_many", "cache.tests.DefaultNonExpiringCacheKeyTests.test_caches_set_with_timeout_as_none_set_non_expiring_key", "cache.tests.FileBasedCacheTests.test_binary_string", "cache.tests.LocMemCacheTests.test_get_or_set_callable_returning_none", "cache.tests.FileBasedCachePathLibTests.test_add", "cache.tests.FileBasedCachePathLibTests.test_cull", "cache.tests.DBCacheWithTimeZoneTests.test_get_many_num_queries", "cache.tests.FileBasedCachePathLibTests.test_get_or_set", "cache.tests.LocMemCacheTests.test_prefix", "cache.tests.CacheI18nTest.test_middleware", "cache.tests.DBCacheWithTimeZoneTests.test_get_or_set_version", "cache.tests.FileBasedCacheTests.test_forever_timeout", "cache.tests.DBCacheWithTimeZoneTests.test_cache_read_for_model_instance", "cache.tests.FileBasedCachePathLibTests.test_get_or_set_callable", "cache.tests.LocMemCacheTests.test_float_timeout", "cache.tests.DBCacheTests.test_forever_timeout", "cache.tests.DBCacheTests.test_cache_read_for_model_instance", "cache.tests.DBCacheTests.test_cache_versioning_has_key", "cache.tests.DefaultNonExpiringCacheKeyTests.test_caches_set_with_timeout_as_none_has_correct_default_timeout", "cache.tests.FileBasedCacheTests.test_cache_versioning_get_set", "cache.tests.DBCacheTests.test_delete_many", "cache.tests.DummyCacheTests.test_delete_many", "cache.tests.DBCacheTests.test_decr", "cache.tests.FileBasedCachePathLibTests.test_cache_versioning_add", "cache.tests.LocMemCacheTests.test_cull_delete_when_store_empty", "cache.tests.FileBasedCacheTests.test_get_or_set_version", "cache.tests.DBCacheTests.test_unicode", "cache.tests.FileBasedCacheTests.test_cull", "cache.tests.FileBasedCachePathLibTests.test_in", "cache.tests.FileBasedCachePathLibTests.test_invalid_key_characters", "cache.tests.DummyCacheTests.test_set_many_invalid_key", "cache.tests.LocMemCacheTests.test_incr_decr_timeout", "cache.tests.DBCacheWithTimeZoneTests.test_set_many_returns_empty_list_on_success", "cache.tests.FileBasedCachePathLibTests.test_creates_cache_dir_if_nonexistent", "cache.tests.FileBasedCachePathLibTests.test_default_used_when_none_is_set", "cache.tests.FileBasedCachePathLibTests.test_has_key", "cache.tests.DBCacheWithTimeZoneTests.test_cache_versioning_delete", "cache.tests.CacheUtils.test_get_cache_key_with_query", "cache.tests.DBCacheWithTimeZoneTests.test_data_types", "cache.tests.DummyCacheTests.test_get_or_set_callable", "cache.tests.CacheI18nTest.test_cache_key_no_i18n", "cache.tests.CacheClosingTests.test_close", "cache.tests.DBCacheTests.test_cull_delete_when_store_empty", "cache.tests.DBCacheWithTimeZoneTests.test_incr_version", "cache.tests.PrefixedCacheUtils.test_get_cache_key", "cache.tests.DBCacheTests.test_set_many", "cache.tests.DBCacheTests.test_get_or_set_racing", "cache.tests.FileBasedCacheTests.test_set_many", "cache.tests.LocMemCacheTests.test_set_many_expiration", "cache.tests.DBCacheTests.test_invalid_key_characters", "cache.tests.PrefixedCacheUtils.test_cache_key_varies_by_url", "cache.tests.DummyCacheTests.test_incr_version", "cache.tests.DBCacheWithTimeZoneTests.test_createcachetable_dry_run_mode", "cache.tests.CacheHandlerTest.test_same_instance", "cache.tests.DBCacheWithTimeZoneTests.test_close", "cache.tests.DBCacheTests.test_incr", "cache.tests.DummyCacheTests.test_get_or_set", "cache.tests.LocMemCacheTests.test_cache_versioning_delete", "cache.tests.DBCacheWithTimeZoneTests.test_prefix", "cache.tests.DBCacheTests.test_delete_many_num_queries", "cache.tests.FileBasedCacheTests.test_add", "cache.tests.DBCacheWithTimeZoneTests.test_cull", "cache.tests.CustomCacheKeyValidationTests.test_custom_key_validation", "cache.tests.FileBasedCachePathLibTests.test_set_many_expiration", "cache.tests.DBCacheWithTimeZoneTests.test_get_or_set_callable", "cache.tests.DBCacheWithTimeZoneTests.test_cache_versioning_add", "cache.tests.FileBasedCacheTests.test_custom_key_func", "cache.tests.LocMemCacheTests.test_delete_nonexistent", "cache.tests.LocMemCacheTests.test_close", "cache.tests.FileBasedCachePathLibTests.test_data_types", "cache.tests.LocMemCacheTests.test_expiration", "cache.tests.DBCacheWithTimeZoneTests.test_incr", "cache.tests.DummyCacheTests.test_delete_many_invalid_key", "cache.tests.DummyCacheTests.test_has_key", "cache.tests.FileBasedCacheTests.test_long_timeout", "cache.tests.FileBasedCacheTests.test_expiration", "cache.tests.DBCacheWithTimeZoneTests.test_custom_key_func", "cache.tests.FileBasedCacheTests.test_cache_versioning_delete", "cache.tests.FileBasedCachePathLibTests.test_unicode", "cache.tests.LocMemCacheTests.test_delete", "cache.tests.CacheI18nTest.test_cache_key_i18n_translation_accept_language", "cache.tests.CacheMiddlewareTest.test_sensitive_cookie_not_cached", "cache.tests.FileBasedCachePathLibTests.test_get_many", "cache.tests.DummyCacheTests.test_decr_version", "cache.tests.FileBasedCacheTests.test_get_or_set_callable_returning_none", "cache.tests.LocMemCacheTests.test_simple", "cache.tests.PrefixedCacheUtils.test_patch_cache_control", "cache.tests.FileBasedCacheTests.test_touch", "cache.tests.DBCacheWithTimeZoneTests.test_zero_timeout", "cache.tests.DBCacheWithTimeZoneTests.test_invalid_key_characters", "cache.tests.DBCacheWithTimeZoneTests.test_touch", "cache.tests.PrefixedCacheI18nTest.test_cache_key_i18n_formatting", "cache.tests.TestWithTemplateResponse.test_get_cache_key_with_query", "cache.tests.DBCacheTests.test_delete", "cache.tests.FileBasedCachePathLibTests.test_simple", "cache.tests.FileBasedCacheTests.test_get_does_not_ignore_non_filenotfound_exceptions", "cache.tests.CacheHandlerTest.test_per_thread", "cache.tests.FileBasedCacheTests.test_invalid_key_characters", "cache.tests.FileBasedCachePathLibTests.test_cache_versioning_get_set", "cache.tests.DBCacheWithTimeZoneTests.test_second_call_doesnt_crash", "cache.tests.CacheMiddlewareTest.test_view_decorator", "cache.tests.DefaultNonExpiringCacheKeyTests.test_caches_with_unset_timeout_has_correct_default_timeout", "cache.tests.FileBasedCachePathLibTests.test_forever_timeout", "cache.tests.FileBasedCacheTests.test_default_used_when_none_is_set", "cache.tests.LocMemCacheTests.test_set_fail_on_pickleerror", "cache.tests.FileBasedCachePathLibTests.test_set_many", "cache.tests.DBCacheWithTimeZoneTests.test_zero_cull", "cache.tests.DBCacheWithTimeZoneTests.test_float_timeout", "cache.tests.DBCacheTests.test_long_timeout", "cache.tests.DBCacheTests.test_non_existent", "cache.tests.FileBasedCachePathLibTests.test_cache_read_for_model_instance_with_deferred", "cache.tests.DBCacheWithTimeZoneTests.test_has_key", "cache.tests.FileBasedCacheTests.test_empty_cache_file_considered_expired", "cache.tests.DBCacheTests.test_cache_versioning_add", "cache.tests.DBCacheTests.test_decr_version", "cache.tests.DummyCacheTests.test_in", "cache.tests.FileBasedCachePathLibTests.test_delete_many", "cache.tests.LocMemCacheTests.test_get_or_set_racing", "cache.tests.FileBasedCachePathLibTests.test_zero_cull", "cache.tests.FileBasedCachePathLibTests.test_cache_read_for_model_instance", "cache.tests.DummyCacheTests.test_simple"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_416", "original_commit_message": "Fixed CVE-2020-24584 -- Fixed permission escalation in intermediate-level directories of the file system cache on Python 3.7+.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/core/cache/backends/filebased.py b/django/core/cache/backends/filebased.py\nindex 3d76f0371b..10779c5545 100644\n--- a/django/core/cache/backends/filebased.py\n+++ b/django/core/cache/backends/filebased.py\n@@ -114,7 +114,13 @@ class FileBasedCache(BaseCache):\n             self._delete(fname)\n \n     def _createdir(self):\n-        os.makedirs(self._dir, 0o700, exist_ok=True)\n+        # Set the umask because os.makedirs() doesn't apply the \"mode\" argument\n+        # to intermediate-level directories.\n+        old_umask = os.umask(0o077)\n+        try:\n+            os.makedirs(self._dir, 0o700, exist_ok=True)\n+        finally:\n+            os.umask(old_umask)\n \n     def _key_to_file(self, key, version=None):\n         \"\"\"\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex c26183f5b2..d5532fa1e6 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -6,12 +6,13 @@ import os\n import pickle\n import re\n import shutil\n+import sys\n import tempfile\n import threading\n import time\n import unittest\n from pathlib import Path\n-from unittest import mock\n+from unittest import mock, skipIf\n \n from django.conf import settings\n from django.core import management, signals\n@@ -1494,6 +1495,28 @@ class FileBasedCacheTests(BaseCacheTests, TestCase):\n         # Returns the default instead of erroring.\n         self.assertEqual(cache.get('foo', 'baz'), 'baz')\n \n+    @skipIf(\n+        sys.platform == 'win32',\n+        'Windows only partially supports umasks and chmod.',\n+    )\n+    def test_cache_dir_permissions(self):\n+        os.rmdir(self.dirname)\n+        dir_path = Path(self.dirname) / 'nested' / 'filebasedcache'\n+        for cache_params in settings.CACHES.values():\n+            cache_params['LOCATION'] = dir_path\n+        setting_changed.send(self.__class__, setting='CACHES', enter=False)\n+        cache.set('foo', 'bar')\n+        self.assertIs(dir_path.exists(), True)\n+        tests = [\n+            dir_path,\n+            dir_path.parent,\n+            dir_path.parent.parent,\n+        ]\n+        for directory in tests:\n+            with self.subTest(directory=directory):\n+                dir_mode = directory.stat().st_mode & 0o777\n+                self.assertEqual(dir_mode, 0o700)\n+\n     def test_get_does_not_ignore_non_filenotfound_exceptions(self):\n         with mock.patch('builtins.open', side_effect=OSError):\n             with self.assertRaises(OSError):\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "1853724acaf17ed7414d54c7d2b5563a25025a71", "source_date": "Tue Sep 1 09:17:23 2020 +0200", "source_tag": "3.2", "target_commit": "cdb367c92a0ba72ddc0cbd13ff42b0e6df709554", "target_date": "Tue Aug 25 10:45:33 2020 +0200", "target_tag": "3.0.10", "FAIL TO PASS": ["cache.tests.FileBasedCacheTests.test_cache_dir_permissions"], "PASS TO PASS": ["cache.tests.LocMemCacheTests.test_set_many_returns_empty_list_on_success", "cache.tests.FileBasedCacheTests.test_cache_read_for_model_instance_with_deferred", "cache.tests.CacheHEADTest.test_head_caches_correctly", "cache.tests.LocMemCacheTests.test_cull", "cache.tests.DBCacheTests.test_unicode", "cache.tests.FileBasedCacheTests.test_get_or_set", "cache.tests.DummyCacheTests.test_get_many_invalid_key", "cache.tests.DBCacheTests.test_simple", "cache.tests.FileBasedCacheTests.test_cull", "cache.tests.FileBasedCacheTests.test_in", "cache.tests.DummyCacheTests.test_delete", "cache.tests.TestMakeTemplateFragmentKey.test_proper_escaping", "cache.tests.DBCacheWithTimeZoneTests.test_set_many_expiration", "cache.tests.DefaultNonExpiringCacheKeyTests.test_caches_with_unset_timeout_set_expiring_key", "cache.tests.DummyCacheTests.test_set_many_invalid_key", "cache.tests.FileBasedCacheTests.test_cache_versioning_has_key", "cache.tests.LocMemCacheTests.test_incr_decr_timeout", "cache.tests.DBCacheWithTimeZoneTests.test_set_many_returns_empty_list_on_success", "cache.tests.DefaultNonExpiringCacheKeyTests.test_default_expiration_time_for_keys_is_5_minutes", "cache.tests.LocMemCacheTests.test_lru_get", "cache.tests.DBCacheWithTimeZoneTests.test_cache_write_for_model_instance_with_deferred", "cache.tests.DBCacheWithTimeZoneTests.test_add_fail_on_pickleerror", "cache.tests.DBCacheTests.test_close", "cache.tests.DBCacheTests.test_set_fail_on_pickleerror", "cache.tests.PrefixedCacheUtils.test_patch_vary_headers", "cache.tests.CacheUtils.test_get_cache_key", "cache.tests.PrefixedCacheUtils.test_get_cache_key_with_query", "cache.tests.LocMemCacheTests.test_get_or_set_callable", "cache.tests.DBCacheTests.test_set_many_returns_empty_list_on_success", "cache.tests.DBCacheWithTimeZoneTests.test_delete_many", "cache.tests.CacheMiddlewareTest.test_constructor", "cache.tests.DBCacheTests.test_cull", "cache.tests.DBCacheWithTimeZoneTests.test_get_or_set", "cache.tests.LocMemCacheTests.test_invalid_key_length", "cache.tests.DBCacheWithTimeZoneTests.test_set_fail_on_pickleerror", "cache.tests.DBCacheWithTimeZoneTests.test_cache_versioning_delete", "cache.tests.CacheUtils.test_get_cache_key_with_query", "cache.tests.DBCacheWithTimeZoneTests.test_data_types", "cache.tests.DummyCacheTests.test_get_or_set_callable", "cache.tests.FileBasedCacheTests.test_delete_many", "cache.tests.FileBasedCacheTests.test_incr", "cache.tests.LocMemCacheTests.test_invalid_key_characters", "cache.tests.DBCacheTests.test_createcachetable_with_table_argument", "cache.tests.CacheI18nTest.test_cache_key_no_i18n", "cache.tests.CacheClosingTests.test_close", "cache.tests.LocMemCacheTests.test_default_used_when_none_is_set", "cache.tests.DBCacheWithTimeZoneTests.test_long_timeout", "cache.tests.LocMemCacheTests.test_decr_version", "cache.tests.LocMemCacheTests.test_decr", "cache.tests.DummyCacheTests.test_touch", "cache.tests.FileBasedCacheTests.test_cache_versioning_get_set_many", "cache.tests.LocMemCacheTests.test_touch", "cache.tests.DBCacheWithTimeZoneTests.test_add", "cache.tests.DBCacheTests.test_has_key", "cache.tests.DBCacheWithTimeZoneTests.test_incr_version", "cache.tests.FileBasedCacheTests.test_cache_versioning_incr_decr", "cache.tests.FileBasedCacheTests.test_close", "cache.tests.DummyCacheTests.test_add", "cache.tests.TestWithTemplateResponse.test_get_cache_key", "cache.tests.FileBasedCacheTests.test_ignores_non_cache_files", "cache.tests.PrefixedCacheI18nTest.test_middleware_doesnt_cache_streaming_response", "cache.tests.CacheMiddlewareTest.test_304_response_has_http_caching_headers_but_not_cached", "cache.tests.TestMakeTemplateFragmentKey.test_with_many_vary_on", "cache.tests.FileBasedCacheTests.test_decr", "cache.tests.PrefixedCacheUtils.test_get_cache_key", "cache.tests.DBCacheTests.test_set_many", "cache.tests.DBCacheWithTimeZoneTests.test_cache_read_for_model_instance_with_deferred", "cache.tests.DBCacheWithTimeZoneTests.test_delete_many_num_queries", "cache.tests.FileBasedCacheTests.test_cache_versioning_add", "cache.tests.LocMemCacheTests.test_cache_read_for_model_instance_with_deferred", "cache.tests.DBCacheWithTimeZoneTests.test_decr_version", "cache.tests.FileBasedCacheTests.test_clear_does_not_remove_cache_dir", "cache.tests.DBCacheTests.test_get_or_set_racing", "cache.tests.CacheI18nTest.test_cache_key_i18n_formatting", "cache.tests.FileBasedCacheTests.test_prefix", "cache.tests.FileBasedCacheTests.test_set_many", "cache.tests.LocMemCacheTests.test_set_many_expiration", "cache.tests.FileBasedCacheTests.test_cache_write_for_model_instance_with_deferred", "cache.tests.DBCacheTests.test_invalid_key_characters", "cache.tests.DBCacheWithTimeZoneTests.test_simple", "cache.tests.DBCacheWithTimeZoneTests.test_get_many", "cache.tests.LocMemCacheTests.test_add", "cache.tests.PrefixedCacheUtils.test_cache_key_varies_by_url", "cache.tests.DBCacheWithTimeZoneTests.test_cache_versioning_incr_decr", "cache.tests.LocMemCacheTests.test_delete_many", "cache.tests.DBCacheWithTimeZoneTests.test_createcachetable_with_table_argument", "cache.tests.FileBasedCacheTests.test_set_many_returns_empty_list_on_success", "cache.tests.FileBasedCacheTests.test_data_types", "cache.tests.DBCacheTests.test_invalid_key_length", "cache.tests.DBCacheWithTimeZoneTests.test_cache_versioning_get_set_many", "cache.tests.DBCacheWithTimeZoneTests.test_cache_versioning_get_set", "cache.tests.DummyCacheTests.test_incr_version", "cache.tests.FileBasedCacheTests.test_get_or_set_racing", "cache.tests.LocMemCacheTests.test_zero_cull", "cache.tests.DBCacheWithTimeZoneTests.test_default_used_when_none_is_set", "cache.tests.CacheI18nTest.test_middleware_doesnt_cache_streaming_response", "cache.tests.LocMemCacheTests.test_long_timeout", "cache.tests.DBCacheTests.test_get_or_set_callable", "cache.tests.FileBasedCacheTests.test_cache_read_for_model_instance", "cache.tests.DBCacheTests.test_cache_versioning_incr_decr", "cache.tests.DBCacheTests.test_get_or_set_callable_returning_none", "cache.tests.DBCacheTests.test_zero_timeout", "cache.tests.DBCacheWithTimeZoneTests.test_decr", "cache.tests.DBCacheWithTimeZoneTests.test_in", "cache.tests.FileBasedCacheTests.test_non_existent", "cache.tests.DBCacheTests.test_cache_read_for_model_instance_with_deferred", "cache.tests.DBCacheTests.test_cache_write_unpicklable_object", "cache.tests.DummyCacheTests.test_get_many", "cache.tests.DBCacheTests.test_expiration", "cache.tests.LocMemCacheTests.test_set_many", "cache.tests.LocMemCacheTests.test_cache_versioning_add", "cache.tests.DummyCacheTests.test_incr", "cache.tests.DBCacheWithTimeZoneTests.test_createcachetable_dry_run_mode", "cache.tests.LocMemCacheTests.test_binary_string", "cache.tests.DBCacheTests.test_float_timeout", "cache.tests.PrefixedCacheI18nTest.test_cache_key_i18n_translation", "cache.tests.CacheHandlerTest.test_same_instance", "cache.tests.DBCacheWithTimeZoneTests.test_cache_write_unpicklable_object", "cache.tests.DummyCacheTests.test_expiration", "cache.tests.DBCacheWithTimeZoneTests.test_close", "cache.tests.DBCacheTests.test_incr", "cache.tests.LocMemCacheTests.test_cache_versioning_get_set_many", "cache.tests.LocMemCacheTests.test_get_many", "cache.tests.DummyCacheTests.test_get_or_set", "cache.tests.DBCacheTests.test_get_many", "cache.tests.TestMakeTemplateFragmentKey.test_with_one_vary_on", "cache.tests.LocMemCacheTests.test_cache_versioning_delete", "cache.tests.DBCacheWithTimeZoneTests.test_prefix", "cache.tests.FileBasedCacheTests.test_invalid_key_length", "cache.tests.LocMemCacheTests.test_get_or_set_version", "cache.tests.DBCacheTests.test_delete_many_num_queries", "cache.tests.FileBasedCacheTests.test_add", "cache.tests.CacheUtils.test_patch_cache_control", "cache.tests.PrefixedCacheI18nTest.test_cache_key_i18n_translation_accept_language", "cache.tests.DummyCacheTests.test_set_many", "cache.tests.LocMemCacheTests.test_in", "cache.tests.DBCacheWithTimeZoneTests.test_unicode", "cache.tests.DBCacheTests.test_get_or_set_version", "cache.tests.DBCacheWithTimeZoneTests.test_cull", "cache.tests.CustomCacheKeyValidationTests.test_custom_key_validation", "cache.tests.DummyCacheTests.test_data_types", "cache.tests.LocMemCacheTests.test_multiple_caches", "cache.tests.FileBasedCacheTests.test_zero_cull", "cache.tests.LocMemCacheTests.test_cache_versioning_get_set", "cache.tests.DBCacheTests.test_createcachetable_dry_run_mode", "cache.tests.DBCacheWithTimeZoneTests.test_get_or_set_callable", "cache.tests.DBCacheWithTimeZoneTests.test_cache_versioning_has_key", "cache.tests.DBCacheWithTimeZoneTests.test_cache_versioning_add", "cache.tests.FileBasedCacheTests.test_custom_key_func", "cache.tests.DummyCacheTests.test_clear", "cache.tests.DBCacheWithTimeZoneTests.test_get_or_set_callable_returning_none", "cache.tests.DBCacheTests.test_binary_string", "cache.tests.DBCacheWithTimeZoneTests.test_get_or_set_racing", "cache.tests.LocMemCacheTests.test_data_types", "cache.tests.CacheMiddlewareTest.test_cached_control_private_not_cached", "cache.tests.LocMemCacheTests.test_close", "cache.tests.PrefixedCacheUtils.test_learn_cache_key", "cache.tests.DBCacheWithTimeZoneTests.test_delete", "cache.tests.FileBasedCacheTests.test_clear", "cache.tests.LocMemCacheTests.test_expiration", "cache.tests.DBCacheWithTimeZoneTests.test_incr", "cache.tests.LocMemCacheTests.test_non_existent", "cache.tests.CacheI18nTest.test_cache_key_i18n_timezone", "cache.tests.DBCacheTests.test_touch", "cache.tests.DBCacheTests.test_default_used_when_none_is_set", "cache.tests.DummyCacheTests.test_delete_many_invalid_key", "cache.tests.CacheMiddlewareTest.test_middleware", "cache.tests.DummyCacheTests.test_non_existent", "cache.tests.DummyCacheTests.test_has_key", "cache.tests.DummyCacheTests.test_unicode", "cache.tests.DBCacheTests.test_get_many_num_queries", "cache.tests.FileBasedCacheTests.test_long_timeout", "cache.tests.LocMemCacheTests.test_cache_versioning_incr_decr", "cache.tests.FileBasedCacheTests.test_expiration", "cache.tests.DBCacheTests.test_in", "cache.tests.FileBasedCacheTests.test_cache_versioning_delete", "cache.tests.DBCacheWithTimeZoneTests.test_custom_key_func", "cache.tests.LocMemCacheTests.test_delete", "cache.tests.CacheI18nTest.test_cache_key_i18n_translation_accept_language", "cache.tests.DBCacheTests.test_cache_write_for_model_instance_with_deferred", "cache.tests.CreateCacheTableForDBCacheTests.test_createcachetable_observes_database_router", "cache.tests.CacheMiddlewareTest.test_sensitive_cookie_not_cached", "cache.tests.LocMemCacheTests.test_get_or_set", "cache.tests.DBCacheTests.test_custom_key_func", "cache.tests.DBCacheTests.test_add", "cache.tests.DBCacheWithTimeZoneTests.test_expiration", "cache.tests.DummyCacheTests.test_decr_version", "cache.tests.LocMemCacheTests.test_cache_versioning_has_key", "cache.tests.PrefixedCacheI18nTest.test_cache_key_no_i18n", "cache.tests.LocMemCacheTests.test_clear", "cache.tests.FileBasedCacheTests.test_get_or_set_callable_returning_none", "cache.tests.LocMemCacheTests.test_simple", "cache.tests.PrefixedCacheUtils.test_patch_cache_control", "cache.tests.FileBasedCacheTests.test_touch", "cache.tests.CacheI18nTest.test_cache_key_i18n_translation", "cache.tests.DBCacheWithTimeZoneTests.test_zero_timeout", "cache.tests.DBCacheWithTimeZoneTests.test_invalid_key_characters", "cache.tests.DBCacheWithTimeZoneTests.test_touch", "cache.tests.LocMemCacheTests.test_cache_write_for_model_instance_with_deferred", "cache.tests.DBCacheWithTimeZoneTests.test_forever_timeout", "cache.tests.CacheUtils.test_patch_vary_headers", "cache.tests.LocMemCacheTests.test_cache_read_for_model_instance", "cache.tests.PrefixedCacheI18nTest.test_cache_key_i18n_formatting", "cache.tests.FileBasedCacheTests.test_creates_cache_dir_if_nonexistent", "cache.tests.FileBasedCacheTests.test_incr_version", "cache.tests.TestWithTemplateResponse.test_get_cache_key_with_query", "cache.tests.LocMemCacheTests.test_locking_on_pickle", "cache.tests.DBCacheTests.test_delete", "cache.tests.DBCacheWithTimeZoneTests.test_clear", "cache.tests.DBCacheTests.test_get_or_set", "cache.tests.TestMakeTemplateFragmentKey.test_without_vary_on", "cache.tests.FileBasedCacheTests.test_get_does_not_ignore_non_filenotfound_exceptions", "cache.tests.CacheHandlerTest.test_per_thread", "cache.tests.FileBasedCacheTests.test_invalid_key_characters", "cache.tests.FileBasedCacheTests.test_get_many", "cache.tests.LocMemCacheTests.test_lru_set", "cache.tests.LocMemCacheTests.test_unicode", "cache.tests.DBCacheWithTimeZoneTests.test_second_call_doesnt_crash", "cache.tests.FileBasedCacheTests.test_add_fail_on_pickleerror", "cache.tests.CacheMiddlewareTest.test_view_decorator", "cache.tests.DefaultNonExpiringCacheKeyTests.test_caches_with_unset_timeout_has_correct_default_timeout", "cache.tests.DBCacheTests.test_add_fail_on_pickleerror", "cache.tests.LocMemCacheTests.test_zero_timeout", "cache.tests.LocMemCacheTests.test_add_fail_on_pickleerror", "cache.tests.FileBasedCacheTests.test_simple", "cache.tests.DBCacheWithTimeZoneTests.test_binary_string", "cache.tests.CacheHEADTest.test_head_with_cached_get", "cache.tests.FileBasedCacheTests.test_default_used_when_none_is_set", "cache.tests.DBCacheTests.test_clear", "cache.tests.FileBasedCacheTests.test_decr_version", "cache.tests.DBCacheTests.test_cache_versioning_get_set_many", "cache.tests.DefaultNonExpiringCacheKeyTests.test_caches_set_with_timeout_as_none_set_non_expiring_key", "cache.tests.FileBasedCacheTests.test_binary_string", "cache.tests.CacheUtils.test_cache_key_varies_by_url", "cache.tests.CacheUtils.test_learn_cache_key", "cache.tests.LocMemCacheTests.test_get_or_set_callable_returning_none", "cache.tests.FileBasedCacheTests.test_set_many_expiration", "cache.tests.DBCacheTests.test_set_many_expiration", "cache.tests.LocMemCacheTests.test_cache_write_unpicklable_object", "cache.tests.DBCacheTests.test_prefix", "cache.tests.FileBasedCacheTests.test_delete", "cache.tests.DBCacheTests.test_second_call_doesnt_crash", "cache.tests.LocMemCacheTests.test_incr_version", "cache.tests.FileBasedCacheTests.test_set_fail_on_pickleerror", "cache.tests.DBCacheWithTimeZoneTests.test_get_many_num_queries", "cache.tests.LocMemCacheTests.test_set_fail_on_pickleerror", "cache.tests.LocMemCacheTests.test_prefix", "cache.tests.CacheI18nTest.test_middleware", "cache.tests.DBCacheWithTimeZoneTests.test_get_or_set_version", "cache.tests.FileBasedCacheTests.test_has_key", "cache.tests.DBCacheWithTimeZoneTests.test_zero_cull", "cache.tests.DBCacheWithTimeZoneTests.test_float_timeout", "cache.tests.FileBasedCacheTests.test_get_ignores_enoent", "cache.tests.FileBasedCacheTests.test_forever_timeout", "cache.tests.DBCacheTests.test_zero_cull", "cache.tests.DBCacheWithTimeZoneTests.test_cache_read_for_model_instance", "cache.tests.DBCacheWithTimeZoneTests.test_invalid_key_length", "cache.tests.DBCacheTests.test_long_timeout", "cache.tests.LocMemCacheTests.test_float_timeout", "cache.tests.DBCacheTests.test_forever_timeout", "cache.tests.DBCacheTests.test_non_existent", "cache.tests.LocMemCacheTests.test_forever_timeout", "cache.tests.DBCacheWithTimeZoneTests.test_has_key", "cache.tests.DBCacheTests.test_cache_read_for_model_instance", "cache.tests.FileBasedCacheTests.test_empty_cache_file_considered_expired", "cache.tests.DBCacheTests.test_cache_versioning_has_key", "cache.tests.DefaultNonExpiringCacheKeyTests.test_caches_set_with_timeout_as_none_has_correct_default_timeout", "cache.tests.DBCacheTests.test_incr_version", "cache.tests.FileBasedCacheTests.test_zero_timeout", "cache.tests.DBCacheTests.test_cache_versioning_add", "cache.tests.DBCacheTests.test_decr_version", "cache.tests.FileBasedCacheTests.test_cache_versioning_get_set", "cache.tests.DummyCacheTests.test_in", "cache.tests.DBCacheWithTimeZoneTests.test_set_many", "cache.tests.FileBasedCacheTests.test_cache_write_unpicklable_object", "cache.tests.LocMemCacheTests.test_has_key", "cache.tests.LocMemCacheTests.test_get_or_set_racing", "cache.tests.DBCacheTests.test_delete_many", "cache.tests.DBCacheWithTimeZoneTests.test_non_existent", "cache.tests.DBCacheTests.test_cache_versioning_delete", "cache.tests.DummyCacheTests.test_delete_many", "cache.tests.PrefixedCacheI18nTest.test_middleware", "cache.tests.LocMemCacheTests.test_lru_incr", "cache.tests.DBCacheTests.test_decr", "cache.tests.PrefixedCacheI18nTest.test_cache_key_i18n_timezone", "cache.tests.TestWithTemplateResponse.test_patch_vary_headers", "cache.tests.LocMemCacheTests.test_incr", "cache.tests.DBCacheTests.test_data_types", "cache.tests.FileBasedCacheTests.test_unicode", "cache.tests.FileBasedCacheTests.test_get_or_set_callable", "cache.tests.FileBasedCacheTests.test_get_or_set_version", "cache.tests.FileBasedCacheTests.test_float_timeout", "cache.tests.DBCacheTests.test_cache_versioning_get_set", "cache.tests.DummyCacheTests.test_simple", "cache.tests.LocMemCacheTests.test_custom_key_func", "cache.tests.DummyCacheTests.test_decr"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_1443", "original_commit_message": "Merge branch 'feature/better_print' into develop\n[#154182646] https://www.pivotaltracker.com/story/show/154182646", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthenticationDetails.java b/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthenticationDetails.java\nindex 31c9d683c..51d37aef2 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthenticationDetails.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthenticationDetails.java\n@@ -12,14 +12,14 @@\n  *******************************************************************************/\n package org.cloudfoundry.identity.uaa.authentication;\n \n+import javax.servlet.http.HttpServletRequest;\n+import java.io.Serializable;\n+\n import com.fasterxml.jackson.annotation.JsonProperty;\n import org.bouncycastle.util.encoders.Base64;\n import org.springframework.security.web.authentication.WebAuthenticationDetails;\n import org.springframework.util.StringUtils;\n \n-import javax.servlet.http.HttpServletRequest;\n-import java.io.Serializable;\n-\n /**\n  * Contains additional information about the authentication request which may be\n  * of use in auditing etc.\n@@ -113,12 +113,6 @@ public class UaaAuthenticationDetails implements Serializable {\n             }\n             sb.append(\"clientId=\").append(clientId);\n         }\n-        if (sessionId != null) {\n-            if (sb.length() > 0) {\n-                sb.append(\", \");\n-            }\n-            sb.append(\"sessionId=\").append(sessionId);\n-        }\n         return sb.toString();\n     }\n \n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/authentication/event/UserAuthenticationSuccessEventTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/authentication/event/UserAuthenticationSuccessEventTests.java\nnew file mode 100644\nindex 000000000..1c624a370\n--- /dev/null\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/authentication/event/UserAuthenticationSuccessEventTests.java\n@@ -0,0 +1,48 @@\n+/*\n+ * ****************************************************************************\n+ *     Cloud Foundry\n+ *     Copyright (c) [2009-2018] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ * ****************************************************************************\n+ */\n+\n+package org.cloudfoundry.identity.uaa.authentication.event;\n+\n+import org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationDetails;\n+import org.cloudfoundry.identity.uaa.user.UaaUser;\n+\n+import org.junit.Test;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.mock.web.MockHttpSession;\n+import org.springframework.security.core.Authentication;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.not;\n+import static org.mockito.Mockito.mock;\n+\n+public class UserAuthenticationSuccessEventTests {\n+\n+    @Test\n+    public void get_origin_from_request() throws Exception {\n+        MockHttpSession session = new MockHttpSession(null, \"the-id\");\n+        MockHttpServletRequest request = new MockHttpServletRequest(\"GET\",\"/oauth/authorize\");\n+        request.setSession(session);\n+        request.setRemoteAddr(\"127.10.10.10\");\n+        UaaAuthenticationDetails details = new UaaAuthenticationDetails(request, \"client-id\");\n+\n+        UserAuthenticationSuccessEvent event = new UserAuthenticationSuccessEvent(mock(UaaUser.class), mock(Authentication.class));\n+        String origin = event.getOrigin(details);\n+\n+        assertThat(origin, containsString(\"remoteAddress=127.10.10.10\"));\n+        assertThat(origin, containsString(\"clientId=client-id\"));\n+        assertThat(origin, not(containsString(\"sessionId=\")));\n+    }\n+}\n\\ No newline at end of file\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "1f529fcb43fd200cab10587e889343ef1683c6e6", "source_date": "Tue Jan 9 12:23:25 2018 -0800", "source_tag": "4.8.2", "target_commit": "599391fe5d564c7e4860b8a6ec17cda872a822a3", "target_date": "Tue Jan 9 12:19:20 2018 -0800", "target_tag": "4.7.4", "FAIL TO PASS": ["org.cloudfoundry.identity.uaa.authentication.event.UserAuthenticationSuccessEventTests > get_origin_from_request"], "PASS TO PASS": ["org.cloudfoundry.identity.uaa.zone.ZoneAwareClientSecretPolicyValidatorTests", "org.cloudfoundry.identity.uaa.zone.event.IdentityProviderModifiedEventTest", "org.cloudfoundry.identity.uaa.oauth.approval.ApprovalTests", "org.cloudfoundry.identity.uaa.provider.ldap.LdapIdentityProviderDefinitionTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.ZoneAwareIdpMetadataGeneratorTest", "org.cloudfoundry.identity.uaa.mfa_provider.JdbcMfaProviderProvisioningTest", "org.cloudfoundry.identity.uaa.util.log.SyslogAppenderTest", "org.cloudfoundry.identity.uaa.mfa_provider.MfaProviderEndpointsTest", "org.cloudfoundry.identity.uaa.db.ClientDetailsHasRequiredUserScopes", "org.cloudfoundry.identity.uaa.provider.saml.BootstrapSamlIdentityProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.login.LoginInfoEndpointTests", "org.cloudfoundry.identity.uaa.user.BCryptPasswordEncoderTest", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupExternalMembershipManagerTests", ":cloudfoundry-identity-metrics-data:classes", "org.cloudfoundry.identity.uaa.zone.GeneralIdentityZoneConfigurationValidatorTests", ":cloudfoundry-identity-server:compileTestJava", "org.cloudfoundry.identity.uaa.login.ResetPasswordControllerTest", "org.cloudfoundry.identity.uaa.audit.event.ApprovalModifiedEventTest", "org.cloudfoundry.identity.uaa.authentication.BackwardsCompatibleTokenEndpointAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.oauth.AuthorizePromptNoneEntryPointTest", "org.cloudfoundry.identity.uaa.authentication.UaaClientAuthenticationProviderTest", ":cloudfoundry-identity-server:processResources", "org.cloudfoundry.identity.uaa.openid.UserInfoEndpointTests", "org.cloudfoundry.identity.uaa.web.UaaSessionCookieConfigTest", "org.cloudfoundry.identity.uaa.authentication.login.RemoteAuthenticationEndpointTests", "org.cloudfoundry.identity.uaa.provider.saml.ZoneAwareMetadataGeneratorTests", "org.cloudfoundry.identity.uaa.client.ClientAdminBootstrapTests", "org.cloudfoundry.identity.uaa.db.ClientDetailsSupportsExtendedAuthoritesAndScopes", "org.cloudfoundry.identity.uaa.test.CreateDB", "org.cloudfoundry.identity.uaa.audit.event.AuditListenerTests", "org.cloudfoundry.identity.uaa.oauth.token.Saml2TokenGranterTest", "org.cloudfoundry.identity.uaa.util.ColorHashTest", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.provider.ldap.LdapIdentityProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.SamlServiceProviderDefinitionTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpWebSsoProfileImplTest", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupProvisioningTests", "org.cloudfoundry.identity.uaa.zone.IdentityZoneHolderTest", "org.cloudfoundry.identity.uaa.oauth.jwt.CommonSignatureVerifierTest", "org.cloudfoundry.identity.uaa.util.log.LineAwareLayoutTest", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimExternalGroupBootstrapTests", "org.cloudfoundry.identity.uaa.oauth.UaaTokenStoreTests", "org.cloudfoundry.identity.uaa.oauth.token.KeyInfoTests", "org.cloudfoundry.identity.uaa.authentication.manager.ScopeAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.zone.IdentityZoneResolvingFilterTests", "org.cloudfoundry.identity.uaa.authentication.WhitelistLogoutHandlerTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.SamlServiceProviderConfiguratorTest", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.zone.IdentityZoneEndpointsTests", "org.cloudfoundry.identity.uaa.account.PasswordCheckEndpointTests", ":cloudfoundry-identity-model:gitInfo", "org.cloudfoundry.identity.uaa.login.ChangePasswordControllerTest", "org.cloudfoundry.identity.uaa.config.YamlPropertiesFactoryBeanTests", "org.cloudfoundry.identity.uaa.oauth.token.UserTokenGranterTest", "org.cloudfoundry.identity.uaa.metrics.QueryFilterTests", "org.cloudfoundry.identity.uaa.authentication.manager.LoginAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.user.InMemoryUaaUserDatabaseTests", "org.cloudfoundry.identity.uaa.authentication.ClientBasicAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlSessionStorageFactoryTests", "org.cloudfoundry.identity.uaa.security.web.CorsFilterTests", "org.cloudfoundry.identity.uaa.util.UaaMapUtilsTest", "org.cloudfoundry.identity.uaa.oauth.token.JwtTokenGranterTests", "org.cloudfoundry.identity.uaa.scim.util.ScimUtilsTest", "org.cloudfoundry.identity.uaa.security.web.SecurityFilterChainPostProcessorTests", "org.cloudfoundry.identity.uaa.oauth.TokenRevocationEndpointTests", "org.cloudfoundry.identity.uaa.scim.ScimGroupMemberTests", "org.cloudfoundry.identity.uaa.zone.JdbcIdentityZoneProvisioningTests", "org.cloudfoundry.identity.uaa.codestore.CodeStoreEndpointsTests", "org.cloudfoundry.identity.uaa.client.ClientAdminEndpointsTests", "org.cloudfoundry.identity.uaa.login.util.FakeJavaMailSenderTest", "org.cloudfoundry.identity.uaa.scim.endpoints.PasswordResetEndpointTest", "org.cloudfoundry.identity.uaa.web.ForwardAwareInternalResourceViewResolverTests", "org.cloudfoundry.identity.uaa.web.ExceptionReportHttpMessageConverterTest", "org.cloudfoundry.identity.uaa.oauth.DisableIdTokenResponseTypeFilterTest", "org.cloudfoundry.identity.uaa.oauth.approval.JdbcApprovalStoreTests", "org.cloudfoundry.identity.uaa.authentication.UTF8ConversionFilterTests", "org.cloudfoundry.identity.uaa.db.TableAndColumnNormalizationTest", "org.cloudfoundry.identity.uaa.util.UaaPagingUtilsTests", "org.cloudfoundry.identity.uaa.db.RevocableTokenTableTest", "org.cloudfoundry.identity.uaa.authentication.listener.UserAuthenticationSuccessListenerTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsTests", "org.cloudfoundry.identity.uaa.util.TokenValidationTest", "org.cloudfoundry.identity.uaa.provider.saml.SamlRedirectUtilsTest", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.login.EmailChangeEmailServiceTest", "org.cloudfoundry.identity.uaa.util.CachingPasswordEncoderTest", "org.cloudfoundry.identity.uaa.authorization.external.LdapGroupMappingAuthorizationManagerTests", "org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationSerializerDeserializerTest", "org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationSerializationTests", ":cloudfoundry-identity-server:compileTestJava/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", ":cloudfoundry-identity-server:testClasses", "org.cloudfoundry.identity.uaa.oauth.expression.IsSelfCheckTest", "org.cloudfoundry.identity.uaa.zone.MultitenantJdbcClientDetailsServiceTests", "org.cloudfoundry.identity.uaa.zone.BannerValidatorTest", "org.cloudfoundry.identity.uaa.login.ProfileControllerTests", "org.cloudfoundry.identity.uaa.audit.AuditEventTypeTests", "org.cloudfoundry.identity.uaa.scim.jdbc.ScimSearchQueryConverterTests", "org.cloudfoundry.identity.uaa.db.UserInfoTableTest", "org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcherTests", "org.cloudfoundry.identity.uaa.oauth.RestrictUaaScopesClientValidatorTest", "org.cloudfoundry.identity.uaa.resources.jdbc.JdbcSqlAdapterTests", "org.cloudfoundry.identity.uaa.oauth.jwk.JsonWebKeySetTests", "org.cloudfoundry.identity.uaa.login.EmailInvitationsServiceTests", "org.cloudfoundry.identity.uaa.scim.ScimCoreTests", "org.cloudfoundry.identity.uaa.config.IdentityZoneConfigurationBootstrapTests", "org.cloudfoundry.identity.uaa.provider.saml.ConfigMetadataProviderTest", "org.cloudfoundry.identity.uaa.oauth.token.UaaTokenEndpointTests", "org.cloudfoundry.identity.uaa.authentication.SystemAuthenticationTest", "org.cloudfoundry.identity.uaa.cache.ExpiringUrlCacheTests", ":cloudfoundry-identity-model:classes", "org.cloudfoundry.identity.uaa.util.UaaStringUtilsTest", "org.cloudfoundry.identity.uaa.zone.event.IdentityZoneModifiedEventTest", "org.cloudfoundry.identity.uaa.config.NestedMapPropertySourceTests", "org.cloudfoundry.identity.uaa.security.DefaultSecurityContextAccessorTests", "org.cloudfoundry.identity.uaa.metrics.UaaMetricsFilterTests", "org.cloudfoundry.identity.uaa.oauth.CheckTokenEndpointTests", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimUserProvisioningTests", "org.cloudfoundry.identity.uaa.authentication.SessionResetFilterTests", "org.cloudfoundry.identity.uaa.oauth.jwt.CommonSignerTest", "org.cloudfoundry.identity.uaa.authentication.SamlAssertionBindingTests", "org.cloudfoundry.identity.uaa.authentication.manager.CheckIdpEnabledAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserEndpointsTests", "org.cloudfoundry.identity.uaa.oauth.event.ClientAdminEventPublisherTests", "org.cloudfoundry.identity.uaa.zone.InvalidClientSecretExceptionTests", "org.cloudfoundry.identity.uaa.db.OldAuthzTableDropped", "org.cloudfoundry.identity.uaa.web.LimitedModeUaaFilterTests", "org.cloudfoundry.identity.uaa.web.UaaSavedRequestCacheTests", "org.cloudfoundry.identity.uaa.authentication.manager.ChainedAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.util.RestTemplateFactoryTests", "org.cloudfoundry.identity.uaa.impl.config.YamlServletProfileInitializerTest", "org.cloudfoundry.identity.uaa.db.RevocableTokenIndexTest_4_0_8", "org.cloudfoundry.identity.uaa.error.ConvertingExceptionViewTests", "org.cloudfoundry.identity.uaa.scim.exception.InvalidPasswordExceptionTest", "org.cloudfoundry.identity.uaa.provider.saml.SamlMessageStorageTest", "org.cloudfoundry.identity.uaa.oauth.token.JdbcRevocableTokenProvisioningTest", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimGroupBootstrapTests", "org.cloudfoundry.identity.uaa.provider.oauth.OauthIdentityProviderDefinitionFactoryBeanTest", ":cloudfoundry-identity-model:buildInfo", "org.cloudfoundry.identity.uaa.user.UaaAuthorityTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlIdentityProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.provider.ldap.DynamicPasswordComparatorTests", "org.cloudfoundry.identity.uaa.resources.jdbc.JdbcPagingListTests", "org.cloudfoundry.identity.uaa.scim.validate.UaaPasswordPolicyValidatorTests", "org.cloudfoundry.identity.uaa.config.YamlServletProfileInitializerTests", "org.cloudfoundry.identity.uaa.authentication.manager.CommonLoginPolicyTest", "org.cloudfoundry.identity.uaa.util.UaaTokenUtilsTest", "org.cloudfoundry.identity.uaa.resources.MessageTests", "org.cloudfoundry.identity.uaa.login.AccountsControllerTest", "org.cloudfoundry.identity.uaa.authentication.manager.ExternalLoginAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.oauth.approval.ApprovalsAdminEndpointsTests", "org.cloudfoundry.identity.uaa.audit.JdbcAuditServiceTests", "org.cloudfoundry.identity.uaa.web.RecognizeFailureDispatcherServletTest", "org.cloudfoundry.identity.uaa.db.GroupMembershipAuthoritiesNullableTest", "org.cloudfoundry.identity.uaa.util.LinkedMaskingMultiValueMapTests", "org.cloudfoundry.identity.uaa.config.YamlBindingTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpSamlAuthenticationSuccessHandlerTest", "org.cloudfoundry.identity.uaa.authentication.ClientParametersAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.login.EmailAccountCreationServiceTests", "org.cloudfoundry.identity.uaa.client.OAuth2ClientAuthenticationFilterTests", ":cloudfoundry-identity-model:processResources", "org.cloudfoundry.identity.uaa.user.UaaUserEditorTests", "org.cloudfoundry.identity.uaa.client.SocialClientUserDetailsSourceTests", ":cloudfoundry-identity-model:jar", "org.cloudfoundry.identity.uaa.provider.saml.SamlKeyManagerFactoryTests", "org.cloudfoundry.identity.uaa.provider.RestTemplateSSLTest", "org.cloudfoundry.identity.uaa.security.CsrfAwareEntryPointAndDeniedHandlerTest", "org.cloudfoundry.identity.uaa.authentication.manager.AuthzAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.login.PasswordConfirmationValidationTest", ":cloudfoundry-identity-server:compileJava", "org.cloudfoundry.identity.uaa.oauth.ClientInfoEndpointTests", "org.cloudfoundry.identity.uaa.provider.ldap.ProcessLdapPropertiesTest", ":cloudfoundry-identity-server:compileJava/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", "org.cloudfoundry.identity.uaa.logging.SanitizedLogFactoryTest", "org.cloudfoundry.identity.uaa.login.EmailServiceTests", "org.cloudfoundry.identity.uaa.oauth.token.AddTokenGranterTests", "org.cloudfoundry.identity.uaa.config.PasswordPolicyTest", "org.cloudfoundry.identity.uaa.login.ChangeEmailControllerTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.NonSnarlIdpMetadataManagerTest", "org.cloudfoundry.identity.uaa.account.event.PasswordChangeEventPublisherTests", "org.cloudfoundry.identity.uaa.db.StoreSubDomainAsLowerCase_V2_7_3_Tests", "org.cloudfoundry.identity.uaa.provider.saml.LoginSAMLAuthenticationFailureHandlerTest", "org.cloudfoundry.identity.uaa.db.TestDataSourcePool", "org.cloudfoundry.identity.uaa.authentication.AuthzAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.invitations.InvitationsControllerTest", "org.cloudfoundry.identity.uaa.error.UaaExceptionTests", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimUserBootstrapTests", "org.cloudfoundry.identity.uaa.config.IdentityProviderBootstrapTest", "org.cloudfoundry.identity.uaa.provider.saml.LoginSamlAuthenticationProviderTests", ":cloudfoundry-identity-server:classes", "org.cloudfoundry.identity.uaa.account.PasswordChangeEndpointTests", "org.cloudfoundry.identity.uaa.zone.event.ServiceProviderModifiedEventTest", ":cloudfoundry-identity-metrics-data:processResources", "org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationEndpointTest", "org.cloudfoundry.identity.uaa.test.UaaTestAccountsTest", "org.cloudfoundry.identity.uaa.provider.saml.ComparableProviderTest", ":cloudfoundry-identity-model:mainOutputResourcesDir", "org.cloudfoundry.identity.uaa.db.TestThatClientIdIsVchar255", "org.cloudfoundry.identity.uaa.login.SamlLoginServerKeyManagerTests", "org.cloudfoundry.identity.uaa.security.X509ExpiryCheckingTrustManagerTest", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeStoreTests", "org.cloudfoundry.identity.uaa.oauth.UserManagedAuthzApprovalHandlerTests", "org.cloudfoundry.identity.uaa.logging.LogSanitizerUtilTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.JdbcSamlServiceProviderProvisioningTest", "org.cloudfoundry.identity.uaa.oauth.AntPathRedirectResolverTests", "org.cloudfoundry.identity.uaa.util.UaaHttpRequestUtilsTest", "org.cloudfoundry.identity.uaa.web.HealthzEndpointTests", "/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", "org.cloudfoundry.identity.uaa.provider.IdentityProviderEndpointsTest", "org.cloudfoundry.identity.uaa.audit.event.SystemDeletableTest", "org.cloudfoundry.identity.uaa.login.UaaAuthenticationFailureHandlerTests", "/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", "org.cloudfoundry.identity.uaa.db.DatabaseParametersTests", "org.cloudfoundry.identity.uaa.user.JdbcUaaUserDatabaseTests", "org.cloudfoundry.identity.uaa.oauth.JdbcQueryableClientDetailsServiceTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpInitiatedLoginControllerTests", "org.cloudfoundry.identity.uaa.login.ForcePasswordChangeControllerTest", "org.cloudfoundry.identity.uaa.impl.config.ScimExternalGroupsTypeResolvingFactoryBeanTest", "org.cloudfoundry.identity.uaa.login.AutologinAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.invitations.InvitationsAuthenticationTrustResolverTest", "org.cloudfoundry.identity.uaa.account.ResetPasswordAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.scim.endpoints.UserIdConversionEndpointsTests", "org.cloudfoundry.identity.uaa.config.YamlConfigurationValidatorTests", ":cloudfoundry-identity-metrics-data:compileJava", "org.cloudfoundry.identity.uaa.util.DomainFilterTest", ":cloudfoundry-identity-metrics-data:jar", "org.cloudfoundry.identity.uaa.provider.saml.SamlIdentityProviderDefinitionTests", "org.cloudfoundry.identity.uaa.db.ExpiringCodeTableTest", "org.cloudfoundry.identity.uaa.login.HomeControllerViewTests", "org.cloudfoundry.identity.uaa.oauth.token.TokenKeyEndpointTests", "org.cloudfoundry.identity.uaa.oauth.AccessControllerTests", "org.cloudfoundry.identity.uaa.util.EnsureOldLibrariesAreRemoved", "org.cloudfoundry.identity.uaa.oauth.ZoneEndpointsClientDetailsValidatorTests", "org.cloudfoundry.identity.uaa.provider.ldap.ExtendedLdapUserMapperTest", "org.cloudfoundry.identity.uaa.scim.ScimUserTests", "org.cloudfoundry.identity.uaa.config.IdentityZoneConfigurationTests", ":cloudfoundry-identity-server:processTestResources", "org.cloudfoundry.identity.uaa.authentication.manager.PeriodLockoutPolicyTests", "org.cloudfoundry.identity.uaa.mfa_provider.GoogleMfaProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.mfa_provider.GeneralMfaProviderValidatorTest", "org.cloudfoundry.identity.uaa.audit.LoggingAuditServiceTest", "org.cloudfoundry.identity.uaa.db.OauthCodeIndexTest", "org.cloudfoundry.identity.uaa.oauth.jwt.ChainedSignatureVerifierTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ChangeEmailEndpointsTest", "org.cloudfoundry.identity.uaa.client.SourceTests", "org.cloudfoundry.identity.uaa.login.UaaResetPasswordServiceTests", "org.cloudfoundry.identity.uaa.config.EnvironmentPropertiesFactoryBeanTests", "org.cloudfoundry.identity.uaa.account.ResetPasswordAuthenticationEntryPointTests", "org.cloudfoundry.identity.uaa.authentication.manager.LdapLoginAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.provider.uaa.UaaIdentityProviderConfigValidatorTest", ":cloudfoundry-identity-model:compileJava", "org.cloudfoundry.identity.uaa.provider.KeystoneIdentityProviderDefinitionTest", "org.cloudfoundry.identity.uaa.audit.JdbcFailedLoginCountingAuditServiceTests", "org.cloudfoundry.identity.uaa.resources.jdbc.LimitSqlAdapterFactoryTest", "org.cloudfoundry.identity.uaa.config.YamlMapFactoryBeanTests", "org.cloudfoundry.identity.uaa.util.NullifyFieldsTest", "org.cloudfoundry.identity.uaa.oauth.UaaTokenServicesTests", "org.cloudfoundry.identity.uaa.oauth.UaaOauth2ErrorHandlerTests", "org.cloudfoundry.identity.uaa.provider.IdentityProviderConfigValidationDelegatorTest", "org.cloudfoundry.identity.uaa.login.NotificationsServiceTest", "org.cloudfoundry.identity.uaa.db.TestSchemaValidation", "org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationRequestManagerTests", "org.cloudfoundry.identity.uaa.authentication.ZoneAwareWhitelistLogoutHandlerTests", "org.cloudfoundry.identity.uaa.oauth.UaaUserApprovalHandlerTests", "org.cloudfoundry.identity.uaa.provider.LockoutPolicyTests", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthIdentityProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.oauth.RemoteTokenServicesTests", "org.cloudfoundry.identity.uaa.authentication.manager.KeystoneAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupMembershipManagerTests", "org.cloudfoundry.identity.uaa.login.UsernamePasswordExtractingAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.zone.GeneralIdentityZoneValidatorTests", "org.cloudfoundry.identity.uaa.util.UaaUrlUtilsTest", "org.cloudfoundry.identity.uaa.login.AccountSavingAuthenticationSuccessHandlerTest", "org.cloudfoundry.identity.uaa.web.HeaderFilterTest", "org.cloudfoundry.identity.uaa.zone.IdentityZoneSwitchingFilterTests", "org.cloudfoundry.identity.uaa.client.JdbcClientMetadataProvisioningTest", "org.cloudfoundry.identity.uaa.performance.TestMySQLEmailSearch", "org.cloudfoundry.identity.uaa.web.CookieBasedCsrfTokenRepositoryTests", "org.cloudfoundry.identity.uaa.client.ClientAdminEndpointsValidatorTests", "org.cloudfoundry.identity.uaa.web.UaaSavedRequestAwareAuthenticationSuccessHandlerTests", "org.cloudfoundry.identity.uaa.zone.JdbcIdentityProviderProvisioningTests", "org.cloudfoundry.identity.uaa.metrics.IdleTimerTests", "org.cloudfoundry.identity.uaa.util.KeyWithCertTest", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeTests", "org.cloudfoundry.identity.uaa.oauth.client.ClientDetailsModificationTests", "org.cloudfoundry.identity.uaa.util.TimeBasedExpiringValueMapTest", "org.cloudfoundry.identity.uaa.oauth.UaaScopesTests", "org.cloudfoundry.identity.uaa.web.HttpHeadersFilterRequestWrapperTest", "org.cloudfoundry.identity.uaa.audit.event.EntityDeletedEventTest", "org.cloudfoundry.identity.uaa.config.EnvironmentMapFactoryBeanTests", "org.cloudfoundry.identity.uaa.login.UaaChangePasswordServiceTest", "org.cloudfoundry.identity.uaa.oauth.jwt.JwtHelperTest", "org.cloudfoundry.identity.uaa.oauth.jwk.RsaJsonWebKeyTests", "org.cloudfoundry.identity.uaa.resources.jdbc.SimpleSearchQueryConverterTests"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_419", "original_commit_message": "Fixed CVE-2021-3281 -- Fixed potential directory-traversal via archive.extract().\nThanks Florian Apolloner, Shai Berger, and Simon Charette for reviews.\nThanks Wang Baohua for the report.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/utils/archive.py b/django/utils/archive.py\nindex 235809f2ad..d5a0cf0446 100644\n--- a/django/utils/archive.py\n+++ b/django/utils/archive.py\n@@ -27,6 +27,8 @@ import stat\n import tarfile\n import zipfile\n \n+from django.core.exceptions import SuspiciousOperation\n+\n \n class ArchiveException(Exception):\n     \"\"\"\n@@ -133,6 +135,13 @@ class BaseArchive:\n                 return False\n         return True\n \n+    def target_filename(self, to_path, name):\n+        target_path = os.path.abspath(to_path)\n+        filename = os.path.abspath(os.path.join(target_path, name))\n+        if not filename.startswith(target_path):\n+            raise SuspiciousOperation(\"Archive contains invalid path: '%s'\" % name)\n+        return filename\n+\n     def extract(self):\n         raise NotImplementedError('subclasses of BaseArchive must provide an extract() method')\n \n@@ -155,7 +164,7 @@ class TarArchive(BaseArchive):\n             name = member.name\n             if leading:\n                 name = self.split_leading_dir(name)[1]\n-            filename = os.path.join(to_path, name)\n+            filename = self.target_filename(to_path, name)\n             if member.isdir():\n                 if filename:\n                     os.makedirs(filename, exist_ok=True)\n@@ -198,8 +207,10 @@ class ZipArchive(BaseArchive):\n             info = self._archive.getinfo(name)\n             if leading:\n                 name = self.split_leading_dir(name)[1]\n-            filename = os.path.join(to_path, name)\n-            if filename.endswith(('/', '\\\\')):\n+            if not name:\n+                continue\n+            filename = self.target_filename(to_path, name)\n+            if name.endswith(('/', '\\\\')):\n                 # A directory\n                 os.makedirs(filename, exist_ok=True)\n             else:\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/utils_tests/test_archive.py b/tests/utils_tests/test_archive.py\nindex dc7c4b4ebd..8fdf3ec445 100644\n--- a/tests/utils_tests/test_archive.py\n+++ b/tests/utils_tests/test_archive.py\n@@ -4,6 +4,8 @@ import sys\n import tempfile\n import unittest\n \n+from django.core.exceptions import SuspiciousOperation\n+from django.test import SimpleTestCase\n from django.utils import archive\n \n \n@@ -45,3 +47,22 @@ class TestArchive(unittest.TestCase):\n                 # A file is readable even if permission data is missing.\n                 filepath = os.path.join(tmpdir, 'no_permissions')\n                 self.assertEqual(os.stat(filepath).st_mode & mask, 0o666 & ~umask)\n+\n+\n+class TestArchiveInvalid(SimpleTestCase):\n+    def test_extract_function_traversal(self):\n+        archives_dir = os.path.join(os.path.dirname(__file__), 'traversal_archives')\n+        tests = [\n+            ('traversal.tar', '..'),\n+            ('traversal_absolute.tar', '/tmp/evil.py'),\n+        ]\n+        if sys.platform == 'win32':\n+            tests += [\n+                ('traversal_disk_win.tar', 'd:evil.py'),\n+                ('traversal_disk_win.zip', 'd:evil.py'),\n+            ]\n+        msg = \"Archive contains invalid path: '%s'\"\n+        for entry, invalid_path in tests:\n+            with self.subTest(entry), tempfile.TemporaryDirectory() as tmpdir:\n+                with self.assertRaisesMessage(SuspiciousOperation, msg % invalid_path):\n+                    archive.extract(os.path.join(archives_dir, entry), tmpdir)\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "05413afa8c18cdb978fcdf470e09f7a12b234a23", "source_date": "Mon Feb 1 09:07:36 2021 +0100", "source_tag": "4.0", "target_commit": "21e7622dec1f8612c85c2fc37fe8efbfd3311e37", "target_date": "Mon Feb 1 09:14:54 2021 +0100", "target_tag": "2.2.18", "FAIL TO PASS": ["utils_tests.test_archive.TestArchiveInvalid.test_extract_function_traversal"], "PASS TO PASS": ["Archive.extract() preserves file permissions.", "utils_tests.test_archive.TestBzip2Tar.test_extract_function_no_to_path", "utils_tests.test_archive.TestZip.test_extract_function_with_leadpath", "utils_tests.test_archive.TestTar.test_extract_function", "utils_tests.test_archive.TestZip.test_extract_function_no_to_path", "utils_tests.test_archive.TestTar.test_extract_function_no_to_path", "utils_tests.test_archive.TestBzip2Tar.test_extract_method_no_to_path", "utils_tests.test_archive.TestTar.test_extract_method", "utils_tests.test_archive.TestZip.test_extract_method", "utils_tests.test_archive.TestTar.test_extract_method_no_to_path", "utils_tests.test_archive.TestGzipTar.test_extract_method", "utils_tests.test_archive.TestGzipTar.test_extract_method_no_to_path", "utils_tests.test_archive.TestZip.test_extract_function", "utils_tests.test_archive.TestZip.test_extract_method_no_to_path", "utils_tests.test_archive.TestGzipTar.test_extract_function", "utils_tests.test_archive.TestBzip2Tar.test_extract_function", "utils_tests.test_archive.TestBzip2Tar.test_extract_method", "utils_tests.test_archive.TestTar.test_extract_function_with_leadpath", "utils_tests.test_archive.TestBzip2Tar.test_extract_function_with_leadpath", "utils_tests.test_archive.TestGzipTar.test_extract_function_no_to_path", "utils_tests.test_archive.TestGzipTar.test_extract_function_with_leadpath"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_1445", "original_commit_message": "Merge branch 'feature/better_print' into develop\n[#154182646] https://www.pivotaltracker.com/story/show/154182646", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthenticationDetails.java b/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthenticationDetails.java\nindex 31c9d683c..51d37aef2 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthenticationDetails.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthenticationDetails.java\n@@ -12,14 +12,14 @@\n  *******************************************************************************/\n package org.cloudfoundry.identity.uaa.authentication;\n \n+import javax.servlet.http.HttpServletRequest;\n+import java.io.Serializable;\n+\n import com.fasterxml.jackson.annotation.JsonProperty;\n import org.bouncycastle.util.encoders.Base64;\n import org.springframework.security.web.authentication.WebAuthenticationDetails;\n import org.springframework.util.StringUtils;\n \n-import javax.servlet.http.HttpServletRequest;\n-import java.io.Serializable;\n-\n /**\n  * Contains additional information about the authentication request which may be\n  * of use in auditing etc.\n@@ -113,12 +113,6 @@ public class UaaAuthenticationDetails implements Serializable {\n             }\n             sb.append(\"clientId=\").append(clientId);\n         }\n-        if (sessionId != null) {\n-            if (sb.length() > 0) {\n-                sb.append(\", \");\n-            }\n-            sb.append(\"sessionId=\").append(sessionId);\n-        }\n         return sb.toString();\n     }\n \n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/authentication/event/UserAuthenticationSuccessEventTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/authentication/event/UserAuthenticationSuccessEventTests.java\nnew file mode 100644\nindex 000000000..1c624a370\n--- /dev/null\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/authentication/event/UserAuthenticationSuccessEventTests.java\n@@ -0,0 +1,48 @@\n+/*\n+ * ****************************************************************************\n+ *     Cloud Foundry\n+ *     Copyright (c) [2009-2018] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ * ****************************************************************************\n+ */\n+\n+package org.cloudfoundry.identity.uaa.authentication.event;\n+\n+import org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationDetails;\n+import org.cloudfoundry.identity.uaa.user.UaaUser;\n+\n+import org.junit.Test;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.mock.web.MockHttpSession;\n+import org.springframework.security.core.Authentication;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.not;\n+import static org.mockito.Mockito.mock;\n+\n+public class UserAuthenticationSuccessEventTests {\n+\n+    @Test\n+    public void get_origin_from_request() throws Exception {\n+        MockHttpSession session = new MockHttpSession(null, \"the-id\");\n+        MockHttpServletRequest request = new MockHttpServletRequest(\"GET\",\"/oauth/authorize\");\n+        request.setSession(session);\n+        request.setRemoteAddr(\"127.10.10.10\");\n+        UaaAuthenticationDetails details = new UaaAuthenticationDetails(request, \"client-id\");\n+\n+        UserAuthenticationSuccessEvent event = new UserAuthenticationSuccessEvent(mock(UaaUser.class), mock(Authentication.class));\n+        String origin = event.getOrigin(details);\n+\n+        assertThat(origin, containsString(\"remoteAddress=127.10.10.10\"));\n+        assertThat(origin, containsString(\"clientId=client-id\"));\n+        assertThat(origin, not(containsString(\"sessionId=\")));\n+    }\n+}\n\\ No newline at end of file\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "1f529fcb43fd200cab10587e889343ef1683c6e6", "source_date": "Tue Jan 9 12:23:25 2018 -0800", "source_tag": "4.8.2", "target_commit": "a61bfabbad22f646ecf1f00016b448b26a60daf8", "target_date": "Tue Jan 9 12:17:09 2018 -0800", "target_tag": "4.5.5", "FAIL TO PASS": ["org.cloudfoundry.identity.uaa.authentication.event.UserAuthenticationSuccessEventTests > get_origin_from_request"], "PASS TO PASS": ["org.cloudfoundry.identity.uaa.zone.event.IdentityProviderModifiedEventTest", "org.cloudfoundry.identity.uaa.oauth.approval.ApprovalTests", "org.cloudfoundry.identity.uaa.provider.ldap.LdapIdentityProviderDefinitionTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.ZoneAwareIdpMetadataGeneratorTest", "org.cloudfoundry.identity.uaa.util.log.SyslogAppenderTest", "org.cloudfoundry.identity.uaa.db.ClientDetailsHasRequiredUserScopes", "org.cloudfoundry.identity.uaa.provider.saml.BootstrapSamlIdentityProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.login.LoginInfoEndpointTests", "org.cloudfoundry.identity.uaa.user.BCryptPasswordEncoderTest", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupExternalMembershipManagerTests", "org.cloudfoundry.identity.uaa.zone.GeneralIdentityZoneConfigurationValidatorTests", ":cloudfoundry-identity-server:compileTestJava", "org.cloudfoundry.identity.uaa.login.ResetPasswordControllerTest", "org.cloudfoundry.identity.uaa.audit.event.ApprovalModifiedEventTest", "org.cloudfoundry.identity.uaa.authentication.BackwardsCompatibleTokenEndpointAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.oauth.AuthorizePromptNoneEntryPointTest", "org.cloudfoundry.identity.uaa.authentication.UaaClientAuthenticationProviderTest", ":cloudfoundry-identity-server:processResources", "org.cloudfoundry.identity.uaa.openid.UserInfoEndpointTests", "org.cloudfoundry.identity.uaa.web.UaaSessionCookieConfigTest", "org.cloudfoundry.identity.uaa.authentication.login.RemoteAuthenticationEndpointTests", "org.cloudfoundry.identity.uaa.provider.saml.ZoneAwareMetadataGeneratorTests", "org.cloudfoundry.identity.uaa.client.ClientAdminBootstrapTests", "org.cloudfoundry.identity.uaa.db.ClientDetailsSupportsExtendedAuthoritesAndScopes", "org.cloudfoundry.identity.uaa.test.CreateDB", "org.cloudfoundry.identity.uaa.audit.event.AuditListenerTests", "org.cloudfoundry.identity.uaa.oauth.token.Saml2TokenGranterTest", "org.cloudfoundry.identity.uaa.util.ColorHashTest", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.provider.ldap.LdapIdentityProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.SamlServiceProviderDefinitionTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpWebSsoProfileImplTest", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupProvisioningTests", "org.cloudfoundry.identity.uaa.zone.IdentityZoneHolderTest", "org.cloudfoundry.identity.uaa.oauth.jwt.CommonSignatureVerifierTest", "org.cloudfoundry.identity.uaa.util.log.LineAwareLayoutTest", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimExternalGroupBootstrapTests", "org.cloudfoundry.identity.uaa.oauth.UaaTokenStoreTests", "org.cloudfoundry.identity.uaa.oauth.token.KeyInfoTests", "org.cloudfoundry.identity.uaa.authentication.manager.ScopeAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.zone.IdentityZoneResolvingFilterTests", "org.cloudfoundry.identity.uaa.authentication.WhitelistLogoutHandlerTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.SamlServiceProviderConfiguratorTest", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.zone.IdentityZoneEndpointsTests", "org.cloudfoundry.identity.uaa.account.PasswordCheckEndpointTests", ":cloudfoundry-identity-model:gitInfo", "org.cloudfoundry.identity.uaa.login.ChangePasswordControllerTest", "org.cloudfoundry.identity.uaa.config.YamlPropertiesFactoryBeanTests", "org.cloudfoundry.identity.uaa.oauth.token.UserTokenGranterTest", "org.cloudfoundry.identity.uaa.authentication.manager.LoginAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.user.InMemoryUaaUserDatabaseTests", "org.cloudfoundry.identity.uaa.security.web.CorsFilterTests", "org.cloudfoundry.identity.uaa.util.UaaMapUtilsTest", "org.cloudfoundry.identity.uaa.oauth.token.JwtTokenGranterTests", "org.cloudfoundry.identity.uaa.scim.util.ScimUtilsTest", "org.cloudfoundry.identity.uaa.security.web.SecurityFilterChainPostProcessorTests", "org.cloudfoundry.identity.uaa.oauth.TokenRevocationEndpointTests", "org.cloudfoundry.identity.uaa.scim.ScimGroupMemberTests", "org.cloudfoundry.identity.uaa.zone.JdbcIdentityZoneProvisioningTests", "org.cloudfoundry.identity.uaa.codestore.CodeStoreEndpointsTests", "org.cloudfoundry.identity.uaa.client.ClientAdminEndpointsTests", "org.cloudfoundry.identity.uaa.login.util.FakeJavaMailSenderTest", "org.cloudfoundry.identity.uaa.scim.endpoints.PasswordResetEndpointTest", "org.cloudfoundry.identity.uaa.web.ForwardAwareInternalResourceViewResolverTests", "org.cloudfoundry.identity.uaa.web.ExceptionReportHttpMessageConverterTest", "org.cloudfoundry.identity.uaa.oauth.DisableIdTokenResponseTypeFilterTest", "org.cloudfoundry.identity.uaa.oauth.approval.JdbcApprovalStoreTests", "org.cloudfoundry.identity.uaa.authentication.UTF8ConversionFilterTests", "org.cloudfoundry.identity.uaa.db.TableAndColumnNormalizationTest", "org.cloudfoundry.identity.uaa.util.UaaPagingUtilsTests", "org.cloudfoundry.identity.uaa.db.RevocableTokenTableTest", "org.cloudfoundry.identity.uaa.authentication.listener.UserAuthenticationSuccessListenerTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsTests", "org.cloudfoundry.identity.uaa.util.TokenValidationTest", "org.cloudfoundry.identity.uaa.provider.saml.SamlRedirectUtilsTest", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.login.EmailChangeEmailServiceTest", "org.cloudfoundry.identity.uaa.util.CachingPasswordEncoderTest", "org.cloudfoundry.identity.uaa.authorization.external.LdapGroupMappingAuthorizationManagerTests", "org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationSerializerDeserializerTest", "org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationSerializationTests", ":cloudfoundry-identity-server:compileTestJava/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", ":cloudfoundry-identity-server:testClasses", "org.cloudfoundry.identity.uaa.oauth.expression.IsSelfCheckTest", "org.cloudfoundry.identity.uaa.zone.MultitenantJdbcClientDetailsServiceTests", "org.cloudfoundry.identity.uaa.login.ProfileControllerTests", "org.cloudfoundry.identity.uaa.audit.AuditEventTypeTests", "org.cloudfoundry.identity.uaa.scim.jdbc.ScimSearchQueryConverterTests", "org.cloudfoundry.identity.uaa.db.UserInfoTableTest", "org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcherTests", "org.cloudfoundry.identity.uaa.oauth.RestrictUaaScopesClientValidatorTest", "org.cloudfoundry.identity.uaa.resources.jdbc.JdbcSqlAdapterTests", "org.cloudfoundry.identity.uaa.oauth.jwk.JsonWebKeySetTests", "org.cloudfoundry.identity.uaa.login.EmailInvitationsServiceTests", "org.cloudfoundry.identity.uaa.scim.ScimCoreTests", "org.cloudfoundry.identity.uaa.config.IdentityZoneConfigurationBootstrapTests", "org.cloudfoundry.identity.uaa.provider.saml.ConfigMetadataProviderTest", "org.cloudfoundry.identity.uaa.oauth.token.UaaTokenEndpointTests", "org.cloudfoundry.identity.uaa.authentication.SystemAuthenticationTest", "org.cloudfoundry.identity.uaa.cache.ExpiringUrlCacheTests", ":cloudfoundry-identity-model:classes", "org.cloudfoundry.identity.uaa.util.UaaStringUtilsTest", "org.cloudfoundry.identity.uaa.zone.event.IdentityZoneModifiedEventTest", "org.cloudfoundry.identity.uaa.config.NestedMapPropertySourceTests", "org.cloudfoundry.identity.uaa.security.DefaultSecurityContextAccessorTests", "org.cloudfoundry.identity.uaa.oauth.CheckTokenEndpointTests", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimUserProvisioningTests", "org.cloudfoundry.identity.uaa.authentication.SessionResetFilterTests", "org.cloudfoundry.identity.uaa.oauth.jwt.CommonSignerTest", "org.cloudfoundry.identity.uaa.authentication.SamlAssertionBindingTests", "org.cloudfoundry.identity.uaa.authentication.manager.CheckIdpEnabledAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserEndpointsTests", "org.cloudfoundry.identity.uaa.oauth.event.ClientAdminEventPublisherTests", "org.cloudfoundry.identity.uaa.db.OldAuthzTableDropped", "org.cloudfoundry.identity.uaa.web.UaaSavedRequestCacheTests", "org.cloudfoundry.identity.uaa.authentication.manager.ChainedAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.util.RestTemplateFactoryTests", "org.cloudfoundry.identity.uaa.impl.config.YamlServletProfileInitializerTest", "org.cloudfoundry.identity.uaa.db.RevocableTokenIndexTest_4_0_8", "org.cloudfoundry.identity.uaa.error.ConvertingExceptionViewTests", "org.cloudfoundry.identity.uaa.scim.exception.InvalidPasswordExceptionTest", "org.cloudfoundry.identity.uaa.oauth.token.JdbcRevocableTokenProvisioningTest", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimGroupBootstrapTests", "org.cloudfoundry.identity.uaa.provider.oauth.OauthIdentityProviderDefinitionFactoryBeanTest", ":cloudfoundry-identity-model:buildInfo", "org.cloudfoundry.identity.uaa.user.UaaAuthorityTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlIdentityProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.provider.ldap.DynamicPasswordComparatorTests", "org.cloudfoundry.identity.uaa.resources.jdbc.JdbcPagingListTests", "org.cloudfoundry.identity.uaa.scim.validate.UaaPasswordPolicyValidatorTests", "org.cloudfoundry.identity.uaa.config.YamlServletProfileInitializerTests", "org.cloudfoundry.identity.uaa.authentication.manager.CommonLoginPolicyTest", "org.cloudfoundry.identity.uaa.util.UaaTokenUtilsTest", "org.cloudfoundry.identity.uaa.resources.MessageTests", "org.cloudfoundry.identity.uaa.authentication.manager.ExternalLoginAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.login.AccountsControllerTest", "org.cloudfoundry.identity.uaa.oauth.approval.ApprovalsAdminEndpointsTests", "org.cloudfoundry.identity.uaa.audit.JdbcAuditServiceTests", "org.cloudfoundry.identity.uaa.web.RecognizeFailureDispatcherServletTest", "org.cloudfoundry.identity.uaa.util.LinkedMaskingMultiValueMapTests", "org.cloudfoundry.identity.uaa.config.YamlBindingTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpSamlAuthenticationSuccessHandlerTest", "org.cloudfoundry.identity.uaa.authentication.ClientParametersAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.login.EmailAccountCreationServiceTests", "org.cloudfoundry.identity.uaa.client.OAuth2ClientAuthenticationFilterTests", ":cloudfoundry-identity-model:processResources", "org.cloudfoundry.identity.uaa.user.UaaUserEditorTests", "org.cloudfoundry.identity.uaa.client.SocialClientUserDetailsSourceTests", ":cloudfoundry-identity-model:jar", "org.cloudfoundry.identity.uaa.provider.saml.SamlKeyManagerFactoryTests", "org.cloudfoundry.identity.uaa.security.CsrfAwareEntryPointAndDeniedHandlerTest", "org.cloudfoundry.identity.uaa.authentication.manager.AuthzAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.login.PasswordConfirmationValidationTest", ":cloudfoundry-identity-server:compileJava", "org.cloudfoundry.identity.uaa.oauth.ClientInfoEndpointTests", "org.cloudfoundry.identity.uaa.provider.ldap.ProcessLdapPropertiesTest", ":cloudfoundry-identity-server:compileJava/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", "org.cloudfoundry.identity.uaa.logging.SanitizedLogFactoryTest", "org.cloudfoundry.identity.uaa.login.EmailServiceTests", "org.cloudfoundry.identity.uaa.oauth.token.AddTokenGranterTests", "org.cloudfoundry.identity.uaa.config.PasswordPolicyTest", "org.cloudfoundry.identity.uaa.login.ChangeEmailControllerTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.NonSnarlIdpMetadataManagerTest", "org.cloudfoundry.identity.uaa.account.event.PasswordChangeEventPublisherTests", "org.cloudfoundry.identity.uaa.db.StoreSubDomainAsLowerCase_V2_7_3_Tests", "org.cloudfoundry.identity.uaa.provider.saml.LoginSAMLAuthenticationFailureHandlerTest", "org.cloudfoundry.identity.uaa.db.TestDataSourcePool", "org.cloudfoundry.identity.uaa.authentication.AuthzAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.invitations.InvitationsControllerTest", "org.cloudfoundry.identity.uaa.error.UaaExceptionTests", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimUserBootstrapTests", "org.cloudfoundry.identity.uaa.config.IdentityProviderBootstrapTest", "org.cloudfoundry.identity.uaa.provider.saml.LoginSamlAuthenticationProviderTests", ":cloudfoundry-identity-server:classes", "org.cloudfoundry.identity.uaa.account.PasswordChangeEndpointTests", "org.cloudfoundry.identity.uaa.zone.event.ServiceProviderModifiedEventTest", "org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationEndpointTest", "org.cloudfoundry.identity.uaa.test.UaaTestAccountsTest", "org.cloudfoundry.identity.uaa.provider.saml.ComparableProviderTest", ":cloudfoundry-identity-model:mainOutputResourcesDir", "org.cloudfoundry.identity.uaa.db.TestThatClientIdIsVchar255", "org.cloudfoundry.identity.uaa.login.SamlLoginServerKeyManagerTests", "org.cloudfoundry.identity.uaa.security.X509ExpiryCheckingTrustManagerTest", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeStoreTests", "org.cloudfoundry.identity.uaa.oauth.UserManagedAuthzApprovalHandlerTests", "org.cloudfoundry.identity.uaa.logging.LogSanitizerUtilTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.JdbcSamlServiceProviderProvisioningTest", "org.cloudfoundry.identity.uaa.oauth.AntPathRedirectResolverTests", "org.cloudfoundry.identity.uaa.util.UaaHttpRequestUtilsTest", "org.cloudfoundry.identity.uaa.web.HealthzEndpointTests", "/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", "org.cloudfoundry.identity.uaa.provider.IdentityProviderEndpointsTest", "org.cloudfoundry.identity.uaa.audit.event.SystemDeletableTest", "org.cloudfoundry.identity.uaa.login.UaaAuthenticationFailureHandlerTests", "/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", "org.cloudfoundry.identity.uaa.db.DatabaseParametersTests", "org.cloudfoundry.identity.uaa.user.JdbcUaaUserDatabaseTests", "org.cloudfoundry.identity.uaa.oauth.JdbcQueryableClientDetailsServiceTests", "org.cloudfoundry.identity.uaa.login.ForcePasswordChangeControllerTest", "org.cloudfoundry.identity.uaa.impl.config.ScimExternalGroupsTypeResolvingFactoryBeanTest", "org.cloudfoundry.identity.uaa.login.AutologinAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.invitations.InvitationsAuthenticationTrustResolverTest", "org.cloudfoundry.identity.uaa.account.ResetPasswordAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.scim.endpoints.UserIdConversionEndpointsTests", "org.cloudfoundry.identity.uaa.config.YamlConfigurationValidatorTests", "org.cloudfoundry.identity.uaa.util.DomainFilterTest", "org.cloudfoundry.identity.uaa.provider.saml.SamlIdentityProviderDefinitionTests", "org.cloudfoundry.identity.uaa.db.ExpiringCodeTableTest", "org.cloudfoundry.identity.uaa.login.HomeControllerViewTests", "org.cloudfoundry.identity.uaa.oauth.token.TokenKeyEndpointTests", "org.cloudfoundry.identity.uaa.oauth.AccessControllerTests", "org.cloudfoundry.identity.uaa.util.EnsureOldLibrariesAreRemoved", "org.cloudfoundry.identity.uaa.oauth.ZoneEndpointsClientDetailsValidatorTests", "org.cloudfoundry.identity.uaa.provider.ldap.ExtendedLdapUserMapperTest", "org.cloudfoundry.identity.uaa.scim.ScimUserTests", "org.cloudfoundry.identity.uaa.config.IdentityZoneConfigurationTests", ":cloudfoundry-identity-server:processTestResources", "org.cloudfoundry.identity.uaa.authentication.manager.PeriodLockoutPolicyTests", "org.cloudfoundry.identity.uaa.scim.security.GroupRoleCheckTests", "org.cloudfoundry.identity.uaa.audit.LoggingAuditServiceTest", "org.cloudfoundry.identity.uaa.db.OauthCodeIndexTest", "org.cloudfoundry.identity.uaa.oauth.jwt.ChainedSignatureVerifierTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ChangeEmailEndpointsTest", "org.cloudfoundry.identity.uaa.client.SourceTests", "org.cloudfoundry.identity.uaa.login.UaaResetPasswordServiceTests", "org.cloudfoundry.identity.uaa.config.EnvironmentPropertiesFactoryBeanTests", "org.cloudfoundry.identity.uaa.account.ResetPasswordAuthenticationEntryPointTests", "org.cloudfoundry.identity.uaa.authentication.manager.LdapLoginAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.provider.uaa.UaaIdentityProviderConfigValidatorTest", ":cloudfoundry-identity-model:compileJava", "org.cloudfoundry.identity.uaa.provider.KeystoneIdentityProviderDefinitionTest", "org.cloudfoundry.identity.uaa.audit.JdbcFailedLoginCountingAuditServiceTests", "org.cloudfoundry.identity.uaa.resources.jdbc.LimitSqlAdapterFactoryTest", "org.cloudfoundry.identity.uaa.config.YamlMapFactoryBeanTests", "org.cloudfoundry.identity.uaa.util.NullifyFieldsTest", "org.cloudfoundry.identity.uaa.oauth.UaaTokenServicesTests", "org.cloudfoundry.identity.uaa.oauth.UaaOauth2ErrorHandlerTests", "org.cloudfoundry.identity.uaa.provider.IdentityProviderConfigValidationDelegatorTest", "org.cloudfoundry.identity.uaa.login.NotificationsServiceTest", "org.cloudfoundry.identity.uaa.db.TestSchemaValidation", "org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationRequestManagerTests", "org.cloudfoundry.identity.uaa.authentication.ZoneAwareWhitelistLogoutHandlerTests", "org.cloudfoundry.identity.uaa.oauth.UaaUserApprovalHandlerTests", "org.cloudfoundry.identity.uaa.provider.LockoutPolicyTests", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthIdentityProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.oauth.RemoteTokenServicesTests", "org.cloudfoundry.identity.uaa.authentication.manager.KeystoneAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupMembershipManagerTests", "org.cloudfoundry.identity.uaa.login.UsernamePasswordExtractingAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.zone.GeneralIdentityZoneValidatorTests", "org.cloudfoundry.identity.uaa.util.UaaUrlUtilsTest", "org.cloudfoundry.identity.uaa.login.AccountSavingAuthenticationSuccessHandlerTest", "org.cloudfoundry.identity.uaa.web.HeaderFilterTest", "org.cloudfoundry.identity.uaa.zone.IdentityZoneSwitchingFilterTests", "org.cloudfoundry.identity.uaa.client.JdbcClientMetadataProvisioningTest", "org.cloudfoundry.identity.uaa.performance.TestMySQLEmailSearch", "org.cloudfoundry.identity.uaa.web.CookieBasedCsrfTokenRepositoryTests", "org.cloudfoundry.identity.uaa.client.ClientAdminEndpointsValidatorTests", "org.cloudfoundry.identity.uaa.web.UaaSavedRequestAwareAuthenticationSuccessHandlerTests", "org.cloudfoundry.identity.uaa.zone.JdbcIdentityProviderProvisioningTests", "org.cloudfoundry.identity.uaa.util.KeyWithCertTest", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeTests", "org.cloudfoundry.identity.uaa.oauth.client.ClientDetailsModificationTests", "org.cloudfoundry.identity.uaa.util.TimeBasedExpiringValueMapTest", "org.cloudfoundry.identity.uaa.oauth.UaaScopesTests", "org.cloudfoundry.identity.uaa.web.HttpHeadersFilterRequestWrapperTest", "org.cloudfoundry.identity.uaa.audit.event.EntityDeletedEventTest", "org.cloudfoundry.identity.uaa.config.EnvironmentMapFactoryBeanTests", "org.cloudfoundry.identity.uaa.login.UaaChangePasswordServiceTest", "org.cloudfoundry.identity.uaa.oauth.jwt.JwtHelperTest", "org.cloudfoundry.identity.uaa.oauth.jwk.RsaJsonWebKeyTests", "org.cloudfoundry.identity.uaa.resources.jdbc.SimpleSearchQueryConverterTests"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_422", "original_commit_message": "Fixed CVE-2021-3281 -- Fixed potential directory-traversal via archive.extract().\nThanks Florian Apolloner, Shai Berger, and Simon Charette for reviews.\nThanks Wang Baohua for the report.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/utils/archive.py b/django/utils/archive.py\nindex 235809f2ad..d5a0cf0446 100644\n--- a/django/utils/archive.py\n+++ b/django/utils/archive.py\n@@ -27,6 +27,8 @@ import stat\n import tarfile\n import zipfile\n \n+from django.core.exceptions import SuspiciousOperation\n+\n \n class ArchiveException(Exception):\n     \"\"\"\n@@ -133,6 +135,13 @@ class BaseArchive:\n                 return False\n         return True\n \n+    def target_filename(self, to_path, name):\n+        target_path = os.path.abspath(to_path)\n+        filename = os.path.abspath(os.path.join(target_path, name))\n+        if not filename.startswith(target_path):\n+            raise SuspiciousOperation(\"Archive contains invalid path: '%s'\" % name)\n+        return filename\n+\n     def extract(self):\n         raise NotImplementedError('subclasses of BaseArchive must provide an extract() method')\n \n@@ -155,7 +164,7 @@ class TarArchive(BaseArchive):\n             name = member.name\n             if leading:\n                 name = self.split_leading_dir(name)[1]\n-            filename = os.path.join(to_path, name)\n+            filename = self.target_filename(to_path, name)\n             if member.isdir():\n                 if filename:\n                     os.makedirs(filename, exist_ok=True)\n@@ -198,8 +207,10 @@ class ZipArchive(BaseArchive):\n             info = self._archive.getinfo(name)\n             if leading:\n                 name = self.split_leading_dir(name)[1]\n-            filename = os.path.join(to_path, name)\n-            if filename.endswith(('/', '\\\\')):\n+            if not name:\n+                continue\n+            filename = self.target_filename(to_path, name)\n+            if name.endswith(('/', '\\\\')):\n                 # A directory\n                 os.makedirs(filename, exist_ok=True)\n             else:\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/utils_tests/test_archive.py b/tests/utils_tests/test_archive.py\nindex dc7c4b4ebd..8fdf3ec445 100644\n--- a/tests/utils_tests/test_archive.py\n+++ b/tests/utils_tests/test_archive.py\n@@ -4,6 +4,8 @@ import sys\n import tempfile\n import unittest\n \n+from django.core.exceptions import SuspiciousOperation\n+from django.test import SimpleTestCase\n from django.utils import archive\n \n \n@@ -45,3 +47,22 @@ class TestArchive(unittest.TestCase):\n                 # A file is readable even if permission data is missing.\n                 filepath = os.path.join(tmpdir, 'no_permissions')\n                 self.assertEqual(os.stat(filepath).st_mode & mask, 0o666 & ~umask)\n+\n+\n+class TestArchiveInvalid(SimpleTestCase):\n+    def test_extract_function_traversal(self):\n+        archives_dir = os.path.join(os.path.dirname(__file__), 'traversal_archives')\n+        tests = [\n+            ('traversal.tar', '..'),\n+            ('traversal_absolute.tar', '/tmp/evil.py'),\n+        ]\n+        if sys.platform == 'win32':\n+            tests += [\n+                ('traversal_disk_win.tar', 'd:evil.py'),\n+                ('traversal_disk_win.zip', 'd:evil.py'),\n+            ]\n+        msg = \"Archive contains invalid path: '%s'\"\n+        for entry, invalid_path in tests:\n+            with self.subTest(entry), tempfile.TemporaryDirectory() as tmpdir:\n+                with self.assertRaisesMessage(SuspiciousOperation, msg % invalid_path):\n+                    archive.extract(os.path.join(archives_dir, entry), tmpdir)\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "05413afa8c18cdb978fcdf470e09f7a12b234a23", "source_date": "Mon Feb 1 09:07:36 2021 +0100", "source_tag": "4.0", "target_commit": "02e6592835b4559909aa3aaaf67988fef435f624", "target_date": "Mon Feb 1 09:13:58 2021 +0100", "target_tag": "3.1.6", "FAIL TO PASS": ["utils_tests.test_archive.TestArchiveInvalid.test_extract_function_traversal"], "PASS TO PASS": ["utils_tests.test_archive.TestArchive.test_extract_function", "utils_tests.test_archive.TestArchive.test_extract_file_permissions"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_421", "original_commit_message": "Fixed CVE-2021-3281 -- Fixed potential directory-traversal via archive.extract().\nThanks Florian Apolloner, Shai Berger, and Simon Charette for reviews.\nThanks Wang Baohua for the report.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/utils/archive.py b/django/utils/archive.py\nindex 235809f2ad..d5a0cf0446 100644\n--- a/django/utils/archive.py\n+++ b/django/utils/archive.py\n@@ -27,6 +27,8 @@ import stat\n import tarfile\n import zipfile\n \n+from django.core.exceptions import SuspiciousOperation\n+\n \n class ArchiveException(Exception):\n     \"\"\"\n@@ -133,6 +135,13 @@ class BaseArchive:\n                 return False\n         return True\n \n+    def target_filename(self, to_path, name):\n+        target_path = os.path.abspath(to_path)\n+        filename = os.path.abspath(os.path.join(target_path, name))\n+        if not filename.startswith(target_path):\n+            raise SuspiciousOperation(\"Archive contains invalid path: '%s'\" % name)\n+        return filename\n+\n     def extract(self):\n         raise NotImplementedError('subclasses of BaseArchive must provide an extract() method')\n \n@@ -155,7 +164,7 @@ class TarArchive(BaseArchive):\n             name = member.name\n             if leading:\n                 name = self.split_leading_dir(name)[1]\n-            filename = os.path.join(to_path, name)\n+            filename = self.target_filename(to_path, name)\n             if member.isdir():\n                 if filename:\n                     os.makedirs(filename, exist_ok=True)\n@@ -198,8 +207,10 @@ class ZipArchive(BaseArchive):\n             info = self._archive.getinfo(name)\n             if leading:\n                 name = self.split_leading_dir(name)[1]\n-            filename = os.path.join(to_path, name)\n-            if filename.endswith(('/', '\\\\')):\n+            if not name:\n+                continue\n+            filename = self.target_filename(to_path, name)\n+            if name.endswith(('/', '\\\\')):\n                 # A directory\n                 os.makedirs(filename, exist_ok=True)\n             else:\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/utils_tests/test_archive.py b/tests/utils_tests/test_archive.py\nindex dc7c4b4ebd..8fdf3ec445 100644\n--- a/tests/utils_tests/test_archive.py\n+++ b/tests/utils_tests/test_archive.py\n@@ -4,6 +4,8 @@ import sys\n import tempfile\n import unittest\n \n+from django.core.exceptions import SuspiciousOperation\n+from django.test import SimpleTestCase\n from django.utils import archive\n \n \n@@ -45,3 +47,22 @@ class TestArchive(unittest.TestCase):\n                 # A file is readable even if permission data is missing.\n                 filepath = os.path.join(tmpdir, 'no_permissions')\n                 self.assertEqual(os.stat(filepath).st_mode & mask, 0o666 & ~umask)\n+\n+\n+class TestArchiveInvalid(SimpleTestCase):\n+    def test_extract_function_traversal(self):\n+        archives_dir = os.path.join(os.path.dirname(__file__), 'traversal_archives')\n+        tests = [\n+            ('traversal.tar', '..'),\n+            ('traversal_absolute.tar', '/tmp/evil.py'),\n+        ]\n+        if sys.platform == 'win32':\n+            tests += [\n+                ('traversal_disk_win.tar', 'd:evil.py'),\n+                ('traversal_disk_win.zip', 'd:evil.py'),\n+            ]\n+        msg = \"Archive contains invalid path: '%s'\"\n+        for entry, invalid_path in tests:\n+            with self.subTest(entry), tempfile.TemporaryDirectory() as tmpdir:\n+                with self.assertRaisesMessage(SuspiciousOperation, msg % invalid_path):\n+                    archive.extract(os.path.join(archives_dir, entry), tmpdir)\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "05413afa8c18cdb978fcdf470e09f7a12b234a23", "source_date": "Mon Feb 1 09:07:36 2021 +0100", "source_tag": "4.0", "target_commit": "52e409ed17287e9aabda847b6afe58be2fa9f86a", "target_date": "Mon Feb 1 09:14:22 2021 +0100", "target_tag": "3.0.12", "FAIL TO PASS": ["utils_tests.test_archive.TestArchiveInvalid.test_extract_function_traversal"], "PASS TO PASS": ["utils_tests.test_archive.TestArchive.test_extract_function", "utils_tests.test_archive.TestArchive.test_extract_file_permissions"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_424", "original_commit_message": "Fix a security issue in the admin. Disclosure and new release forthcoming.\ngit-svn-id: http://code.djangoproject.com/svn/django/branches/releases/1.2.X@15033 bcc190cf-cafb-0310-a4f2-bffc1f526a37", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 3a824c6e0a..f85efe4b98 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -10,7 +10,9 @@ from django.contrib import messages\n from django.views.decorators.csrf import csrf_protect\n from django.core.exceptions import PermissionDenied, ValidationError\n from django.db import models, transaction\n-from django.db.models.fields import BLANK_CHOICE_DASH\n+from django.db.models.related import RelatedObject\n+from django.db.models.fields import BLANK_CHOICE_DASH, FieldDoesNotExist\n+from django.db.models.sql.constants import LOOKUP_SEP, QUERY_TERMS\n from django.http import Http404, HttpResponse, HttpResponseRedirect\n from django.shortcuts import get_object_or_404, render_to_response\n from django.utils.decorators import method_decorator\n@@ -183,6 +185,30 @@ class BaseModelAdmin(object):\n     def get_readonly_fields(self, request, obj=None):\n         return self.readonly_fields\n \n+    def lookup_allowed(self, lookup):\n+        parts = lookup.split(LOOKUP_SEP)\n+\n+        # Last term in lookup is a query term (__exact, __startswith etc)\n+        # This term can be ignored.\n+        if len(parts) > 1 and parts[-1] in QUERY_TERMS:\n+            parts.pop()\n+\n+        # Special case -- foo__id__exact and foo__id queries are implied\n+        # if foo has been specificially included in the lookup list; so\n+        # drop __id if it is the last part.\n+        if len(parts) > 1 and parts[-1] == self.model._meta.pk.name:\n+            parts.pop()\n+\n+        try:\n+            self.model._meta.get_field_by_name(parts[0])\n+        except FieldDoesNotExist:\n+            # Lookups on non-existants fields are ok, since they're ignored\n+            # later.\n+            return True\n+        else:\n+            clean_lookup = LOOKUP_SEP.join(parts)\n+            return clean_lookup in self.list_filter or clean_lookup == self.date_hierarchy\n+\n class ModelAdmin(BaseModelAdmin):\n     \"Encapsulates all admin options and functionality for a given model.\"\n \n\ndiff --git a/django/contrib/admin/views/main.py b/django/contrib/admin/views/main.py\nindex 55e9d6f64a..4303a65a9e 100644\n--- a/django/contrib/admin/views/main.py\n+++ b/django/contrib/admin/views/main.py\n@@ -1,6 +1,7 @@\n from django.contrib.admin.filterspecs import FilterSpec\n from django.contrib.admin.options import IncorrectLookupParameters\n from django.contrib.admin.util import quote\n+from django.core.exceptions import SuspiciousOperation\n from django.core.paginator import Paginator, InvalidPage\n from django.db import models\n from django.db.models.query import QuerySet\n@@ -187,13 +188,18 @@ class ChangeList(object):\n                 else:\n                     lookup_params[key] = True\n \n+            if not self.model_admin.lookup_allowed(key):\n+                raise SuspiciousOperation(\n+                    \"Filtering by %s not allowed\" % key\n+                )\n+\n         # Apply lookup parameters from the query string.\n         try:\n             qs = qs.filter(**lookup_params)\n         # Naked except! Because we don't have any other way of validating \"params\".\n         # They might be invalid if the keyword arguments are incorrect, or if the\n         # values are not in the correct type, so we might get FieldError, ValueError,\n-        # ValicationError, or ? from a custom field that raises yet something else \n+        # ValicationError, or ? from a custom field that raises yet something else\n         # when handed impossible data.\n         except:\n             raise IncorrectLookupParameters\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/regressiontests/admin_views/models.py b/tests/regressiontests/admin_views/models.py\nindex b25a9b9a96..191b4f3783 100644\n--- a/tests/regressiontests/admin_views/models.py\n+++ b/tests/regressiontests/admin_views/models.py\n@@ -92,7 +92,7 @@ class ChapterInline(admin.TabularInline):\n \n class ArticleAdmin(admin.ModelAdmin):\n     list_display = ('content', 'date', callable_year, 'model_year', 'modeladmin_year')\n-    list_filter = ('date',)\n+    list_filter = ('date', 'section')\n \n     def changelist_view(self, request):\n         \"Test that extra_context works\"\n@@ -584,6 +584,9 @@ class Album(models.Model):\n     owner = models.ForeignKey(User)\n     title = models.CharField(max_length=30)\n \n+class AlbumAdmin(admin.ModelAdmin):\n+    list_filter = ['title']\n+\n admin.site.register(Article, ArticleAdmin)\n admin.site.register(CustomArticle, CustomArticleAdmin)\n admin.site.register(Section, save_as=True, inlines=[ArticleInline])\n@@ -630,4 +633,4 @@ admin.site.register(Promo)\n admin.site.register(ChapterXtra1)\n admin.site.register(Pizza, PizzaAdmin)\n admin.site.register(Topping)\n-admin.site.register(Album)\n+admin.site.register(Album, AlbumAdmin)\n\ndiff --git a/tests/regressiontests/admin_views/tests.py b/tests/regressiontests/admin_views/tests.py\nindex 2df6471bff..d3467ddfb2 100644\n--- a/tests/regressiontests/admin_views/tests.py\n+++ b/tests/regressiontests/admin_views/tests.py\n@@ -4,6 +4,7 @@ import re\n import datetime\n \n from django.conf import settings\n+from django.core.exceptions import SuspiciousOperation\n from django.core.files import temp as tempfile\n # Register auth models with the admin.\n from django.contrib.auth import REDIRECT_FIELD_NAME, admin\n@@ -300,6 +301,10 @@ class AdminViewBasicTest(TestCase):\n         self.assertContains(response, 'Choisir une heure')\n         deactivate()\n \n+    def test_disallowed_filtering(self):\n+        self.assertRaises(SuspiciousOperation,\n+            self.client.get, \"/test_admin/admin/admin_views/album/?owner__email__startswith=fuzzy\"\n+        )\n \n class SaveAsTests(TestCase):\n     fixtures = ['admin-views-users.xml','admin-views-person.xml']\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "85207a245bf09fdebe486b4c7bbcb65300f2a693", "source_date": "Thu Dec 23 03:46:16 2010 +0000", "source_tag": "1.2.4", "target_commit": "17084839fd7e267da5729f2a27753322b9d415a0", "target_date": "Thu Dec 23 03:47:38 2010 +0000", "target_tag": "1.1.3", "FAIL TO PASS": ["regressiontests.admin_views.tests.AdminViewBasicTest.test_disallowed_filtering", "regressiontests.admin_views.tests.CustomModelAdminTest.test_disallowed_filtering"], "PASS TO PASS": ["Test add view restricts access and actually adds items.", "A model with a primary key that ends with add should be visible", "regressiontests.admin_views.tests.AdminViewDeletedObjectsTest.test_multiple_fkeys_to_same_instance", "Check that an inline with an editable ordering fields is", "regressiontests.admin_views.tests.AdminViewPermissionsTest.testLoginSuccessfullyRedirectsToOriginalUrl", "Check the never-cache status of a model edit page", "regressiontests.admin_views.tests.AdminViewBasicTest.testChangeListSortingModelAdmin", "A model with an integer PK can be saved as inlines. Regression for #10992", "regressiontests.admin_views.tests.CustomModelAdminTest.testBasicEditGet", "regressiontests.admin_views.tests.AdminViewBasicTest.testBasicAddGet", "Ensure incorrect lookup parameters are handled gracefully.", "regressiontests.admin_views.tests.AdminViewListEditable.test_non_form_errors_is_errorlist", "regressiontests.admin_views.tests.AdminViewBasicTest.testI18NLanguageNonEnglishFallback", "regressiontests.admin_views.tests.CustomModelAdminTest.testCustomAdminSiteIndexViewAndTemplate", "Check the never-cache status of a model delete page", "regressiontests.admin_views.tests.CustomModelAdminTest.testChangeListSortingModelAdmin", "regressiontests.admin_views.tests.CustomModelAdminTest.testNamedGroupFieldChoicesFilter", "regressiontests.admin_views.tests.CustomModelAdminTest.testAddWithGETArgs", "Tests a custom action defined in a ModelAdmin method", "regressiontests.admin_views.tests.AdminViewBasicTest.testBasicAddPost", "regressiontests.admin_views.tests.AdminViewBasicTest.testBasicEditGet", "regressiontests.admin_views.tests.AdminViewPermissionsTest.testLogin", "regressiontests.admin_views.tests.AdminViewUnicodeTest.testUnicodeEdit", "regressiontests.admin_views.tests.AdminViewBasicTest.testChangeListSortingCallable", "Tests a custom action defined in a function", "regressiontests.admin_views.tests.AdminViewPermissionsTest.testCustomModelAdminTemplates", "Check the never-cache status of the Javascript i18n view", "regressiontests.admin_views.tests.CustomModelAdminTest.testLogoutAndPasswordChangeURLs", "regressiontests.admin_views.tests.AdminViewBasicTest.testNamedGroupFieldChoicesFilter", "regressiontests.admin_views.tests.AdminViewBasicTest.testTrailingSlashRequired", "Ensure that inline models which inherit from a common parent are correctly handled by admin.", "regressiontests.admin_views.tests.AdminViewListEditable.test_non_form_errors", "regressiontests.admin_views.tests.AdminViewListEditable.test_inheritance_2", "Retrieving the history for the object using urlencoded form of primary key should work", "Check the never-cache status of a model add page", "regressiontests.admin_views.tests.CustomModelAdminTest.testChangeListSortingModel", "regressiontests.admin_views.tests.AdminActionsTest.test_user_message_on_none_selected", "regressiontests.admin_views.tests.AdminViewListEditable.test_post_messages", "regressiontests.admin_views.tests.CustomModelAdminTest.testI18NLanguageNonEnglishDefault", "Check the never-cache status of logout view", "Ensure admin changelist filters do not contain objects excluded via limit_choices_to.", "regressiontests.admin_views.tests.AdminViewUnicodeTest.testUnicodeDelete", "regressiontests.admin_views.tests.CustomModelAdminTest.testBasicAddGet", "regressiontests.admin_views.tests.CustomModelAdminTest.testBasicEditPost", "The link from the recent actions list referring to the changeform of the object should be quoted", "regressiontests.admin_views.tests.AdminActionsTest.test_multiple_actions_form", "Check the never-cache status of the password change view", "Check the never-cache status of a model index", "regressiontests.admin_views.tests.CustomModelAdminTest.testCustomAdminSiteView", "regressiontests.admin_views.tests.AdminViewDeletedObjectsTest.test_cyclic", "A model with an explicit autofield primary key can be saved as inlines. Regression for #8093", "Check the never-cache status of a model history page", "regressiontests.admin_views.tests.AdminCustomQuerysetTest.test_change_view", "Check the never-cache status of the main index", "regressiontests.admin_views.tests.AdminCustomQuerysetTest.test_changelist_view", "A simple model can be saved as inlines", "regressiontests.admin_views.tests.TestInlineNotEditable.test", "regressiontests.admin_views.tests.AdminViewBasicTest.testBasicEditPost", "A model with a primary key that ends with history should be visible", "Delete view should restrict access and actually delete items.", "Check the never-cache status of login views", "regressiontests.admin_views.tests.CustomModelAdminTest.testTrailingSlashRequired", "Creating table admin_views_bo", "regressiontests.admin_views.tests.CustomModelAdminTest.testCustomAdminSiteLoginTemplate", "An inherited model can be saved as inlines. Regression for #11042", "regressiontests.admin_views.tests.AdminViewListEditable.test_changelist_input_html", "regressiontests.admin_views.tests.SecureViewTest.test_secure_view_login_successfully_redirects_to_original_url", "regressiontests.admin_views.tests.SaveAsTests.test_save_as_display", "Tests that the checkbox column class is present in the response", "Ensure is_null is handled correctly.", "regressiontests.admin_views.tests.CustomModelAdminTest.testChangeListSortingCallable", "regressiontests.admin_views.tests.AdminViewBasicTest.testI18NLanguageNonEnglishDefault", "regressiontests.admin_views.tests.AdminViewBasicTest.testChangeListSortingModel", "Check the never-cache status of the password change done view", "Change view should restrict access and allow users to edit items.", "regressiontests.admin_views.tests.AdminViewDeletedObjectsTest.test_perms_needed", "regressiontests.admin_views.tests.AdminViewListEditable.test_inheritance", "The link from the delete confirmation page referring back to the changeform of the object should be quoted", "regressiontests.admin_views.tests.AdminViewBasicTest.testNamedGroupFieldChoicesChangeList", "Tests a ModelAdmin without any action", "If a LogEntry is missing content_type it will not display it in span tag under the hyperlink.", "Check that a search that mentions sibling models", "regressiontests.admin_views.tests.CustomModelAdminTest.testEditSaveAs", "Ensure save as actually creates a new person", "regressiontests.admin_views.tests.SecureViewTest.test_staff_member_required_decorator_works_as_per_admin_login", "A model with a character PK can be saved as inlines. Regression for #10992", "Check the never-cache status of an application index", "regressiontests.admin_views.tests.AdminViewBasicTest.testAddWithGETArgs", "regressiontests.admin_views.tests.AdminViewDeletedObjectsTest.test_generic_relations", "A model with a primary key that ends with delete should be visible", "The link from the changelist referring to the changeform of the object should be quoted", "Ensure that we see the login form", "regressiontests.admin_views.tests.AdminActionsTest.test_user_message_on_no_action", "regressiontests.admin_views.tests.CustomModelAdminTest.testBasicAddPost", "regressiontests.admin_views.tests.AdminViewListEditable.test_post_submission", "regressiontests.admin_views.tests.CustomModelAdminTest.testNamedGroupFieldChoicesChangeList", "regressiontests.admin_views.tests.CustomModelAdminTest.testBasicEditGetStringPK", "regressiontests.admin_views.tests.AdminViewBasicTest.testBasicEditGetStringPK", "regressiontests.admin_views.tests.AdminViewDeletedObjectsTest.test_multiple_fkeys_to_same_model", "regressiontests.admin_views.tests.AdminViewBasicTest.testLogoutAndPasswordChangeURLs", "Retrieving the object using urlencoded form of primary key should work", "Tests the default delete action defined as a ModelAdmin method", "regressiontests.admin_views.tests.AdminViewDeletedObjectsTest.test_not_registered", "regressiontests.admin_views.tests.AdminViewBasicTest.testEditSaveAs", "regressiontests.admin_views.tests.AdminViewDeletedObjectsTest.test_nesting", "regressiontests.admin_views.tests.CustomModelAdminTest.testI18NLanguageNonEnglishFallback", "regressiontests.admin_views.tests.AdminViewListEditable.test_list_editable_ordering", "regressiontests.admin_views.tests.AdminViewListEditable.test_custom_pk", "regressiontests.admin_views.tests.AdminInlineFileUploadTest.test_inline_file_upload_edit_validation_error_post", "regressiontests.admin_views.tests.AdminViewDeletedObjectsTest.test_inheritance"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_1450", "original_commit_message": "Validate form_redirect_uri parameter against the request host.\n- The form_redirect_uri is now only used if it redirects to the same\nhost as the receiving UAA server.\n[#158222161] https://www.pivotaltracker.com/story/show/158222161\nSigned-off-by: Jaskanwal Pawar <jpawar@pivotal.io>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandler.java b/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandler.java\nindex f8de88d76..ed602321e 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandler.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandler.java\n@@ -21,6 +21,8 @@ import org.springframework.security.web.authentication.SavedRequestAwareAuthenti\n \n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n \n public class UaaSavedRequestAwareAuthenticationSuccessHandler extends SavedRequestAwareAuthenticationSuccessHandler {\n     public static final String SAVED_REQUEST_SESSION_ATTRIBUTE = \"SPRING_SECURITY_SAVED_REQUEST\";\n@@ -38,10 +40,23 @@ public class UaaSavedRequestAwareAuthenticationSuccessHandler extends SavedReque\n         if (redirectAttribute !=null) {\n             logger.debug(\"Returning redirectAttribute saved URI:\"+redirectAttribute);\n             return (String) redirectAttribute;\n-        } else if (redirectFormParam != null) {\n+        } else if (isApprovedFormRedirectUri(request, redirectFormParam)) {\n             return redirectFormParam;\n         } else {\n             return super.determineTargetUrl(request, response);\n         }\n     }\n+\n+    private boolean isApprovedFormRedirectUri(HttpServletRequest request, String redirectUri) {\n+        if (redirectUri == null) {\n+            return false;\n+        }\n+\n+        try {\n+            URL url = new URL(redirectUri);\n+            return request.getServerName().equals(url.getHost());\n+        } catch (MalformedURLException e) {\n+            return false;\n+        }\n+    }\n }\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandlerTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandlerTests.java\nindex 90bc759ff..a8918de43 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandlerTests.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandlerTests.java\n@@ -41,16 +41,26 @@ public class UaaSavedRequestAwareAuthenticationSuccessHandlerTests {\n         assertEquals(\"http://test.com\", handler.determineTargetUrl(request, new MockHttpServletResponse()));\n     }\n \n-    @Test\n-    public void form_parameter_works() {\n-        request.setParameter(FORM_REDIRECT_PARAMETER, \"http://test.com\");\n-        assertEquals(\"http://test.com\", handler.determineTargetUrl(request, new MockHttpServletResponse()));\n-    }\n-\n     @Test\n     public void form_parameter_is_overridden() {\n         request.setParameter(FORM_REDIRECT_PARAMETER, \"http://test.com\");\n         request.setAttribute(URI_OVERRIDE_ATTRIBUTE, \"http://override.test.com\");\n         assertEquals(\"http://override.test.com\", handler.determineTargetUrl(request, new MockHttpServletResponse()));\n     }\n-}\n\\ No newline at end of file\n+\n+    @Test\n+    public void validFormRedirectIsReturned() {\n+        String redirectUri = request.getScheme() + \"://\" + request.getServerName() + \"/test\";\n+\n+        request.setParameter(FORM_REDIRECT_PARAMETER, redirectUri);\n+        assertEquals(redirectUri, handler.determineTargetUrl(request, new MockHttpServletResponse()));\n+    }\n+\n+    @Test\n+    public void invalidFormRedirectIsNotReturned() {\n+        String redirectUri = \"http://test.com/test\";\n+\n+        request.setParameter(FORM_REDIRECT_PARAMETER, redirectUri);\n+        assertEquals(\"/\", handler.determineTargetUrl(request, new MockHttpServletResponse()));\n+    }\n+}\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "7a8f157f7e2feed2d0ebb63b163ff735b6340b96", "source_date": "Tue Jun 12 14:52:02 2018 -0700", "source_tag": "4.19.0", "target_commit": "83c8627c2da7845043b65e6ba354a64b4f9c6e2f", "target_date": "Tue Jun 26 11:42:15 2018 -0700", "target_tag": "4.12.3", "FAIL TO PASS": ["org.cloudfoundry.identity.uaa.web.UaaSavedRequestAwareAuthenticationSuccessHandlerTests > invalidFormRedirectIsNotReturned"], "PASS TO PASS": ["org.cloudfoundry.identity.uaa.provider.ldap.LdapIdentityProviderDefinitionTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.ZoneAwareIdpMetadataGeneratorTest", "org.cloudfoundry.identity.uaa.user.BCryptPasswordEncoderTest", "org.cloudfoundry.identity.uaa.oauth.IntrospectEndpointTest", "org.cloudfoundry.identity.uaa.audit.event.ApprovalModifiedEventTest", "org.cloudfoundry.identity.uaa.authentication.BackwardsCompatibleTokenEndpointAuthenticationFilterTest", ":cloudfoundry-identity-server:processResources", "org.cloudfoundry.identity.uaa.web.UaaSessionCookieConfigTest", "org.cloudfoundry.identity.uaa.util.ColorHashTest", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupProvisioningTests", "org.cloudfoundry.identity.uaa.zone.IdentityZoneHolderTest", "org.cloudfoundry.identity.uaa.authentication.manager.ScopeAuthenticationManagerTests", ":cloudfoundry-identity-model:gitInfo", "org.cloudfoundry.identity.uaa.login.ChangePasswordControllerTest", "org.cloudfoundry.identity.uaa.authentication.ReAuthenticationRequiredFilterTests", "org.cloudfoundry.identity.uaa.authentication.event.UserAuthenticationSuccessEventTests", "org.cloudfoundry.identity.uaa.user.InMemoryUaaUserDatabaseTests", "org.cloudfoundry.identity.uaa.authentication.ClientBasicAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlSessionStorageFactoryTests", "org.cloudfoundry.identity.uaa.scim.ScimGroupMemberTests", "org.cloudfoundry.identity.uaa.codestore.CodeStoreEndpointsTests", "org.cloudfoundry.identity.uaa.scim.endpoints.PasswordResetEndpointTest", "org.cloudfoundry.identity.uaa.oauth.approval.JdbcApprovalStoreTests", "org.cloudfoundry.identity.uaa.mfa.MfaCheckerTests", "org.cloudfoundry.identity.uaa.oauth.openid.IdTokenSerializationTest", "org.cloudfoundry.identity.uaa.oauth.ClientAccessTokenValidityTest", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsTests", "org.cloudfoundry.identity.uaa.authorization.external.LdapGroupMappingAuthorizationManagerTests", "org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationSerializerDeserializerTest", "org.cloudfoundry.identity.uaa.zone.BannerValidatorTest", "org.cloudfoundry.identity.uaa.scim.jdbc.ScimSearchQueryConverterTests", "org.cloudfoundry.identity.uaa.login.EmailInvitationsServiceTests", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimUserProvisioningTests", "org.cloudfoundry.identity.uaa.db.OldAuthzTableDropped", "org.cloudfoundry.identity.uaa.authentication.manager.ChainedAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.error.ConvertingExceptionViewTests", "org.cloudfoundry.identity.uaa.scim.exception.InvalidPasswordExceptionTest", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimGroupBootstrapTests", "org.cloudfoundry.identity.uaa.scim.validate.UaaPasswordPolicyValidatorTests", "org.cloudfoundry.identity.uaa.provider.ldap.DynamicPasswordComparatorTests", "org.cloudfoundry.identity.uaa.authentication.manager.CommonLoginPolicyTest", "org.cloudfoundry.identity.uaa.util.UaaTokenUtilsTest", "org.cloudfoundry.identity.uaa.resources.MessageTests", "org.cloudfoundry.identity.uaa.authentication.manager.ExternalLoginAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.oauth.approval.ApprovalsAdminEndpointsTests", "org.cloudfoundry.identity.uaa.util.LinkedMaskingMultiValueMapTests", "org.cloudfoundry.identity.uaa.authentication.ClientParametersAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.client.SocialClientUserDetailsSourceTests", ":cloudfoundry-identity-server:compileJava", "org.cloudfoundry.identity.uaa.oauth.token.AddTokenGranterTests", "org.cloudfoundry.identity.uaa.provider.saml.LoginSAMLAuthenticationFailureHandlerTest", "org.cloudfoundry.identity.uaa.authentication.AuthzAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.error.UaaExceptionTests", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimUserBootstrapTests", "org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationEndpointTest", ":cloudfoundry-identity-model:mainOutputResourcesDir", "org.cloudfoundry.identity.uaa.db.TestThatClientIdIsVchar255", "org.cloudfoundry.identity.uaa.db.DatabaseParametersTests", "org.cloudfoundry.identity.uaa.login.ForcePasswordChangeControllerTest", "org.cloudfoundry.identity.uaa.login.AutologinAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.util.DomainFilterTest", "org.cloudfoundry.identity.uaa.provider.ldap.ExtendedLdapUserMapperTest", "org.cloudfoundry.identity.uaa.scim.ScimUserTests", "org.cloudfoundry.identity.uaa.oauth.token.LargeRevocableTokenDeleteTests", "org.cloudfoundry.identity.uaa.audit.JdbcFailedLoginCountingAuditServiceTests", "org.cloudfoundry.identity.uaa.login.NotificationsServiceTest", "org.cloudfoundry.identity.uaa.oauth.UaaUserApprovalHandlerTests", "org.cloudfoundry.identity.uaa.oauth.RemoteTokenServicesTests", "org.cloudfoundry.identity.uaa.login.UsernamePasswordExtractingAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.zone.GeneralIdentityZoneValidatorTests", "org.cloudfoundry.identity.uaa.oauth.OpenIdSessionStateCalculatorTest", "org.cloudfoundry.identity.uaa.client.JdbcClientMetadataProvisioningTest", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthAuthenticationManagerIT", "org.cloudfoundry.identity.uaa.util.KeyWithCertTest", "org.cloudfoundry.identity.uaa.oauth.client.ClientDetailsModificationTests", "org.cloudfoundry.identity.uaa.web.HttpHeadersFilterRequestWrapperTest", "org.cloudfoundry.identity.uaa.zone.ZoneAwareClientSecretPolicyValidatorTests", "org.cloudfoundry.identity.uaa.zone.event.IdentityProviderModifiedEventTest", ":cloudfoundry-identity-metrics-data:classes", "org.cloudfoundry.identity.uaa.login.ResetPasswordControllerTest", "org.cloudfoundry.identity.uaa.authentication.login.RemoteAuthenticationEndpointTests", "org.cloudfoundry.identity.uaa.provider.saml.ZoneAwareMetadataGeneratorTests", "org.cloudfoundry.identity.uaa.db.ClientDetailsSupportsExtendedAuthoritesAndScopes", "org.cloudfoundry.identity.uaa.test.CreateDB", "org.cloudfoundry.identity.uaa.mfa.StatelessMfaAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.oauth.token.Saml2TokenGranterTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpWebSsoProfileImplTest", "org.cloudfoundry.identity.uaa.util.log.LineAwareLayoutTest", "org.cloudfoundry.identity.uaa.zone.IdentityZoneResolvingFilterTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.SamlServiceProviderConfiguratorTest", "org.cloudfoundry.identity.uaa.metrics.QueryFilterTests", "org.cloudfoundry.identity.uaa.security.web.CorsFilterTests", "org.cloudfoundry.identity.uaa.oauth.token.JwtTokenGranterTests", "org.cloudfoundry.identity.uaa.security.web.SecurityFilterChainPostProcessorTests", "org.cloudfoundry.identity.uaa.login.util.FakeJavaMailSenderTest", "org.cloudfoundry.identity.uaa.web.ForwardAwareInternalResourceViewResolverTests", "org.cloudfoundry.identity.uaa.web.ExceptionReportHttpMessageConverterTest", "org.cloudfoundry.identity.uaa.db.TableAndColumnNormalizationTest", ":cloudfoundry-identity-server:testClasses", "org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcherTests", "org.cloudfoundry.identity.uaa.resources.jdbc.JdbcSqlAdapterTests", "org.cloudfoundry.identity.uaa.oauth.jwk.JsonWebKeySetTests", "org.cloudfoundry.identity.uaa.provider.RestTemplateSslIT", "org.cloudfoundry.identity.uaa.mfa.UserGoogleMfaCredentialsProvisioningTest", "org.cloudfoundry.identity.uaa.authentication.SystemAuthenticationTest", "org.cloudfoundry.identity.uaa.oauth.CheckTokenEndpointTests", "org.cloudfoundry.identity.uaa.authentication.SessionResetFilterTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserEndpointsTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlMessageStorageTest", "org.cloudfoundry.identity.uaa.provider.oauth.OauthIdentityProviderDefinitionFactoryBeanTest", "org.cloudfoundry.identity.uaa.authentication.PasswordChangeUiRequiredFilterTest", "org.cloudfoundry.identity.uaa.user.UaaAuthorityTests", "org.cloudfoundry.identity.uaa.config.YamlServletProfileInitializerTests", "org.cloudfoundry.identity.uaa.mfa.JdbcUserGoogleMfaCredentialsProvisioningTest", "org.cloudfoundry.identity.uaa.db.MySqlDbMigrationIntegrationTest", "org.cloudfoundry.identity.uaa.web.RecognizeFailureDispatcherServletTest", "org.cloudfoundry.identity.uaa.db.GroupMembershipAuthoritiesNullableTest", "org.cloudfoundry.identity.uaa.db.GoogleAuthUserConfigTableTest", "org.cloudfoundry.identity.uaa.login.EmailAccountCreationServiceTests", "org.cloudfoundry.identity.uaa.client.OAuth2ClientAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.user.UaaUserEditorTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlKeyManagerFactoryTests", "org.cloudfoundry.identity.uaa.security.CsrfAwareEntryPointAndDeniedHandlerTest", "org.cloudfoundry.identity.uaa.login.PasswordConfirmationValidationTest", "org.cloudfoundry.identity.uaa.login.EmailServiceTests", "org.cloudfoundry.identity.uaa.db.StoreSubDomainAsLowerCase_V2_7_3_Tests", "org.cloudfoundry.identity.uaa.invitations.InvitationsControllerTest", "org.cloudfoundry.identity.uaa.provider.saml.LoginSamlAuthenticationProviderTests", "org.cloudfoundry.identity.uaa.account.PasswordChangeEndpointTests", "org.cloudfoundry.identity.uaa.authentication.PasswordChangeRequiredFilterTests", "org.cloudfoundry.identity.uaa.login.SamlLoginServerKeyManagerTests", "org.cloudfoundry.identity.uaa.security.X509ExpiryCheckingTrustManagerTest", "org.cloudfoundry.identity.uaa.oauth.UserManagedAuthzApprovalHandlerTests", "org.cloudfoundry.identity.uaa.logging.LogSanitizerUtilTest", "org.cloudfoundry.identity.uaa.db.SqlServerDbMigrationIntegrationTest", "org.cloudfoundry.identity.uaa.invitations.InvitationsAuthenticationTrustResolverTest", "org.cloudfoundry.identity.uaa.scim.endpoints.UserIdConversionEndpointsTests", ":cloudfoundry-identity-metrics-data:jar", "org.cloudfoundry.identity.uaa.util.EnsureOldLibrariesAreRemoved", ":cloudfoundry-identity-server:processTestResources", "org.cloudfoundry.identity.uaa.oauth.jwt.ChainedSignatureVerifierTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ChangeEmailEndpointsTest", "org.cloudfoundry.identity.uaa.account.ResetPasswordAuthenticationEntryPointTests", "org.cloudfoundry.identity.uaa.config.EnvironmentPropertiesFactoryBeanTests", ":cloudfoundry-identity-model:compileJava", "org.cloudfoundry.identity.uaa.resources.jdbc.LimitSqlAdapterFactoryTest", "org.cloudfoundry.identity.uaa.provider.saml.SamlConfigurationBeanTest", "org.cloudfoundry.identity.uaa.util.NullifyFieldsTest", "org.cloudfoundry.identity.uaa.oauth.UaaTokenServicesTests", "org.cloudfoundry.identity.uaa.oauth.UaaOauth2ErrorHandlerTests", "org.cloudfoundry.identity.uaa.provider.IdentityProviderConfigValidationDelegatorTest", "org.cloudfoundry.identity.uaa.authentication.ZoneAwareWhitelistLogoutHandlerTests", "org.cloudfoundry.identity.uaa.provider.LockoutPolicyTests", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthIdentityProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.authentication.manager.KeystoneAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.zone.IdentityZoneSwitchingFilterTests", "org.cloudfoundry.identity.uaa.client.ClientAdminEndpointsValidatorTests", "org.cloudfoundry.identity.uaa.metrics.IdleTimerTests", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeTests", "org.cloudfoundry.identity.uaa.util.TimeBasedExpiringValueMapTest", "org.cloudfoundry.identity.uaa.oauth.UaaScopesTests", "org.cloudfoundry.identity.uaa.config.EnvironmentMapFactoryBeanTests", "org.cloudfoundry.identity.uaa.oauth.jwt.JwtHelperTest", "org.cloudfoundry.identity.uaa.mfa.MfaUiRequiredFilterTests", "org.cloudfoundry.identity.uaa.oauth.ZoneEndpointsClientDetailsValidatorTests", "org.cloudfoundry.identity.uaa.db.ClientDetailsHasRequiredUserScopes", "org.cloudfoundry.identity.uaa.zone.GeneralIdentityZoneConfigurationValidatorTests", "org.cloudfoundry.identity.uaa.authentication.UaaClientAuthenticationProviderTest", "org.cloudfoundry.identity.uaa.openid.UserInfoEndpointTests", "org.cloudfoundry.identity.uaa.client.ClientAdminBootstrapTests", "org.cloudfoundry.identity.uaa.audit.event.AuditListenerTests", "org.cloudfoundry.identity.uaa.oauth.openid.IdTokenCreatorTest", "org.cloudfoundry.identity.uaa.oauth.jwt.CommonSignatureVerifierTest", "org.cloudfoundry.identity.uaa.authentication.CurrentUserCookieRequestFilterTest", "org.cloudfoundry.identity.uaa.oauth.token.KeyInfoTests", "org.cloudfoundry.identity.uaa.zone.IdentityZoneEndpointsTests", "org.cloudfoundry.identity.uaa.account.PasswordCheckEndpointTests", "org.cloudfoundry.identity.uaa.zone.MfaConfigValidatorTests", "org.cloudfoundry.identity.uaa.config.YamlPropertiesFactoryBeanTests", "org.cloudfoundry.identity.uaa.authentication.manager.LoginAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.util.UaaMapUtilsTest", "org.cloudfoundry.identity.uaa.scim.util.ScimUtilsTest", "org.cloudfoundry.identity.uaa.oauth.TokenRevocationEndpointTests", "org.cloudfoundry.identity.uaa.zone.JdbcIdentityZoneProvisioningTests", "org.cloudfoundry.identity.uaa.login.CurrentUserCookieFactoryTest", "org.cloudfoundry.identity.uaa.oauth.DisableIdTokenResponseTypeFilterTest", "org.cloudfoundry.identity.uaa.authentication.UTF8ConversionFilterTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlRedirectUtilsTest", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.util.CachingPasswordEncoderTest", "org.cloudfoundry.identity.uaa.login.ProfileControllerTests", "org.cloudfoundry.identity.uaa.audit.AuditEventTypeTests", "org.cloudfoundry.identity.uaa.oauth.RestrictUaaScopesClientValidatorTest", "org.cloudfoundry.identity.uaa.config.IdentityZoneConfigurationBootstrapTests", "org.cloudfoundry.identity.uaa.provider.saml.ConfigMetadataProviderTest", "org.cloudfoundry.identity.uaa.oauth.token.UaaTokenEndpointTests", "org.cloudfoundry.identity.uaa.resources.jdbc.LimitSqlAdapterTests", "org.cloudfoundry.identity.uaa.scim.ScimCoreTests", "org.cloudfoundry.identity.uaa.config.NestedMapPropertySourceTests", "org.cloudfoundry.identity.uaa.oauth.jwt.CommonSignerTest", "org.cloudfoundry.identity.uaa.authentication.manager.CheckIdpEnabledAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.oauth.event.ClientAdminEventPublisherTests", "org.cloudfoundry.identity.uaa.zone.InvalidClientSecretExceptionTests", "org.cloudfoundry.identity.uaa.web.LimitedModeUaaFilterTests", "org.cloudfoundry.identity.uaa.web.UaaSavedRequestCacheTests", "org.cloudfoundry.identity.uaa.impl.config.YamlServletProfileInitializerTest", "org.cloudfoundry.identity.uaa.db.RevocableTokenIndexTest_4_0_8", "org.cloudfoundry.identity.uaa.provider.saml.SamlIdentityProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.resources.jdbc.JdbcPagingListTests", "org.cloudfoundry.identity.uaa.login.TotpMfaEndpointTest", "org.cloudfoundry.identity.uaa.mfa.MfaProviderBootstrapTest", "org.cloudfoundry.identity.uaa.login.AccountsControllerTest", "org.cloudfoundry.identity.uaa.audit.JdbcAuditServiceTests", "org.cloudfoundry.identity.uaa.util.TestUaaUrlBuilderTest", "org.cloudfoundry.identity.uaa.config.YamlBindingTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpSamlAuthenticationSuccessHandlerTest", "org.cloudfoundry.identity.uaa.authentication.manager.AuthzAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.oauth.ClientInfoEndpointTests", "org.cloudfoundry.identity.uaa.provider.ldap.ProcessLdapPropertiesTest", "org.cloudfoundry.identity.uaa.config.PasswordPolicyTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.NonSnarlIdpMetadataManagerTest", "org.cloudfoundry.identity.uaa.test.UaaTestAccountsTest", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeStoreTests", "org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationDetailsTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.JdbcSamlServiceProviderProvisioningTest", "org.cloudfoundry.identity.uaa.oauth.AntPathRedirectResolverTests", "org.cloudfoundry.identity.uaa.util.UaaHttpRequestUtilsTest", "org.cloudfoundry.identity.uaa.audit.event.SystemDeletableTest", "org.cloudfoundry.identity.uaa.oauth.JdbcQueryableClientDetailsServiceTests", "org.cloudfoundry.identity.uaa.user.JdbcUaaUserDatabaseTests", "org.cloudfoundry.identity.uaa.authentication.listener.AuthenticationSuccessListenerTests", "org.cloudfoundry.identity.uaa.impl.config.ScimExternalGroupsTypeResolvingFactoryBeanTest", "org.cloudfoundry.identity.uaa.account.ResetPasswordAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.mfa.JdbcMfaProviderProvisioningTest", "org.cloudfoundry.identity.uaa.config.YamlConfigurationValidatorTests", "org.cloudfoundry.identity.uaa.db.HsqlDbMigrationIntegrationTest", "org.cloudfoundry.identity.uaa.db.ExpiringCodeTableTest", "org.cloudfoundry.identity.uaa.db.PostgresDbMigrationIntegrationTest", "org.cloudfoundry.identity.uaa.login.HomeControllerViewTests", "org.cloudfoundry.identity.uaa.oauth.AccessControllerTests", "org.cloudfoundry.identity.uaa.config.IdentityZoneConfigurationTests", "org.cloudfoundry.identity.uaa.authentication.manager.PeriodLockoutPolicyTests", "org.cloudfoundry.identity.uaa.provider.uaa.UaaIdentityProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.config.YamlMapFactoryBeanTests", "org.cloudfoundry.identity.uaa.db.TestSchemaValidation", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupMembershipManagerTests", "org.cloudfoundry.identity.uaa.web.HeaderFilterTest", "org.cloudfoundry.identity.uaa.web.CookieBasedCsrfTokenRepositoryTests", "org.cloudfoundry.identity.uaa.zone.JdbcIdentityProviderProvisioningTests", "org.cloudfoundry.identity.uaa.audit.event.EntityDeletedEventTest", "org.cloudfoundry.identity.uaa.login.UaaChangePasswordServiceTest", "org.cloudfoundry.identity.uaa.resources.jdbc.SimpleSearchQueryConverterTests", "org.cloudfoundry.identity.uaa.oauth.approval.ApprovalTests", "org.cloudfoundry.identity.uaa.util.log.SyslogAppenderTest", "org.cloudfoundry.identity.uaa.login.LoginInfoEndpointTests", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupExternalMembershipManagerTests", "org.cloudfoundry.identity.uaa.mfa.MfaProviderEndpointsTest", "org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationEndpointParamaterizedTest", ":cloudfoundry-identity-server:compileTestJava", "org.cloudfoundry.identity.uaa.provider.ldap.LdapIdentityProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.SamlServiceProviderDefinitionTest", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimExternalGroupBootstrapTests", "org.cloudfoundry.identity.uaa.oauth.UaaTokenStoreTests", "org.cloudfoundry.identity.uaa.authentication.WhitelistLogoutHandlerTest", "org.cloudfoundry.identity.uaa.oauth.token.UserTokenGranterTest", "org.cloudfoundry.identity.uaa.client.ClientAdminEndpointsTests", "org.cloudfoundry.identity.uaa.util.UaaPagingUtilsTests", "org.cloudfoundry.identity.uaa.db.RevocableTokenTableTest", "org.cloudfoundry.identity.uaa.util.TokenValidationTest", "org.cloudfoundry.identity.uaa.login.EmailChangeEmailServiceTest", "org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationSerializationTests", "org.cloudfoundry.identity.uaa.oauth.expression.IsSelfCheckTest", "org.cloudfoundry.identity.uaa.zone.MultitenantJdbcClientDetailsServiceTests", "org.cloudfoundry.identity.uaa.db.UserInfoTableTest", "org.cloudfoundry.identity.uaa.cache.ExpiringUrlCacheTests", ":cloudfoundry-identity-model:classes", "org.cloudfoundry.identity.uaa.util.UaaStringUtilsTest", "org.cloudfoundry.identity.uaa.zone.event.IdentityZoneModifiedEventTest", "org.cloudfoundry.identity.uaa.security.DefaultSecurityContextAccessorTests", "org.cloudfoundry.identity.uaa.metrics.UaaMetricsFilterTests", "org.cloudfoundry.identity.uaa.authentication.SamlAssertionBindingTests", "org.cloudfoundry.identity.uaa.util.RestTemplateFactoryTests", "org.cloudfoundry.identity.uaa.oauth.token.JdbcRevocableTokenProvisioningTest", ":cloudfoundry-identity-model:buildInfo", "org.cloudfoundry.identity.uaa.mfa.MfaRegisterQRGeneratorTest", ":cloudfoundry-identity-model:processResources", ":cloudfoundry-identity-model:jar", "org.cloudfoundry.identity.uaa.provider.saml.BootstrapSamlIdentityProviderDataTests", "org.cloudfoundry.identity.uaa.logging.SanitizedLogFactoryTest", "org.cloudfoundry.identity.uaa.login.ChangeEmailControllerTest", "org.cloudfoundry.identity.uaa.account.event.PasswordChangeEventPublisherTests", "org.cloudfoundry.identity.uaa.util.LowConcurrencyPasswordEncoderTests", "org.cloudfoundry.identity.uaa.db.TestDataSourcePool", "org.cloudfoundry.identity.uaa.config.IdentityProviderBootstrapTest", ":cloudfoundry-identity-server:classes", "org.cloudfoundry.identity.uaa.zone.event.ServiceProviderModifiedEventTest", ":cloudfoundry-identity-metrics-data:processResources", "org.cloudfoundry.identity.uaa.web.SessionIdleTimeoutSetterTest", "org.cloudfoundry.identity.uaa.provider.saml.ComparableProviderTest", "org.cloudfoundry.identity.uaa.web.HealthzEndpointTests", "org.cloudfoundry.identity.uaa.provider.IdentityProviderEndpointsTest", "org.cloudfoundry.identity.uaa.login.UaaAuthenticationFailureHandlerTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpInitiatedLoginControllerTests", ":cloudfoundry-identity-metrics-data:compileJava", "org.cloudfoundry.identity.uaa.provider.saml.SamlIdentityProviderDefinitionTests", "org.cloudfoundry.identity.uaa.oauth.token.TokenKeyEndpointTests", "org.cloudfoundry.identity.uaa.oauth.TokenValidityResolverTest", "org.cloudfoundry.identity.uaa.audit.LoggingAuditServiceTest", "org.cloudfoundry.identity.uaa.db.OauthCodeIndexTest", "org.cloudfoundry.identity.uaa.client.SourceTests", "org.cloudfoundry.identity.uaa.login.UaaResetPasswordServiceTests", "org.cloudfoundry.identity.uaa.authentication.manager.LdapLoginAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.provider.KeystoneIdentityProviderDefinitionTest", "org.cloudfoundry.identity.uaa.mfa.MfaRequiredFilterTests", "org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationRequestManagerTests", "org.cloudfoundry.identity.uaa.util.UaaUrlUtilsTest", "org.cloudfoundry.identity.uaa.login.AccountSavingAuthenticationSuccessHandlerTest", "org.cloudfoundry.identity.uaa.oauth.ClientRefreshTokenValidityTest", "org.cloudfoundry.identity.uaa.oauth.jwk.RsaJsonWebKeyTests", "org.cloudfoundry.identity.uaa.mfa.GeneralMfaProviderValidatorTest"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_430", "original_commit_message": "[1.4.x] Added a default limit to the maximum number of forms in a formset.\nThis is a security fix. Disclosure and advisory coming shortly.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex dcd2f017e7..7feeeb1a13 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -19,6 +19,9 @@ MAX_NUM_FORM_COUNT = 'MAX_NUM_FORMS'\n ORDERING_FIELD_NAME = 'ORDER'\n DELETION_FIELD_NAME = 'DELETE'\n \n+# default maximum number of forms in a formset, to prevent memory exhaustion\n+DEFAULT_MAX_NUM = 1000\n+\n class ManagementForm(Form):\n     \"\"\"\n     ``ManagementForm`` is used to keep track of how many form instances\n@@ -111,7 +114,7 @@ class BaseFormSet(StrAndUnicode):\n     def _construct_forms(self):\n         # instantiate all the forms and put them in self.forms\n         self.forms = []\n-        for i in xrange(self.total_form_count()):\n+        for i in xrange(min(self.total_form_count(), self.absolute_max)):\n             self.forms.append(self._construct_form(i))\n \n     def _construct_form(self, i, **kwargs):\n@@ -360,9 +363,14 @@ class BaseFormSet(StrAndUnicode):\n def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,\n                     can_delete=False, max_num=None):\n     \"\"\"Return a FormSet for the given form class.\"\"\"\n+    if max_num is None:\n+        max_num = DEFAULT_MAX_NUM\n+    # hard limit on forms instantiated, to prevent memory-exhaustion attacks\n+    # limit defaults to DEFAULT_MAX_NUM, but developer can increase it via max_num\n+    absolute_max = max(DEFAULT_MAX_NUM, max_num)\n     attrs = {'form': form, 'extra': extra,\n              'can_order': can_order, 'can_delete': can_delete,\n-             'max_num': max_num}\n+             'max_num': max_num, 'absolute_max': absolute_max}\n     return type(form.__name__ + 'FormSet', (formset,), attrs)\n \n def all_valid(formsets):\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/regressiontests/forms/tests/formsets.py b/tests/regressiontests/forms/tests/formsets.py\nindex 05ef978c45..7c69e7e20a 100644\n--- a/tests/regressiontests/forms/tests/formsets.py\n+++ b/tests/regressiontests/forms/tests/formsets.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from django.forms import Form, CharField, IntegerField, ValidationError, DateField\n+from django.forms import Form, CharField, IntegerField, ValidationError, DateField, formsets\n from django.forms.formsets import formset_factory, BaseFormSet\n from django.test import TestCase\n \n@@ -47,7 +47,7 @@ class FormsFormsetTestCase(TestCase):\n         # for adding data. By default, it displays 1 blank form. It can display more,\n         # but we'll look at how to do so later.\n         formset = ChoiceFormSet(auto_id=False, prefix='choices')\n-        self.assertHTMLEqual(str(formset), \"\"\"<input type=\"hidden\" name=\"choices-TOTAL_FORMS\" value=\"1\" /><input type=\"hidden\" name=\"choices-INITIAL_FORMS\" value=\"0\" /><input type=\"hidden\" name=\"choices-MAX_NUM_FORMS\" />\n+        self.assertHTMLEqual(str(formset), \"\"\"<input type=\"hidden\" name=\"choices-TOTAL_FORMS\" value=\"1\" /><input type=\"hidden\" name=\"choices-INITIAL_FORMS\" value=\"0\" /><input type=\"hidden\" name=\"choices-MAX_NUM_FORMS\" value=\"1000\" />\n <tr><th>Choice:</th><td><input type=\"text\" name=\"choices-0-choice\" /></td></tr>\n <tr><th>Votes:</th><td><input type=\"text\" name=\"choices-0-votes\" /></td></tr>\"\"\")\n \n@@ -650,8 +650,8 @@ class FormsFormsetTestCase(TestCase):\n         # Limiting the maximum number of forms ########################################\n         # Base case for max_num.\n \n-        # When not passed, max_num will take its default value of None, i.e. unlimited\n-        # number of forms, only controlled by the value of the extra parameter.\n+        # When not passed, max_num will take a high default value, leaving the\n+        # number of forms only controlled by the value of the extra parameter.\n \n         LimitedFavoriteDrinkFormSet = formset_factory(FavoriteDrinkForm, extra=3)\n         formset = LimitedFavoriteDrinkFormSet()\n@@ -698,8 +698,8 @@ class FormsFormsetTestCase(TestCase):\n     def test_max_num_with_initial_data(self):\n         # max_num with initial data\n \n-        # When not passed, max_num will take its default value of None, i.e. unlimited\n-        # number of forms, only controlled by the values of the initial and extra\n+        # When not passed, max_num will take a high default value, leaving the\n+        # number of forms only controlled by the value of the initial and extra\n         # parameters.\n \n         initial = [\n@@ -844,6 +844,64 @@ class FormsFormsetTestCase(TestCase):\n         self.assertEqual(len(formset.forms), 0)\n         self.assertTrue(formset)\n \n+    def test_hard_limit_on_instantiated_forms(self):\n+        \"\"\"A formset has a hard limit on the number of forms instantiated.\"\"\"\n+        # reduce the default limit of 1000 temporarily for testing\n+        _old_DEFAULT_MAX_NUM = formsets.DEFAULT_MAX_NUM\n+        try:\n+            formsets.DEFAULT_MAX_NUM = 3\n+            ChoiceFormSet = formset_factory(Choice)\n+            # someone fiddles with the mgmt form data...\n+            formset = ChoiceFormSet(\n+                {\n+                    'choices-TOTAL_FORMS': '4',\n+                    'choices-INITIAL_FORMS': '0',\n+                    'choices-MAX_NUM_FORMS': '4',\n+                    'choices-0-choice': 'Zero',\n+                    'choices-0-votes': '0',\n+                    'choices-1-choice': 'One',\n+                    'choices-1-votes': '1',\n+                    'choices-2-choice': 'Two',\n+                    'choices-2-votes': '2',\n+                    'choices-3-choice': 'Three',\n+                    'choices-3-votes': '3',\n+                    },\n+                prefix='choices',\n+                )\n+            # But we still only instantiate 3 forms\n+            self.assertEqual(len(formset.forms), 3)\n+        finally:\n+            formsets.DEFAULT_MAX_NUM = _old_DEFAULT_MAX_NUM\n+\n+    def test_increase_hard_limit(self):\n+        \"\"\"Can increase the built-in forms limit via a higher max_num.\"\"\"\n+        # reduce the default limit of 1000 temporarily for testing\n+        _old_DEFAULT_MAX_NUM = formsets.DEFAULT_MAX_NUM\n+        try:\n+            formsets.DEFAULT_MAX_NUM = 3\n+            # for this form, we want a limit of 4\n+            ChoiceFormSet = formset_factory(Choice, max_num=4)\n+            formset = ChoiceFormSet(\n+                {\n+                    'choices-TOTAL_FORMS': '4',\n+                    'choices-INITIAL_FORMS': '0',\n+                    'choices-MAX_NUM_FORMS': '4',\n+                    'choices-0-choice': 'Zero',\n+                    'choices-0-votes': '0',\n+                    'choices-1-choice': 'One',\n+                    'choices-1-votes': '1',\n+                    'choices-2-choice': 'Two',\n+                    'choices-2-votes': '2',\n+                    'choices-3-choice': 'Three',\n+                    'choices-3-votes': '3',\n+                    },\n+                prefix='choices',\n+                )\n+            # This time four forms are instantiated\n+            self.assertEqual(len(formset.forms), 4)\n+        finally:\n+            formsets.DEFAULT_MAX_NUM = _old_DEFAULT_MAX_NUM\n+\n \n data = {\n     'choices-TOTAL_FORMS': '1', # the number of forms rendered\n\ndiff --git a/tests/regressiontests/generic_inline_admin/tests.py b/tests/regressiontests/generic_inline_admin/tests.py\nindex db81eec47a..237e396dd2 100644\n--- a/tests/regressiontests/generic_inline_admin/tests.py\n+++ b/tests/regressiontests/generic_inline_admin/tests.py\n@@ -7,6 +7,7 @@ from django.contrib import admin\n from django.contrib.admin.sites import AdminSite\n from django.contrib.contenttypes.generic import (\n     generic_inlineformset_factory, GenericTabularInline)\n+from django.forms.formsets import DEFAULT_MAX_NUM\n from django.forms.models import ModelForm\n from django.test import TestCase\n \n@@ -241,7 +242,7 @@ class GenericInlineModelAdminTest(TestCase):\n \n         # Create a formset with default arguments\n         formset = media_inline.get_formset(request)\n-        self.assertEqual(formset.max_num, None)\n+        self.assertEqual(formset.max_num, DEFAULT_MAX_NUM)\n         self.assertEqual(formset.can_order, False)\n \n         # Create a formset with custom keyword arguments\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "0cc350a896f70ace18280410eb616a9197d862b0", "source_date": "Tue Feb 19 10:37:54 2013 -0700", "source_tag": "1.4.4", "target_commit": "d7094bbce8cb838f3b40f504f198c098ff1cf727", "target_date": "Tue Feb 12 12:13:42 2013 +0100", "target_tag": "1.3.6", "FAIL TO PASS": ["regressiontests.forms.tests.formsets.FormsFormsetTestCase.test_basic_formset", "regressiontests.forms.tests.formsets.FormsFormsetTestCase.test_hard_limit_on_instantiated_forms", "regressiontests.forms.tests.formsets.FormsFormsetTestCase.test_increase_hard_limit"], "PASS TO PASS": ["regressiontests.forms.tests.fields.FieldsTests.test_booleanfield_1", "regressiontests.forms.localflavor.au.AULocalFlavorTests.test_AUPostCodeField", "regressiontests.forms.tests.forms.FormsTestCase.test_dynamic_initial_data", "regressiontests.forms.tests.input_formats.SimpleDateFormatTests.test_dateField", "regressiontests.forms.tests.forms.FormsTestCase.test_hidden_widget", "regressiontests.forms.localflavor.tr.TRLocalFlavorTests.test_TRPostalCodeField", "regressiontests.forms.tests.formsets.FormsFormsetTestCase.test_empty_ordered_fields", "regressiontests.forms.localflavor.us.USLocalFlavorTests.test_USPhoneNumberField", "regressiontests.forms.tests.fields.FieldsTests.test_timefield_1", "regressiontests.forms.tests.extra.FormsExtraL10NTestCase.test_l10n_invalid_date_in", "regressiontests.forms.tests.formsets.FormsetAsFooTests.test_as_p", "regressiontests.forms.tests.fields.FieldsTests.test_floatfield_1", "regressiontests.forms.tests.formsets.FormsetAsFooTests.test_as_table", "regressiontests.forms.tests.input_formats.CustomDateInputFormatsTests.test_localized_dateField_with_inputformat", "regressiontests.forms.localflavor.sk.SKLocalFlavorTests.test_SKRegionSelect", "regressiontests.forms.tests.input_formats.SimpleTimeFormatTests.test_timeField", "regressiontests.forms.tests.forms.FormsTestCase.test_auto_id_true", "regressiontests.forms.tests.fields.FieldsTests.test_filefield_2", "regressiontests.forms.tests.error_messages.FormsErrorMessagesTestCase.test_urlfield", "regressiontests.generic_inline_admin.tests.GenericAdminViewTest.testBasicEditPost", "regressiontests.generic_inline_admin.tests.GenericAdminViewTest.testBasicEditGet", "regressiontests.forms.tests.input_formats.LocalizedDateTests.test_localized_dateField_with_inputformat", "regressiontests.forms.tests.fields.FieldsTests.test_nullbooleanfield_4", "regressiontests.forms.localflavor.br.BRLocalFlavorTests.test_BRStateChoiceField", "regressiontests.forms.localflavor.sk.SKLocalFlavorTests.test_SKPostalCodeField", "regressiontests.forms.tests.fields.FieldsTests.test_typedmultiplechoicefield_7", "regressiontests.forms.tests.fields.FieldsTests.test_charfield_3", "regressiontests.forms.tests.fields.FieldsTests.test_email_regexp_for_performance", "regressiontests.forms.tests.media.StaticFormsMediaTestCase.test_media_inheritance_extends", "regressiontests.forms.localflavor.es.ESLocalFlavorTests.test_ESPhoneNumberField", "regressiontests.forms.tests.forms.FormsTestCase.test_id_on_field", "regressiontests.forms.localflavor.us.USLocalFlavorTests.test_USZipCodeField", "regressiontests.forms.tests.widgets.FormsWidgetTestCase.test_nullbooleanselect", "regressiontests.forms.localflavor.br.BRLocalFlavorTests.test_BRCNPJField", "regressiontests.forms.tests.formsets.TestIsBoundBehavior.test_empty_forms_are_unbound", "regressiontests.forms.localflavor.ch.CHLocalFlavorTests.test_CHIdentityCardNumberField", "regressiontests.forms.tests.input_formats.CustomTimeInputFormatsTests.test_localized_timeField_with_inputformat", "regressiontests.forms.localflavor.ro.ROLocalFlavorTests.test_ROIBANField", "regressiontests.forms.tests.util.FormsUtilTestCase.test_flatatt", "regressiontests.forms.tests.forms.FormsTestCase.test_various_boolean_values", "regressiontests.forms.tests.input_formats.SimpleTimeFormatTests.test_localized_timeField", "regressiontests.forms.tests.widgets.WidgetTests.test_13390", "regressiontests.forms.tests.formsets.FormsFormsetTestCase.test_second_form_partially_filled_2", "regressiontests.forms.tests.error_messages.FormsErrorMessagesTestCase.test_booleanfield", "regressiontests.forms.tests.media.FormsMediaTestCase.test_combine_media", "regressiontests.forms.tests.fields.FieldsTests.test_datetimefield_1", "regressiontests.forms.tests.widgets.FormsWidgetTestCase.test_checkboxinput", "regressiontests.forms.tests.widgets.FormsWidgetTestCase.test_selectmultiple", "regressiontests.forms.tests.input_formats.SimpleDateTimeFormatTests.test_localized_dateTimeField_with_inputformat", "regressiontests.forms.tests.fields.FieldsTests.test_multiplechoicefield_1", "regressiontests.forms.tests.fields.FieldsTests.test_typedchoicefield_5", "regressiontests.forms.localflavor.cz.CZLocalFlavorTests.test_CZBirthNumberField", "regressiontests.forms.tests.forms.FormsTestCase.test_templates_with_forms", "regressiontests.forms.localflavor.id.IDLocalFlavorTests.test_IDLicensePlatePrefixSelect", "regressiontests.forms.tests.extra.FormsExtraTestCase.test_accessing_clean", "regressiontests.forms.localflavor.nl.NLLocalFlavorTests.test_NLProvinceSelect", "regressiontests.forms.tests.widgets.FormsWidgetTestCase.test_fileinput", "regressiontests.forms.tests.fields.FieldsTests.test_decimalfield_2", "regressiontests.forms.tests.extra.FormsExtraTestCase.test_smart_unicode", "regressiontests.forms.tests.widgets.FormsI18NWidgetsTestCase.test_datetimeinput", "regressiontests.generic_inline_admin.tests.GenericInlineAdminParametersTest.testExcludeParam", "regressiontests.forms.tests.fields.FieldsTests.test_urlfield_8", "regressiontests.forms.localflavor.es.ESLocalFlavorTests.test_ESRegionSelect", "regressiontests.forms.localflavor.at.ATLocalFlavorTests.test_ATStateSelect", "regressiontests.forms.tests.error_messages.FormsErrorMessagesTestCase.test_floatfield", "regressiontests.forms.tests.error_messages.ModelChoiceFieldErrorMessagesTestCase.test_modelchoicefield", "regressiontests.forms.tests.input_formats.SimpleDateTimeFormatTests.test_localized_dateTimeField", "regressiontests.forms.tests.models.ModelFormCallableModelDefault.test_initial_instance_value", "regressiontests.forms.tests.forms.FormsTestCase.test_hidden_data", "regressiontests.forms.tests.fields.FieldsTests.test_filepathfield_2", "regressiontests.forms.tests.media.StaticFormsMediaTestCase.test_construction", "regressiontests.generic_inline_admin.tests.NoInlineDeletionTest.test_no_deletion", "regressiontests.forms.tests.widgets.ClearableFileInputTests.test_clear_input_renders_only_if_initial", "regressiontests.forms.tests.forms.FormsTestCase.test_auto_id", "regressiontests.forms.tests.forms.FormsTestCase.test_form_html_attributes", "regressiontests.forms.tests.formsets.FormsFormsetTestCase.test_formset_initial_data", "regressiontests.forms.localflavor.fr.FRLocalFlavorTests.test_FRZipCodeField", "regressiontests.forms.tests.media.StaticFormsMediaTestCase.test_media_inheritance_single_type", "regressiontests.forms.tests.formsets.FormsFormsetTestCase.test_formset_iteration", "regressiontests.forms.tests.input_formats.LocalizedTimeTests.test_localized_timeField_with_inputformat", "regressiontests.forms.tests.error_messages.FormsErrorMessagesTestCase.test_ipaddressfield", "regressiontests.forms.tests.media.StaticFormsMediaTestCase.test_combine_media", "regressiontests.forms.localflavor.is_.ISLocalFlavorTests.test_ISPhoneNumberField", "regressiontests.forms.tests.formsets.FormsFormsetTestCase.test_max_num_with_initial_data", "regressiontests.forms.tests.widgets.FormsWidgetTestCase.test_select", "regressiontests.forms.tests.input_formats.SimpleDateTimeFormatTests.test_dateTimeField_with_inputformat", "regressiontests.forms.tests.forms.FormsTestCase.test_extracting_hidden_and_visible", "regressiontests.forms.tests.widgets.FormsWidgetTestCase.test_textinput", "regressiontests.forms.tests.forms.FormsTestCase.test_help_text", "regressiontests.forms.tests.forms.FormsTestCase.test_error_html_required_html_classes", "regressiontests.forms.localflavor.za.ZALocalFlavorTests.test_ZAPostCodeField", "regressiontests.forms.tests.fields.FieldsTests.test_emailfield_3", "regressiontests.forms.localflavor.ca.CALocalFlavorTests.test_CAPhoneNumberField", "regressiontests.forms.tests.media.FormsMediaTestCase.test_construction", "regressiontests.forms.localflavor.ca.CALocalFlavorTests.test_CASocialInsuranceField", "regressiontests.forms.tests.input_formats.CustomTimeInputFormatsTests.test_localized_timeField", "regressiontests.forms.tests.formsets.FormsFormsetTestCase.test_formset_validation", "regressiontests.forms.localflavor.ie.IELocalFlavorTests.test_IECountySelect", "regressiontests.forms.tests.media.FormsMediaTestCase.test_multi_media", "regressiontests.forms.tests.fields.FieldsTests.test_typedchoicefield_3", "regressiontests.forms.tests.fields.FieldsTests.test_typedchoicefield_2", "regressiontests.forms.tests.formsets.TestIsBoundBehavior.test_with_management_data_attrs_work_fine", "regressiontests.forms.tests.media.FormsMediaTestCase.test_form_media", "regressiontests.forms.localflavor.fi.FILocalFlavorTests.test_FIZipCodeField", "regressiontests.forms.tests.formsets.FormsFormsetTestCase.test_more_initial_than_max_num", "regressiontests.forms.tests.fields.FieldsTests.test_typedchoicefield_1", "regressiontests.forms.localflavor.at.ATLocalFlavorTests.test_ATZipCodeField", "regressiontests.forms.tests.forms.FormsTestCase.test_forms_with_prefixes", "regressiontests.forms.tests.fields.FieldsTests.test_typedmultiplechoicefield_6", "regressiontests.forms.tests.fields.FieldsTests.test_timefield_2", "regressiontests.forms.tests.fields.FieldsTests.test_typedmultiplechoicefield_3", "regressiontests.forms.localflavor.ro.ROLocalFlavorTests.test_ROPostalCodeField", "regressiontests.forms.localflavor.ro.ROLocalFlavorTests.test_ROCountyField", "regressiontests.forms.localflavor.pl.PLLocalFlavorTests.test_PLPostalCodeField", "regressiontests.forms.localflavor.ro.ROLocalFlavorTests.test_ROCountySelect", "regressiontests.forms.tests.input_formats.CustomDateTimeInputFormatsTests.test_dateTimeField", "regressiontests.forms.tests.regressions.FormsRegressionsTestCase.test_regression_14234", "regressiontests.forms.localflavor.pl.PLLocalFlavorTests.test_PLNIPField", "regressiontests.forms.tests.widgets.ClearableFileInputTests.test_clear_input_checked_returns_false", "regressiontests.forms.localflavor.jp.JPLocalFlavorTests.test_JPPostalCodeField", "regressiontests.generic_inline_admin.tests.GenericAdminViewTest.testGenericInlineFormset", "regressiontests.forms.tests.error_messages.FormsErrorMessagesTestCase.test_filefield", "regressiontests.forms.tests.error_messages.FormsErrorMessagesTestCase.test_emailfield", "regressiontests.forms.localflavor.es.ESLocalFlavorTests.test_ESIdentityCardNumberField", "regressiontests.forms.localflavor.se.SELocalFlavorTests.test_SEPersonalIdentityNumberField", "regressiontests.forms.tests.regressions.FormsRegressionsTestCase.test_xss_error_messages", "regressiontests.forms.tests.widgets.FormsWidgetTestCase.test_hiddeninput", "regressiontests.forms.tests.widgets.FormsWidgetTestCase.test_datetimeinput", "regressiontests.forms.tests.fields.FieldsTests.test_combofield_2", "regressiontests.forms.tests.forms.FormsTestCase.test_initial_data", "regressiontests.forms.tests.forms.FormsTestCase.test_label_suffix", "regressiontests.forms.tests.fields.FieldsTests.test_choicefield_4", "regressiontests.forms.tests.media.StaticFormsMediaTestCase.test_multi_widget", "regressiontests.forms.tests.models.TestTicket12510.test_choices_not_fetched_when_not_rendering", "regressiontests.forms.tests.fields.FieldsTests.test_regexfield_4", "regressiontests.forms.localflavor.de.DELocalFlavorTests.test_DEIdentityCardNumberField", "regressiontests.forms.tests.extra.FormsExtraTestCase.test_ipaddress", "regressiontests.forms.tests.fields.FieldsTests.test_charfield_1", "regressiontests.forms.tests.fields.FieldsTests.test_datefield_1", "regressiontests.forms.localflavor.br.BRLocalFlavorTests.test_BRCPFField", "regressiontests.forms.tests.error_messages.FormsErrorMessagesTestCase.test_datefield", "regressiontests.generic_inline_admin.tests.GenericInlineAdminParametersTest.testNoParam", "regressiontests.forms.tests.error_messages.FormsErrorMessagesTestCase.test_datetimefield", "regressiontests.generic_inline_admin.tests.GenericAdminViewTest.testBasicAddPost", "regressiontests.forms.tests.error_messages.FormsErrorMessagesTestCase.test_splitdatetimefield", "regressiontests.forms.localflavor.id.IDLocalFlavorTests.test_IDNationalIdentityNumberField", "regressiontests.forms.localflavor.it.ITLocalFlavorTests.test_ITRegionSelect", "regressiontests.forms.tests.error_messages.FormsErrorMessagesTestCase.test_regexfield", "regressiontests.forms.tests.extra.FormsExtraL10NTestCase.test_l10n", "regressiontests.forms.tests.media.StaticFormsMediaTestCase.test_media_property_parent_references", "regressiontests.forms.tests.fields.FieldsTests.test_typedmultiplechoicefield_2", "regressiontests.forms.localflavor.uy.UYLocalFlavorTests.test_UYDepartmentSelect", "regressiontests.forms.tests.regressions.FormsRegressionsTestCase.test_regression_5216", "regressiontests.forms.tests.input_formats.LocalizedDateTimeTests.test_dateTimeField_with_inputformat", "regressiontests.forms.localflavor.pl.PLLocalFlavorTests.test_PLPESELField", "regressiontests.forms.localflavor.au.AULocalFlavorTests.test_AUStateSelect", "regressiontests.forms.tests.input_formats.CustomDateTimeInputFormatsTests.test_dateTimeField_with_inputformat", "regressiontests.forms.localflavor.cl.CLLocalFlavorTests.test_CLRutField", "regressiontests.forms.tests.formsets.FormsFormsetTestCase.test_formset_with_deletion", "regressiontests.forms.tests.formsets.FormsetAsFooTests.test_as_ul", "regressiontests.forms.tests.forms.FormsTestCase.test_multiple_choice_list_data", "regressiontests.forms.tests.fields.FieldsTests.test_decimalfield_6", "regressiontests.forms.localflavor.se.SELocalFlavorTests.test_SECountySelect", "regressiontests.forms.tests.forms.FormsTestCase.test_empty_dict", "regressiontests.forms.tests.input_formats.LocalizedDateTimeTests.test_localized_dateTimeField", "regressiontests.forms.localflavor.us.USLocalFlavorTests.test_USSocialSecurityNumberField", "regressiontests.forms.tests.formsets.FormsFormsetTestCase.test_delete_prefilled_data", "regressiontests.forms.tests.fields.FieldsTests.test_integerfield_2", "regressiontests.forms.tests.formsets.FormsFormsetTestCase.test_displaying_more_than_one_blank_form", "regressiontests.forms.tests.widgets.FormsWidgetTestCase.test_radioselect", "regressiontests.forms.tests.fields.FieldsTests.test_typedchoicefield_6", "regressiontests.forms.tests.fields.FieldsTests.test_url_regex_ticket11198", "regressiontests.forms.tests.fields.FieldsTests.test_filepathfield_4", "regressiontests.forms.tests.fields.FieldsTests.test_urlfield_5", "regressiontests.forms.tests.fields.FieldsTests.test_datefield_2", "regressiontests.forms.tests.forms.FormsTestCase.test_forms_with_null_boolean", "regressiontests.forms.localflavor.nl.NLLocalFlavorTests.test_NLSoFiNumberField", "regressiontests.forms.tests.fields.FieldsTests.test_datetimefield_2", "regressiontests.forms.localflavor.se.SELocalFlavorTests.test_SEPostalCodeField", "regressiontests.forms.tests.fields.FieldsTests.test_splitdatetimefield_1", "regressiontests.forms.tests.formsets.FormsFormsetTestCase.test_limiting_max_forms", "regressiontests.forms.tests.media.StaticFormsMediaTestCase.test_media_property", "regressiontests.forms.localflavor.generic.GenericLocalFlavorTests.test_GenericDateTimeField", "regressiontests.forms.localflavor.es.ESLocalFlavorTests.test_ESPostalCodeField", "regressiontests.forms.tests.models.ModelFormCallableModelDefault.test_callable_initial_value", "regressiontests.forms.tests.fields.FieldsTests.test_integerfield_4", "regressiontests.forms.tests.formsets.FormsFormsetTestCase.test_clean_hook", "regressiontests.forms.tests.formsets.FormsFormsetTestCase.test_regression_12878", "regressiontests.forms.tests.widgets.FormsI18NWidgetsTestCase.test_splitdatetime", "regressiontests.forms.localflavor.ch.CHLocalFlavorTests.test_CHStateSelect", "regressiontests.forms.tests.fields.FieldsTests.test_integerfield_5", "regressiontests.forms.tests.input_formats.LocalizedDateTests.test_dateField", "regressiontests.forms.localflavor.il.ILLocalFlavorTests.test_ILIDNumberField", "regressiontests.forms.tests.forms.FormsTestCase.test_auto_id_on_form_and_field", "regressiontests.forms.tests.input_formats.SimpleTimeFormatTests.test_localized_timeField_with_inputformat", "regressiontests.forms.tests.input_formats.SimpleDateFormatTests.test_dateField_with_inputformat", "regressiontests.forms.tests.extra.FormsExtraTestCase.test_multipart_encoded_form", "regressiontests.forms.localflavor.it.ITLocalFlavorTests.test_ITZipCodeField", "regressiontests.forms.localflavor.se.SELocalFlavorTests.test_SEOrganizationNumberField", "regressiontests.forms.localflavor.pl.PLLocalFlavorTests.test_PLREGONField", "regressiontests.forms.localflavor.de.DELocalFlavorTests.test_DEStateSelect", "regressiontests.forms.tests.formsets.TestIsBoundBehavior.test_form_errors_are_cought_by_formset", "regressiontests.forms.tests.forms.FormsTestCase.test_empty_permitted", "regressiontests.forms.tests.fields.FieldsTests.test_urlfield_3", "regressiontests.forms.localflavor.ch.CHLocalFlavorTests.test_CHPhoneNumberField", "regressiontests.forms.tests.fields.FieldsTests.test_booleanfield_2", "regressiontests.forms.tests.util.FormsUtilTestCase.test_validation_error", "regressiontests.forms.tests.input_formats.CustomDateInputFormatsTests.test_dateField_with_inputformat", "regressiontests.forms.tests.input_formats.LocalizedDateTimeTests.test_dateTimeField", "regressiontests.forms.tests.forms.FormsTestCase.test_field_order", "regressiontests.forms.localflavor.it.ITLocalFlavorTests.test_ITSocialSecurityNumberField", "regressiontests.forms.tests.fields.FieldsTests.test_urlfield_4", "regressiontests.forms.tests.fields.FieldsTests.test_field_sets_widget_is_required", "regressiontests.forms.tests.forms.FormsTestCase.test_unbound_form", "regressiontests.forms.tests.fields.FieldsTests.test_choicefield_2", "regressiontests.forms.tests.regressions.FormsRegressionsTestCase.test_class", "regressiontests.forms.tests.widgets.ClearableFileInputTests.test_clear_input_checked_returns_false_only_if_not_required", "regressiontests.forms.localflavor.ar.ARLocalFlavorTests.test_ARCUITField", "regressiontests.forms.tests.formsets.FormsFormsetTestCase.test_max_num_zero", "regressiontests.forms.localflavor.id.IDLocalFlavorTests.test_IDLicensePlateField", "regressiontests.forms.tests.media.FormsMediaTestCase.test_media_inheritance_from_property", "regressiontests.forms.tests.validators.TestFieldWithValidators.test_all_errors_get_reported", "regressiontests.forms.tests.fields.FieldsTests.test_charfield_5", "regressiontests.generic_inline_admin.tests.GenericAdminViewTest.testBasicAddGet", "regressiontests.forms.tests.error_messages.FormsErrorMessagesTestCase.test_choicefield", "regressiontests.forms.tests.media.FormsMediaTestCase.test_media_inheritance", "regressiontests.forms.localflavor.za.ZALocalFlavorTests.test_ZAIDField", "regressiontests.forms.localflavor.id.IDLocalFlavorTests.test_IDPostCodeField", "regressiontests.forms.tests.formsets.FormsFormsetTestCase.test_invalid_deleted_form_with_ordering", "regressiontests.forms.tests.extra.FormsExtraL10NTestCase.test_form_label_association", "regressiontests.forms.localflavor.be.BELocalFlavorTests.test_BEProvinceSelect", "regressiontests.forms.tests.input_formats.SimpleTimeFormatTests.test_timeField_with_inputformat", "regressiontests.forms.localflavor.is_.ISLocalFlavorTests.test_ISIdNumberField", "regressiontests.forms.localflavor.id.IDLocalFlavorTests.test_IDPhoneNumberField", "regressiontests.forms.localflavor.kw.KWLocalFlavorTests.test_KWCivilIDNumberField", "regressiontests.forms.localflavor.ch.CHLocalFlavorTests.test_CHZipCodeField", "regressiontests.forms.tests.input_formats.LocalizedDateTests.test_dateField_with_inputformat", "regressiontests.forms.localflavor.us.USLocalFlavorTests.test_USStateSelect", "regressiontests.forms.localflavor.cl.CLLocalFlavorTests.test_CLRegionSelect", "regressiontests.forms.tests.input_formats.SimpleDateFormatTests.test_localized_dateField_with_inputformat", "regressiontests.forms.tests.input_formats.CustomDateInputFormatsTests.test_localized_dateField", "regressiontests.generic_inline_admin.tests.GenericInlineAdminParametersTest.testExtraParam", "regressiontests.forms.tests.input_formats.SimpleDateFormatTests.test_localized_dateField", "regressiontests.forms.tests.media.StaticFormsMediaTestCase.test_media_inheritance", "regressiontests.forms.localflavor.au.AULocalFlavorTests.test_AUPhoneNumberField", "regressiontests.forms.tests.forms.FormsTestCase.test_dynamic_construction", "regressiontests.forms.tests.forms.FormsTestCase.test_mulitple_choice_checkbox", "regressiontests.forms.tests.fields.FieldsTests.test_integerfield_3", "regressiontests.forms.tests.input_formats.CustomTimeInputFormatsTests.test_timeField_with_inputformat", "regressiontests.forms.localflavor.ca.CALocalFlavorTests.test_CAProvinceField", "regressiontests.forms.tests.input_formats.CustomTimeInputFormatsTests.test_timeField", "regressiontests.forms.tests.forms.FormsTestCase.test_hidden_initial_gets_id", "regressiontests.forms.tests.forms.FormsTestCase.test_form", "regressiontests.forms.localflavor.fr.FRLocalFlavorTests.test_FRPhoneNumberField", "regressiontests.forms.localflavor.ar.ARLocalFlavorTests.test_ARProvinceSelect", "regressiontests.forms.tests.fields.FieldsTests.test_floatfield_3", "regressiontests.forms.tests.fields.FieldsTests.test_integerfield_1", "regressiontests.forms.tests.models.ModelFormCallableModelDefault.test_no_empty_option", "regressiontests.forms.tests.models.FormsModelTestCase.test_boundary_conditions", "regressiontests.forms.tests.formsets.TestIsBoundBehavior.test_no_data_raises_validation_error", "regressiontests.forms.tests.fields.FieldsTests.test_choicefield_3", "regressiontests.forms.tests.forms.FormsTestCase.test_escaping", "regressiontests.forms.localflavor.br.BRLocalFlavorTests.test_BRPhoneNumberField", "regressiontests.forms.tests.fields.FieldsTests.test_typedmultiplechoicefield_4", "regressiontests.forms.localflavor.be.BELocalFlavorTests.test_BERegionSelect", "regressiontests.forms.localflavor.generic.GenericLocalFlavorTests.test_GenericDateField", "regressiontests.forms.tests.formsets.FormsFormsetTestCase.test_formset_with_ordering_and_deletion", "regressiontests.forms.tests.widgets.FormsWidgetTestCase.test_splithiddendatetime", "regressiontests.forms.tests.fields.FieldsTests.test_datefield_3", "regressiontests.forms.tests.media.FormsMediaTestCase.test_media_inheritance_extends", "regressiontests.forms.tests.widgets.ClearableFileInputTests.test_html_escaped", "regressiontests.forms.tests.fields.FieldsTests.test_nullbooleanfield_1", "regressiontests.forms.tests.forms.FormsTestCase.test_subclassing_forms", "regressiontests.forms.tests.fields.FieldsTests.test_typedmultiplechoicefield_1", "regressiontests.forms.tests.forms.FormsTestCase.test_cleaned_data_only_fields", "regressiontests.forms.tests.input_formats.LocalizedTimeTests.test_localized_timeField", "regressiontests.forms.tests.regressions.FormsRegressionsTestCase.test_regression_3600", "regressiontests.forms.tests.forms.FormsTestCase.test_forms_with_file_fields", "regressiontests.forms.tests.input_formats.LocalizedTimeTests.test_timeField", "regressiontests.forms.tests.forms.FormsTestCase.test_forms_wit_hmultiple_choice", "regressiontests.generic_inline_admin.tests.GenericInlineAdminWithUniqueTogetherTest.testAdd", "regressiontests.forms.tests.widgets.ClearableFileInputTests.test_clear_input_renders_only_if_not_required", "regressiontests.forms.tests.forms.FormsTestCase.test_auto_id_false", "regressiontests.forms.tests.widgets.FormsI18NWidgetsTestCase.test_splithiddendatetime", "regressiontests.forms.tests.forms.FormsTestCase.test_unicode_values", "regressiontests.forms.tests.fields.FieldsTests.test_decimalfield_3", "regressiontests.forms.tests.input_formats.LocalizedDateTests.test_localized_dateField", "regressiontests.forms.tests.forms.FormsTestCase.test_basic_processing_in_view", "regressiontests.forms.tests.forms.FormsTestCase.test_callable_initial_data", "regressiontests.forms.localflavor.is_.ISLocalFlavorTests.test_ISPostalCodeSelect", "regressiontests.forms.tests.formsets.TestEmptyFormSet.test_empty_formset_is_valid", "regressiontests.forms.tests.fields.FieldsTests.test_regexfield_3", "regressiontests.forms.tests.input_formats.CustomDateInputFormatsTests.test_dateField", "regressiontests.forms.localflavor.cz.CZLocalFlavorTests.test_CZPostalCodeField", "regressiontests.forms.tests.input_formats.LocalizedTimeTests.test_timeField_with_inputformat", "regressiontests.forms.tests.models.FormsModelTestCase.test_formfield_initial", "regressiontests.forms.tests.input_formats.LocalizedDateTimeTests.test_localized_dateTimeField_with_inputformat", "regressiontests.forms.tests.fields.FieldsTests.test_emailfield_2", "regressiontests.forms.localflavor.es.ESLocalFlavorTests.test_ESCCCField", "regressiontests.forms.tests.fields.FieldsTests.test_datetimefield_3", "regressiontests.forms.tests.media.StaticFormsMediaTestCase.test_media_dsl", "regressiontests.forms.localflavor.ar.ARLocalFlavorTests.test_ARDNIField", "regressiontests.forms.localflavor.uk.UKLocalFlavorTests.test_UKPostcodeField", "regressiontests.forms.tests.input_formats.CustomDateTimeInputFormatsTests.test_localized_dateTimeField_with_inputformat", "regressiontests.forms.tests.fields.FieldsTests.test_splitdatetimefield_2", "regressiontests.forms.localflavor.ro.ROLocalFlavorTests.test_ROPhoneNumberField", "regressiontests.forms.tests.forms.FormsTestCase.test_optional_data", "regressiontests.forms.localflavor.id.IDLocalFlavorTests.test_IDProvinceSelect", "regressiontests.forms.localflavor.br.BRLocalFlavorTests.test_BRZipCodeField", "regressiontests.forms.tests.forms.FormsTestCase.test_forms_with_radio", "regressiontests.forms.tests.error_messages.FormsErrorMessagesTestCase.test_integerfield", "regressiontests.forms.localflavor.jp.JPLocalFlavorTests.test_JPPrefectureSelect", "regressiontests.forms.localflavor.tr.TRLocalFlavorTests.test_TRPhoneNumberField", "regressiontests.forms.tests.forms.FormsTestCase.test_validating_multiple_fields", "regressiontests.forms.tests.fields.FieldsTests.test_charfield_4", "regressiontests.forms.localflavor.pt.PTLocalFlavorTests.test_PTZipCodeField", "regressiontests.forms.tests.widgets.FormsWidgetTestCase.test_dateinput", "regressiontests.forms.tests.widgets.FormsWidgetTestCase.test_multiplehiddeninput", "regressiontests.forms.localflavor.pl.PLLocalFlavorTests.test_PLCountrySelect", "regressiontests.forms.tests.input_formats.CustomDateTimeInputFormatsTests.test_localized_dateTimeField", "regressiontests.forms.tests.fields.FieldsTests.test_combofield_1", "regressiontests.forms.localflavor.ca.CALocalFlavorTests.test_CAProvinceSelect", "regressiontests.generic_inline_admin.tests.GenericInlineAdminParametersTest.testMaxNumParam", "regressiontests.forms.tests.fields.FieldsTests.test_decimalfield_4", "regressiontests.forms.tests.forms.FormsTestCase.test_boundfield_values", "regressiontests.forms.tests.media.StaticFormsMediaTestCase.test_media_inheritance_from_property", "regressiontests.forms.localflavor.ar.ARLocalFlavorTests.test_ARPostalCodeField", "regressiontests.forms.tests.regressions.FormsRegressionsTestCase.test_misc", "regressiontests.forms.tests.widgets.ClearableFileInputTests.test_clear_input_renders", "regressiontests.forms.tests.error_messages.FormsErrorMessagesTestCase.test_decimalfield", "regressiontests.forms.tests.error_messages.FormsErrorMessagesTestCase.test_multiplechoicefield", "regressiontests.forms.localflavor.fi.FILocalFlavorTests.test_FISocialSecurityNumber", "regressiontests.forms.localflavor.es.ESLocalFlavorTests.test_ESProvinceSelect", "regressiontests.forms.tests.error_messages.FormsErrorMessagesTestCase.test_charfield", "regressiontests.forms.tests.widgets.FormsWidgetTestCase.test_timeinput", "regressiontests.forms.tests.media.StaticFormsMediaTestCase.test_form_media", "regressiontests.forms.tests.fields.FieldsTests.test_nullbooleanfield_2", "regressiontests.forms.localflavor.de.DELocalFlavorTests.test_DEZipCodeField", "regressiontests.forms.localflavor.tr.TRLocalFlavorTests.test_TRIdentificationNumberField", "regressiontests.forms.localflavor.it.ITLocalFlavorTests.test_ITVatNumberField", "regressiontests.forms.localflavor.il.ILLocalFlavorTests.test_ILPostalCodeField", "regressiontests.forms.tests.formsets.FormsFormsetTestCase.test_more_initial_data", "regressiontests.forms.localflavor.pl.PLLocalFlavorTests.test_PLProvinceSelect", "regressiontests.forms.tests.media.FormsMediaTestCase.test_multi_widget", "regressiontests.forms.tests.extra.FormsExtraTestCase.test_overriding_errorlist", "regressiontests.forms.tests.forms.FormsTestCase.test_forms_with_choices", "regressiontests.forms.tests.error_messages.FormsErrorMessagesTestCase.test_subclassing_errorlist", "regressiontests.forms.tests.fields.FieldsTests.test_decimalfield_1", "regressiontests.forms.tests.forms.FormsTestCase.test_multiple_hidden", "regressiontests.forms.tests.formsets.FormsFormsetTestCase.test_ordering_blank_fieldsets", "regressiontests.forms.tests.formsets.FormsFormsetTestCase.test_second_form_partially_filled", "regressiontests.forms.localflavor.fr.FRLocalFlavorTests.test_FRDepartmentSelect", "regressiontests.forms.localflavor.us.USLocalFlavorTests.test_USStateField", "regressiontests.forms.tests.widgets.FormsI18NWidgetsTestCase.test_timeinput", "regressiontests.forms.localflavor.uy.UYLocalFlavorTests.test_UYCIField", "regressiontests.generic_inline_admin.tests.GenericAdminViewTest.testGenericInlineFormsetFactory", "regressiontests.forms.tests.media.FormsMediaTestCase.test_media_dsl", "regressiontests.forms.localflavor.at.ATLocalFlavorTests.test_ATSocialSecurityNumberField", "regressiontests.forms.tests.fields.FieldsTests.test_charfield_2", "regressiontests.forms.tests.fields.FieldsTests.test_choicefield_1", "regressiontests.forms.tests.fields.FieldsTests.test_filefield_1", "regressiontests.forms.tests.media.FormsMediaTestCase.test_media_property", "regressiontests.forms.tests.widgets.FormsWidgetTestCase.test_passwordinput", "regressiontests.forms.localflavor.ca.CALocalFlavorTests.test_CAPostalCodeField", "regressiontests.forms.tests.input_formats.SimpleDateTimeFormatTests.test_dateTimeField", "regressiontests.forms.tests.media.FormsMediaTestCase.test_media_property_parent_references", "regressiontests.forms.localflavor.cz.CZLocalFlavorTests.test_CZRegionSelect", "regressiontests.forms.localflavor.cz.CZLocalFlavorTests.test_CZICNumberField", "regressiontests.forms.tests.fields.FieldsTests.test_urlfield_7", "regressiontests.forms.localflavor.nl.NLLocalFlavorTests.test_NLZipCodeField", "regressiontests.forms.localflavor.sk.SKLocalFlavorTests.test_SKDistrictSelect", "regressiontests.forms.tests.fields.FieldsTests.test_typedmultiplechoicefield_5", "regressiontests.forms.localflavor.nl.NLLocalFlavorTests.test_NLPhoneNumberField", "regressiontests.forms.tests.fields.FieldsTests.test_multiplechoicefield_3", "regressiontests.forms.tests.fields.FieldsTests.test_urlfield_6", "regressiontests.forms.localflavor.br.BRLocalFlavorTests.test_BRStateSelect", "regressiontests.forms.tests.forms.FormsTestCase.test_specifying_labels", "regressiontests.forms.tests.extra.FormsExtraTestCase.test_multiwidget", "regressiontests.forms.tests.fields.FieldsTests.test_urlfield_2", "regressiontests.forms.localflavor.ro.ROLocalFlavorTests.test_ROCIFField", "regressiontests.forms.tests.fields.FieldsTests.test_urlfield_1", "regressiontests.forms.tests.widgets.FormsWidgetTestCase.test_checkboxselectmultiple", "regressiontests.forms.tests.widgets.WidgetTests.test_12048", "regressiontests.forms.tests.media.StaticFormsMediaTestCase.test_multi_media", "regressiontests.forms.tests.forms.FormsTestCase.test_checkbox_auto_id", "regressiontests.forms.localflavor.pt.PTLocalFlavorTests.test_PTPhoneNumberField", "regressiontests.forms.localflavor.be.BELocalFlavorTests.test_BEPostalCodeField", "regressiontests.forms.tests.formsets.FormsFormsetTestCase.test_formsets_with_ordering", "regressiontests.forms.localflavor.fi.FILocalFlavorTests.test_FIMunicipalitySelect", "regressiontests.forms.tests.fields.FieldsTests.test_typedchoicefield_4", "regressiontests.forms.tests.error_messages.FormsErrorMessagesTestCase.test_timefield", "regressiontests.forms.tests.widgets.FormsI18NWidgetsTestCase.test_dateinput", "regressiontests.forms.tests.fields.FieldsTests.test_decimalfield_5", "regressiontests.forms.tests.fields.FieldsTests.test_filepathfield_1", "regressiontests.forms.localflavor.be.BELocalFlavorTests.test_BEPhoneNumberField", "regressiontests.forms.tests.fields.FieldsTests.test_regexfield_2", "regressiontests.forms.tests.fields.FieldsTests.test_filepathfield_3", "regressiontests.forms.localflavor.ro.ROLocalFlavorTests.test_ROCNPField", "regressiontests.forms.tests.fields.FieldsTests.test_nullbooleanfield_3", "regressiontests.forms.tests.media.FormsMediaTestCase.test_media_inheritance_single_type", "regressiontests.forms.tests.fields.FieldsTests.test_urlfield_9", "regressiontests.forms.tests.widgets.FormsWidgetTestCase.test_splitdatetime", "regressiontests.forms.tests.fields.FieldsTests.test_regexfield_5", "regressiontests.forms.tests.fields.FieldsTests.test_emailfield_1", "regressiontests.forms.tests.formsets.FormsFormsetTestCase.test_single_form_completed", "regressiontests.forms.tests.widgets.FormsWidgetTestCase.test_multi", "regressiontests.forms.tests.fields.FieldsTests.test_regexfield_1", "regressiontests.forms.tests.fields.FieldsTests.test_floatfield_2", "regressiontests.forms.tests.forms.FormsTestCase.test_widget_output", "regressiontests.forms.tests.widgets.FormsWidgetTestCase.test_textarea", "regressiontests.forms.tests.formsets.FormsFormsetTestCase.test_regression_6926", "regressiontests.forms.tests.extra.FormsExtraTestCase.test_selectdate", "regressiontests.forms.tests.fields.FieldsTests.test_multiplechoicefield_2", "regressiontests.forms.tests.forms.FormsTestCase.test_label_split_datetime_not_displayed"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_1459", "original_commit_message": "Validate form_redirect_uri parameter against the request host.\n- The form_redirect_uri is now only used if it redirects to the same\nhost as the receiving UAA server.\n[#158222161] https://www.pivotaltracker.com/story/show/158222161\nSigned-off-by: Jaskanwal Pawar <jpawar@pivotal.io>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandler.java b/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandler.java\nindex f8de88d76..ed602321e 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandler.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandler.java\n@@ -21,6 +21,8 @@ import org.springframework.security.web.authentication.SavedRequestAwareAuthenti\n \n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n \n public class UaaSavedRequestAwareAuthenticationSuccessHandler extends SavedRequestAwareAuthenticationSuccessHandler {\n     public static final String SAVED_REQUEST_SESSION_ATTRIBUTE = \"SPRING_SECURITY_SAVED_REQUEST\";\n@@ -38,10 +40,23 @@ public class UaaSavedRequestAwareAuthenticationSuccessHandler extends SavedReque\n         if (redirectAttribute !=null) {\n             logger.debug(\"Returning redirectAttribute saved URI:\"+redirectAttribute);\n             return (String) redirectAttribute;\n-        } else if (redirectFormParam != null) {\n+        } else if (isApprovedFormRedirectUri(request, redirectFormParam)) {\n             return redirectFormParam;\n         } else {\n             return super.determineTargetUrl(request, response);\n         }\n     }\n+\n+    private boolean isApprovedFormRedirectUri(HttpServletRequest request, String redirectUri) {\n+        if (redirectUri == null) {\n+            return false;\n+        }\n+\n+        try {\n+            URL url = new URL(redirectUri);\n+            return request.getServerName().equals(url.getHost());\n+        } catch (MalformedURLException e) {\n+            return false;\n+        }\n+    }\n }\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandlerTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandlerTests.java\nindex 90bc759ff..a8918de43 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandlerTests.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandlerTests.java\n@@ -41,16 +41,26 @@ public class UaaSavedRequestAwareAuthenticationSuccessHandlerTests {\n         assertEquals(\"http://test.com\", handler.determineTargetUrl(request, new MockHttpServletResponse()));\n     }\n \n-    @Test\n-    public void form_parameter_works() {\n-        request.setParameter(FORM_REDIRECT_PARAMETER, \"http://test.com\");\n-        assertEquals(\"http://test.com\", handler.determineTargetUrl(request, new MockHttpServletResponse()));\n-    }\n-\n     @Test\n     public void form_parameter_is_overridden() {\n         request.setParameter(FORM_REDIRECT_PARAMETER, \"http://test.com\");\n         request.setAttribute(URI_OVERRIDE_ATTRIBUTE, \"http://override.test.com\");\n         assertEquals(\"http://override.test.com\", handler.determineTargetUrl(request, new MockHttpServletResponse()));\n     }\n-}\n\\ No newline at end of file\n+\n+    @Test\n+    public void validFormRedirectIsReturned() {\n+        String redirectUri = request.getScheme() + \"://\" + request.getServerName() + \"/test\";\n+\n+        request.setParameter(FORM_REDIRECT_PARAMETER, redirectUri);\n+        assertEquals(redirectUri, handler.determineTargetUrl(request, new MockHttpServletResponse()));\n+    }\n+\n+    @Test\n+    public void invalidFormRedirectIsNotReturned() {\n+        String redirectUri = \"http://test.com/test\";\n+\n+        request.setParameter(FORM_REDIRECT_PARAMETER, redirectUri);\n+        assertEquals(\"/\", handler.determineTargetUrl(request, new MockHttpServletResponse()));\n+    }\n+}\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "7a8f157f7e2feed2d0ebb63b163ff735b6340b96", "source_date": "Tue Jun 12 14:52:02 2018 -0700", "source_tag": "4.19.0", "target_commit": "7d750e036cd52c5d30e73e28cbcae23126d7154b", "target_date": "Wed Jun 13 10:55:21 2018 -0700", "target_tag": "4.10.1", "FAIL TO PASS": ["org.cloudfoundry.identity.uaa.web.UaaSavedRequestAwareAuthenticationSuccessHandlerTests > invalidFormRedirectIsNotReturned"], "PASS TO PASS": ["org.cloudfoundry.identity.uaa.provider.ldap.LdapIdentityProviderDefinitionTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.ZoneAwareIdpMetadataGeneratorTest", "org.cloudfoundry.identity.uaa.user.BCryptPasswordEncoderTest", "org.cloudfoundry.identity.uaa.oauth.IntrospectEndpointTest", "org.cloudfoundry.identity.uaa.audit.event.ApprovalModifiedEventTest", "org.cloudfoundry.identity.uaa.authentication.BackwardsCompatibleTokenEndpointAuthenticationFilterTest", ":cloudfoundry-identity-server:processResources", "org.cloudfoundry.identity.uaa.web.UaaSessionCookieConfigTest", "org.cloudfoundry.identity.uaa.util.ColorHashTest", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupProvisioningTests", "org.cloudfoundry.identity.uaa.zone.IdentityZoneHolderTest", "org.cloudfoundry.identity.uaa.authentication.manager.ScopeAuthenticationManagerTests", ":cloudfoundry-identity-model:gitInfo", "org.cloudfoundry.identity.uaa.login.ChangePasswordControllerTest", "org.cloudfoundry.identity.uaa.authentication.event.UserAuthenticationSuccessEventTests", "org.cloudfoundry.identity.uaa.user.InMemoryUaaUserDatabaseTests", "org.cloudfoundry.identity.uaa.authentication.ClientBasicAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlSessionStorageFactoryTests", "org.cloudfoundry.identity.uaa.scim.ScimGroupMemberTests", "org.cloudfoundry.identity.uaa.codestore.CodeStoreEndpointsTests", "org.cloudfoundry.identity.uaa.scim.endpoints.PasswordResetEndpointTest", "org.cloudfoundry.identity.uaa.oauth.approval.JdbcApprovalStoreTests", "org.cloudfoundry.identity.uaa.mfa.MfaCheckerTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsTests", "org.cloudfoundry.identity.uaa.authorization.external.LdapGroupMappingAuthorizationManagerTests", "org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationSerializerDeserializerTest", "org.cloudfoundry.identity.uaa.zone.BannerValidatorTest", "org.cloudfoundry.identity.uaa.scim.jdbc.ScimSearchQueryConverterTests", "org.cloudfoundry.identity.uaa.login.EmailInvitationsServiceTests", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimUserProvisioningTests", "org.cloudfoundry.identity.uaa.db.OldAuthzTableDropped", "org.cloudfoundry.identity.uaa.authentication.manager.ChainedAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.error.ConvertingExceptionViewTests", "org.cloudfoundry.identity.uaa.scim.exception.InvalidPasswordExceptionTest", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimGroupBootstrapTests", "org.cloudfoundry.identity.uaa.scim.validate.UaaPasswordPolicyValidatorTests", "org.cloudfoundry.identity.uaa.provider.ldap.DynamicPasswordComparatorTests", "org.cloudfoundry.identity.uaa.authentication.manager.CommonLoginPolicyTest", "org.cloudfoundry.identity.uaa.util.UaaTokenUtilsTest", "org.cloudfoundry.identity.uaa.resources.MessageTests", "org.cloudfoundry.identity.uaa.authentication.manager.ExternalLoginAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.oauth.approval.ApprovalsAdminEndpointsTests", "org.cloudfoundry.identity.uaa.util.LinkedMaskingMultiValueMapTests", "org.cloudfoundry.identity.uaa.authentication.ClientParametersAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.client.SocialClientUserDetailsSourceTests", ":cloudfoundry-identity-server:compileJava", "org.cloudfoundry.identity.uaa.oauth.token.AddTokenGranterTests", "org.cloudfoundry.identity.uaa.provider.saml.LoginSAMLAuthenticationFailureHandlerTest", "org.cloudfoundry.identity.uaa.authentication.AuthzAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.error.UaaExceptionTests", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimUserBootstrapTests", "org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationEndpointTest", ":cloudfoundry-identity-model:mainOutputResourcesDir", "org.cloudfoundry.identity.uaa.db.TestThatClientIdIsVchar255", "org.cloudfoundry.identity.uaa.db.DatabaseParametersTests", "org.cloudfoundry.identity.uaa.login.ForcePasswordChangeControllerTest", "org.cloudfoundry.identity.uaa.login.AutologinAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.util.DomainFilterTest", "org.cloudfoundry.identity.uaa.provider.ldap.ExtendedLdapUserMapperTest", "org.cloudfoundry.identity.uaa.scim.ScimUserTests", "org.cloudfoundry.identity.uaa.oauth.token.LargeRevocableTokenDeleteTests", "org.cloudfoundry.identity.uaa.mfa.GoogleAuthenticatorAdapterTest", "org.cloudfoundry.identity.uaa.audit.JdbcFailedLoginCountingAuditServiceTests", "org.cloudfoundry.identity.uaa.login.NotificationsServiceTest", "org.cloudfoundry.identity.uaa.oauth.UaaUserApprovalHandlerTests", "org.cloudfoundry.identity.uaa.oauth.RemoteTokenServicesTests", "org.cloudfoundry.identity.uaa.login.UsernamePasswordExtractingAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.zone.GeneralIdentityZoneValidatorTests", "org.cloudfoundry.identity.uaa.oauth.OpenIdSessionStateCalculatorTest", "org.cloudfoundry.identity.uaa.client.JdbcClientMetadataProvisioningTest", "org.cloudfoundry.identity.uaa.util.KeyWithCertTest", "org.cloudfoundry.identity.uaa.oauth.client.ClientDetailsModificationTests", "org.cloudfoundry.identity.uaa.web.HttpHeadersFilterRequestWrapperTest", "org.cloudfoundry.identity.uaa.zone.ZoneAwareClientSecretPolicyValidatorTests", "org.cloudfoundry.identity.uaa.zone.event.IdentityProviderModifiedEventTest", ":cloudfoundry-identity-metrics-data:classes", "org.cloudfoundry.identity.uaa.login.ResetPasswordControllerTest", "org.cloudfoundry.identity.uaa.authentication.login.RemoteAuthenticationEndpointTests", "org.cloudfoundry.identity.uaa.provider.saml.ZoneAwareMetadataGeneratorTests", "org.cloudfoundry.identity.uaa.db.ClientDetailsSupportsExtendedAuthoritesAndScopes", "org.cloudfoundry.identity.uaa.test.CreateDB", "org.cloudfoundry.identity.uaa.oauth.token.Saml2TokenGranterTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpWebSsoProfileImplTest", "org.cloudfoundry.identity.uaa.util.log.LineAwareLayoutTest", "org.cloudfoundry.identity.uaa.zone.IdentityZoneResolvingFilterTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.SamlServiceProviderConfiguratorTest", "org.cloudfoundry.identity.uaa.metrics.QueryFilterTests", "org.cloudfoundry.identity.uaa.security.web.CorsFilterTests", "org.cloudfoundry.identity.uaa.oauth.token.JwtTokenGranterTests", "org.cloudfoundry.identity.uaa.security.web.SecurityFilterChainPostProcessorTests", "org.cloudfoundry.identity.uaa.login.util.FakeJavaMailSenderTest", "org.cloudfoundry.identity.uaa.web.ForwardAwareInternalResourceViewResolverTests", "org.cloudfoundry.identity.uaa.web.ExceptionReportHttpMessageConverterTest", "org.cloudfoundry.identity.uaa.db.TableAndColumnNormalizationTest", ":cloudfoundry-identity-server:testClasses", "org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcherTests", "org.cloudfoundry.identity.uaa.resources.jdbc.JdbcSqlAdapterTests", "org.cloudfoundry.identity.uaa.oauth.jwk.JsonWebKeySetTests", "org.cloudfoundry.identity.uaa.mfa.UserGoogleMfaCredentialsProvisioningTest", "org.cloudfoundry.identity.uaa.authentication.SystemAuthenticationTest", "org.cloudfoundry.identity.uaa.oauth.CheckTokenEndpointTests", "org.cloudfoundry.identity.uaa.authentication.SessionResetFilterTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserEndpointsTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlMessageStorageTest", "org.cloudfoundry.identity.uaa.provider.oauth.OauthIdentityProviderDefinitionFactoryBeanTest", "org.cloudfoundry.identity.uaa.user.UaaAuthorityTests", "org.cloudfoundry.identity.uaa.config.YamlServletProfileInitializerTests", "org.cloudfoundry.identity.uaa.mfa.JdbcUserGoogleMfaCredentialsProvisioningTest", "org.cloudfoundry.identity.uaa.web.RecognizeFailureDispatcherServletTest", "org.cloudfoundry.identity.uaa.db.GroupMembershipAuthoritiesNullableTest", "org.cloudfoundry.identity.uaa.db.GoogleAuthUserConfigTableTest", "org.cloudfoundry.identity.uaa.login.EmailAccountCreationServiceTests", "org.cloudfoundry.identity.uaa.client.OAuth2ClientAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.user.UaaUserEditorTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlKeyManagerFactoryTests", "org.cloudfoundry.identity.uaa.security.CsrfAwareEntryPointAndDeniedHandlerTest", "org.cloudfoundry.identity.uaa.login.PasswordConfirmationValidationTest", "org.cloudfoundry.identity.uaa.login.EmailServiceTests", "org.cloudfoundry.identity.uaa.db.StoreSubDomainAsLowerCase_V2_7_3_Tests", "org.cloudfoundry.identity.uaa.invitations.InvitationsControllerTest", "org.cloudfoundry.identity.uaa.provider.saml.LoginSamlAuthenticationProviderTests", "org.cloudfoundry.identity.uaa.account.PasswordChangeEndpointTests", "org.cloudfoundry.identity.uaa.login.SamlLoginServerKeyManagerTests", "org.cloudfoundry.identity.uaa.security.X509ExpiryCheckingTrustManagerTest", "org.cloudfoundry.identity.uaa.oauth.UserManagedAuthzApprovalHandlerTests", "org.cloudfoundry.identity.uaa.logging.LogSanitizerUtilTest", "org.cloudfoundry.identity.uaa.invitations.InvitationsAuthenticationTrustResolverTest", "org.cloudfoundry.identity.uaa.scim.endpoints.UserIdConversionEndpointsTests", ":cloudfoundry-identity-metrics-data:jar", "org.cloudfoundry.identity.uaa.util.EnsureOldLibrariesAreRemoved", ":cloudfoundry-identity-server:processTestResources", "org.cloudfoundry.identity.uaa.oauth.jwt.ChainedSignatureVerifierTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ChangeEmailEndpointsTest", "org.cloudfoundry.identity.uaa.account.ResetPasswordAuthenticationEntryPointTests", "org.cloudfoundry.identity.uaa.config.EnvironmentPropertiesFactoryBeanTests", ":cloudfoundry-identity-model:compileJava", "org.cloudfoundry.identity.uaa.resources.jdbc.LimitSqlAdapterFactoryTest", "org.cloudfoundry.identity.uaa.provider.saml.SamlConfigurationBeanTest", "org.cloudfoundry.identity.uaa.util.NullifyFieldsTest", "org.cloudfoundry.identity.uaa.oauth.UaaTokenServicesTests", "org.cloudfoundry.identity.uaa.oauth.UaaOauth2ErrorHandlerTests", "org.cloudfoundry.identity.uaa.provider.IdentityProviderConfigValidationDelegatorTest", "org.cloudfoundry.identity.uaa.authentication.ZoneAwareWhitelistLogoutHandlerTests", "org.cloudfoundry.identity.uaa.provider.LockoutPolicyTests", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthIdentityProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.authentication.manager.KeystoneAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.zone.IdentityZoneSwitchingFilterTests", "org.cloudfoundry.identity.uaa.client.ClientAdminEndpointsValidatorTests", "org.cloudfoundry.identity.uaa.metrics.IdleTimerTests", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeTests", "org.cloudfoundry.identity.uaa.util.TimeBasedExpiringValueMapTest", "org.cloudfoundry.identity.uaa.oauth.UaaScopesTests", "org.cloudfoundry.identity.uaa.config.EnvironmentMapFactoryBeanTests", "org.cloudfoundry.identity.uaa.oauth.jwt.JwtHelperTest", "org.cloudfoundry.identity.uaa.oauth.ZoneEndpointsClientDetailsValidatorTests", "org.cloudfoundry.identity.uaa.db.ClientDetailsHasRequiredUserScopes", "org.cloudfoundry.identity.uaa.zone.GeneralIdentityZoneConfigurationValidatorTests", "org.cloudfoundry.identity.uaa.authentication.UaaClientAuthenticationProviderTest", "org.cloudfoundry.identity.uaa.openid.UserInfoEndpointTests", "org.cloudfoundry.identity.uaa.client.ClientAdminBootstrapTests", "org.cloudfoundry.identity.uaa.audit.event.AuditListenerTests", "org.cloudfoundry.identity.uaa.oauth.jwt.CommonSignatureVerifierTest", "org.cloudfoundry.identity.uaa.oauth.token.KeyInfoTests", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.zone.IdentityZoneEndpointsTests", "org.cloudfoundry.identity.uaa.account.PasswordCheckEndpointTests", "org.cloudfoundry.identity.uaa.zone.MfaConfigValidatorTests", "org.cloudfoundry.identity.uaa.config.YamlPropertiesFactoryBeanTests", "org.cloudfoundry.identity.uaa.authentication.manager.LoginAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.util.UaaMapUtilsTest", "org.cloudfoundry.identity.uaa.scim.util.ScimUtilsTest", "org.cloudfoundry.identity.uaa.oauth.TokenRevocationEndpointTests", "org.cloudfoundry.identity.uaa.zone.JdbcIdentityZoneProvisioningTests", "org.cloudfoundry.identity.uaa.oauth.DisableIdTokenResponseTypeFilterTest", "org.cloudfoundry.identity.uaa.authentication.UTF8ConversionFilterTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlRedirectUtilsTest", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.util.CachingPasswordEncoderTest", "org.cloudfoundry.identity.uaa.login.ProfileControllerTests", "org.cloudfoundry.identity.uaa.audit.AuditEventTypeTests", "org.cloudfoundry.identity.uaa.oauth.RestrictUaaScopesClientValidatorTest", "org.cloudfoundry.identity.uaa.scim.ScimCoreTests", "org.cloudfoundry.identity.uaa.config.IdentityZoneConfigurationBootstrapTests", "org.cloudfoundry.identity.uaa.provider.saml.ConfigMetadataProviderTest", "org.cloudfoundry.identity.uaa.oauth.token.UaaTokenEndpointTests", "org.cloudfoundry.identity.uaa.resources.jdbc.LimitSqlAdapterTests", "org.cloudfoundry.identity.uaa.config.NestedMapPropertySourceTests", "org.cloudfoundry.identity.uaa.oauth.jwt.CommonSignerTest", "org.cloudfoundry.identity.uaa.authentication.manager.CheckIdpEnabledAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.oauth.event.ClientAdminEventPublisherTests", "org.cloudfoundry.identity.uaa.zone.InvalidClientSecretExceptionTests", "org.cloudfoundry.identity.uaa.web.LimitedModeUaaFilterTests", "org.cloudfoundry.identity.uaa.web.UaaSavedRequestCacheTests", "org.cloudfoundry.identity.uaa.impl.config.YamlServletProfileInitializerTest", "org.cloudfoundry.identity.uaa.db.RevocableTokenIndexTest_4_0_8", "org.cloudfoundry.identity.uaa.provider.saml.SamlIdentityProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.resources.jdbc.JdbcPagingListTests", "org.cloudfoundry.identity.uaa.login.TotpMfaEndpointTest", "org.cloudfoundry.identity.uaa.mfa.MfaProviderBootstrapTest", "org.cloudfoundry.identity.uaa.login.AccountsControllerTest", "org.cloudfoundry.identity.uaa.audit.JdbcAuditServiceTests", "org.cloudfoundry.identity.uaa.config.YamlBindingTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpSamlAuthenticationSuccessHandlerTest", "org.cloudfoundry.identity.uaa.authentication.manager.AuthzAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.oauth.ClientInfoEndpointTests", "org.cloudfoundry.identity.uaa.provider.ldap.ProcessLdapPropertiesTest", "org.cloudfoundry.identity.uaa.config.PasswordPolicyTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.NonSnarlIdpMetadataManagerTest", "org.cloudfoundry.identity.uaa.test.UaaTestAccountsTest", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeStoreTests", "org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationDetailsTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.JdbcSamlServiceProviderProvisioningTest", "org.cloudfoundry.identity.uaa.oauth.AntPathRedirectResolverTests", "org.cloudfoundry.identity.uaa.util.UaaHttpRequestUtilsTest", "org.cloudfoundry.identity.uaa.audit.event.SystemDeletableTest", "org.cloudfoundry.identity.uaa.oauth.JdbcQueryableClientDetailsServiceTests", "org.cloudfoundry.identity.uaa.user.JdbcUaaUserDatabaseTests", "org.cloudfoundry.identity.uaa.authentication.listener.AuthenticationSuccessListenerTests", "org.cloudfoundry.identity.uaa.impl.config.ScimExternalGroupsTypeResolvingFactoryBeanTest", "org.cloudfoundry.identity.uaa.account.ResetPasswordAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.mfa.JdbcMfaProviderProvisioningTest", "org.cloudfoundry.identity.uaa.config.YamlConfigurationValidatorTests", "org.cloudfoundry.identity.uaa.db.ExpiringCodeTableTest", "org.cloudfoundry.identity.uaa.login.HomeControllerViewTests", "org.cloudfoundry.identity.uaa.oauth.AccessControllerTests", "org.cloudfoundry.identity.uaa.config.IdentityZoneConfigurationTests", "org.cloudfoundry.identity.uaa.authentication.manager.PeriodLockoutPolicyTests", "org.cloudfoundry.identity.uaa.provider.uaa.UaaIdentityProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.config.YamlMapFactoryBeanTests", "org.cloudfoundry.identity.uaa.db.TestSchemaValidation", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupMembershipManagerTests", "org.cloudfoundry.identity.uaa.web.HeaderFilterTest", "org.cloudfoundry.identity.uaa.web.CookieBasedCsrfTokenRepositoryTests", "org.cloudfoundry.identity.uaa.zone.JdbcIdentityProviderProvisioningTests", "org.cloudfoundry.identity.uaa.audit.event.EntityDeletedEventTest", "org.cloudfoundry.identity.uaa.login.UaaChangePasswordServiceTest", "org.cloudfoundry.identity.uaa.resources.jdbc.SimpleSearchQueryConverterTests", "org.cloudfoundry.identity.uaa.oauth.approval.ApprovalTests", "org.cloudfoundry.identity.uaa.util.log.SyslogAppenderTest", "org.cloudfoundry.identity.uaa.login.LoginInfoEndpointTests", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupExternalMembershipManagerTests", "org.cloudfoundry.identity.uaa.mfa.MfaProviderEndpointsTest", "org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationEndpointParamaterizedTest", ":cloudfoundry-identity-server:compileTestJava", "org.cloudfoundry.identity.uaa.provider.ldap.LdapIdentityProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.SamlServiceProviderDefinitionTest", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimExternalGroupBootstrapTests", "org.cloudfoundry.identity.uaa.oauth.UaaTokenStoreTests", "org.cloudfoundry.identity.uaa.authentication.WhitelistLogoutHandlerTest", "org.cloudfoundry.identity.uaa.oauth.token.UserTokenGranterTest", "org.cloudfoundry.identity.uaa.client.ClientAdminEndpointsTests", "org.cloudfoundry.identity.uaa.authentication.PasswordChangeRequiredFilterTest", "org.cloudfoundry.identity.uaa.util.UaaPagingUtilsTests", "org.cloudfoundry.identity.uaa.db.RevocableTokenTableTest", "org.cloudfoundry.identity.uaa.util.TokenValidationTest", "org.cloudfoundry.identity.uaa.login.EmailChangeEmailServiceTest", "org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationSerializationTests", "org.cloudfoundry.identity.uaa.oauth.expression.IsSelfCheckTest", "org.cloudfoundry.identity.uaa.zone.MultitenantJdbcClientDetailsServiceTests", "org.cloudfoundry.identity.uaa.db.UserInfoTableTest", "org.cloudfoundry.identity.uaa.cache.ExpiringUrlCacheTests", ":cloudfoundry-identity-model:classes", "org.cloudfoundry.identity.uaa.util.UaaStringUtilsTest", "org.cloudfoundry.identity.uaa.zone.event.IdentityZoneModifiedEventTest", "org.cloudfoundry.identity.uaa.security.DefaultSecurityContextAccessorTests", "org.cloudfoundry.identity.uaa.metrics.UaaMetricsFilterTests", "org.cloudfoundry.identity.uaa.authentication.SamlAssertionBindingTests", "org.cloudfoundry.identity.uaa.util.RestTemplateFactoryTests", "org.cloudfoundry.identity.uaa.oauth.token.JdbcRevocableTokenProvisioningTest", ":cloudfoundry-identity-model:buildInfo", "org.cloudfoundry.identity.uaa.mfa.MfaRegisterQRGeneratorTest", ":cloudfoundry-identity-model:processResources", "org.cloudfoundry.identity.uaa.provider.RestTemplateSSLTest", ":cloudfoundry-identity-model:jar", "org.cloudfoundry.identity.uaa.provider.saml.BootstrapSamlIdentityProviderDataTests", "org.cloudfoundry.identity.uaa.logging.SanitizedLogFactoryTest", "org.cloudfoundry.identity.uaa.login.ChangeEmailControllerTest", "org.cloudfoundry.identity.uaa.account.event.PasswordChangeEventPublisherTests", "org.cloudfoundry.identity.uaa.util.LowConcurrencyPasswordEncoderTests", "org.cloudfoundry.identity.uaa.db.TestDataSourcePool", "org.cloudfoundry.identity.uaa.config.IdentityProviderBootstrapTest", ":cloudfoundry-identity-server:classes", "org.cloudfoundry.identity.uaa.zone.event.ServiceProviderModifiedEventTest", ":cloudfoundry-identity-metrics-data:processResources", "org.cloudfoundry.identity.uaa.web.SessionIdleTimeoutSetterTest", "org.cloudfoundry.identity.uaa.provider.saml.ComparableProviderTest", "org.cloudfoundry.identity.uaa.mfa.MfaCredentialsSessionCacheTest", "org.cloudfoundry.identity.uaa.web.HealthzEndpointTests", "org.cloudfoundry.identity.uaa.provider.IdentityProviderEndpointsTest", "org.cloudfoundry.identity.uaa.login.UaaAuthenticationFailureHandlerTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpInitiatedLoginControllerTests", ":cloudfoundry-identity-metrics-data:compileJava", "org.cloudfoundry.identity.uaa.provider.saml.SamlIdentityProviderDefinitionTests", "org.cloudfoundry.identity.uaa.oauth.token.TokenKeyEndpointTests", "org.cloudfoundry.identity.uaa.audit.LoggingAuditServiceTest", "org.cloudfoundry.identity.uaa.db.OauthCodeIndexTest", "org.cloudfoundry.identity.uaa.client.SourceTests", "org.cloudfoundry.identity.uaa.login.UaaResetPasswordServiceTests", "org.cloudfoundry.identity.uaa.authentication.manager.LdapLoginAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.provider.KeystoneIdentityProviderDefinitionTest", "org.cloudfoundry.identity.uaa.mfa.MfaRequiredFilterTests", "org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationRequestManagerTests", "org.cloudfoundry.identity.uaa.util.UaaUrlUtilsTest", "org.cloudfoundry.identity.uaa.login.AccountSavingAuthenticationSuccessHandlerTest", "org.cloudfoundry.identity.uaa.oauth.jwk.RsaJsonWebKeyTests", "org.cloudfoundry.identity.uaa.mfa.GeneralMfaProviderValidatorTest"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_1461", "original_commit_message": "Validate form_redirect_uri parameter against the request host.\n- The form_redirect_uri is now only used if it redirects to the same\nhost as the receiving UAA server.\n[#158222161] https://www.pivotaltracker.com/story/show/158222161\nSigned-off-by: Jaskanwal Pawar <jpawar@pivotal.io>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandler.java b/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandler.java\nindex f8de88d76..ed602321e 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandler.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandler.java\n@@ -21,6 +21,8 @@ import org.springframework.security.web.authentication.SavedRequestAwareAuthenti\n \n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n \n public class UaaSavedRequestAwareAuthenticationSuccessHandler extends SavedRequestAwareAuthenticationSuccessHandler {\n     public static final String SAVED_REQUEST_SESSION_ATTRIBUTE = \"SPRING_SECURITY_SAVED_REQUEST\";\n@@ -38,10 +40,23 @@ public class UaaSavedRequestAwareAuthenticationSuccessHandler extends SavedReque\n         if (redirectAttribute !=null) {\n             logger.debug(\"Returning redirectAttribute saved URI:\"+redirectAttribute);\n             return (String) redirectAttribute;\n-        } else if (redirectFormParam != null) {\n+        } else if (isApprovedFormRedirectUri(request, redirectFormParam)) {\n             return redirectFormParam;\n         } else {\n             return super.determineTargetUrl(request, response);\n         }\n     }\n+\n+    private boolean isApprovedFormRedirectUri(HttpServletRequest request, String redirectUri) {\n+        if (redirectUri == null) {\n+            return false;\n+        }\n+\n+        try {\n+            URL url = new URL(redirectUri);\n+            return request.getServerName().equals(url.getHost());\n+        } catch (MalformedURLException e) {\n+            return false;\n+        }\n+    }\n }\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandlerTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandlerTests.java\nindex 90bc759ff..a8918de43 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandlerTests.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandlerTests.java\n@@ -41,16 +41,26 @@ public class UaaSavedRequestAwareAuthenticationSuccessHandlerTests {\n         assertEquals(\"http://test.com\", handler.determineTargetUrl(request, new MockHttpServletResponse()));\n     }\n \n-    @Test\n-    public void form_parameter_works() {\n-        request.setParameter(FORM_REDIRECT_PARAMETER, \"http://test.com\");\n-        assertEquals(\"http://test.com\", handler.determineTargetUrl(request, new MockHttpServletResponse()));\n-    }\n-\n     @Test\n     public void form_parameter_is_overridden() {\n         request.setParameter(FORM_REDIRECT_PARAMETER, \"http://test.com\");\n         request.setAttribute(URI_OVERRIDE_ATTRIBUTE, \"http://override.test.com\");\n         assertEquals(\"http://override.test.com\", handler.determineTargetUrl(request, new MockHttpServletResponse()));\n     }\n-}\n\\ No newline at end of file\n+\n+    @Test\n+    public void validFormRedirectIsReturned() {\n+        String redirectUri = request.getScheme() + \"://\" + request.getServerName() + \"/test\";\n+\n+        request.setParameter(FORM_REDIRECT_PARAMETER, redirectUri);\n+        assertEquals(redirectUri, handler.determineTargetUrl(request, new MockHttpServletResponse()));\n+    }\n+\n+    @Test\n+    public void invalidFormRedirectIsNotReturned() {\n+        String redirectUri = \"http://test.com/test\";\n+\n+        request.setParameter(FORM_REDIRECT_PARAMETER, redirectUri);\n+        assertEquals(\"/\", handler.determineTargetUrl(request, new MockHttpServletResponse()));\n+    }\n+}\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "7a8f157f7e2feed2d0ebb63b163ff735b6340b96", "source_date": "Tue Jun 12 14:52:02 2018 -0700", "source_tag": "4.19.0", "target_commit": "57a15dfb7e0e3a59019ebe951793b586512b1962", "target_date": "Thu Jun 14 16:02:52 2018 -0700", "target_tag": "4.7.5", "FAIL TO PASS": ["org.cloudfoundry.identity.uaa.web.UaaSavedRequestAwareAuthenticationSuccessHandlerTests > invalidFormRedirectIsNotReturned"], "PASS TO PASS": ["org.cloudfoundry.identity.uaa.zone.ZoneAwareClientSecretPolicyValidatorTests", "org.cloudfoundry.identity.uaa.zone.event.IdentityProviderModifiedEventTest", "org.cloudfoundry.identity.uaa.oauth.approval.ApprovalTests", "org.cloudfoundry.identity.uaa.provider.ldap.LdapIdentityProviderDefinitionTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.ZoneAwareIdpMetadataGeneratorTest", "org.cloudfoundry.identity.uaa.mfa_provider.JdbcMfaProviderProvisioningTest", "org.cloudfoundry.identity.uaa.util.log.SyslogAppenderTest", "org.cloudfoundry.identity.uaa.mfa_provider.MfaProviderEndpointsTest", "org.cloudfoundry.identity.uaa.db.ClientDetailsHasRequiredUserScopes", "org.cloudfoundry.identity.uaa.provider.saml.BootstrapSamlIdentityProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.login.LoginInfoEndpointTests", "org.cloudfoundry.identity.uaa.user.BCryptPasswordEncoderTest", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupExternalMembershipManagerTests", ":cloudfoundry-identity-metrics-data:classes", "org.cloudfoundry.identity.uaa.zone.GeneralIdentityZoneConfigurationValidatorTests", ":cloudfoundry-identity-server:compileTestJava", "org.cloudfoundry.identity.uaa.login.ResetPasswordControllerTest", "org.cloudfoundry.identity.uaa.audit.event.ApprovalModifiedEventTest", "org.cloudfoundry.identity.uaa.authentication.BackwardsCompatibleTokenEndpointAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.oauth.AuthorizePromptNoneEntryPointTest", "org.cloudfoundry.identity.uaa.authentication.UaaClientAuthenticationProviderTest", ":cloudfoundry-identity-server:processResources", "org.cloudfoundry.identity.uaa.openid.UserInfoEndpointTests", "org.cloudfoundry.identity.uaa.web.UaaSessionCookieConfigTest", "org.cloudfoundry.identity.uaa.authentication.login.RemoteAuthenticationEndpointTests", "org.cloudfoundry.identity.uaa.provider.saml.ZoneAwareMetadataGeneratorTests", "org.cloudfoundry.identity.uaa.client.ClientAdminBootstrapTests", "org.cloudfoundry.identity.uaa.db.ClientDetailsSupportsExtendedAuthoritesAndScopes", "org.cloudfoundry.identity.uaa.test.CreateDB", "org.cloudfoundry.identity.uaa.audit.event.AuditListenerTests", "org.cloudfoundry.identity.uaa.oauth.token.Saml2TokenGranterTest", "org.cloudfoundry.identity.uaa.util.ColorHashTest", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.provider.ldap.LdapIdentityProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.SamlServiceProviderDefinitionTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpWebSsoProfileImplTest", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupProvisioningTests", "org.cloudfoundry.identity.uaa.zone.IdentityZoneHolderTest", "org.cloudfoundry.identity.uaa.oauth.jwt.CommonSignatureVerifierTest", "org.cloudfoundry.identity.uaa.util.log.LineAwareLayoutTest", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimExternalGroupBootstrapTests", "org.cloudfoundry.identity.uaa.oauth.UaaTokenStoreTests", "org.cloudfoundry.identity.uaa.oauth.token.KeyInfoTests", "org.cloudfoundry.identity.uaa.authentication.manager.ScopeAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.zone.IdentityZoneResolvingFilterTests", "org.cloudfoundry.identity.uaa.authentication.WhitelistLogoutHandlerTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.SamlServiceProviderConfiguratorTest", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.zone.IdentityZoneEndpointsTests", "org.cloudfoundry.identity.uaa.account.PasswordCheckEndpointTests", ":cloudfoundry-identity-model:gitInfo", "org.cloudfoundry.identity.uaa.login.ChangePasswordControllerTest", "org.cloudfoundry.identity.uaa.config.YamlPropertiesFactoryBeanTests", "org.cloudfoundry.identity.uaa.oauth.token.UserTokenGranterTest", "org.cloudfoundry.identity.uaa.metrics.QueryFilterTests", "org.cloudfoundry.identity.uaa.authentication.manager.LoginAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.authentication.event.UserAuthenticationSuccessEventTests", "org.cloudfoundry.identity.uaa.user.InMemoryUaaUserDatabaseTests", "org.cloudfoundry.identity.uaa.authentication.ClientBasicAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlSessionStorageFactoryTests", "org.cloudfoundry.identity.uaa.security.web.CorsFilterTests", "org.cloudfoundry.identity.uaa.util.UaaMapUtilsTest", "org.cloudfoundry.identity.uaa.oauth.token.JwtTokenGranterTests", "org.cloudfoundry.identity.uaa.scim.util.ScimUtilsTest", "org.cloudfoundry.identity.uaa.security.web.SecurityFilterChainPostProcessorTests", "org.cloudfoundry.identity.uaa.oauth.TokenRevocationEndpointTests", "org.cloudfoundry.identity.uaa.scim.ScimGroupMemberTests", "org.cloudfoundry.identity.uaa.zone.JdbcIdentityZoneProvisioningTests", "org.cloudfoundry.identity.uaa.codestore.CodeStoreEndpointsTests", "org.cloudfoundry.identity.uaa.client.ClientAdminEndpointsTests", "org.cloudfoundry.identity.uaa.login.util.FakeJavaMailSenderTest", "org.cloudfoundry.identity.uaa.scim.endpoints.PasswordResetEndpointTest", "org.cloudfoundry.identity.uaa.web.ForwardAwareInternalResourceViewResolverTests", "org.cloudfoundry.identity.uaa.web.ExceptionReportHttpMessageConverterTest", "org.cloudfoundry.identity.uaa.oauth.DisableIdTokenResponseTypeFilterTest", "org.cloudfoundry.identity.uaa.oauth.approval.JdbcApprovalStoreTests", "org.cloudfoundry.identity.uaa.authentication.UTF8ConversionFilterTests", "org.cloudfoundry.identity.uaa.db.TableAndColumnNormalizationTest", "org.cloudfoundry.identity.uaa.util.UaaPagingUtilsTests", "org.cloudfoundry.identity.uaa.db.RevocableTokenTableTest", "org.cloudfoundry.identity.uaa.authentication.listener.UserAuthenticationSuccessListenerTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimGroupEndpointsTests", "org.cloudfoundry.identity.uaa.util.TokenValidationTest", "org.cloudfoundry.identity.uaa.provider.saml.SamlRedirectUtilsTest", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.login.EmailChangeEmailServiceTest", "org.cloudfoundry.identity.uaa.util.CachingPasswordEncoderTest", "org.cloudfoundry.identity.uaa.authorization.external.LdapGroupMappingAuthorizationManagerTests", "org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationSerializerDeserializerTest", "org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationSerializationTests", ":cloudfoundry-identity-server:compileTestJava/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", ":cloudfoundry-identity-server:testClasses", "org.cloudfoundry.identity.uaa.oauth.expression.IsSelfCheckTest", "org.cloudfoundry.identity.uaa.zone.MultitenantJdbcClientDetailsServiceTests", "org.cloudfoundry.identity.uaa.zone.BannerValidatorTest", "org.cloudfoundry.identity.uaa.login.ProfileControllerTests", "org.cloudfoundry.identity.uaa.audit.AuditEventTypeTests", "org.cloudfoundry.identity.uaa.scim.jdbc.ScimSearchQueryConverterTests", "org.cloudfoundry.identity.uaa.db.UserInfoTableTest", "org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcherTests", "org.cloudfoundry.identity.uaa.oauth.RestrictUaaScopesClientValidatorTest", "org.cloudfoundry.identity.uaa.resources.jdbc.JdbcSqlAdapterTests", "org.cloudfoundry.identity.uaa.oauth.jwk.JsonWebKeySetTests", "org.cloudfoundry.identity.uaa.login.EmailInvitationsServiceTests", "org.cloudfoundry.identity.uaa.scim.ScimCoreTests", "org.cloudfoundry.identity.uaa.config.IdentityZoneConfigurationBootstrapTests", "org.cloudfoundry.identity.uaa.provider.saml.ConfigMetadataProviderTest", "org.cloudfoundry.identity.uaa.oauth.token.UaaTokenEndpointTests", "org.cloudfoundry.identity.uaa.authentication.SystemAuthenticationTest", "org.cloudfoundry.identity.uaa.cache.ExpiringUrlCacheTests", ":cloudfoundry-identity-model:classes", "org.cloudfoundry.identity.uaa.util.UaaStringUtilsTest", "org.cloudfoundry.identity.uaa.zone.event.IdentityZoneModifiedEventTest", "org.cloudfoundry.identity.uaa.config.NestedMapPropertySourceTests", "org.cloudfoundry.identity.uaa.security.DefaultSecurityContextAccessorTests", "org.cloudfoundry.identity.uaa.metrics.UaaMetricsFilterTests", "org.cloudfoundry.identity.uaa.oauth.CheckTokenEndpointTests", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimUserProvisioningTests", "org.cloudfoundry.identity.uaa.authentication.SessionResetFilterTests", "org.cloudfoundry.identity.uaa.oauth.jwt.CommonSignerTest", "org.cloudfoundry.identity.uaa.authentication.SamlAssertionBindingTests", "org.cloudfoundry.identity.uaa.authentication.manager.CheckIdpEnabledAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.scim.endpoints.ScimUserEndpointsTests", "org.cloudfoundry.identity.uaa.oauth.event.ClientAdminEventPublisherTests", "org.cloudfoundry.identity.uaa.zone.InvalidClientSecretExceptionTests", "org.cloudfoundry.identity.uaa.db.OldAuthzTableDropped", "org.cloudfoundry.identity.uaa.web.LimitedModeUaaFilterTests", "org.cloudfoundry.identity.uaa.web.UaaSavedRequestCacheTests", "org.cloudfoundry.identity.uaa.authentication.manager.ChainedAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.util.RestTemplateFactoryTests", "org.cloudfoundry.identity.uaa.impl.config.YamlServletProfileInitializerTest", "org.cloudfoundry.identity.uaa.db.RevocableTokenIndexTest_4_0_8", "org.cloudfoundry.identity.uaa.error.ConvertingExceptionViewTests", "org.cloudfoundry.identity.uaa.scim.exception.InvalidPasswordExceptionTest", "org.cloudfoundry.identity.uaa.provider.saml.SamlMessageStorageTest", "org.cloudfoundry.identity.uaa.oauth.token.JdbcRevocableTokenProvisioningTest", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimGroupBootstrapTests", "org.cloudfoundry.identity.uaa.provider.oauth.OauthIdentityProviderDefinitionFactoryBeanTest", ":cloudfoundry-identity-model:buildInfo", "org.cloudfoundry.identity.uaa.user.UaaAuthorityTests", "org.cloudfoundry.identity.uaa.provider.saml.SamlIdentityProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.provider.ldap.DynamicPasswordComparatorTests", "org.cloudfoundry.identity.uaa.resources.jdbc.JdbcPagingListTests", "org.cloudfoundry.identity.uaa.scim.validate.UaaPasswordPolicyValidatorTests", "org.cloudfoundry.identity.uaa.config.YamlServletProfileInitializerTests", "org.cloudfoundry.identity.uaa.authentication.manager.CommonLoginPolicyTest", "org.cloudfoundry.identity.uaa.util.UaaTokenUtilsTest", "org.cloudfoundry.identity.uaa.resources.MessageTests", "org.cloudfoundry.identity.uaa.login.AccountsControllerTest", "org.cloudfoundry.identity.uaa.authentication.manager.ExternalLoginAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.oauth.approval.ApprovalsAdminEndpointsTests", "org.cloudfoundry.identity.uaa.audit.JdbcAuditServiceTests", "org.cloudfoundry.identity.uaa.web.RecognizeFailureDispatcherServletTest", "org.cloudfoundry.identity.uaa.db.GroupMembershipAuthoritiesNullableTest", "org.cloudfoundry.identity.uaa.util.LinkedMaskingMultiValueMapTests", "org.cloudfoundry.identity.uaa.config.YamlBindingTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpSamlAuthenticationSuccessHandlerTest", "org.cloudfoundry.identity.uaa.authentication.ClientParametersAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.login.EmailAccountCreationServiceTests", "org.cloudfoundry.identity.uaa.client.OAuth2ClientAuthenticationFilterTests", ":cloudfoundry-identity-model:processResources", "org.cloudfoundry.identity.uaa.user.UaaUserEditorTests", "org.cloudfoundry.identity.uaa.client.SocialClientUserDetailsSourceTests", ":cloudfoundry-identity-model:jar", "org.cloudfoundry.identity.uaa.provider.saml.SamlKeyManagerFactoryTests", "org.cloudfoundry.identity.uaa.security.CsrfAwareEntryPointAndDeniedHandlerTest", "org.cloudfoundry.identity.uaa.authentication.manager.AuthzAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.login.PasswordConfirmationValidationTest", ":cloudfoundry-identity-server:compileJava", "org.cloudfoundry.identity.uaa.oauth.ClientInfoEndpointTests", "org.cloudfoundry.identity.uaa.provider.ldap.ProcessLdapPropertiesTest", ":cloudfoundry-identity-server:compileJava/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", "org.cloudfoundry.identity.uaa.logging.SanitizedLogFactoryTest", "org.cloudfoundry.identity.uaa.login.EmailServiceTests", "org.cloudfoundry.identity.uaa.oauth.token.AddTokenGranterTests", "org.cloudfoundry.identity.uaa.config.PasswordPolicyTest", "org.cloudfoundry.identity.uaa.login.ChangeEmailControllerTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.NonSnarlIdpMetadataManagerTest", "org.cloudfoundry.identity.uaa.account.event.PasswordChangeEventPublisherTests", "org.cloudfoundry.identity.uaa.db.StoreSubDomainAsLowerCase_V2_7_3_Tests", "org.cloudfoundry.identity.uaa.provider.saml.LoginSAMLAuthenticationFailureHandlerTest", "org.cloudfoundry.identity.uaa.db.TestDataSourcePool", "org.cloudfoundry.identity.uaa.authentication.AuthzAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.invitations.InvitationsControllerTest", "org.cloudfoundry.identity.uaa.error.UaaExceptionTests", "org.cloudfoundry.identity.uaa.scim.bootstrap.ScimUserBootstrapTests", "org.cloudfoundry.identity.uaa.config.IdentityProviderBootstrapTest", "org.cloudfoundry.identity.uaa.provider.saml.LoginSamlAuthenticationProviderTests", ":cloudfoundry-identity-server:classes", "org.cloudfoundry.identity.uaa.account.PasswordChangeEndpointTests", "org.cloudfoundry.identity.uaa.zone.event.ServiceProviderModifiedEventTest", ":cloudfoundry-identity-metrics-data:processResources", "org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationEndpointTest", "org.cloudfoundry.identity.uaa.test.UaaTestAccountsTest", "org.cloudfoundry.identity.uaa.provider.saml.ComparableProviderTest", ":cloudfoundry-identity-model:mainOutputResourcesDir", "org.cloudfoundry.identity.uaa.db.TestThatClientIdIsVchar255", "org.cloudfoundry.identity.uaa.login.SamlLoginServerKeyManagerTests", "org.cloudfoundry.identity.uaa.security.X509ExpiryCheckingTrustManagerTest", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeStoreTests", "org.cloudfoundry.identity.uaa.oauth.UserManagedAuthzApprovalHandlerTests", "org.cloudfoundry.identity.uaa.logging.LogSanitizerUtilTest", "org.cloudfoundry.identity.uaa.provider.saml.idp.JdbcSamlServiceProviderProvisioningTest", "org.cloudfoundry.identity.uaa.oauth.AntPathRedirectResolverTests", "org.cloudfoundry.identity.uaa.util.UaaHttpRequestUtilsTest", "org.cloudfoundry.identity.uaa.web.HealthzEndpointTests", "/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", "org.cloudfoundry.identity.uaa.provider.IdentityProviderEndpointsTest", "org.cloudfoundry.identity.uaa.audit.event.SystemDeletableTest", "org.cloudfoundry.identity.uaa.login.UaaAuthenticationFailureHandlerTests", "/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", "org.cloudfoundry.identity.uaa.db.DatabaseParametersTests", "org.cloudfoundry.identity.uaa.user.JdbcUaaUserDatabaseTests", "org.cloudfoundry.identity.uaa.oauth.JdbcQueryableClientDetailsServiceTests", "org.cloudfoundry.identity.uaa.provider.saml.idp.IdpInitiatedLoginControllerTests", "org.cloudfoundry.identity.uaa.login.ForcePasswordChangeControllerTest", "org.cloudfoundry.identity.uaa.impl.config.ScimExternalGroupsTypeResolvingFactoryBeanTest", "org.cloudfoundry.identity.uaa.login.AutologinAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.invitations.InvitationsAuthenticationTrustResolverTest", "org.cloudfoundry.identity.uaa.account.ResetPasswordAuthenticationFilterTest", "org.cloudfoundry.identity.uaa.scim.endpoints.UserIdConversionEndpointsTests", "org.cloudfoundry.identity.uaa.config.YamlConfigurationValidatorTests", ":cloudfoundry-identity-metrics-data:compileJava", "org.cloudfoundry.identity.uaa.util.DomainFilterTest", ":cloudfoundry-identity-metrics-data:jar", "org.cloudfoundry.identity.uaa.provider.saml.SamlIdentityProviderDefinitionTests", "org.cloudfoundry.identity.uaa.db.ExpiringCodeTableTest", "org.cloudfoundry.identity.uaa.login.HomeControllerViewTests", "org.cloudfoundry.identity.uaa.oauth.token.TokenKeyEndpointTests", "org.cloudfoundry.identity.uaa.oauth.AccessControllerTests", "org.cloudfoundry.identity.uaa.util.EnsureOldLibrariesAreRemoved", "org.cloudfoundry.identity.uaa.oauth.ZoneEndpointsClientDetailsValidatorTests", "org.cloudfoundry.identity.uaa.provider.ldap.ExtendedLdapUserMapperTest", "org.cloudfoundry.identity.uaa.scim.ScimUserTests", "org.cloudfoundry.identity.uaa.config.IdentityZoneConfigurationTests", ":cloudfoundry-identity-server:processTestResources", "org.cloudfoundry.identity.uaa.authentication.manager.PeriodLockoutPolicyTests", "org.cloudfoundry.identity.uaa.mfa_provider.GoogleMfaProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.mfa_provider.GeneralMfaProviderValidatorTest", "org.cloudfoundry.identity.uaa.audit.LoggingAuditServiceTest", "org.cloudfoundry.identity.uaa.db.OauthCodeIndexTest", "org.cloudfoundry.identity.uaa.oauth.jwt.ChainedSignatureVerifierTests", "org.cloudfoundry.identity.uaa.scim.endpoints.ChangeEmailEndpointsTest", "org.cloudfoundry.identity.uaa.client.SourceTests", "org.cloudfoundry.identity.uaa.login.UaaResetPasswordServiceTests", "org.cloudfoundry.identity.uaa.config.EnvironmentPropertiesFactoryBeanTests", "org.cloudfoundry.identity.uaa.account.ResetPasswordAuthenticationEntryPointTests", "org.cloudfoundry.identity.uaa.authentication.manager.LdapLoginAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.provider.uaa.UaaIdentityProviderConfigValidatorTest", ":cloudfoundry-identity-model:compileJava", "org.cloudfoundry.identity.uaa.provider.KeystoneIdentityProviderDefinitionTest", "org.cloudfoundry.identity.uaa.audit.JdbcFailedLoginCountingAuditServiceTests", "org.cloudfoundry.identity.uaa.resources.jdbc.LimitSqlAdapterFactoryTest", "org.cloudfoundry.identity.uaa.config.YamlMapFactoryBeanTests", "org.cloudfoundry.identity.uaa.util.NullifyFieldsTest", "org.cloudfoundry.identity.uaa.oauth.UaaTokenServicesTests", "org.cloudfoundry.identity.uaa.oauth.UaaOauth2ErrorHandlerTests", "org.cloudfoundry.identity.uaa.provider.IdentityProviderConfigValidationDelegatorTest", "org.cloudfoundry.identity.uaa.login.NotificationsServiceTest", "org.cloudfoundry.identity.uaa.db.TestSchemaValidation", "org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationRequestManagerTests", "org.cloudfoundry.identity.uaa.authentication.ZoneAwareWhitelistLogoutHandlerTests", "org.cloudfoundry.identity.uaa.oauth.UaaUserApprovalHandlerTests", "org.cloudfoundry.identity.uaa.provider.LockoutPolicyTests", "org.cloudfoundry.identity.uaa.provider.oauth.XOAuthIdentityProviderConfigValidatorTest", "org.cloudfoundry.identity.uaa.oauth.RemoteTokenServicesTests", "org.cloudfoundry.identity.uaa.authentication.manager.KeystoneAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.scim.jdbc.JdbcScimGroupMembershipManagerTests", "org.cloudfoundry.identity.uaa.login.UsernamePasswordExtractingAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.zone.GeneralIdentityZoneValidatorTests", "org.cloudfoundry.identity.uaa.util.UaaUrlUtilsTest", "org.cloudfoundry.identity.uaa.login.AccountSavingAuthenticationSuccessHandlerTest", "org.cloudfoundry.identity.uaa.web.HeaderFilterTest", "org.cloudfoundry.identity.uaa.zone.IdentityZoneSwitchingFilterTests", "org.cloudfoundry.identity.uaa.client.JdbcClientMetadataProvisioningTest", "org.cloudfoundry.identity.uaa.performance.TestMySQLEmailSearch", "org.cloudfoundry.identity.uaa.web.CookieBasedCsrfTokenRepositoryTests", "org.cloudfoundry.identity.uaa.client.ClientAdminEndpointsValidatorTests", "org.cloudfoundry.identity.uaa.metrics.IdleTimerTests", "org.cloudfoundry.identity.uaa.zone.JdbcIdentityProviderProvisioningTests", "org.cloudfoundry.identity.uaa.util.KeyWithCertTest", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeTests", "org.cloudfoundry.identity.uaa.oauth.client.ClientDetailsModificationTests", "org.cloudfoundry.identity.uaa.util.TimeBasedExpiringValueMapTest", "org.cloudfoundry.identity.uaa.oauth.UaaScopesTests", "org.cloudfoundry.identity.uaa.web.HttpHeadersFilterRequestWrapperTest", "org.cloudfoundry.identity.uaa.audit.event.EntityDeletedEventTest", "org.cloudfoundry.identity.uaa.config.EnvironmentMapFactoryBeanTests", "org.cloudfoundry.identity.uaa.login.UaaChangePasswordServiceTest", "org.cloudfoundry.identity.uaa.oauth.jwt.JwtHelperTest", "org.cloudfoundry.identity.uaa.oauth.jwk.RsaJsonWebKeyTests", "org.cloudfoundry.identity.uaa.resources.jdbc.SimpleSearchQueryConverterTests"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_439", "original_commit_message": "[1.7.x] Fixed is_safe_url() to handle leading whitespace.\nThis is a security fix. Disclosure following shortly.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/utils/http.py b/django/utils/http.py\nindex 67414d93f6..6aa5cd38d6 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -272,6 +272,7 @@ def is_safe_url(url, host=None):\n     \"\"\"\n     if not url:\n         return False\n+    url = url.strip()\n     # Chrome treats \\ completely as /\n     url = url.replace('\\\\', '/')\n     # Chrome considers any URL with more than two slashes to be absolute, but\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex db24d1c9f2..3b3083baf0 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -107,7 +107,8 @@ class TestUtilsHttp(unittest.TestCase):\n                         'http:/\\//example.com',\n                         'http:\\/example.com',\n                         'http:/\\example.com',\n-                        'javascript:alert(\"XSS\")'):\n+                        'javascript:alert(\"XSS\")',\n+                        '\\njavascript:alert(x)'):\n             self.assertFalse(http.is_safe_url(bad_url, host='testserver'), \"%s should be blocked\" % bad_url)\n         for good_url in ('/view/?param=http://example.com',\n                      '/view/?param=https://example.com',\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "de67dedc771ad2edec15c1d00c083a1a084e1e89", "source_date": "Tue Jan 13 13:02:56 2015 -0500", "source_tag": "1.7.3", "target_commit": "72e0b033662faa11bb7f516f18a132728aa0ae28", "target_date": "Tue Jan 13 13:10:11 2015 -0500", "target_tag": "1.6.10", "FAIL TO PASS": ["utils_tests.test_http.TestUtilsHttp.test_is_safe_url"], "PASS TO PASS": ["utils_tests.test_http.HttpDateProcessingTests.testParsingAsctime", "utils_tests.test_http.TestUtilsHttp.test_same_origin_false", "utils_tests.test_http.TestUtilsHttp.test_urlencode", "utils_tests.test_http.HttpDateProcessingTests.testParsingRfc850", "utils_tests.test_http.TestUtilsHttp.test_base36", "utils_tests.test_http.HttpDateProcessingTests.testParsingRfc1123", "utils_tests.test_http.ETagProcessingTests.testParsing", "utils_tests.test_http.ETagProcessingTests.testQuoting", "utils_tests.test_http.TestUtilsHttp.test_same_origin_true"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_1463", "original_commit_message": "Request cache only saves requests with form_redirect_uri if it's valid\n- A valid/approved form_redirect_uri value has the same host as the\nreceiving UAA server.\n[#158222161] https://www.pivotaltracker.com/story/show/158222161\nSigned-off-by: Jaskanwal Pawar <jpawar@pivotal.io>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/util/UaaUrlUtils.java b/server/src/main/java/org/cloudfoundry/identity/uaa/util/UaaUrlUtils.java\nindex 016e45dd8..dc8a315c3 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/util/UaaUrlUtils.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/util/UaaUrlUtils.java\n@@ -14,6 +14,15 @@\n  */\n package org.cloudfoundry.identity.uaa.util;\n \n+import org.cloudfoundry.identity.uaa.zone.IdentityZone;\n+import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;\n+import org.springframework.util.AntPathMatcher;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n+import org.springframework.web.util.UriComponentsBuilder;\n+import org.springframework.web.util.UriUtils;\n+\n import javax.servlet.http.HttpServletRequest;\n import java.io.UnsupportedEncodingException;\n import java.net.MalformedURLException;\n@@ -25,16 +34,6 @@ import java.util.List;\n import java.util.Map;\n import java.util.regex.Pattern;\n \n-import org.cloudfoundry.identity.uaa.zone.IdentityZone;\n-import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;\n-\n-import org.springframework.util.AntPathMatcher;\n-import org.springframework.util.MultiValueMap;\n-import org.springframework.util.StringUtils;\n-import org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n-import org.springframework.web.util.UriComponentsBuilder;\n-import org.springframework.web.util.UriUtils;\n-\n import static java.util.Collections.emptyList;\n import static java.util.Optional.ofNullable;\n import static org.springframework.util.StringUtils.hasText;\n@@ -228,4 +227,17 @@ public abstract class UaaUrlUtils {\n         String path = String.format(\"%s%s\", servletPath, pathInfo);\n         return path;\n     }\n+\n+    public static boolean uriHasMatchingHost(String uri, String hostname) {\n+        if (uri == null) {\n+            return false;\n+        }\n+\n+        try {\n+            URL url = new URL(uri);\n+            return hostname.equals(url.getHost());\n+        } catch (MalformedURLException e) {\n+            return false;\n+        }\n+    }\n }\n\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandler.java b/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandler.java\nindex ed602321e..9c064c6e5 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandler.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandler.java\n@@ -17,12 +17,11 @@ package org.cloudfoundry.identity.uaa.web;\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n+import org.cloudfoundry.identity.uaa.util.UaaUrlUtils;\n import org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;\n \n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n \n public class UaaSavedRequestAwareAuthenticationSuccessHandler extends SavedRequestAwareAuthenticationSuccessHandler {\n     public static final String SAVED_REQUEST_SESSION_ATTRIBUTE = \"SPRING_SECURITY_SAVED_REQUEST\";\n@@ -40,23 +39,10 @@ public class UaaSavedRequestAwareAuthenticationSuccessHandler extends SavedReque\n         if (redirectAttribute !=null) {\n             logger.debug(\"Returning redirectAttribute saved URI:\"+redirectAttribute);\n             return (String) redirectAttribute;\n-        } else if (isApprovedFormRedirectUri(request, redirectFormParam)) {\n+        } else if (UaaUrlUtils.uriHasMatchingHost(redirectFormParam, request.getServerName())) {\n             return redirectFormParam;\n         } else {\n             return super.determineTargetUrl(request, response);\n         }\n     }\n-\n-    private boolean isApprovedFormRedirectUri(HttpServletRequest request, String redirectUri) {\n-        if (redirectUri == null) {\n-            return false;\n-        }\n-\n-        try {\n-            URL url = new URL(redirectUri);\n-            return request.getServerName().equals(url.getHost());\n-        } catch (MalformedURLException e) {\n-            return false;\n-        }\n-    }\n }\n\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestCache.java b/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestCache.java\nindex 234eab307..4b02f9b86 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestCache.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestCache.java\n@@ -92,7 +92,9 @@ public class UaaSavedRequestCache extends HttpSessionRequestCache implements Fil\n         if (StringUtils.isEmpty(formRedirect)) {\n             return false;\n         }\n-\n+        if (!UaaUrlUtils.uriHasMatchingHost(formRedirect, request.getServerName())) {\n+            return false;\n+        }\n         if (hasSavedRequest(request)) {\n             return false;\n         }\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/util/UaaUrlUtilsTest.java b/server/src/test/java/org/cloudfoundry/identity/uaa/util/UaaUrlUtilsTest.java\nindex b4a2f6756..04a3cc316 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/util/UaaUrlUtilsTest.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/util/UaaUrlUtilsTest.java\n@@ -12,17 +12,9 @@\n  *******************************************************************************/\n package org.cloudfoundry.identity.uaa.util;\n \n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n import org.cloudfoundry.identity.uaa.zone.IdentityZone;\n import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;\n import org.cloudfoundry.identity.uaa.zone.MultitenancyFixture;\n-\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n@@ -30,11 +22,20 @@ import org.springframework.mock.web.MockHttpServletRequest;\n import org.springframework.web.context.request.RequestContextHolder;\n import org.springframework.web.context.request.ServletRequestAttributes;\n \n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.Matchers.equalTo;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n public class UaaUrlUtilsTest {\n@@ -422,6 +423,19 @@ public class UaaUrlUtilsTest {\n         assertEquals(\"http://somezone2.localhost:8080\", url2);\n     }\n \n+    @Test\n+    public void testUriHasMatchingHost() {\n+        assertTrue(UaaUrlUtils.uriHasMatchingHost(\"http://test.com/test\", \"test.com\"));\n+        assertTrue(UaaUrlUtils.uriHasMatchingHost(\"http://subdomain.test.com/test\", \"subdomain.test.com\"));\n+        assertTrue(UaaUrlUtils.uriHasMatchingHost(\"http://1.2.3.4/test\", \"1.2.3.4\"));\n+\n+        assertFalse(UaaUrlUtils.uriHasMatchingHost(null, \"test.com\"));\n+        assertFalse(UaaUrlUtils.uriHasMatchingHost(\"http://not-test.com/test\", \"test.com\"));\n+        assertFalse(UaaUrlUtils.uriHasMatchingHost(\"not-valid-url\", \"test.com\"));\n+        assertFalse(UaaUrlUtils.uriHasMatchingHost(\"http://1.2.3.4/test\", \"test.com\"));\n+        assertFalse(UaaUrlUtils.uriHasMatchingHost(\"http://test.com/test\", \"1.2.3.4\"));\n+    }\n+\n     private void validateRedirectUri(List<String> urls, boolean result) {\n         Map<String, String> failed = getFailedUrls(urls, result);\n         if (!failed.isEmpty()) {\n\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestCacheTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestCacheTests.java\nindex db5b92328..1618ae19a 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestCacheTests.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestCacheTests.java\n@@ -28,8 +28,13 @@ import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.security.web.savedrequest.SavedRequest;\n \n import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpSession;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n \n import static org.cloudfoundry.identity.uaa.web.UaaSavedRequestAwareAuthenticationSuccessHandler.FORM_REDIRECT_PARAMETER;\n import static org.cloudfoundry.identity.uaa.web.UaaSavedRequestAwareAuthenticationSuccessHandler.SAVED_REQUEST_SESSION_ATTRIBUTE;\n@@ -38,6 +43,7 @@ import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Matchers.anyObject;\n import static org.mockito.Matchers.anyString;\n import static org.mockito.Mockito.mock;\n@@ -103,6 +109,7 @@ public class UaaSavedRequestCacheTests {\n         request.setPathInfo(\"/login.do\");\n         request.setRequestURI(\"/login.do\");\n         request.setParameter(FORM_REDIRECT_PARAMETER, redirectUri);\n+        request.setServerName(new URL(redirectUri).getHost());\n         assertTrue(cache.shouldSaveFormRedirectParameter(request));\n         ServletResponse response = new MockHttpServletResponse();\n \n@@ -145,8 +152,11 @@ public class UaaSavedRequestCacheTests {\n \n     @Test\n     public void saveFormRedirectRequest() throws Exception {\n+        String redirectUri = \"http://login\";\n         request.setSession(session);\n-        request.setParameter(FORM_REDIRECT_PARAMETER, \"http://login\");\n+        request.setParameter(FORM_REDIRECT_PARAMETER, redirectUri);\n+        request.setServerName(new URL(redirectUri).getHost());\n+\n         spy.saveRequest(request, new MockHttpServletResponse());\n         verify(spy).saveClientRedirect(request, request.getParameter(FORM_REDIRECT_PARAMETER));\n     }\n@@ -169,14 +179,19 @@ public class UaaSavedRequestCacheTests {\n     }\n \n     @Test\n-    public void should_save_condition_works() {\n+    public void should_save_condition_works() throws MalformedURLException {\n         assertFalse(cache.shouldSaveFormRedirectParameter(request));\n+\n         request.setPathInfo(\"/login.do\");\n         assertFalse(cache.shouldSaveFormRedirectParameter(request));\n+\n         request.setParameter(FORM_REDIRECT_PARAMETER, redirectUri);\n+        request.setServerName(new URL(redirectUri).getHost());\n         assertTrue(cache.shouldSaveFormRedirectParameter(request));\n+\n         request.setSession(session);\n         assertTrue(cache.shouldSaveFormRedirectParameter(request));\n+\n         ClientRedirectSavedRequest savedRequest = new ClientRedirectSavedRequest(request, redirectUri);\n         session.setAttribute(SAVED_REQUEST_SESSION_ATTRIBUTE, savedRequest);\n         assertFalse(cache.shouldSaveFormRedirectParameter(request));\n@@ -215,5 +230,16 @@ public class UaaSavedRequestCacheTests {\n \n     }\n \n+    @Test\n+    public void unapprovedFormRedirectRequestDoesNotSave() throws IOException, ServletException {\n+        request.setPathInfo(\"/login.do\");\n+        request.setRequestURI(\"/login.do\");\n+        request.setMethod(HttpMethod.POST.name());\n+        request.setParameter(FORM_REDIRECT_PARAMETER, \"http://test.com\");\n+        request.setServerName(\"not-test.com\");\n+\n+        spy.doFilter(request, new MockHttpServletResponse(), mock(FilterChain.class));\n \n+        verify(spy, never()).saveClientRedirect(any(HttpServletRequest.class), anyString());\n+    }\n }\n\\ No newline at end of file\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "f6362a8f1865314aa507fc5de772848b7e552365", "source_date": "Tue Jun 12 14:52:02 2018 -0700", "source_tag": "4.19.0", "target_commit": "238ce572fdaebbb8357b265d2f77eb9761199a09", "target_date": "Tue Jun 26 11:42:15 2018 -0700", "target_tag": "4.12.3", "FAIL TO PASS": ["/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/util/UaaUrlUtilsTest.java"], "PASS TO PASS": [":cloudfoundry-identity-model:mainOutputResourcesDir", ":cloudfoundry-identity-model:buildInfo", ":cloudfoundry-identity-model:compileJava", ":cloudfoundry-identity-model:processResources", ":cloudfoundry-identity-model:jar", ":cloudfoundry-identity-model:gitInfo", ":cloudfoundry-identity-model:classes", ":cloudfoundry-identity-metrics-data:classes", "/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", ":cloudfoundry-identity-metrics-data:compileJava", ":cloudfoundry-identity-server:compileTestJava/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", ":cloudfoundry-identity-server:classes", ":cloudfoundry-identity-metrics-data:processResources", ":cloudfoundry-identity-server:compileTestJava", ":cloudfoundry-identity-metrics-data:jar", ":cloudfoundry-identity-server:compileJava", ":cloudfoundry-identity-server:processResources"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_441", "original_commit_message": "[1.8.x] Fixed #19324 -- Avoided creating a session record when loading the session.\nThe session record is now only created if/when the session is modified. This\nprevents a potential DoS via creation of many empty session records.\nThis is a security fix; disclosure to follow shortly.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/contrib/sessions/backends/cache.py b/django/contrib/sessions/backends/cache.py\nindex 38b6112f51..5bc4dc1f8d 100644\n--- a/django/contrib/sessions/backends/cache.py\n+++ b/django/contrib/sessions/backends/cache.py\n@@ -27,7 +27,7 @@ class SessionStore(SessionBase):\n             session_data = None\n         if session_data is not None:\n             return session_data\n-        self.create()\n+        self._session_key = None\n         return {}\n \n     def create(self):\n@@ -49,6 +49,8 @@ class SessionStore(SessionBase):\n             \"It is likely that the cache is unavailable.\")\n \n     def save(self, must_create=False):\n+        if self.session_key is None:\n+            return self.create()\n         if must_create:\n             func = self._cache.add\n         else:\n@@ -60,7 +62,7 @@ class SessionStore(SessionBase):\n             raise CreateError\n \n     def exists(self, session_key):\n-        return (KEY_PREFIX + session_key) in self._cache\n+        return session_key and (KEY_PREFIX + session_key) in self._cache\n \n     def delete(self, session_key=None):\n         if session_key is None:\n\ndiff --git a/django/contrib/sessions/backends/cached_db.py b/django/contrib/sessions/backends/cached_db.py\nindex 0ba12f553f..435806595d 100644\n--- a/django/contrib/sessions/backends/cached_db.py\n+++ b/django/contrib/sessions/backends/cached_db.py\n@@ -51,12 +51,12 @@ class SessionStore(DBStore):\n                     logger = logging.getLogger('django.security.%s' %\n                             e.__class__.__name__)\n                     logger.warning(force_text(e))\n-                self.create()\n+                self._session_key = None\n                 data = {}\n         return data\n \n     def exists(self, session_key):\n-        if (KEY_PREFIX + session_key) in self._cache:\n+        if session_key and (KEY_PREFIX + session_key) in self._cache:\n             return True\n         return super(SessionStore, self).exists(session_key)\n \n\ndiff --git a/django/contrib/sessions/backends/db.py b/django/contrib/sessions/backends/db.py\nindex 450459108e..2d859d3b83 100644\n--- a/django/contrib/sessions/backends/db.py\n+++ b/django/contrib/sessions/backends/db.py\n@@ -26,7 +26,7 @@ class SessionStore(SessionBase):\n                 logger = logging.getLogger('django.security.%s' %\n                         e.__class__.__name__)\n                 logger.warning(force_text(e))\n-            self.create()\n+            self._session_key = None\n             return {}\n \n     def exists(self, session_key):\n@@ -43,7 +43,6 @@ class SessionStore(SessionBase):\n                 # Key wasn't unique. Try again.\n                 continue\n             self.modified = True\n-            self._session_cache = {}\n             return\n \n     def save(self, must_create=False):\n@@ -53,6 +52,8 @@ class SessionStore(SessionBase):\n         create a *new* entry (as opposed to possibly updating an existing\n         entry).\n         \"\"\"\n+        if self.session_key is None:\n+            return self.create()\n         obj = Session(\n             session_key=self._get_or_create_session_key(),\n             session_data=self.encode(self._get_session(no_load=must_create)),\n\ndiff --git a/django/contrib/sessions/backends/file.py b/django/contrib/sessions/backends/file.py\nindex 10d163acc4..41469c4a26 100644\n--- a/django/contrib/sessions/backends/file.py\n+++ b/django/contrib/sessions/backends/file.py\n@@ -97,7 +97,7 @@ class SessionStore(SessionBase):\n                     self.delete()\n                     self.create()\n         except (IOError, SuspiciousOperation):\n-            self.create()\n+            self._session_key = None\n         return session_data\n \n     def create(self):\n@@ -108,10 +108,11 @@ class SessionStore(SessionBase):\n             except CreateError:\n                 continue\n             self.modified = True\n-            self._session_cache = {}\n             return\n \n     def save(self, must_create=False):\n+        if self.session_key is None:\n+            return self.create()\n         # Get the session data now, before we start messing\n         # with the file it is stored within.\n         session_data = self._get_session(no_load=must_create)\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex 78f7a07155..a1aab37273 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -175,6 +175,11 @@ class SessionTestsMixin(object):\n         self.assertNotEqual(self.session.session_key, prev_key)\n         self.assertEqual(list(self.session.items()), prev_data)\n \n+    def test_save_doesnt_clear_data(self):\n+        self.session['a'] = 'b'\n+        self.session.save()\n+        self.assertEqual(self.session['a'], 'b')\n+\n     def test_invalid_key(self):\n         # Submitting an invalid session key (either by guessing, or if the db has\n         # removed the key) results in a new key being generated.\n@@ -313,6 +318,21 @@ class SessionTestsMixin(object):\n                 self.session.delete(old_session_key)\n                 self.session.delete(new_session_key)\n \n+    def test_session_load_does_not_create_record(self):\n+        \"\"\"\n+        Loading an unknown session key does not create a session record.\n+\n+        Creating session records on load is a DOS vulnerability.\n+        \"\"\"\n+        if self.backend is CookieSession:\n+            raise unittest.SkipTest(\"Cookie backend doesn't have an external store to create records in.\")\n+        session = self.backend('someunknownkey')\n+        session.load()\n+\n+        self.assertFalse(session.exists(session.session_key))\n+        # provided unknown key was cycled, not reused\n+        self.assertNotEqual(session.session_key, 'someunknownkey')\n+\n \n class DatabaseSessionTests(SessionTestsMixin, TestCase):\n \n\n</test_patch>\n", "file change type": "Files matched", "content change type": "logical and structural changes", "source_commit": "66d12d1ababa8f062857ee5eb43276493720bf16", "source_date": "Wed Jul 8 15:23:18 2015 -0400", "source_tag": "1.8.3", "target_commit": "2e47f3e401c29bc2ba5ab794d483cb0820855fb9", "target_date": "Wed Jul 8 07:38:06 2015 -0400", "target_tag": "1.4.21", "FAIL TO PASS": ["django.contrib.sessions.tests.FileSessionTests.test_session_load_does_not_create_record", "django.contrib.sessions.tests.CacheSessionTests.test_session_load_does_not_create_record", "django.contrib.sessions.tests.DatabaseSessionTests.test_session_load_does_not_create_record", "django.contrib.sessions.tests.CacheDBSessionTests.test_session_load_does_not_create_record"], "PASS TO PASS": ["django.contrib.sessions.tests.CookieSessionTests.test_cycle", "django.contrib.sessions.tests.DatabaseSessionTests.test_store", "django.contrib.sessions.tests.DatabaseSessionTests.test_session_key_is_read_only", "django.contrib.sessions.tests.FileSessionTests.test_save", "django.contrib.sessions.tests.FileSessionTests.test_get_empty", "django.contrib.sessions.tests.DatabaseSessionTests.test_flush", "django.contrib.sessions.tests.DatabaseSessionTests.test_new_session", "django.contrib.sessions.tests.DatabaseSessionTests.test_iterkeys", "django.contrib.sessions.tests.CookieSessionTests.test_update", "django.contrib.sessions.tests.DatabaseSessionTests.test_save_doesnt_clear_data", "django.contrib.sessions.tests.CacheSessionTests.test_get_empty", "django.contrib.sessions.tests.CookieSessionTests.test_get_empty", "django.contrib.sessions.tests.CacheSessionTests.test_clear", "django.contrib.sessions.tests.CacheSessionTests.test_custom_expiry_reset", "django.contrib.sessions.tests.CookieSessionTests.test_delete", "django.contrib.sessions.tests.CacheSessionTests.test_load_overlong_key", "django.contrib.sessions.tests.CookieSessionTests.test_itervalues", "django.contrib.sessions.tests.CacheDBSessionTests.test_save", "django.contrib.sessions.tests.CookieSessionTests.test_decode", "django.contrib.sessions.tests.DatabaseSessionTests.test_get_empty", "django.contrib.sessions.tests.CacheDBSessionTests.test_pop_default", "django.contrib.sessions.tests.FileSessionTests.test_invalid_key_forwardslash", "django.contrib.sessions.tests.CacheDBSessionTests.test_new_session", "django.contrib.sessions.tests.CacheDBSessionTests.test_session_key_is_read_only", "django.contrib.sessions.tests.DatabaseSessionTests.test_custom_expiry_seconds", "django.contrib.sessions.tests.FileSessionTests.test_custom_expiry_datetime", "django.contrib.sessions.tests.CacheDBSessionTests.test_default_expiry", "django.contrib.sessions.tests.CacheSessionTests.test_setdefault", "django.contrib.sessions.tests.FileSessionTests.test_pop_default", "django.contrib.sessions.tests.CacheSessionTests.test_iterkeys", "django.contrib.sessions.tests.FileSessionTests.test_configuration_check", "django.contrib.sessions.tests.FileSessionTests.test_clear", "django.contrib.sessions.tests.FileSessionTests.test_iteritems", "django.contrib.sessions.tests.DatabaseSessionTests.test_custom_expiry_reset", "django.contrib.sessions.tests.FileSessionTests.test_flush", "django.contrib.sessions.tests.FileSessionTests.test_iterkeys", "django.contrib.sessions.tests.CacheDBSessionTests.test_has_key", "django.contrib.sessions.tests.CacheDBSessionTests.test_setdefault", "django.contrib.sessions.tests.FileSessionTests.test_has_key", "django.contrib.sessions.tests.FileSessionTests.test_delete", "django.contrib.sessions.tests.DatabaseSessionTests.test_pop_default", "django.contrib.sessions.tests.CacheDBSessionTests.test_flush", "django.contrib.sessions.tests.CookieSessionTests.test_custom_expiry_reset", "django.contrib.sessions.tests.CacheSessionTests.test_itervalues", "django.contrib.sessions.tests.CacheSessionTests.test_default_expiry", "django.contrib.sessions.tests.CacheSessionTests.test_new_session", "django.contrib.sessions.tests.DatabaseSessionTests.test_delete", "django.contrib.sessions.tests.CacheDBSessionTests.test_itervalues", "django.contrib.sessions.tests.DatabaseSessionTests.test_invalid_key", "django.contrib.sessions.tests.FileSessionTests.test_invalid_key_backslash", "django.contrib.sessions.tests.FileSessionTests.test_decode", "django.contrib.sessions.tests.CacheSessionTests.test_custom_expiry_seconds", "django.contrib.sessions.tests.CacheSessionTests.test_values", "django.contrib.sessions.tests.CacheSessionTests.test_invalid_key", "django.contrib.sessions.tests.CookieSessionTests.test_clear", "django.contrib.sessions.tests.CacheSessionTests.test_decode", "django.contrib.sessions.tests.DatabaseSessionTests.test_get_expire_at_browser_close", "django.contrib.sessions.tests.CookieSessionTests.test_custom_expiry_timedelta", "django.contrib.sessions.tests.DatabaseSessionTests.test_custom_expiry_timedelta", "django.contrib.sessions.tests.FileSessionTests.test_values", "django.contrib.sessions.tests.FileSessionTests.test_save_doesnt_clear_data", "django.contrib.sessions.tests.FileSessionTests.test_itervalues", "django.contrib.sessions.tests.CacheDBSessionTests.test_custom_expiry_datetime", "django.contrib.sessions.tests.CacheDBSessionTests.test_decode", "django.contrib.sessions.tests.FileSessionTests.test_update", "django.contrib.sessions.tests.CookieSessionTests.test_new_session", "django.contrib.sessions.tests.CacheSessionTests.test_get_expire_at_browser_close", "django.contrib.sessions.tests.CookieSessionTests.test_custom_expiry_datetime", "django.contrib.sessions.tests.CacheDBSessionTests.test_custom_expiry_seconds", "django.contrib.sessions.tests.CacheDBSessionTests.test_invalid_key", "django.contrib.sessions.tests.CookieSessionTests.test_iterkeys", "django.contrib.sessions.tests.CookieSessionTests.test_invalid_key", "django.contrib.sessions.tests.FileSessionTests.test_setdefault", "django.contrib.sessions.tests.CacheDBSessionTests.test_get_empty", "django.contrib.sessions.tests.CookieSessionTests.test_has_key", "django.contrib.sessions.tests.CacheSessionTests.test_delete", "django.contrib.sessions.tests.CookieSessionTests.test_flush", "django.contrib.sessions.tests.CookieSessionTests.test_save_doesnt_clear_data", "django.contrib.sessions.tests.CacheDBSessionTests.test_load_overlong_key", "django.contrib.sessions.tests.CacheSessionTests.test_save_doesnt_clear_data", "django.contrib.sessions.tests.DatabaseSessionTests.test_session_get_decoded", "django.contrib.sessions.tests.CacheDBSessionTests.test_iterkeys", "django.contrib.sessions.tests.CacheDBSessionTests.test_custom_expiry_reset", "django.contrib.sessions.tests.CookieSessionTests.test_save", "django.contrib.sessions.tests.DatabaseSessionTests.test_clear", "django.contrib.sessions.tests.DatabaseSessionTests.test_cycle", "django.contrib.sessions.tests.DatabaseSessionTests.test_values", "django.contrib.sessions.tests.CacheDBSessionTests.test_update", "django.contrib.sessions.tests.DatabaseSessionTests.test_sessionmanager_save", "django.contrib.sessions.tests.DatabaseSessionTests.test_setdefault", "django.contrib.sessions.tests.CookieSessionTests.test_custom_expiry_seconds", "django.contrib.sessions.tests.SessionMiddlewareTests.test_httponly_session_cookie", "django.contrib.sessions.tests.FileSessionTests.test_cycle", "django.contrib.sessions.tests.CookieSessionTests.test_iteritems", "django.contrib.sessions.tests.CookieSessionTests.test_session_key_is_read_only", "django.contrib.sessions.tests.CookieSessionTests.test_setdefault", "django.contrib.sessions.tests.DatabaseSessionTests.test_default_expiry", "django.contrib.sessions.tests.CacheDBSessionTests.test_custom_expiry_timedelta", "django.contrib.sessions.tests.CacheDBSessionTests.test_get_expire_at_browser_close", "django.contrib.sessions.tests.CacheSessionTests.test_pop_default", "django.contrib.sessions.tests.FileSessionTests.test_custom_expiry_seconds", "django.contrib.sessions.tests.DatabaseSessionTests.test_decode", "django.contrib.sessions.tests.CacheSessionTests.test_custom_expiry_datetime", "django.contrib.sessions.tests.CacheSessionTests.test_save", "django.contrib.sessions.tests.DatabaseSessionTests.test_save", "django.contrib.sessions.tests.CacheDBSessionTests.test_save_doesnt_clear_data", "django.contrib.sessions.tests.CacheDBSessionTests.test_cycle", "django.contrib.sessions.tests.CacheDBSessionTests.test_values", "django.contrib.sessions.tests.DatabaseSessionTests.test_itervalues", "django.contrib.sessions.tests.CacheDBSessionTests.test_clear", "django.contrib.sessions.tests.CacheSessionTests.test_has_key", "django.contrib.sessions.tests.CacheSessionTests.test_flush", "django.contrib.sessions.tests.FileSessionTests.test_pop", "django.contrib.sessions.tests.FileSessionTests.test_store", "django.contrib.sessions.tests.CookieSessionTests.test_default_expiry", "django.contrib.sessions.tests.SessionMiddlewareTests.test_secure_session_cookie", "django.contrib.sessions.tests.CacheDBSessionTests.test_pop", "django.contrib.sessions.tests.DatabaseSessionTests.test_pop", "django.contrib.sessions.tests.FileSessionTests.test_custom_expiry_timedelta", "django.contrib.sessions.tests.DatabaseSessionTests.test_custom_expiry_datetime", "django.contrib.sessions.tests.CacheDBSessionTests.test_delete", "django.contrib.sessions.tests.DatabaseSessionTests.test_has_key", "django.contrib.sessions.tests.DatabaseSessionTests.test_update", "django.contrib.sessions.tests.FileSessionTests.test_invalid_key", "django.contrib.sessions.tests.FileSessionTests.test_new_session", "django.contrib.sessions.tests.CookieSessionTests.test_pop_default", "django.contrib.sessions.tests.CookieSessionTests.test_store", "django.contrib.sessions.tests.CacheSessionTests.test_pop", "django.contrib.sessions.tests.SessionMiddlewareTests.test_no_httponly_session_cookie", "django.contrib.sessions.tests.CacheDBSessionTests.test_store", "django.contrib.sessions.tests.CookieSessionTests.test_values", "django.contrib.sessions.tests.CacheSessionTests.test_custom_expiry_timedelta", "django.contrib.sessions.tests.CacheSessionTests.test_session_key_is_read_only", "django.contrib.sessions.tests.CacheSessionTests.test_update", "django.contrib.sessions.tests.FileSessionTests.test_session_key_is_read_only", "django.contrib.sessions.tests.FileSessionTests.test_get_expire_at_browser_close", "django.contrib.sessions.tests.FileSessionTests.test_custom_expiry_reset", "django.contrib.sessions.tests.CacheSessionTests.test_store", "django.contrib.sessions.tests.CacheSessionTests.test_iteritems", "django.contrib.sessions.tests.DatabaseSessionTests.test_iteritems", "django.contrib.sessions.tests.CacheSessionTests.test_cycle", "django.contrib.sessions.tests.CookieSessionTests.test_pop", "django.contrib.sessions.tests.CookieSessionTests.test_get_expire_at_browser_close", "django.contrib.sessions.tests.CacheDBSessionTests.test_iteritems", "django.contrib.sessions.tests.FileSessionTests.test_default_expiry", "django.contrib.sessions.tests.CacheDBSessionTests.test_exists_searches_cache_first"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_442", "original_commit_message": "[1.8.x] Fixed #19324 -- Avoided creating a session record when loading the session.\nThe session record is now only created if/when the session is modified. This\nprevents a potential DoS via creation of many empty session records.\nThis is a security fix; disclosure to follow shortly.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/contrib/sessions/backends/cache.py b/django/contrib/sessions/backends/cache.py\nindex 38b6112f51..5bc4dc1f8d 100644\n--- a/django/contrib/sessions/backends/cache.py\n+++ b/django/contrib/sessions/backends/cache.py\n@@ -27,7 +27,7 @@ class SessionStore(SessionBase):\n             session_data = None\n         if session_data is not None:\n             return session_data\n-        self.create()\n+        self._session_key = None\n         return {}\n \n     def create(self):\n@@ -49,6 +49,8 @@ class SessionStore(SessionBase):\n             \"It is likely that the cache is unavailable.\")\n \n     def save(self, must_create=False):\n+        if self.session_key is None:\n+            return self.create()\n         if must_create:\n             func = self._cache.add\n         else:\n@@ -60,7 +62,7 @@ class SessionStore(SessionBase):\n             raise CreateError\n \n     def exists(self, session_key):\n-        return (KEY_PREFIX + session_key) in self._cache\n+        return session_key and (KEY_PREFIX + session_key) in self._cache\n \n     def delete(self, session_key=None):\n         if session_key is None:\n\ndiff --git a/django/contrib/sessions/backends/cached_db.py b/django/contrib/sessions/backends/cached_db.py\nindex 0ba12f553f..435806595d 100644\n--- a/django/contrib/sessions/backends/cached_db.py\n+++ b/django/contrib/sessions/backends/cached_db.py\n@@ -51,12 +51,12 @@ class SessionStore(DBStore):\n                     logger = logging.getLogger('django.security.%s' %\n                             e.__class__.__name__)\n                     logger.warning(force_text(e))\n-                self.create()\n+                self._session_key = None\n                 data = {}\n         return data\n \n     def exists(self, session_key):\n-        if (KEY_PREFIX + session_key) in self._cache:\n+        if session_key and (KEY_PREFIX + session_key) in self._cache:\n             return True\n         return super(SessionStore, self).exists(session_key)\n \n\ndiff --git a/django/contrib/sessions/backends/db.py b/django/contrib/sessions/backends/db.py\nindex 450459108e..2d859d3b83 100644\n--- a/django/contrib/sessions/backends/db.py\n+++ b/django/contrib/sessions/backends/db.py\n@@ -26,7 +26,7 @@ class SessionStore(SessionBase):\n                 logger = logging.getLogger('django.security.%s' %\n                         e.__class__.__name__)\n                 logger.warning(force_text(e))\n-            self.create()\n+            self._session_key = None\n             return {}\n \n     def exists(self, session_key):\n@@ -43,7 +43,6 @@ class SessionStore(SessionBase):\n                 # Key wasn't unique. Try again.\n                 continue\n             self.modified = True\n-            self._session_cache = {}\n             return\n \n     def save(self, must_create=False):\n@@ -53,6 +52,8 @@ class SessionStore(SessionBase):\n         create a *new* entry (as opposed to possibly updating an existing\n         entry).\n         \"\"\"\n+        if self.session_key is None:\n+            return self.create()\n         obj = Session(\n             session_key=self._get_or_create_session_key(),\n             session_data=self.encode(self._get_session(no_load=must_create)),\n\ndiff --git a/django/contrib/sessions/backends/file.py b/django/contrib/sessions/backends/file.py\nindex 10d163acc4..41469c4a26 100644\n--- a/django/contrib/sessions/backends/file.py\n+++ b/django/contrib/sessions/backends/file.py\n@@ -97,7 +97,7 @@ class SessionStore(SessionBase):\n                     self.delete()\n                     self.create()\n         except (IOError, SuspiciousOperation):\n-            self.create()\n+            self._session_key = None\n         return session_data\n \n     def create(self):\n@@ -108,10 +108,11 @@ class SessionStore(SessionBase):\n             except CreateError:\n                 continue\n             self.modified = True\n-            self._session_cache = {}\n             return\n \n     def save(self, must_create=False):\n+        if self.session_key is None:\n+            return self.create()\n         # Get the session data now, before we start messing\n         # with the file it is stored within.\n         session_data = self._get_session(no_load=must_create)\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex 78f7a07155..a1aab37273 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -175,6 +175,11 @@ class SessionTestsMixin(object):\n         self.assertNotEqual(self.session.session_key, prev_key)\n         self.assertEqual(list(self.session.items()), prev_data)\n \n+    def test_save_doesnt_clear_data(self):\n+        self.session['a'] = 'b'\n+        self.session.save()\n+        self.assertEqual(self.session['a'], 'b')\n+\n     def test_invalid_key(self):\n         # Submitting an invalid session key (either by guessing, or if the db has\n         # removed the key) results in a new key being generated.\n@@ -313,6 +318,21 @@ class SessionTestsMixin(object):\n                 self.session.delete(old_session_key)\n                 self.session.delete(new_session_key)\n \n+    def test_session_load_does_not_create_record(self):\n+        \"\"\"\n+        Loading an unknown session key does not create a session record.\n+\n+        Creating session records on load is a DOS vulnerability.\n+        \"\"\"\n+        if self.backend is CookieSession:\n+            raise unittest.SkipTest(\"Cookie backend doesn't have an external store to create records in.\")\n+        session = self.backend('someunknownkey')\n+        session.load()\n+\n+        self.assertFalse(session.exists(session.session_key))\n+        # provided unknown key was cycled, not reused\n+        self.assertNotEqual(session.session_key, 'someunknownkey')\n+\n \n class DatabaseSessionTests(SessionTestsMixin, TestCase):\n \n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "66d12d1ababa8f062857ee5eb43276493720bf16", "source_date": "Wed Jul 8 15:23:18 2015 -0400", "source_tag": "1.8.3", "target_commit": "1828f4341ec53a8684112d24031b767eba557663", "target_date": "Wed Jul 8 07:35:39 2015 -0400", "target_tag": "1.7.9", "FAIL TO PASS": ["django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_session_load_does_not_create_record", "django.contrib.sessions.tests.CacheSessionTests.test_session_load_does_not_create_record", "django.contrib.sessions.tests.DatabaseSessionTests.test_session_load_does_not_create_record", "django.contrib.sessions.tests.CacheDBSessionTests.test_session_load_does_not_create_record", "django.contrib.sessions.tests.FileSessionTests.test_session_load_does_not_create_record", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_session_load_does_not_create_record"], "PASS TO PASS": ["django.contrib.sessions.tests.CookieSessionTests.test_cycle", "django.contrib.sessions.tests.DatabaseSessionTests.test_store", "django.contrib.sessions.tests.DatabaseSessionTests.test_session_key_is_read_only", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_custom_expiry_seconds", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_save", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_iterkeys", "django.contrib.sessions.tests.FileSessionTests.test_save", "django.contrib.sessions.tests.FileSessionTests.test_get_empty", "django.contrib.sessions.tests.DatabaseSessionTests.test_flush", "django.contrib.sessions.tests.CacheDBSessionTests.test_non_default_cache", "django.contrib.sessions.tests.DatabaseSessionTests.test_new_session", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_default_expiry", "django.contrib.sessions.tests.DatabaseSessionTests.test_iterkeys", "django.contrib.sessions.tests.CookieSessionTests.test_update", "django.contrib.sessions.tests.DatabaseSessionTests.test_clearsessions_command", "django.contrib.sessions.tests.DatabaseSessionTests.test_save_doesnt_clear_data", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_pop_default", "django.contrib.sessions.tests.CacheSessionTests.test_get_empty", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_store", "django.contrib.sessions.tests.FileSessionTests.test_decode_failure_logged_to_security", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_session_get_decoded", "django.contrib.sessions.tests.CookieSessionTests.test_get_empty", "django.contrib.sessions.tests.CacheSessionTests.test_clear", "django.contrib.sessions.tests.CacheSessionTests.test_custom_expiry_reset", "django.contrib.sessions.tests.CookieSessionTests.test_delete", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_actual_expiry", "django.contrib.sessions.tests.CookieSessionTests.test_itervalues", "django.contrib.sessions.tests.CacheDBSessionTests.test_save", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_custom_expiry_datetime", "django.contrib.sessions.tests.CookieSessionTests.test_decode", "django.contrib.sessions.tests.CacheSessionTests.test_load_overlong_key", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_delete", "django.contrib.sessions.tests.CacheDBSessionTests.test_pop_default", "django.contrib.sessions.tests.DatabaseSessionTests.test_get_empty", "django.contrib.sessions.tests.DatabaseSessionTests.test_decode_failure_logged_to_security", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_flush", "django.contrib.sessions.tests.FileSessionTests.test_invalid_key_forwardslash", "django.contrib.sessions.tests.CacheDBSessionTests.test_new_session", "django.contrib.sessions.tests.CacheDBSessionTests.test_session_key_is_read_only", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_new_session", "django.contrib.sessions.tests.DatabaseSessionTests.test_custom_expiry_seconds", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_iteritems", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_clearsessions_command", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_decode", "django.contrib.sessions.tests.FileSessionTests.test_custom_expiry_datetime", "django.contrib.sessions.tests.CacheDBSessionTests.test_default_expiry", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_get_empty", "django.contrib.sessions.tests.CacheSessionTests.test_setdefault", "django.contrib.sessions.tests.FileSessionTests.test_pop_default", "django.contrib.sessions.tests.CacheSessionTests.test_iterkeys", "django.contrib.sessions.tests.CacheDBSessionTests.  Applying sessions.0001_initial...test_actual_expiry", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_setdefault", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_values", "django.contrib.sessions.tests.FileSessionTests.test_actual_expiry", "django.contrib.sessions.tests.FileSessionTests.test_configuration_check", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_custom_expiry_reset", "django.contrib.sessions.tests.FileSessionTests.test_clear", "django.contrib.sessions.tests.FileSessionTests.test_iteritems", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_session_key_is_read_only", "django.contrib.sessions.tests.DatabaseSessionTests.test_custom_expiry_reset", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_has_key", "django.contrib.sessions.tests.FileSessionTests.test_flush", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_decode_failure_logged_to_security", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_new_session", "django.contrib.sessions.tests.FileSessionTests.test_iterkeys", "django.contrib.sessions.tests.CacheDBSessionTests.test_has_key", "django.contrib.sessions.tests.CacheDBSessionTests.test_setdefault", "django.contrib.sessions.tests.FileSessionTests.test_has_key", "django.contrib.sessions.tests.FileSessionTests.test_delete", "django.contrib.sessions.tests.DatabaseSessionTests.test_pop_default", "django.contrib.sessions.tests.CacheDBSessionTests.test_flush", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_update", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_default_expiry", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_get_empty", "django.contrib.sessions.tests.CookieSessionTests.test_custom_expiry_reset", "django.contrib.sessions.tests.CacheSessionTests.test_itervalues", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_iteritems", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_save", "django.contrib.sessions.tests.CacheSessionTests.test_default_expiry", "django.contrib.sessions.tests.CacheSessionTests.test_new_session", "django.contrib.sessions.tests.DatabaseSessionTests.test_delete", "django.contrib.sessions.tests.SessionMiddlewareTests.test_session_save_on_500", "django.contrib.sessions.tests.CacheDBSessionTests.test_itervalues", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_invalid_key", "django.contrib.sessions.tests.DatabaseSessionTests.test_invalid_key", "django.contrib.sessions.tests.FileSessionTests.test_invalid_key_backslash", "django.contrib.sessions.tests.FileSessionTests.test_decode", "django.contrib.sessions.tests.CacheSessionTests.test_custom_expiry_seconds", "django.contrib.sessions.tests.CacheSessionTests.test_values", "django.contrib.sessions.tests.CacheSessionTests.test_invalid_key", "django.contrib.sessions.tests.CookieSessionTests.test_decode_failure_logged_to_security", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_get_expire_at_browser_close", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_session_key_is_read_only", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_non_default_cache", "django.contrib.sessions.tests.CookieSessionTests.test_clear", "django.contrib.sessions.tests.CacheSessionTests.test_decode", "django.contrib.sessions.tests.DatabaseSessionTests.test_get_expire_at_browser_close", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_clear", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_delete", "django.contrib.sessions.tests.CookieSessionTests.test_custom_expiry_timedelta", "django.contrib.sessions.tests.DatabaseSessionTests.test_custom_expiry_timedelta", "django.contrib.sessions.tests.FileSessionTests.test_values", "django.contrib.sessions.tests.FileSessionTests.test_save_doesnt_clear_data", "django.contrib.sessions.tests.FileSessionTests.test_itervalues", "django.contrib.sessions.tests.CacheDBSessionTests.test_custom_expiry_datetime", "django.contrib.sessions.tests.CacheDBSessionTests.test_decode", "django.contrib.sessions.tests.FileSessionTests.test_update", "django.contrib.sessions.tests.CookieSessionTests.test_new_session", "django.contrib.sessions.tests.FileSessionTests.test_clearsessions_command", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_load_overlong_key", "django.contrib.sessions.tests.CacheSessionTests.test_get_expire_at_browser_close", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_itervalues", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_custom_expiry_datetime", "django.contrib.sessions.tests.CookieSessionTests.test_custom_expiry_datetime", "django.contrib.sessions.tests.CacheDBSessionTests.test_custom_expiry_seconds", "django.contrib.sessions.tests.CacheDBSessionTests.test_invalid_key", "django.contrib.sessions.tests.CookieSessionTests.test_iterkeys", "django.contrib.sessions.tests.CookieSessionTests.test_invalid_key", "django.contrib.sessions.tests.FileSessionTests.test_setdefault", "django.contrib.sessions.tests.CacheDBSessionTests.test_get_empty", "django.contrib.sessions.tests.CookieSessionTests.test_has_key", "django.contrib.sessions.tests.CookieSessionTests.test_pop", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_cycle", "django.contrib.sessions.tests.CacheSessionTests.test_delete", "django.contrib.sessions.tests.CookieSessionTests.test_flush", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_pop", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_invalid_key", "django.contrib.sessions.tests.CookieSessionTests.test_save_doesnt_clear_data", "django.contrib.sessions.tests.CacheDBSessionTests.test_load_overlong_key", "django.contrib.sessions.tests.CacheSessionTests.test_actual_expiry", "django.contrib.sessions.tests.CacheSessionTests.test_save_doesnt_clear_data", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_save_doesnt_clear_data", "django.contrib.sessions.tests.DatabaseSessionTests.test_session_get_decoded", "django.contrib.sessions.tests.CacheDBSessionTests.test_iterkeys", "django.contrib.sessions.tests.CacheDBSessionTests.test_custom_expiry_reset", "django.contrib.sessions.tests.CookieSessionTests.test_save", "django.contrib.sessions.tests.DatabaseSessionTests.test_clear", "django.contrib.sessions.tests.DatabaseSessionTests.test_cycle", "django.contrib.sessions.tests.DatabaseSessionTests.test_values", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_custom_expiry_timedelta", "django.contrib.sessions.tests.CacheDBSessionTests.test_decode_failure_logged_to_security", "django.contrib.sessions.tests.CacheDBSessionTests.test_update", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_setdefault", "django.contrib.sessions.tests.DatabaseSessionTests.test_sessionmanager_save", "django.contrib.sessions.tests.DatabaseSessionTests.test_setdefault", "django.contrib.sessions.tests.CookieSessionTests.test_custom_expiry_seconds", "django.contrib.sessions.tests.SessionMiddlewareTests.test_httponly_session_cookie", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_flush", "django.contrib.sessions.tests.FileSessionTests.test_cycle", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_save_doesnt_clear_data", "django.contrib.sessions.tests.CacheSessionTests.test_non_default_cache", "django.contrib.sessions.tests.CookieSessionTests.test_iteritems", "django.contrib.sessions.tests.CookieSessionTests.test_session_key_is_read_only", "django.contrib.sessions.tests.CookieSessionTests.test_setdefault", "django.contrib.sessions.tests.DatabaseSessionTests.test_default_expiry", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_has_key", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_pop", "django.contrib.sessions.tests.CacheDBSessionTests.test_custom_expiry_timedelta", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_custom_expiry_seconds", "django.contrib.sessions.tests.CacheDBSessionTests.test_get_expire_at_browser_close", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_decode", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_custom_expiry_timedelta", "django.contrib.sessions.tests.CacheSessionTests.test_pop_default", "django.contrib.sessions.tests.FileSessionTests.test_custom_expiry_seconds", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_clear", "django.contrib.sessions.tests.DatabaseSessionTests.test_decode", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_custom_expiry_reset", "django.contrib.sessions.tests.CacheSessionTests.test_custom_expiry_datetime", "django.contrib.sessions.tests.CacheSessionTests.test_save", "django.contrib.sessions.tests.CacheDBSessionTests.test_save_doesnt_clear_data", "django.contrib.sessions.tests.CacheDBSessionTests.test_values", "django.contrib.sessions.tests.CacheDBSessionTests.test_cycle", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_iterkeys", "django.contrib.sessions.tests.DatabaseSessionTests.test_save", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_store", "django.contrib.sessions.tests.DatabaseSessionTests.test_itervalues", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_decode_failure_logged_to_security", "django.contrib.sessions.tests.CacheDBSessionTests.test_clear", "django.contrib.sessions.tests.CacheSessionTests.test_has_key", "django.contrib.sessions.tests.CacheSessionTests.test_flush", "django.contrib.sessions.tests.FileSessionTests.test_pop", "django.contrib.sessions.tests.FileSessionTests.test_store", "django.contrib.sessions.tests.CookieSessionTests.test_default_expiry", "django.contrib.sessions.tests.SessionMiddlewareTests.test_secure_session_cookie", "django.contrib.sessions.tests.CacheDBSessionTests.test_pop", "django.contrib.sessions.tests.DatabaseSessionTests.test_pop", "django.contrib.sessions.tests.FileSessionTests.test_custom_expiry_timedelta", "django.contrib.sessions.tests.DatabaseSessionTests.test_custom_expiry_datetime", "django.contrib.sessions.tests.CacheDBSessionTests.test_delete", "django.contrib.sessions.tests.DatabaseSessionTests.test_has_key", "django.contrib.sessions.tests.CacheSessionTests.test_default_cache", "django.contrib.sessions.tests.DatabaseSessionTests.test_update", "django.contrib.sessions.tests.FileSessionTests.test_invalid_key", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_actual_expiry", "django.contrib.sessions.tests.FileSessionTests.test_new_session", "django.contrib.sessions.tests.CookieSessionTests.test_pop_default", "django.contrib.sessions.tests.CookieSessionTests.test_store", "django.contrib.sessions.tests.CacheSessionTests.test_pop", "django.contrib.sessions.tests.SessionMiddlewareTests.test_no_httponly_session_cookie", "django.contrib.sessions.tests.DatabaseSessionTests.test_actual_expiry", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_pop_default", "django.contrib.sessions.tests.CacheDBSessionTests.test_store", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_values", "django.contrib.sessions.tests.CookieSessionTests.test_values", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_update", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_get_expire_at_browser_close", "django.contrib.sessions.tests.CacheSessionTests.test_custom_expiry_timedelta", "django.contrib.sessions.tests.CacheSessionTests.test_session_key_is_read_only", "django.contrib.sessions.tests.CacheSessionTests.test_update", "django.contrib.sessions.tests.FileSessionTests.test_session_key_is_read_only", "django.contrib.sessions.tests.CacheSessionTests.test_decode_failure_logged_to_security", "django.contrib.sessions.tests.FileSessionTests.test_get_expire_at_browser_close", "django.contrib.sessions.tests.FileSessionTests.test_custom_expiry_reset", "django.contrib.sessions.tests.CacheSessionTests.test_store", "django.contrib.sessions.tests.CacheSessionTests.test_iteritems", "django.contrib.sessions.tests.DatabaseSessionTests.test_iteritems", "django.contrib.sessions.tests.CacheSessionTests.test_cycle", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_sessionmanager_save", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_cycle", "django.contrib.sessions.tests.DatabaseSessionWithTimeZoneTests.test_itervalues", "django.contrib.sessions.tests.CookieSessionTests.test_get_expire_at_browser_close", "django.contrib.sessions.tests.CacheDBSessionTests.test_iteritems", "django.contrib.sessions.tests.FileSessionTests.test_default_expiry", "django.contrib.sessions.tests.CacheDBSessionTests.test_exists_searches_cache_first", "django.contrib.sessions.tests.CacheDBSessionWithTimeZoneTests.test_exists_searches_cache_first"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_444", "original_commit_message": "[4.2.x] Fixed CVE-2023-43665 -- Mitigated potential DoS in django.utils.text.Truncator when truncating HTML text.\nThanks Wenchao Li of Alibaba Group for the report.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/utils/text.py b/django/utils/text.py\nindex 86d3b52741..26631641e9 100644\n--- a/django/utils/text.py\n+++ b/django/utils/text.py\n@@ -67,8 +67,14 @@ def wrap(text, width):\n class Truncator(SimpleLazyObject):\n     \"\"\"\n     An object used to truncate text, either by characters or words.\n+\n+    When truncating HTML text (either chars or words), input will be limited to\n+    at most `MAX_LENGTH_HTML` characters.\n     \"\"\"\n \n+    # 5 million characters are approximately 4000 text pages or 3 web pages.\n+    MAX_LENGTH_HTML = 5_000_000\n+\n     def __init__(self, text):\n         super().__init__(lambda: str(text))\n \n@@ -164,6 +170,11 @@ class Truncator(SimpleLazyObject):\n         if words and length <= 0:\n             return \"\"\n \n+        size_limited = False\n+        if len(text) > self.MAX_LENGTH_HTML:\n+            text = text[: self.MAX_LENGTH_HTML]\n+            size_limited = True\n+\n         html4_singlets = (\n             \"br\",\n             \"col\",\n@@ -220,10 +231,14 @@ class Truncator(SimpleLazyObject):\n                 # Add it to the start of the open tags list\n                 open_tags.insert(0, tagname)\n \n+        truncate_text = self.add_truncation_text(\"\", truncate)\n+\n         if current_len <= length:\n+            if size_limited and truncate_text:\n+                text += truncate_text\n             return text\n+\n         out = text[:end_text_pos]\n-        truncate_text = self.add_truncation_text(\"\", truncate)\n         if truncate_text:\n             out += truncate_text\n         # Close any tags still open\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex cb2959fe15..7d20445b1e 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -1,5 +1,6 @@\n import json\n import sys\n+from unittest.mock import patch\n \n from django.core.exceptions import SuspiciousFileOperation\n from django.test import SimpleTestCase\n@@ -94,11 +95,17 @@ class TestUtilsText(SimpleTestCase):\n             text.Truncator(lazystr(\"The quick brown fox\")).chars(10), \"The quick…\"\n         )\n \n-    def test_truncate_chars_html(self):\n+    @patch(\"django.utils.text.Truncator.MAX_LENGTH_HTML\", 10_000)\n+    def test_truncate_chars_html_size_limit(self):\n+        max_len = text.Truncator.MAX_LENGTH_HTML\n+        bigger_len = text.Truncator.MAX_LENGTH_HTML + 1\n+        valid_html = \"<p>Joel is a slug</p>\"  # 14 chars\n         perf_test_values = [\n-            ((\"</a\" + \"\\t\" * 50000) + \"//>\", None),\n-            (\"&\" * 50000, \"&\" * 9 + \"…\"),\n+            (\"</a\" + \"\\t\" * (max_len - 6) + \"//>\", None),\n+            (\"</p\" + \"\\t\" * bigger_len + \"//>\", \"</p\" + \"\\t\" * 6 + \"…\"),\n+            (\"&\" * bigger_len, \"&\" * 9 + \"…\"),\n             (\"_X<<<<<<<<<<<>\", None),\n+            (valid_html * bigger_len, \"<p>Joel is a…</p>\"),  # 10 chars\n         ]\n         for value, expected in perf_test_values:\n             with self.subTest(value=value):\n@@ -176,15 +183,25 @@ class TestUtilsText(SimpleTestCase):\n         truncator = text.Truncator(\"<p>I &lt;3 python, what about you?</p>\")\n         self.assertEqual(\"<p>I &lt;3 python,…</p>\", truncator.words(3, html=True))\n \n+    @patch(\"django.utils.text.Truncator.MAX_LENGTH_HTML\", 10_000)\n+    def test_truncate_words_html_size_limit(self):\n+        max_len = text.Truncator.MAX_LENGTH_HTML\n+        bigger_len = text.Truncator.MAX_LENGTH_HTML + 1\n+        valid_html = \"<p>Joel is a slug</p>\"  # 4 words\n         perf_test_values = [\n-            (\"</a\" + \"\\t\" * 50000) + \"//>\",\n-            \"&\" * 50000,\n-            \"_X<<<<<<<<<<<>\",\n+            (\"</a\" + \"\\t\" * (max_len - 6) + \"//>\", None),\n+            (\"</p\" + \"\\t\" * bigger_len + \"//>\", \"</p\" + \"\\t\" * (max_len - 3) + \"…\"),\n+            (\"&\" * max_len, None),  # no change\n+            (\"&\" * bigger_len, \"&\" * max_len + \"…\"),\n+            (\"_X<<<<<<<<<<<>\", None),\n+            (valid_html * bigger_len, valid_html * 12 + \"<p>Joel is…</p>\"),  # 50 words\n         ]\n-        for value in perf_test_values:\n+        for value, expected in perf_test_values:\n             with self.subTest(value=value):\n                 truncator = text.Truncator(value)\n-                self.assertEqual(value, truncator.words(50, html=True))\n+                self.assertEqual(\n+                    expected if expected else value, truncator.words(50, html=True)\n+                )\n \n     def test_wrap(self):\n         digits = \"1234 67 9\"\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "be9c27c4d18c2e6a5be8af4e53c0797440794473", "source_date": "Wed Oct 4 09:39:49 2023 -0300", "source_tag": "4.2.6", "target_commit": "c7b7024742250414e426ad49fb80db943e7ba4e8", "target_date": "Wed Oct 4 09:40:33 2023 -0300", "target_tag": "4.1.12", "FAIL TO PASS": ["utils_tests.test_text.TestUtilsText.test_truncate_words_html_size_limit", "utils_tests.test_text.TestUtilsText.test_truncate_chars_html_size_limit"], "PASS TO PASS": ["utils_tests.test_text.TestUtilsText.test_get_valid_filename", "utils_tests.test_text.TestUtilsText.test_get_text_list", "utils_tests.test_text.TestUtilsText.test_truncate_html_words", "utils_tests.test_text.TestUtilsText.test_phone2numeric", "utils_tests.test_text.TestUtilsText.test_format_lazy", "utils_tests.test_text.TestUtilsText.test_unescape_string_literal_invalid_value", "utils_tests.test_text.TestUtilsText.test_slugify", "utils_tests.test_text.TestUtilsText.test_truncate_chars", "utils_tests.test_text.TestUtilsText.test_truncate_words", "utils_tests.test_text.TestUtilsText.test_unescape_string_literal", "utils_tests.test_text.TestUtilsText.test_wrap", "utils_tests.test_text.TestUtilsText.test_smart_split", "utils_tests.test_text.TestUtilsText.test_normalize_newlines", "utils_tests.test_text.TestUtilsText.test_compress_sequence"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_445", "original_commit_message": "[4.2.x] Fixed CVE-2023-43665 -- Mitigated potential DoS in django.utils.text.Truncator when truncating HTML text.\nThanks Wenchao Li of Alibaba Group for the report.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/utils/text.py b/django/utils/text.py\nindex 86d3b52741..26631641e9 100644\n--- a/django/utils/text.py\n+++ b/django/utils/text.py\n@@ -67,8 +67,14 @@ def wrap(text, width):\n class Truncator(SimpleLazyObject):\n     \"\"\"\n     An object used to truncate text, either by characters or words.\n+\n+    When truncating HTML text (either chars or words), input will be limited to\n+    at most `MAX_LENGTH_HTML` characters.\n     \"\"\"\n \n+    # 5 million characters are approximately 4000 text pages or 3 web pages.\n+    MAX_LENGTH_HTML = 5_000_000\n+\n     def __init__(self, text):\n         super().__init__(lambda: str(text))\n \n@@ -164,6 +170,11 @@ class Truncator(SimpleLazyObject):\n         if words and length <= 0:\n             return \"\"\n \n+        size_limited = False\n+        if len(text) > self.MAX_LENGTH_HTML:\n+            text = text[: self.MAX_LENGTH_HTML]\n+            size_limited = True\n+\n         html4_singlets = (\n             \"br\",\n             \"col\",\n@@ -220,10 +231,14 @@ class Truncator(SimpleLazyObject):\n                 # Add it to the start of the open tags list\n                 open_tags.insert(0, tagname)\n \n+        truncate_text = self.add_truncation_text(\"\", truncate)\n+\n         if current_len <= length:\n+            if size_limited and truncate_text:\n+                text += truncate_text\n             return text\n+\n         out = text[:end_text_pos]\n-        truncate_text = self.add_truncation_text(\"\", truncate)\n         if truncate_text:\n             out += truncate_text\n         # Close any tags still open\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex cb2959fe15..7d20445b1e 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -1,5 +1,6 @@\n import json\n import sys\n+from unittest.mock import patch\n \n from django.core.exceptions import SuspiciousFileOperation\n from django.test import SimpleTestCase\n@@ -94,11 +95,17 @@ class TestUtilsText(SimpleTestCase):\n             text.Truncator(lazystr(\"The quick brown fox\")).chars(10), \"The quick…\"\n         )\n \n-    def test_truncate_chars_html(self):\n+    @patch(\"django.utils.text.Truncator.MAX_LENGTH_HTML\", 10_000)\n+    def test_truncate_chars_html_size_limit(self):\n+        max_len = text.Truncator.MAX_LENGTH_HTML\n+        bigger_len = text.Truncator.MAX_LENGTH_HTML + 1\n+        valid_html = \"<p>Joel is a slug</p>\"  # 14 chars\n         perf_test_values = [\n-            ((\"</a\" + \"\\t\" * 50000) + \"//>\", None),\n-            (\"&\" * 50000, \"&\" * 9 + \"…\"),\n+            (\"</a\" + \"\\t\" * (max_len - 6) + \"//>\", None),\n+            (\"</p\" + \"\\t\" * bigger_len + \"//>\", \"</p\" + \"\\t\" * 6 + \"…\"),\n+            (\"&\" * bigger_len, \"&\" * 9 + \"…\"),\n             (\"_X<<<<<<<<<<<>\", None),\n+            (valid_html * bigger_len, \"<p>Joel is a…</p>\"),  # 10 chars\n         ]\n         for value, expected in perf_test_values:\n             with self.subTest(value=value):\n@@ -176,15 +183,25 @@ class TestUtilsText(SimpleTestCase):\n         truncator = text.Truncator(\"<p>I &lt;3 python, what about you?</p>\")\n         self.assertEqual(\"<p>I &lt;3 python,…</p>\", truncator.words(3, html=True))\n \n+    @patch(\"django.utils.text.Truncator.MAX_LENGTH_HTML\", 10_000)\n+    def test_truncate_words_html_size_limit(self):\n+        max_len = text.Truncator.MAX_LENGTH_HTML\n+        bigger_len = text.Truncator.MAX_LENGTH_HTML + 1\n+        valid_html = \"<p>Joel is a slug</p>\"  # 4 words\n         perf_test_values = [\n-            (\"</a\" + \"\\t\" * 50000) + \"//>\",\n-            \"&\" * 50000,\n-            \"_X<<<<<<<<<<<>\",\n+            (\"</a\" + \"\\t\" * (max_len - 6) + \"//>\", None),\n+            (\"</p\" + \"\\t\" * bigger_len + \"//>\", \"</p\" + \"\\t\" * (max_len - 3) + \"…\"),\n+            (\"&\" * max_len, None),  # no change\n+            (\"&\" * bigger_len, \"&\" * max_len + \"…\"),\n+            (\"_X<<<<<<<<<<<>\", None),\n+            (valid_html * bigger_len, valid_html * 12 + \"<p>Joel is…</p>\"),  # 50 words\n         ]\n-        for value in perf_test_values:\n+        for value, expected in perf_test_values:\n             with self.subTest(value=value):\n                 truncator = text.Truncator(value)\n-                self.assertEqual(value, truncator.words(50, html=True))\n+                self.assertEqual(\n+                    expected if expected else value, truncator.words(50, html=True)\n+                )\n \n     def test_wrap(self):\n         digits = \"1234 67 9\"\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "be9c27c4d18c2e6a5be8af4e53c0797440794473", "source_date": "Wed Oct 4 09:39:49 2023 -0300", "source_tag": "4.2.6", "target_commit": "ccdade1a0262537868d7ca64374de3d957ca50c5", "target_date": "Wed Oct 4 09:41:12 2023 -0300", "target_tag": "3.2.22", "FAIL TO PASS": ["utils_tests.test_text.TestUtilsText.test_truncate_words_html_size_limit", "utils_tests.test_text.TestUtilsText.test_truncate_chars_html_size_limit"], "PASS TO PASS": []}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_1469", "original_commit_message": "Request cache only saves requests with form_redirect_uri if it's valid\n- A valid/approved form_redirect_uri value has the same host as the\nreceiving UAA server.\n[#158222161] https://www.pivotaltracker.com/story/show/158222161\nSigned-off-by: Jaskanwal Pawar <jpawar@pivotal.io>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/util/UaaUrlUtils.java b/server/src/main/java/org/cloudfoundry/identity/uaa/util/UaaUrlUtils.java\nindex 016e45dd8..dc8a315c3 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/util/UaaUrlUtils.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/util/UaaUrlUtils.java\n@@ -14,6 +14,15 @@\n  */\n package org.cloudfoundry.identity.uaa.util;\n \n+import org.cloudfoundry.identity.uaa.zone.IdentityZone;\n+import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;\n+import org.springframework.util.AntPathMatcher;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n+import org.springframework.web.util.UriComponentsBuilder;\n+import org.springframework.web.util.UriUtils;\n+\n import javax.servlet.http.HttpServletRequest;\n import java.io.UnsupportedEncodingException;\n import java.net.MalformedURLException;\n@@ -25,16 +34,6 @@ import java.util.List;\n import java.util.Map;\n import java.util.regex.Pattern;\n \n-import org.cloudfoundry.identity.uaa.zone.IdentityZone;\n-import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;\n-\n-import org.springframework.util.AntPathMatcher;\n-import org.springframework.util.MultiValueMap;\n-import org.springframework.util.StringUtils;\n-import org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n-import org.springframework.web.util.UriComponentsBuilder;\n-import org.springframework.web.util.UriUtils;\n-\n import static java.util.Collections.emptyList;\n import static java.util.Optional.ofNullable;\n import static org.springframework.util.StringUtils.hasText;\n@@ -228,4 +227,17 @@ public abstract class UaaUrlUtils {\n         String path = String.format(\"%s%s\", servletPath, pathInfo);\n         return path;\n     }\n+\n+    public static boolean uriHasMatchingHost(String uri, String hostname) {\n+        if (uri == null) {\n+            return false;\n+        }\n+\n+        try {\n+            URL url = new URL(uri);\n+            return hostname.equals(url.getHost());\n+        } catch (MalformedURLException e) {\n+            return false;\n+        }\n+    }\n }\n\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandler.java b/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandler.java\nindex ed602321e..9c064c6e5 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandler.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandler.java\n@@ -17,12 +17,11 @@ package org.cloudfoundry.identity.uaa.web;\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n+import org.cloudfoundry.identity.uaa.util.UaaUrlUtils;\n import org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;\n \n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n \n public class UaaSavedRequestAwareAuthenticationSuccessHandler extends SavedRequestAwareAuthenticationSuccessHandler {\n     public static final String SAVED_REQUEST_SESSION_ATTRIBUTE = \"SPRING_SECURITY_SAVED_REQUEST\";\n@@ -40,23 +39,10 @@ public class UaaSavedRequestAwareAuthenticationSuccessHandler extends SavedReque\n         if (redirectAttribute !=null) {\n             logger.debug(\"Returning redirectAttribute saved URI:\"+redirectAttribute);\n             return (String) redirectAttribute;\n-        } else if (isApprovedFormRedirectUri(request, redirectFormParam)) {\n+        } else if (UaaUrlUtils.uriHasMatchingHost(redirectFormParam, request.getServerName())) {\n             return redirectFormParam;\n         } else {\n             return super.determineTargetUrl(request, response);\n         }\n     }\n-\n-    private boolean isApprovedFormRedirectUri(HttpServletRequest request, String redirectUri) {\n-        if (redirectUri == null) {\n-            return false;\n-        }\n-\n-        try {\n-            URL url = new URL(redirectUri);\n-            return request.getServerName().equals(url.getHost());\n-        } catch (MalformedURLException e) {\n-            return false;\n-        }\n-    }\n }\n\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestCache.java b/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestCache.java\nindex 234eab307..4b02f9b86 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestCache.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestCache.java\n@@ -92,7 +92,9 @@ public class UaaSavedRequestCache extends HttpSessionRequestCache implements Fil\n         if (StringUtils.isEmpty(formRedirect)) {\n             return false;\n         }\n-\n+        if (!UaaUrlUtils.uriHasMatchingHost(formRedirect, request.getServerName())) {\n+            return false;\n+        }\n         if (hasSavedRequest(request)) {\n             return false;\n         }\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/util/UaaUrlUtilsTest.java b/server/src/test/java/org/cloudfoundry/identity/uaa/util/UaaUrlUtilsTest.java\nindex b4a2f6756..04a3cc316 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/util/UaaUrlUtilsTest.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/util/UaaUrlUtilsTest.java\n@@ -12,17 +12,9 @@\n  *******************************************************************************/\n package org.cloudfoundry.identity.uaa.util;\n \n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n import org.cloudfoundry.identity.uaa.zone.IdentityZone;\n import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;\n import org.cloudfoundry.identity.uaa.zone.MultitenancyFixture;\n-\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n@@ -30,11 +22,20 @@ import org.springframework.mock.web.MockHttpServletRequest;\n import org.springframework.web.context.request.RequestContextHolder;\n import org.springframework.web.context.request.ServletRequestAttributes;\n \n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.Matchers.equalTo;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n public class UaaUrlUtilsTest {\n@@ -422,6 +423,19 @@ public class UaaUrlUtilsTest {\n         assertEquals(\"http://somezone2.localhost:8080\", url2);\n     }\n \n+    @Test\n+    public void testUriHasMatchingHost() {\n+        assertTrue(UaaUrlUtils.uriHasMatchingHost(\"http://test.com/test\", \"test.com\"));\n+        assertTrue(UaaUrlUtils.uriHasMatchingHost(\"http://subdomain.test.com/test\", \"subdomain.test.com\"));\n+        assertTrue(UaaUrlUtils.uriHasMatchingHost(\"http://1.2.3.4/test\", \"1.2.3.4\"));\n+\n+        assertFalse(UaaUrlUtils.uriHasMatchingHost(null, \"test.com\"));\n+        assertFalse(UaaUrlUtils.uriHasMatchingHost(\"http://not-test.com/test\", \"test.com\"));\n+        assertFalse(UaaUrlUtils.uriHasMatchingHost(\"not-valid-url\", \"test.com\"));\n+        assertFalse(UaaUrlUtils.uriHasMatchingHost(\"http://1.2.3.4/test\", \"test.com\"));\n+        assertFalse(UaaUrlUtils.uriHasMatchingHost(\"http://test.com/test\", \"1.2.3.4\"));\n+    }\n+\n     private void validateRedirectUri(List<String> urls, boolean result) {\n         Map<String, String> failed = getFailedUrls(urls, result);\n         if (!failed.isEmpty()) {\n\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestCacheTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestCacheTests.java\nindex db5b92328..1618ae19a 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestCacheTests.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestCacheTests.java\n@@ -28,8 +28,13 @@ import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.security.web.savedrequest.SavedRequest;\n \n import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpSession;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n \n import static org.cloudfoundry.identity.uaa.web.UaaSavedRequestAwareAuthenticationSuccessHandler.FORM_REDIRECT_PARAMETER;\n import static org.cloudfoundry.identity.uaa.web.UaaSavedRequestAwareAuthenticationSuccessHandler.SAVED_REQUEST_SESSION_ATTRIBUTE;\n@@ -38,6 +43,7 @@ import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Matchers.anyObject;\n import static org.mockito.Matchers.anyString;\n import static org.mockito.Mockito.mock;\n@@ -103,6 +109,7 @@ public class UaaSavedRequestCacheTests {\n         request.setPathInfo(\"/login.do\");\n         request.setRequestURI(\"/login.do\");\n         request.setParameter(FORM_REDIRECT_PARAMETER, redirectUri);\n+        request.setServerName(new URL(redirectUri).getHost());\n         assertTrue(cache.shouldSaveFormRedirectParameter(request));\n         ServletResponse response = new MockHttpServletResponse();\n \n@@ -145,8 +152,11 @@ public class UaaSavedRequestCacheTests {\n \n     @Test\n     public void saveFormRedirectRequest() throws Exception {\n+        String redirectUri = \"http://login\";\n         request.setSession(session);\n-        request.setParameter(FORM_REDIRECT_PARAMETER, \"http://login\");\n+        request.setParameter(FORM_REDIRECT_PARAMETER, redirectUri);\n+        request.setServerName(new URL(redirectUri).getHost());\n+\n         spy.saveRequest(request, new MockHttpServletResponse());\n         verify(spy).saveClientRedirect(request, request.getParameter(FORM_REDIRECT_PARAMETER));\n     }\n@@ -169,14 +179,19 @@ public class UaaSavedRequestCacheTests {\n     }\n \n     @Test\n-    public void should_save_condition_works() {\n+    public void should_save_condition_works() throws MalformedURLException {\n         assertFalse(cache.shouldSaveFormRedirectParameter(request));\n+\n         request.setPathInfo(\"/login.do\");\n         assertFalse(cache.shouldSaveFormRedirectParameter(request));\n+\n         request.setParameter(FORM_REDIRECT_PARAMETER, redirectUri);\n+        request.setServerName(new URL(redirectUri).getHost());\n         assertTrue(cache.shouldSaveFormRedirectParameter(request));\n+\n         request.setSession(session);\n         assertTrue(cache.shouldSaveFormRedirectParameter(request));\n+\n         ClientRedirectSavedRequest savedRequest = new ClientRedirectSavedRequest(request, redirectUri);\n         session.setAttribute(SAVED_REQUEST_SESSION_ATTRIBUTE, savedRequest);\n         assertFalse(cache.shouldSaveFormRedirectParameter(request));\n@@ -215,5 +230,16 @@ public class UaaSavedRequestCacheTests {\n \n     }\n \n+    @Test\n+    public void unapprovedFormRedirectRequestDoesNotSave() throws IOException, ServletException {\n+        request.setPathInfo(\"/login.do\");\n+        request.setRequestURI(\"/login.do\");\n+        request.setMethod(HttpMethod.POST.name());\n+        request.setParameter(FORM_REDIRECT_PARAMETER, \"http://test.com\");\n+        request.setServerName(\"not-test.com\");\n+\n+        spy.doFilter(request, new MockHttpServletResponse(), mock(FilterChain.class));\n \n+        verify(spy, never()).saveClientRedirect(any(HttpServletRequest.class), anyString());\n+    }\n }\n\\ No newline at end of file\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "f6362a8f1865314aa507fc5de772848b7e552365", "source_date": "Tue Jun 12 14:52:02 2018 -0700", "source_tag": "4.19.0", "target_commit": "8a599448781acd481aa9dab1b0bde3424e00ced4", "target_date": "Wed Jun 13 10:55:21 2018 -0700", "target_tag": "4.10.1", "FAIL TO PASS": ["/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/util/UaaUrlUtilsTest.java"], "PASS TO PASS": [":cloudfoundry-identity-model:mainOutputResourcesDir", ":cloudfoundry-identity-model:buildInfo", ":cloudfoundry-identity-model:compileJava", ":cloudfoundry-identity-model:processResources", ":cloudfoundry-identity-model:jar", ":cloudfoundry-identity-model:gitInfo", ":cloudfoundry-identity-model:classes", ":cloudfoundry-identity-metrics-data:classes", "/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", ":cloudfoundry-identity-metrics-data:compileJava", ":cloudfoundry-identity-server:compileTestJava/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", ":cloudfoundry-identity-server:classes", ":cloudfoundry-identity-metrics-data:processResources", ":cloudfoundry-identity-server:compileTestJava", ":cloudfoundry-identity-metrics-data:jar", ":cloudfoundry-identity-server:compileJava", ":cloudfoundry-identity-server:processResources"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_959", "original_commit_message": "Add zone ID to expiring codes\n[#145313231] https://www.pivotaltracker.com/story/show/145313231", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/ExpiringCodeStore.java b/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/ExpiringCodeStore.java\nindex 535cea240..366a6ea8c 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/ExpiringCodeStore.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/ExpiringCodeStore.java\n@@ -1,5 +1,5 @@\n /*******************************************************************************\n- *     Cloud Foundry \n+ *     Cloud Foundry\n  *     Copyright (c) [2009-2016] Pivotal Software, Inc. All Rights Reserved.\n  *\n  *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n@@ -12,6 +12,7 @@\n  *******************************************************************************/\n package org.cloudfoundry.identity.uaa.codestore;\n \n+import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;\n import org.springframework.security.oauth2.common.util.RandomValueStringGenerator;\n \n import java.sql.Timestamp;\n@@ -20,7 +21,7 @@ public interface ExpiringCodeStore {\n \n     /**\n      * Generate and persist a one-time code with an expiry date.\n-     * \n+     *\n      * @param data JSON object to be associated with the code\n      * @param intent An optional key (not necessarily unique) for looking up codes\n      * @return code the generated one-time code\n@@ -31,7 +32,7 @@ public interface ExpiringCodeStore {\n \n     /**\n      * Retrieve a code and delete it if it exists.\n-     * \n+     *\n      * @param code the one-time code to look for\n      * @return code or null if the code is not found\n      * @throws java.lang.NullPointerException if the code is null\n@@ -40,7 +41,7 @@ public interface ExpiringCodeStore {\n \n     /**\n      * Set the code generator for this store.\n-     * \n+     *\n      * @param generator Code generator\n      */\n     void setGenerator(RandomValueStringGenerator generator);\n@@ -51,4 +52,16 @@ public interface ExpiringCodeStore {\n      * @param intent Intent of codes to remove\n      */\n     void expireByIntent(String intent);\n+\n+    default String zonifyCode(String code) {\n+        return code + \"[zone[\" + IdentityZoneHolder.get().getId()+\"]]\";\n+    }\n+\n+    default String extractCode(String zoneCode) {\n+        int endIndex = zoneCode.indexOf(\"[zone[\" + IdentityZoneHolder.get().getId()+\"]]\");\n+        if (endIndex<0) {\n+            return zoneCode;\n+        }\n+        return zoneCode.substring(0, endIndex);\n+    }\n }\n\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/InMemoryExpiringCodeStore.java b/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/InMemoryExpiringCodeStore.java\nindex e3560b576..7751ace73 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/InMemoryExpiringCodeStore.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/InMemoryExpiringCodeStore.java\n@@ -14,6 +14,7 @@ package org.cloudfoundry.identity.uaa.codestore;\n \n import org.cloudfoundry.identity.uaa.util.TimeService;\n import org.cloudfoundry.identity.uaa.util.TimeServiceImpl;\n+import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;\n import org.springframework.dao.DataIntegrityViolationException;\n import org.springframework.security.oauth2.common.util.RandomValueStringGenerator;\n import org.springframework.util.Assert;\n@@ -44,7 +45,7 @@ public class InMemoryExpiringCodeStore implements ExpiringCodeStore {\n \n         ExpiringCode expiringCode = new ExpiringCode(code, expiresAt, data, intent);\n \n-        ExpiringCode duplicate = store.putIfAbsent(code, expiringCode);\n+        ExpiringCode duplicate = store.putIfAbsent(zonifyCode(code), expiringCode);\n         if (duplicate != null) {\n             throw new DataIntegrityViolationException(\"Duplicate code: \" + code);\n         }\n@@ -58,7 +59,7 @@ public class InMemoryExpiringCodeStore implements ExpiringCodeStore {\n             throw new NullPointerException();\n         }\n \n-        ExpiringCode expiringCode = store.remove(code);\n+        ExpiringCode expiringCode = store.remove(zonifyCode(code));\n \n         if (expiringCode == null || isExpired(expiringCode)) {\n             expiringCode = null;\n@@ -79,8 +80,8 @@ public class InMemoryExpiringCodeStore implements ExpiringCodeStore {\n     @Override\n     public void expireByIntent(String intent) {\n         Assert.hasText(intent);\n-\n-        store.values().stream().filter(c -> intent.equals(c.getIntent())).forEach(c -> store.remove(c.getCode()));\n+        String id = IdentityZoneHolder.get().getId();\n+        store.entrySet().stream().filter(c -> c.getKey().contains(id) && intent.equals(c.getValue().getIntent())).forEach(c -> store.remove(c.getKey()));\n     }\n \n     public InMemoryExpiringCodeStore setTimeService(TimeService timeService) {\n\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/JdbcExpiringCodeStore.java b/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/JdbcExpiringCodeStore.java\nindex bca066ee8..de8ccc790 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/JdbcExpiringCodeStore.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/JdbcExpiringCodeStore.java\n@@ -35,10 +35,10 @@ public class JdbcExpiringCodeStore implements ExpiringCodeStore {\n \n     protected static final String insert = \"insert into \" + tableName + \" (\" + fields + \") values (?,?,?,?)\";\n     protected static final String delete = \"delete from \" + tableName + \" where code = ?\";\n-    protected static final String deleteIntent = \"delete from \" + tableName + \" where intent = ?\";\n+    protected static final String deleteIntent = \"delete from \" + tableName + \" where intent = ? and code LIKE ?\";\n     protected static final String deleteExpired = \"delete from \" + tableName + \" where expiresat < ?\";\n \n-    private static final JdbcExpiringCodeMapper rowMapper = new JdbcExpiringCodeMapper();\n+    private final JdbcExpiringCodeMapper rowMapper = new JdbcExpiringCodeMapper();\n \n     protected static final String selectAllFields = \"select \" + fields + \" from \" + tableName + \" where code = ?\";\n \n@@ -98,7 +98,7 @@ public class JdbcExpiringCodeStore implements ExpiringCodeStore {\n             count++;\n             String code = generator.generate();\n             try {\n-                int update = jdbcTemplate.update(insert, code, expiresAt.getTime(), data, intent);\n+                int update = jdbcTemplate.update(insert, zonifyCode(code), expiresAt.getTime(), data, intent);\n                 if (update == 1) {\n                     ExpiringCode expiringCode = new ExpiringCode(code, expiresAt, data, intent);\n                     return expiringCode;\n@@ -124,9 +124,9 @@ public class JdbcExpiringCodeStore implements ExpiringCodeStore {\n         }\n \n         try {\n-            ExpiringCode expiringCode = jdbcTemplate.queryForObject(selectAllFields, rowMapper, code);\n+            ExpiringCode expiringCode = jdbcTemplate.queryForObject(selectAllFields, rowMapper, zonifyCode(code));\n             if (expiringCode != null) {\n-                jdbcTemplate.update(delete, code);\n+                jdbcTemplate.update(delete, zonifyCode(code));\n             }\n             if (expiringCode.getExpiresAt().getTime() < timeService.getCurrentTimeMillis()) {\n                 expiringCode = null;\n@@ -146,7 +146,7 @@ public class JdbcExpiringCodeStore implements ExpiringCodeStore {\n     public void expireByIntent(String intent) {\n         Assert.hasText(intent);\n \n-        jdbcTemplate.update(deleteIntent, intent);\n+        jdbcTemplate.update(deleteIntent, intent, zonifyCode(\"%\")+\"%\");\n     }\n \n     public int cleanExpiredEntries() {\n@@ -162,11 +162,11 @@ public class JdbcExpiringCodeStore implements ExpiringCodeStore {\n         return 0;\n     }\n \n-    protected static class JdbcExpiringCodeMapper implements RowMapper<ExpiringCode> {\n+    protected class JdbcExpiringCodeMapper implements RowMapper<ExpiringCode> {\n \n         @Override\n         public ExpiringCode mapRow(ResultSet rs, int rowNum) throws SQLException {\n-            String code = rs.getString(\"code\");\n+            String code = extractCode(rs.getString(\"code\"));\n             Timestamp expiresAt = new Timestamp(rs.getLong(\"expiresat\"));\n             String intent = rs.getString(\"intent\");\n             String data = rs.getString(\"data\");\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/codestore/ExpiringCodeStoreTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/codestore/ExpiringCodeStoreTests.java\nindex ada4d6968..8d1af29d4 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/codestore/ExpiringCodeStoreTests.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/codestore/ExpiringCodeStoreTests.java\n@@ -16,6 +16,8 @@ import org.cloudfoundry.identity.uaa.test.JdbcTestBase;\n import org.cloudfoundry.identity.uaa.test.TestUtils;\n import org.cloudfoundry.identity.uaa.util.TimeService;\n import org.cloudfoundry.identity.uaa.util.TimeServiceImpl;\n+import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;\n+import org.cloudfoundry.identity.uaa.zone.MultitenancyFixture;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n@@ -26,12 +28,15 @@ import org.mockito.Mockito;\n import org.springframework.dao.DataAccessException;\n import org.springframework.dao.DataIntegrityViolationException;\n import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.RowMapper;\n import org.springframework.security.oauth2.common.util.RandomValueStringGenerator;\n+import org.springframework.test.util.ReflectionTestUtils;\n \n import java.sql.SQLException;\n import java.sql.Timestamp;\n import java.util.Arrays;\n import java.util.Collection;\n+import java.util.Map;\n \n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n@@ -50,7 +55,7 @@ public class ExpiringCodeStoreTests extends JdbcTestBase {\n     @Parameters\n     public static Collection<Object[]> data() {\n         return Arrays.asList(new Object[][] {\n-                        { InMemoryExpiringCodeStore.class }, { JdbcExpiringCodeStore.class },\n+            { InMemoryExpiringCodeStore.class }, { JdbcExpiringCodeStore.class },\n         });\n     }\n \n@@ -68,6 +73,16 @@ public class ExpiringCodeStoreTests extends JdbcTestBase {\n         }\n     }\n \n+    public int countCodes() {\n+        if (expiringCodeStore instanceof InMemoryExpiringCodeStore) {\n+            Map map = (Map) ReflectionTestUtils.getField(expiringCodeStore, \"store\");\n+            return map.size();\n+        } else {\n+            // confirm that everything is clean prior to test.\n+            return jdbcTemplate.queryForObject(\"select count(*) from expiring_code_store\", Integer.class);\n+        }\n+    }\n+\n     @Test\n     public void testGenerateCode() throws Exception {\n         String data = \"{}\";\n@@ -132,6 +147,22 @@ public class ExpiringCodeStoreTests extends JdbcTestBase {\n         Assert.assertNull(expiringCodeStore.retrieveCode(generatedCode.getCode()));\n     }\n \n+    @Test\n+    public void testRetrieveCode_In_Another_Zone() throws Exception {\n+        String data = \"{}\";\n+        Timestamp expiresAt = new Timestamp(System.currentTimeMillis() + 60000);\n+        ExpiringCode generatedCode = expiringCodeStore.generateCode(data, expiresAt, null);\n+\n+        IdentityZoneHolder.set(MultitenancyFixture.identityZone(\"other\",\"other\"));\n+        Assert.assertNull(expiringCodeStore.retrieveCode(generatedCode.getCode()));\n+\n+        IdentityZoneHolder.clear();\n+        ExpiringCode retrievedCode = expiringCodeStore.retrieveCode(generatedCode.getCode());\n+        Assert.assertEquals(generatedCode, retrievedCode);\n+\n+\n+    }\n+\n     @Test\n     public void testRetrieveCodeWithCodeNotFound() throws Exception {\n         ExpiringCode retrievedCode = expiringCodeStore.retrieveCode(\"unknown\");\n@@ -150,7 +181,7 @@ public class ExpiringCodeStoreTests extends JdbcTestBase {\n         Arrays.fill(oneMb, 'a');\n         String aaaString = new String(oneMb);\n         ExpiringCode expiringCode = expiringCodeStore.generateCode(aaaString, new Timestamp(\n-                        System.currentTimeMillis() + 60000), null);\n+            System.currentTimeMillis() + 60000), null);\n         String code = expiringCode.getCode();\n         ExpiringCode actualCode = expiringCodeStore.retrieveCode(code);\n         Assert.assertEquals(expiringCode, actualCode);\n@@ -174,10 +205,16 @@ public class ExpiringCodeStoreTests extends JdbcTestBase {\n     public void testExpireCodeByIntent() throws Exception {\n         ExpiringCode code = expiringCodeStore.generateCode(\"{}\", new Timestamp(System.currentTimeMillis() + 60000), \"Test Intent\");\n \n+        Assert.assertEquals(1, countCodes());\n+\n+        IdentityZoneHolder.set(MultitenancyFixture.identityZone(\"id\",\"id\"));\n         expiringCodeStore.expireByIntent(\"Test Intent\");\n+        Assert.assertEquals(1, countCodes());\n \n+        IdentityZoneHolder.clear();\n+        expiringCodeStore.expireByIntent(\"Test Intent\");\n         ExpiringCode retrievedCode = expiringCodeStore.retrieveCode(code.getCode());\n-\n+        Assert.assertEquals(0, countCodes());\n         Assert.assertNull(retrievedCode);\n     }\n \n@@ -206,10 +243,10 @@ public class ExpiringCodeStoreTests extends JdbcTestBase {\n             jdbcTemplate.update(JdbcExpiringCodeStore.insert, \"test\", System.currentTimeMillis() - 1000, \"{}\", null);\n             ((JdbcExpiringCodeStore) expiringCodeStore).cleanExpiredEntries();\n             jdbcTemplate.queryForObject(JdbcExpiringCodeStore.selectAllFields,\n-                            new JdbcExpiringCodeStore.JdbcExpiringCodeMapper(), \"test\");\n+                                        (RowMapper<ExpiringCode>) ReflectionTestUtils.getField(expiringCodeStore, \"rowMapper\"), \"test\");\n         } else {\n             throw new EmptyResultDataAccessException(1);\n         }\n \n     }\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsEndpointMockMvcTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsEndpointMockMvcTests.java\nindex 2336f01cf..219dbf78f 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsEndpointMockMvcTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsEndpointMockMvcTests.java\n@@ -4,6 +4,7 @@ import com.fasterxml.jackson.core.type.TypeReference;\n import org.cloudfoundry.identity.uaa.codestore.ExpiringCode;\n import org.cloudfoundry.identity.uaa.codestore.ExpiringCodeStore;\n import org.cloudfoundry.identity.uaa.codestore.ExpiringCodeType;\n+import org.cloudfoundry.identity.uaa.codestore.InMemoryExpiringCodeStore;\n import org.cloudfoundry.identity.uaa.constants.OriginKeys;\n import org.cloudfoundry.identity.uaa.mock.InjectedMockContextTest;\n import org.cloudfoundry.identity.uaa.mock.util.MockMvcUtils;\n@@ -92,6 +93,7 @@ public class InvitationsEndpointMockMvcTests extends InjectedMockContextTest {\n \n     @After\n     public void cleanUpDomainList() throws Exception {\n+        IdentityZoneHolder.clear();\n         IdentityProvider<UaaIdentityProviderDefinition> uaaProvider = getWebApplicationContext().getBean(JdbcIdentityProviderProvisioning.class).retrieveByOrigin(UAA, IdentityZone.getUaa().getId());\n         uaaProvider.getConfig().setEmailDomain(null);\n         getWebApplicationContext().getBean(JdbcIdentityProviderProvisioning.class).update(uaaProvider);\n@@ -148,7 +150,7 @@ public class InvitationsEndpointMockMvcTests extends InjectedMockContextTest {\n         InvitationsResponse invitationsResponse = readValue(mvcResult.getResponse().getContentAsString(), InvitationsResponse.class);\n         BaseClientDetails defaultClientDetails = new BaseClientDetails();\n         defaultClientDetails.setClientId(\"admin\");\n-        assertResponseAndCodeCorrect(new String[] {email}, redirectUrl, result.getIdentityZone().getSubdomain(), invitationsResponse, defaultClientDetails);\n+        assertResponseAndCodeCorrect(new String[] {email}, redirectUrl, result.getIdentityZone(), invitationsResponse, defaultClientDetails);\n \n     }\n \n@@ -182,7 +184,7 @@ public class InvitationsEndpointMockMvcTests extends InjectedMockContextTest {\n                 .andReturn();\n \n         InvitationsResponse invitationsResponse = readValue(mvcResult.getResponse().getContentAsString(), InvitationsResponse.class);\n-        assertResponseAndCodeCorrect(new String[] {email}, redirectUrl, result.getIdentityZone().getSubdomain(), invitationsResponse, zonifiedScimInviteClientDetails);\n+        assertResponseAndCodeCorrect(new String[] {email}, redirectUrl, result.getIdentityZone(), invitationsResponse, zonifiedScimInviteClientDetails);\n \n     }\n \n@@ -216,7 +218,7 @@ public class InvitationsEndpointMockMvcTests extends InjectedMockContextTest {\n                 .andReturn();\n \n         InvitationsResponse invitationsResponse = readValue(mvcResult.getResponse().getContentAsString(), InvitationsResponse.class);\n-        assertResponseAndCodeCorrect(new String[] {email}, redirectUrl, result.getIdentityZone().getSubdomain(), invitationsResponse, zonifiedScimInviteClientDetails);\n+        assertResponseAndCodeCorrect(new String[] {email}, redirectUrl, result.getIdentityZone(), invitationsResponse, zonifiedScimInviteClientDetails);\n \n     }\n \n@@ -235,7 +237,7 @@ public class InvitationsEndpointMockMvcTests extends InjectedMockContextTest {\n         String redirectUrl = \"example.com\";\n         InvitationsResponse response = sendRequestWithTokenAndReturnResponse(zonedScimInviteToken, result.getIdentityZone().getSubdomain(), zonedClientDetails.getClientId(), redirectUrl, email);\n \n-        assertResponseAndCodeCorrect(new String[] {email}, redirectUrl, result.getIdentityZone().getSubdomain(), response, zonedClientDetails);\n+        assertResponseAndCodeCorrect(new String[] {email}, redirectUrl, result.getIdentityZone(), response, zonedClientDetails);\n     }\n \n     @Test\n@@ -346,6 +348,7 @@ public class InvitationsEndpointMockMvcTests extends InjectedMockContextTest {\n         sendRequestWithToken(userToken, null, clientId, \"example.com\", \"user1@\"+domain);\n \n         String code = getWebApplicationContext().getBean(JdbcTemplate.class).queryForObject(\"SELECT code FROM expiring_code_store\", String.class);\n+        code = new InMemoryExpiringCodeStore().extractCode(code);\n         assertNotNull(\"Invite Code Must be Present\", code);\n \n         MockHttpServletRequestBuilder accept = get(\"/invitations/accept\")\n@@ -371,7 +374,7 @@ public class InvitationsEndpointMockMvcTests extends InjectedMockContextTest {\n         assertThat(response.getFailedInvites().size(), is(0));\n     }\n \n-    private void assertResponseAndCodeCorrect(String[] emails, String redirectUrl, String subdomain, InvitationsResponse response, ClientDetails clientDetails) {\n+    private void assertResponseAndCodeCorrect(String[] emails, String redirectUrl, IdentityZone zone, InvitationsResponse response, ClientDetails clientDetails) {\n         for (int i = 0; i < emails.length; i++) {\n             assertThat(response.getNewInvites().size(), is(emails.length));\n             assertThat(response.getNewInvites().get(i).getEmail(), is(emails[i]));\n@@ -382,8 +385,9 @@ public class InvitationsEndpointMockMvcTests extends InjectedMockContextTest {\n             String link = response.getNewInvites().get(i).getInviteLink().toString();\n             assertFalse(contains(link, \"@\"));\n             assertFalse(contains(link, \"%40\"));\n-            if (StringUtils.hasText(subdomain)) {\n-                assertThat(link, startsWith(\"http://\" + subdomain + \".localhost/invitations/accept\"));\n+            if (zone != null && StringUtils.hasText(zone.getSubdomain())) {\n+                assertThat(link, startsWith(\"http://\" + zone.getSubdomain() + \".localhost/invitations/accept\"));\n+                IdentityZoneHolder.set(zone);\n             } else {\n                 assertThat(link, startsWith(\"http://localhost/invitations/accept\"));\n             }\n@@ -392,6 +396,7 @@ public class InvitationsEndpointMockMvcTests extends InjectedMockContextTest {\n             assertThat(query, startsWith(\"code=\"));\n             String code = query.split(\"=\")[1];\n             ExpiringCode expiringCode = codeStore.retrieveCode(code);\n+            IdentityZoneHolder.clear();\n             assertThat(expiringCode.getExpiresAt().getTime(), is(greaterThan(System.currentTimeMillis())));\n             assertThat(expiringCode.getIntent(), is(ExpiringCodeType.INVITATION.name()));\n             Map<String, String> data = readValue(expiringCode.getData(), new TypeReference<Map<String, String>>() {});\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/InvitationsServiceMockMvcTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/InvitationsServiceMockMvcTests.java\nindex 17dcb57ee..177326455 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/InvitationsServiceMockMvcTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/InvitationsServiceMockMvcTests.java\n@@ -14,6 +14,7 @@\n \n package org.cloudfoundry.identity.uaa.login;\n \n+import org.cloudfoundry.identity.uaa.codestore.InMemoryExpiringCodeStore;\n import org.cloudfoundry.identity.uaa.constants.OriginKeys;\n import org.cloudfoundry.identity.uaa.message.EmailService;\n import org.cloudfoundry.identity.uaa.message.util.FakeJavaMailSender;\n@@ -244,6 +245,7 @@ public class InvitationsServiceMockMvcTests extends InjectedMockContextTest {\n             .andReturn();\n \n         code = getWebApplicationContext().getBean(JdbcTemplate.class).queryForObject(\"select code from expiring_code_store\", String.class);\n+        code = new InMemoryExpiringCodeStore().extractCode(code);\n         MockHttpSession session = (MockHttpSession) result.getRequest().getSession(false);\n         result = getMockMvc().perform(\n             post(\"/invitations/accept.do\")\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/ldap/LdapMockMvcTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/ldap/LdapMockMvcTests.java\nindex aae41a2ee..f407779cf 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/ldap/LdapMockMvcTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/ldap/LdapMockMvcTests.java\n@@ -14,6 +14,7 @@ package org.cloudfoundry.identity.uaa.mock.ldap;\n \n import org.cloudfoundry.identity.uaa.authentication.UaaAuthentication;\n import org.cloudfoundry.identity.uaa.authentication.manager.DynamicZoneAwareAuthenticationManager;\n+import org.cloudfoundry.identity.uaa.codestore.InMemoryExpiringCodeStore;\n import org.cloudfoundry.identity.uaa.constants.OriginKeys;\n import org.cloudfoundry.identity.uaa.mock.DefaultConfigurationTestSuite;\n import org.cloudfoundry.identity.uaa.mock.util.ApacheDSHelper;\n@@ -74,7 +75,6 @@ import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Random;\n import java.util.Set;\n \n import static java.util.Collections.EMPTY_LIST;\n@@ -265,7 +265,9 @@ public class LdapMockMvcTests  {\n             .andReturn();\n \n         code = getWebApplicationContext().getBean(JdbcTemplate.class).queryForObject(\"select code from expiring_code_store\", String.class);\n-\n+        IdentityZoneHolder.set(zone.getZone().getIdentityZone());\n+        code = new InMemoryExpiringCodeStore().extractCode(code);\n+        IdentityZoneHolder.clear();\n         MockHttpSession session = (MockHttpSession) result.getRequest().getSession(false);\n         getMockMvc().perform(post(\"/invitations/accept_enterprise.do\")\n                                  .session(session)\n@@ -306,7 +308,9 @@ public class LdapMockMvcTests  {\n             .andReturn();\n \n         code = getWebApplicationContext().getBean(JdbcTemplate.class).queryForObject(\"select code from expiring_code_store\", String.class);\n-\n+        IdentityZoneHolder.set(zone.getZone().getIdentityZone());\n+        code = new InMemoryExpiringCodeStore().extractCode(code);\n+        IdentityZoneHolder.clear();\n         session = (MockHttpSession) result.getRequest().getSession(false);\n         getMockMvc().perform(post(\"/invitations/accept_enterprise.do\")\n                                  .session(session)\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/scim/endpoints/ScimUserEndpointsMockMvcTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/scim/endpoints/ScimUserEndpointsMockMvcTests.java\nindex ba32b2e8d..2291d3bfb 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/scim/endpoints/ScimUserEndpointsMockMvcTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/scim/endpoints/ScimUserEndpointsMockMvcTests.java\n@@ -37,6 +37,7 @@ import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;\n import org.cloudfoundry.identity.uaa.zone.IdentityZoneSwitchingFilter;\n import org.hamcrest.MatcherAssert;\n import org.json.JSONObject;\n+import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n@@ -115,6 +116,11 @@ public class ScimUserEndpointsMockMvcTests extends InjectedMockContextTest {\n         uaaAdminToken = testClient.getClientCredentialsOAuthAccessToken(clientId, clientSecret, \"uaa.admin\");\n     }\n \n+    @After\n+    public void clear() {\n+        IdentityZoneHolder.clear();\n+    }\n+\n     private ScimUser createUser(String token) throws Exception {\n         return createUser(token, null);\n     }\n@@ -312,7 +318,9 @@ public class ScimUserEndpointsMockMvcTests extends InjectedMockContextTest {\n         String code = getQueryStringParam(query, \"code\");\n         assertThat(code, is(notNullValue()));\n \n+        IdentityZoneHolder.set(zoneResult.getIdentityZone());\n         ExpiringCode expiringCode = codeStore.retrieveCode(code);\n+        IdentityZoneHolder.clear();\n         assertThat(expiringCode.getExpiresAt().getTime(), is(greaterThan(System.currentTimeMillis())));\n         assertThat(expiringCode.getIntent(), is(REGISTRATION.name()));\n         Map<String, String> data = JsonUtils.readValue(expiringCode.getData(), new TypeReference<Map<String, String>>() {});\n@@ -349,7 +357,9 @@ public class ScimUserEndpointsMockMvcTests extends InjectedMockContextTest {\n         String code = getQueryStringParam(query, \"code\");\n         assertThat(code, is(notNullValue()));\n \n+        IdentityZoneHolder.set(zoneResult.getIdentityZone());\n         ExpiringCode expiringCode = codeStore.retrieveCode(code);\n+        IdentityZoneHolder.clear();\n         assertThat(expiringCode.getExpiresAt().getTime(), is(greaterThan(System.currentTimeMillis())));\n         assertThat(expiringCode.getIntent(), is(REGISTRATION.name()));\n         Map<String, String> data = JsonUtils.readValue(expiringCode.getData(), new TypeReference<Map<String, String>>() {});\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "logical and structural changes", "source_commit": "2ca35f1723e039aa7d2318134b05d02e40072a18", "source_date": "Fri May 12 11:58:13 2017 -0700", "source_tag": "3.17.0", "target_commit": "eb3f86054489039e11eabd54a8ec9a46c22abfc8", "target_date": "Fri May 12 14:05:07 2017 -0700", "target_tag": "2.7.4", "FAIL TO PASS": ["/uaa/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/InvitationsServiceMockMvcTests.java", "/uaa/uaa/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsEndpointMockMvcTests.java", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeStoreTests > testExpirationCleaner[1]", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeStoreTests > testRetrieveCode_In_Another_Zone[0]", "/uaa/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/ldap/LdapMockMvcTests.java", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeStoreTests > testRetrieveCode_In_Another_Zone[1]"], "PASS TO PASS": ["org.cloudfoundry.identity.uaa.zone.event.IdentityProviderModifiedEventTest", "org.cloudfoundry.identity.uaa.oauth.approval.ApprovalTests", ":cloudfoundry-identity-login:testClasses", "org.cloudfoundry.identity.uaa.authentication.login.PromptEditorTests", ":cloudfoundry-identity-login:instrument", "org.cloudfoundry.identity.uaa.user.BCryptPasswordEncoderTest", ":cloudfoundry-identity-scim:makeInstrumentedSourceSet", ":cloudfoundry-identity-payload:jar", "org.cloudfoundry.identity.uaa.authentication.login.RemoteAuthenticationEndpointTests", "org.cloudfoundry.identity.uaa.audit.event.ApprovalModifiedEventTest", "org.cloudfoundry.identity.uaa.rest.jdbc.SimpleSearchQueryConverterTests", "org.cloudfoundry.identity.uaa.openid.UserInfoEndpointTests", "org.cloudfoundry.identity.uaa.test.CreateDB", "org.cloudfoundry.identity.uaa.audit.event.AuditListenerTests", ":cloudfoundry-identity-scim:instrument", ":cloudfoundry-identity-scim:copyInstrumentedClasses", ":cloudfoundry-identity-login:compileTestJava", "org.cloudfoundry.identity.uaa.rest.jdbc.JdbcPagingListTests", "org.cloudfoundry.identity.uaa.zone.IdentityZoneResolvingFilterTests", "org.cloudfoundry.identity.uaa.authentication.manager.ScopeAuthenticationManagerTests", ":cloudfoundry-identity-scim:processResources", ":cloudfoundry-identity-common:copyCoberturaDatafile", ":cloudfoundry-identity-login:classes", "org.cloudfoundry.identity.uaa.config.YamlPropertiesFactoryBeanTests", "org.cloudfoundry.identity.uaa.ldap.LdapIdentityProviderDefinitionTest", "org.cloudfoundry.identity.uaa.login.saml.ZoneAwareMetadataGeneratorTests", "org.cloudfoundry.identity.uaa.authentication.manager.LoginAuthenticationManagerTests", "org.cloudfoundry.identity.uaa.user.InMemoryUaaUserDatabaseTests", "org.cloudfoundry.identity.uaa.login.saml.SamlRedirectUtilsTest", ":cloudfoundry-identity-common:processResources", ":cloudfoundry-identity-common:compileTestJava", "org.cloudfoundry.identity.uaa.util.UaaMapUtilsTest", ":cloudfoundry-identity-common:jar", ":cloudfoundry-identity-common:instrument", "org.cloudfoundry.identity.uaa.security.web.SecurityFilterChainPostProcessorTests", "org.cloudfoundry.identity.uaa.zone.JdbcIdentityZoneProvisioningTests", "org.cloudfoundry.identity.uaa.login.saml.ConfigMetadataProviderTest", "org.cloudfoundry.identity.uaa.codestore.CodeStoreEndpointsTests", "org.cloudfoundry.identity.uaa.error.JsonAwareAccessDeniedHandlerTests", "org.cloudfoundry.identity.uaa.web.ForwardAwareInternalResourceViewResolverTests", "org.cloudfoundry.identity.uaa.oauth.DisableIdTokenResponseTypeFilterTest", "org.cloudfoundry.identity.uaa.oauth.approval.JdbcApprovalStoreTests", "org.cloudfoundry.identity.uaa.oauth.ClientAdminEndpointsTests", "org.cloudfoundry.identity.uaa.db.TableAndColumnNormalizationTest", ":cloudfoundry-identity-common:copyInstrumentedClasses", "org.cloudfoundry.identity.uaa.util.UaaPagingUtilsTests", ":cloudfoundry-identity-common:classes", "org.cloudfoundry.identity.uaa.util.CachingPasswordEncoderTest", ":cloudfoundry-identity-common:instrumentedClasses", "org.cloudfoundry.identity.uaa.oauth.token.UaaTokenStoreTests", "org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationSerializationTests", ":cloudfoundry-identity-scim:jar", "org.cloudfoundry.identity.uaa.zone.MultitenantJdbcClientDetailsServiceTests", ":cloudfoundry-identity-payload:buildInfo", "org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcherTests", "org.cloudfoundry.identity.uaa.audit.AuditEventTypeTests", ":cloudfoundry-identity-scim:compileJava", "org.cloudfoundry.identity.uaa.oauth.RestrictUaaScopesClientValidatorTest", ":cloudfoundry-identity-scim:compileTestJava", ":cloudfoundry-identity-uaa:compileTestJava", "org.cloudfoundry.identity.uaa.ldap.ExtendedLdapUserMapperTest", "org.cloudfoundry.identity.uaa.config.IdentityZoneConfigurationBootstrapTests", "org.cloudfoundry.identity.uaa.login.saml.SamlIdentityProviderDefinitionTests", "org.cloudfoundry.identity.uaa.util.UaaStringUtilsTest", "org.cloudfoundry.identity.uaa.security.DefaultSecurityContextAccessorTests", "org.cloudfoundry.identity.uaa.zone.event.IdentityZoneModifiedEventTest", "org.cloudfoundry.identity.uaa.config.NestedMapPropertySourceTests", ":cloudfoundry-identity-common:testClasses", "org.cloudfoundry.identity.uaa.oauth.CheckTokenEndpointTests", "org.cloudfoundry.identity.uaa.authentication.SessionResetFilterTests", ":cloudfoundry-identity-common:makeInstrumentedSourceSet", "org.cloudfoundry.identity.uaa.authentication.manager.CheckIdpEnabledAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.oauth.event.ClientAdminEventPublisherTests", ":cloudfoundry-identity-login:compileJava", ":cloudfoundry-identity-scim:processInstrumentedResources", "org.cloudfoundry.identity.uaa.authentication.login.PromptTests", "org.cloudfoundry.identity.uaa.authentication.manager.ChainedAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.error.ConvertingExceptionViewTests", ":cloudfoundry-identity-login:instrumentedJar", ":cloudfoundry-identity-uaa:copyCoberturaDatafile", "org.cloudfoundry.identity.uaa.authentication.login.LoginInfoEndpointTests", "org.cloudfoundry.identity.uaa.user.UaaAuthorityTests", "org.cloudfoundry.identity.uaa.config.YamlServletProfileInitializerTests", "org.cloudfoundry.identity.uaa.login.saml.IdentityProviderConfiguratorTests", "org.cloudfoundry.identity.uaa.authentication.manager.ExternalLoginAuthenticationManagerTest", ":cloudfoundry-identity-common:compileJava", "org.cloudfoundry.identity.uaa.oauth.approval.ApprovalsAdminEndpointsTests", "org.cloudfoundry.identity.uaa.audit.JdbcAuditServiceTests", ":cloudfoundry-identity-scim:testClasses", "org.cloudfoundry.identity.uaa.util.LinkedMaskingMultiValueMapTests", "org.cloudfoundry.identity.uaa.config.YamlBindingTests", "org.cloudfoundry.identity.uaa.client.OAuth2ClientAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.user.UaaUserEditorTests", "org.cloudfoundry.identity.uaa.client.SocialClientUserDetailsSourceTests", "org.cloudfoundry.identity.uaa.web.CorsFilterTests", "/uaa/uaa/src/test/java/org/springframework/security/ldap/server/ApacheDsSSLContainer.java", ":cloudfoundry-identity-login:processResources", "org.cloudfoundry.identity.uaa.error.ExceptionReportHttpMessageConverterTest", ":cloudfoundry-identity-uaa:compileTestJava/uaa/uaa/src/test/java/org/springframework/security/ldap/server/ApacheDsSSLContainer.java", "org.cloudfoundry.identity.uaa.authentication.manager.AuthzAuthenticationManagerTests", ":cloudfoundry-identity-login:jar", "org.cloudfoundry.identity.uaa.oauth.ClientInfoEndpointTests", "org.cloudfoundry.identity.uaa.config.PasswordPolicyTest", "org.cloudfoundry.identity.uaa.db.StoreSubDomainAsLowerCase_V2_7_3_Tests", "org.cloudfoundry.identity.uaa.zone.IdentityProviderTests", ":cloudfoundry-identity-payload:gitInfo", ":cloudfoundry-identity-payload:processResources", "org.cloudfoundry.identity.uaa.authentication.AuthzAuthenticationFilterTests", ":cloudfoundry-identity-login:makeInstrumentedSourceSet", "org.cloudfoundry.identity.uaa.config.IdentityProviderBootstrapTest", "org.cloudfoundry.identity.uaa.error.UaaExceptionTests", ":cloudfoundry-identity-login:instrumentedClasses", ":cloudfoundry-identity-uaa:classes", ":cloudfoundry-identity-uaa:compileJava", ":cloudfoundry-identity-login:copyInstrumentedClasses", "org.cloudfoundry.identity.uaa.oauth.ClientAdminBootstrapTests", "org.cloudfoundry.identity.uaa.oauth.UaaAuthenticationKeyGeneratorTests", "org.cloudfoundry.identity.uaa.test.UaaTestAccountsTest", "org.cloudfoundry.identity.uaa.oauth.expression.IsUserSelfCheckTest", "org.cloudfoundry.identity.uaa.rest.MessageTests", "org.cloudfoundry.identity.uaa.login.SamlLoginServerKeyManagerTests", "org.cloudfoundry.identity.uaa.db.TestThatClientIdIsVchar255", "org.cloudfoundry.identity.uaa.security.X509ExpiryCheckingTrustManagerTest", "org.cloudfoundry.identity.uaa.oauth.UserManagedAuthzApprovalHandlerTests", ":cloudfoundry-identity-scim:classes", "org.cloudfoundry.identity.uaa.web.HealthzEndpointTests", ":cloudfoundry-identity-login:processInstrumentedResources", ":cloudfoundry-identity-common:processTestResources", "org.cloudfoundry.identity.uaa.user.JdbcUaaUserDatabaseTests", "org.cloudfoundry.identity.uaa.oauth.JdbcQueryableClientDetailsServiceTests", "org.cloudfoundry.identity.uaa.ldap.DynamicPasswordComparatorTests", ":cloudfoundry-identity-scim:instrumentedClasses", ":cloudfoundry-identity-payload:mainOutputResourcesDir", ":cloudfoundry-identity-common:instrumentedJar", "org.cloudfoundry.identity.uaa.config.YamlConfigurationValidatorTests", "org.cloudfoundry.identity.uaa.oauth.UaaUserTokenConverterTests", "org.cloudfoundry.identity.uaa.error.JsonAwareAuthenticationEntryPointTests", "org.cloudfoundry.identity.uaa.util.DomainFilterTest", "org.cloudfoundry.identity.uaa.oauth.token.TokenKeyEndpointTests", "org.cloudfoundry.identity.uaa.util.EnsureOldLibrariesAreRemoved", "org.cloudfoundry.identity.uaa.oauth.AccessControllerTests", ":cloudfoundry-identity-login:compileInstrumentedJava", "org.cloudfoundry.identity.uaa.config.IdentityZoneConfigurationTests", "org.cloudfoundry.identity.uaa.oauth.token.UaaTokenServicesTests", "org.cloudfoundry.identity.uaa.authentication.manager.PeriodLockoutPolicyTests", ":cloudfoundry-identity-payload:compileJava", ":cloudfoundry-identity-scim:instrumentedJar", "org.cloudfoundry.identity.uaa.client.SourceTests", "org.cloudfoundry.identity.uaa.config.EnvironmentPropertiesFactoryBeanTests", "org.cloudfoundry.identity.uaa.authentication.manager.LdapLoginAuthenticationManagerTests", ":cloudfoundry-identity-login:processTestResources", "org.cloudfoundry.identity.uaa.audit.JdbcFailedLoginCountingAuditServiceTests", ":cloudfoundry-identity-common:compileInstrumentedJava", "org.cloudfoundry.identity.uaa.login.saml.LoginSAMLAuthenticationFailureHandlerTest", "org.cloudfoundry.identity.uaa.config.YamlMapFactoryBeanTests", "org.cloudfoundry.identity.uaa.util.NullifyFieldsTest", "org.cloudfoundry.identity.uaa.oauth.UaaOauth2ErrorHandlerTests", ":cloudfoundry-identity-scim:processTestResources", ":cloudfoundry-identity-uaa:processResources", "org.cloudfoundry.identity.uaa.oauth.token.SignerProviderTests", "org.cloudfoundry.identity.uaa.db.TestSchemaValidation", "org.cloudfoundry.identity.uaa.client.OAuthClientAuthenticationFilterTests", "org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationRequestManagerTests", "org.cloudfoundry.identity.uaa.oauth.UaaUserApprovalHandlerTests", "org.cloudfoundry.identity.uaa.oauth.RemoteTokenServicesTests", "org.cloudfoundry.identity.uaa.authentication.manager.KeystoneAuthenticationManagerTest", "org.cloudfoundry.identity.uaa.util.UaaUrlUtilsTest", "org.cloudfoundry.identity.uaa.ldap.ProcessLdapPropertiesTest", "org.cloudfoundry.identity.uaa.zone.IdentityZoneSwitchingFilterTests", ":cloudfoundry-identity-uaa:instrument", "org.cloudfoundry.identity.uaa.web.CookieBasedCsrfTokenRepositoryTests", "org.cloudfoundry.identity.uaa.zone.JdbcIdentityProviderProvisioningTests", "org.cloudfoundry.identity.uaa.codestore.ExpiringCodeTests", "org.cloudfoundry.identity.uaa.oauth.client.ClientDetailsModificationTests", "org.cloudfoundry.identity.uaa.oauth.UaaScopesTests", ":cloudfoundry-identity-scim:compileInstrumentedJava", "org.cloudfoundry.identity.uaa.config.EnvironmentMapFactoryBeanTests", ":cloudfoundry-identity-payload:classes", "org.cloudfoundry.identity.uaa.oauth.ZoneEndpointsClientDetailsValidatorTests", ":cloudfoundry-identity-common:processInstrumentedResources"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_1471", "original_commit_message": "Request cache only saves requests with form_redirect_uri if it's valid\n- A valid/approved form_redirect_uri value has the same host as the\nreceiving UAA server.\n[#158222161] https://www.pivotaltracker.com/story/show/158222161\nSigned-off-by: Jaskanwal Pawar <jpawar@pivotal.io>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/util/UaaUrlUtils.java b/server/src/main/java/org/cloudfoundry/identity/uaa/util/UaaUrlUtils.java\nindex 016e45dd8..dc8a315c3 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/util/UaaUrlUtils.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/util/UaaUrlUtils.java\n@@ -14,6 +14,15 @@\n  */\n package org.cloudfoundry.identity.uaa.util;\n \n+import org.cloudfoundry.identity.uaa.zone.IdentityZone;\n+import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;\n+import org.springframework.util.AntPathMatcher;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n+import org.springframework.web.util.UriComponentsBuilder;\n+import org.springframework.web.util.UriUtils;\n+\n import javax.servlet.http.HttpServletRequest;\n import java.io.UnsupportedEncodingException;\n import java.net.MalformedURLException;\n@@ -25,16 +34,6 @@ import java.util.List;\n import java.util.Map;\n import java.util.regex.Pattern;\n \n-import org.cloudfoundry.identity.uaa.zone.IdentityZone;\n-import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;\n-\n-import org.springframework.util.AntPathMatcher;\n-import org.springframework.util.MultiValueMap;\n-import org.springframework.util.StringUtils;\n-import org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n-import org.springframework.web.util.UriComponentsBuilder;\n-import org.springframework.web.util.UriUtils;\n-\n import static java.util.Collections.emptyList;\n import static java.util.Optional.ofNullable;\n import static org.springframework.util.StringUtils.hasText;\n@@ -228,4 +227,17 @@ public abstract class UaaUrlUtils {\n         String path = String.format(\"%s%s\", servletPath, pathInfo);\n         return path;\n     }\n+\n+    public static boolean uriHasMatchingHost(String uri, String hostname) {\n+        if (uri == null) {\n+            return false;\n+        }\n+\n+        try {\n+            URL url = new URL(uri);\n+            return hostname.equals(url.getHost());\n+        } catch (MalformedURLException e) {\n+            return false;\n+        }\n+    }\n }\n\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandler.java b/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandler.java\nindex ed602321e..9c064c6e5 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandler.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestAwareAuthenticationSuccessHandler.java\n@@ -17,12 +17,11 @@ package org.cloudfoundry.identity.uaa.web;\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n+import org.cloudfoundry.identity.uaa.util.UaaUrlUtils;\n import org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;\n \n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n \n public class UaaSavedRequestAwareAuthenticationSuccessHandler extends SavedRequestAwareAuthenticationSuccessHandler {\n     public static final String SAVED_REQUEST_SESSION_ATTRIBUTE = \"SPRING_SECURITY_SAVED_REQUEST\";\n@@ -40,23 +39,10 @@ public class UaaSavedRequestAwareAuthenticationSuccessHandler extends SavedReque\n         if (redirectAttribute !=null) {\n             logger.debug(\"Returning redirectAttribute saved URI:\"+redirectAttribute);\n             return (String) redirectAttribute;\n-        } else if (isApprovedFormRedirectUri(request, redirectFormParam)) {\n+        } else if (UaaUrlUtils.uriHasMatchingHost(redirectFormParam, request.getServerName())) {\n             return redirectFormParam;\n         } else {\n             return super.determineTargetUrl(request, response);\n         }\n     }\n-\n-    private boolean isApprovedFormRedirectUri(HttpServletRequest request, String redirectUri) {\n-        if (redirectUri == null) {\n-            return false;\n-        }\n-\n-        try {\n-            URL url = new URL(redirectUri);\n-            return request.getServerName().equals(url.getHost());\n-        } catch (MalformedURLException e) {\n-            return false;\n-        }\n-    }\n }\n\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestCache.java b/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestCache.java\nindex 234eab307..4b02f9b86 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestCache.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestCache.java\n@@ -92,7 +92,9 @@ public class UaaSavedRequestCache extends HttpSessionRequestCache implements Fil\n         if (StringUtils.isEmpty(formRedirect)) {\n             return false;\n         }\n-\n+        if (!UaaUrlUtils.uriHasMatchingHost(formRedirect, request.getServerName())) {\n+            return false;\n+        }\n         if (hasSavedRequest(request)) {\n             return false;\n         }\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/util/UaaUrlUtilsTest.java b/server/src/test/java/org/cloudfoundry/identity/uaa/util/UaaUrlUtilsTest.java\nindex b4a2f6756..04a3cc316 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/util/UaaUrlUtilsTest.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/util/UaaUrlUtilsTest.java\n@@ -12,17 +12,9 @@\n  *******************************************************************************/\n package org.cloudfoundry.identity.uaa.util;\n \n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n import org.cloudfoundry.identity.uaa.zone.IdentityZone;\n import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;\n import org.cloudfoundry.identity.uaa.zone.MultitenancyFixture;\n-\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n@@ -30,11 +22,20 @@ import org.springframework.mock.web.MockHttpServletRequest;\n import org.springframework.web.context.request.RequestContextHolder;\n import org.springframework.web.context.request.ServletRequestAttributes;\n \n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.Matchers.equalTo;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n public class UaaUrlUtilsTest {\n@@ -422,6 +423,19 @@ public class UaaUrlUtilsTest {\n         assertEquals(\"http://somezone2.localhost:8080\", url2);\n     }\n \n+    @Test\n+    public void testUriHasMatchingHost() {\n+        assertTrue(UaaUrlUtils.uriHasMatchingHost(\"http://test.com/test\", \"test.com\"));\n+        assertTrue(UaaUrlUtils.uriHasMatchingHost(\"http://subdomain.test.com/test\", \"subdomain.test.com\"));\n+        assertTrue(UaaUrlUtils.uriHasMatchingHost(\"http://1.2.3.4/test\", \"1.2.3.4\"));\n+\n+        assertFalse(UaaUrlUtils.uriHasMatchingHost(null, \"test.com\"));\n+        assertFalse(UaaUrlUtils.uriHasMatchingHost(\"http://not-test.com/test\", \"test.com\"));\n+        assertFalse(UaaUrlUtils.uriHasMatchingHost(\"not-valid-url\", \"test.com\"));\n+        assertFalse(UaaUrlUtils.uriHasMatchingHost(\"http://1.2.3.4/test\", \"test.com\"));\n+        assertFalse(UaaUrlUtils.uriHasMatchingHost(\"http://test.com/test\", \"1.2.3.4\"));\n+    }\n+\n     private void validateRedirectUri(List<String> urls, boolean result) {\n         Map<String, String> failed = getFailedUrls(urls, result);\n         if (!failed.isEmpty()) {\n\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestCacheTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestCacheTests.java\nindex db5b92328..1618ae19a 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestCacheTests.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/web/UaaSavedRequestCacheTests.java\n@@ -28,8 +28,13 @@ import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.security.web.savedrequest.SavedRequest;\n \n import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpSession;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n \n import static org.cloudfoundry.identity.uaa.web.UaaSavedRequestAwareAuthenticationSuccessHandler.FORM_REDIRECT_PARAMETER;\n import static org.cloudfoundry.identity.uaa.web.UaaSavedRequestAwareAuthenticationSuccessHandler.SAVED_REQUEST_SESSION_ATTRIBUTE;\n@@ -38,6 +43,7 @@ import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Matchers.anyObject;\n import static org.mockito.Matchers.anyString;\n import static org.mockito.Mockito.mock;\n@@ -103,6 +109,7 @@ public class UaaSavedRequestCacheTests {\n         request.setPathInfo(\"/login.do\");\n         request.setRequestURI(\"/login.do\");\n         request.setParameter(FORM_REDIRECT_PARAMETER, redirectUri);\n+        request.setServerName(new URL(redirectUri).getHost());\n         assertTrue(cache.shouldSaveFormRedirectParameter(request));\n         ServletResponse response = new MockHttpServletResponse();\n \n@@ -145,8 +152,11 @@ public class UaaSavedRequestCacheTests {\n \n     @Test\n     public void saveFormRedirectRequest() throws Exception {\n+        String redirectUri = \"http://login\";\n         request.setSession(session);\n-        request.setParameter(FORM_REDIRECT_PARAMETER, \"http://login\");\n+        request.setParameter(FORM_REDIRECT_PARAMETER, redirectUri);\n+        request.setServerName(new URL(redirectUri).getHost());\n+\n         spy.saveRequest(request, new MockHttpServletResponse());\n         verify(spy).saveClientRedirect(request, request.getParameter(FORM_REDIRECT_PARAMETER));\n     }\n@@ -169,14 +179,19 @@ public class UaaSavedRequestCacheTests {\n     }\n \n     @Test\n-    public void should_save_condition_works() {\n+    public void should_save_condition_works() throws MalformedURLException {\n         assertFalse(cache.shouldSaveFormRedirectParameter(request));\n+\n         request.setPathInfo(\"/login.do\");\n         assertFalse(cache.shouldSaveFormRedirectParameter(request));\n+\n         request.setParameter(FORM_REDIRECT_PARAMETER, redirectUri);\n+        request.setServerName(new URL(redirectUri).getHost());\n         assertTrue(cache.shouldSaveFormRedirectParameter(request));\n+\n         request.setSession(session);\n         assertTrue(cache.shouldSaveFormRedirectParameter(request));\n+\n         ClientRedirectSavedRequest savedRequest = new ClientRedirectSavedRequest(request, redirectUri);\n         session.setAttribute(SAVED_REQUEST_SESSION_ATTRIBUTE, savedRequest);\n         assertFalse(cache.shouldSaveFormRedirectParameter(request));\n@@ -215,5 +230,16 @@ public class UaaSavedRequestCacheTests {\n \n     }\n \n+    @Test\n+    public void unapprovedFormRedirectRequestDoesNotSave() throws IOException, ServletException {\n+        request.setPathInfo(\"/login.do\");\n+        request.setRequestURI(\"/login.do\");\n+        request.setMethod(HttpMethod.POST.name());\n+        request.setParameter(FORM_REDIRECT_PARAMETER, \"http://test.com\");\n+        request.setServerName(\"not-test.com\");\n+\n+        spy.doFilter(request, new MockHttpServletResponse(), mock(FilterChain.class));\n \n+        verify(spy, never()).saveClientRedirect(any(HttpServletRequest.class), anyString());\n+    }\n }\n\\ No newline at end of file\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "logical and structural changes", "source_commit": "f6362a8f1865314aa507fc5de772848b7e552365", "source_date": "Tue Jun 12 14:52:02 2018 -0700", "source_tag": "4.19.0", "target_commit": "d17b23fc3bf9b86f111774925afadfced75315c0", "target_date": "Thu Jun 14 16:03:02 2018 -0700", "target_tag": "4.7.5", "FAIL TO PASS": ["/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/util/UaaUrlUtilsTest.java"], "PASS TO PASS": [":cloudfoundry-identity-model:processResources", ":cloudfoundry-identity-model:jar", ":cloudfoundry-identity-metrics-data:classes", ":cloudfoundry-identity-server:compileTestJava/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", ":cloudfoundry-identity-server:compileTestJava", ":cloudfoundry-identity-server:compileJava", ":cloudfoundry-identity-server:compileJava/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", ":cloudfoundry-identity-server:processResources", ":cloudfoundry-identity-model:compileJava", ":cloudfoundry-identity-model:classes", ":cloudfoundry-identity-server:classes", ":cloudfoundry-identity-metrics-data:processResources", ":cloudfoundry-identity-model:mainOutputResourcesDir", ":cloudfoundry-identity-model:gitInfo", "/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", "/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", ":cloudfoundry-identity-model:buildInfo", ":cloudfoundry-identity-metrics-data:compileJava", ":cloudfoundry-identity-metrics-data:jar"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_961", "original_commit_message": "Add zone ID to expiring codes\n[#145313231] https://www.pivotaltracker.com/story/show/145313231", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/ExpiringCodeStore.java b/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/ExpiringCodeStore.java\nindex 535cea240..366a6ea8c 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/ExpiringCodeStore.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/ExpiringCodeStore.java\n@@ -1,5 +1,5 @@\n /*******************************************************************************\n- *     Cloud Foundry \n+ *     Cloud Foundry\n  *     Copyright (c) [2009-2016] Pivotal Software, Inc. All Rights Reserved.\n  *\n  *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n@@ -12,6 +12,7 @@\n  *******************************************************************************/\n package org.cloudfoundry.identity.uaa.codestore;\n \n+import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;\n import org.springframework.security.oauth2.common.util.RandomValueStringGenerator;\n \n import java.sql.Timestamp;\n@@ -20,7 +21,7 @@ public interface ExpiringCodeStore {\n \n     /**\n      * Generate and persist a one-time code with an expiry date.\n-     * \n+     *\n      * @param data JSON object to be associated with the code\n      * @param intent An optional key (not necessarily unique) for looking up codes\n      * @return code the generated one-time code\n@@ -31,7 +32,7 @@ public interface ExpiringCodeStore {\n \n     /**\n      * Retrieve a code and delete it if it exists.\n-     * \n+     *\n      * @param code the one-time code to look for\n      * @return code or null if the code is not found\n      * @throws java.lang.NullPointerException if the code is null\n@@ -40,7 +41,7 @@ public interface ExpiringCodeStore {\n \n     /**\n      * Set the code generator for this store.\n-     * \n+     *\n      * @param generator Code generator\n      */\n     void setGenerator(RandomValueStringGenerator generator);\n@@ -51,4 +52,16 @@ public interface ExpiringCodeStore {\n      * @param intent Intent of codes to remove\n      */\n     void expireByIntent(String intent);\n+\n+    default String zonifyCode(String code) {\n+        return code + \"[zone[\" + IdentityZoneHolder.get().getId()+\"]]\";\n+    }\n+\n+    default String extractCode(String zoneCode) {\n+        int endIndex = zoneCode.indexOf(\"[zone[\" + IdentityZoneHolder.get().getId()+\"]]\");\n+        if (endIndex<0) {\n+            return zoneCode;\n+        }\n+        return zoneCode.substring(0, endIndex);\n+    }\n }\n\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/InMemoryExpiringCodeStore.java b/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/InMemoryExpiringCodeStore.java\nindex e3560b576..7751ace73 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/InMemoryExpiringCodeStore.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/InMemoryExpiringCodeStore.java\n@@ -14,6 +14,7 @@ package org.cloudfoundry.identity.uaa.codestore;\n \n import org.cloudfoundry.identity.uaa.util.TimeService;\n import org.cloudfoundry.identity.uaa.util.TimeServiceImpl;\n+import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;\n import org.springframework.dao.DataIntegrityViolationException;\n import org.springframework.security.oauth2.common.util.RandomValueStringGenerator;\n import org.springframework.util.Assert;\n@@ -44,7 +45,7 @@ public class InMemoryExpiringCodeStore implements ExpiringCodeStore {\n \n         ExpiringCode expiringCode = new ExpiringCode(code, expiresAt, data, intent);\n \n-        ExpiringCode duplicate = store.putIfAbsent(code, expiringCode);\n+        ExpiringCode duplicate = store.putIfAbsent(zonifyCode(code), expiringCode);\n         if (duplicate != null) {\n             throw new DataIntegrityViolationException(\"Duplicate code: \" + code);\n         }\n@@ -58,7 +59,7 @@ public class InMemoryExpiringCodeStore implements ExpiringCodeStore {\n             throw new NullPointerException();\n         }\n \n-        ExpiringCode expiringCode = store.remove(code);\n+        ExpiringCode expiringCode = store.remove(zonifyCode(code));\n \n         if (expiringCode == null || isExpired(expiringCode)) {\n             expiringCode = null;\n@@ -79,8 +80,8 @@ public class InMemoryExpiringCodeStore implements ExpiringCodeStore {\n     @Override\n     public void expireByIntent(String intent) {\n         Assert.hasText(intent);\n-\n-        store.values().stream().filter(c -> intent.equals(c.getIntent())).forEach(c -> store.remove(c.getCode()));\n+        String id = IdentityZoneHolder.get().getId();\n+        store.entrySet().stream().filter(c -> c.getKey().contains(id) && intent.equals(c.getValue().getIntent())).forEach(c -> store.remove(c.getKey()));\n     }\n \n     public InMemoryExpiringCodeStore setTimeService(TimeService timeService) {\n\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/JdbcExpiringCodeStore.java b/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/JdbcExpiringCodeStore.java\nindex bca066ee8..de8ccc790 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/JdbcExpiringCodeStore.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/JdbcExpiringCodeStore.java\n@@ -35,10 +35,10 @@ public class JdbcExpiringCodeStore implements ExpiringCodeStore {\n \n     protected static final String insert = \"insert into \" + tableName + \" (\" + fields + \") values (?,?,?,?)\";\n     protected static final String delete = \"delete from \" + tableName + \" where code = ?\";\n-    protected static final String deleteIntent = \"delete from \" + tableName + \" where intent = ?\";\n+    protected static final String deleteIntent = \"delete from \" + tableName + \" where intent = ? and code LIKE ?\";\n     protected static final String deleteExpired = \"delete from \" + tableName + \" where expiresat < ?\";\n \n-    private static final JdbcExpiringCodeMapper rowMapper = new JdbcExpiringCodeMapper();\n+    private final JdbcExpiringCodeMapper rowMapper = new JdbcExpiringCodeMapper();\n \n     protected static final String selectAllFields = \"select \" + fields + \" from \" + tableName + \" where code = ?\";\n \n@@ -98,7 +98,7 @@ public class JdbcExpiringCodeStore implements ExpiringCodeStore {\n             count++;\n             String code = generator.generate();\n             try {\n-                int update = jdbcTemplate.update(insert, code, expiresAt.getTime(), data, intent);\n+                int update = jdbcTemplate.update(insert, zonifyCode(code), expiresAt.getTime(), data, intent);\n                 if (update == 1) {\n                     ExpiringCode expiringCode = new ExpiringCode(code, expiresAt, data, intent);\n                     return expiringCode;\n@@ -124,9 +124,9 @@ public class JdbcExpiringCodeStore implements ExpiringCodeStore {\n         }\n \n         try {\n-            ExpiringCode expiringCode = jdbcTemplate.queryForObject(selectAllFields, rowMapper, code);\n+            ExpiringCode expiringCode = jdbcTemplate.queryForObject(selectAllFields, rowMapper, zonifyCode(code));\n             if (expiringCode != null) {\n-                jdbcTemplate.update(delete, code);\n+                jdbcTemplate.update(delete, zonifyCode(code));\n             }\n             if (expiringCode.getExpiresAt().getTime() < timeService.getCurrentTimeMillis()) {\n                 expiringCode = null;\n@@ -146,7 +146,7 @@ public class JdbcExpiringCodeStore implements ExpiringCodeStore {\n     public void expireByIntent(String intent) {\n         Assert.hasText(intent);\n \n-        jdbcTemplate.update(deleteIntent, intent);\n+        jdbcTemplate.update(deleteIntent, intent, zonifyCode(\"%\")+\"%\");\n     }\n \n     public int cleanExpiredEntries() {\n@@ -162,11 +162,11 @@ public class JdbcExpiringCodeStore implements ExpiringCodeStore {\n         return 0;\n     }\n \n-    protected static class JdbcExpiringCodeMapper implements RowMapper<ExpiringCode> {\n+    protected class JdbcExpiringCodeMapper implements RowMapper<ExpiringCode> {\n \n         @Override\n         public ExpiringCode mapRow(ResultSet rs, int rowNum) throws SQLException {\n-            String code = rs.getString(\"code\");\n+            String code = extractCode(rs.getString(\"code\"));\n             Timestamp expiresAt = new Timestamp(rs.getLong(\"expiresat\"));\n             String intent = rs.getString(\"intent\");\n             String data = rs.getString(\"data\");\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/codestore/ExpiringCodeStoreTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/codestore/ExpiringCodeStoreTests.java\nindex ada4d6968..8d1af29d4 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/codestore/ExpiringCodeStoreTests.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/codestore/ExpiringCodeStoreTests.java\n@@ -16,6 +16,8 @@ import org.cloudfoundry.identity.uaa.test.JdbcTestBase;\n import org.cloudfoundry.identity.uaa.test.TestUtils;\n import org.cloudfoundry.identity.uaa.util.TimeService;\n import org.cloudfoundry.identity.uaa.util.TimeServiceImpl;\n+import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;\n+import org.cloudfoundry.identity.uaa.zone.MultitenancyFixture;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n@@ -26,12 +28,15 @@ import org.mockito.Mockito;\n import org.springframework.dao.DataAccessException;\n import org.springframework.dao.DataIntegrityViolationException;\n import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.RowMapper;\n import org.springframework.security.oauth2.common.util.RandomValueStringGenerator;\n+import org.springframework.test.util.ReflectionTestUtils;\n \n import java.sql.SQLException;\n import java.sql.Timestamp;\n import java.util.Arrays;\n import java.util.Collection;\n+import java.util.Map;\n \n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n@@ -50,7 +55,7 @@ public class ExpiringCodeStoreTests extends JdbcTestBase {\n     @Parameters\n     public static Collection<Object[]> data() {\n         return Arrays.asList(new Object[][] {\n-                        { InMemoryExpiringCodeStore.class }, { JdbcExpiringCodeStore.class },\n+            { InMemoryExpiringCodeStore.class }, { JdbcExpiringCodeStore.class },\n         });\n     }\n \n@@ -68,6 +73,16 @@ public class ExpiringCodeStoreTests extends JdbcTestBase {\n         }\n     }\n \n+    public int countCodes() {\n+        if (expiringCodeStore instanceof InMemoryExpiringCodeStore) {\n+            Map map = (Map) ReflectionTestUtils.getField(expiringCodeStore, \"store\");\n+            return map.size();\n+        } else {\n+            // confirm that everything is clean prior to test.\n+            return jdbcTemplate.queryForObject(\"select count(*) from expiring_code_store\", Integer.class);\n+        }\n+    }\n+\n     @Test\n     public void testGenerateCode() throws Exception {\n         String data = \"{}\";\n@@ -132,6 +147,22 @@ public class ExpiringCodeStoreTests extends JdbcTestBase {\n         Assert.assertNull(expiringCodeStore.retrieveCode(generatedCode.getCode()));\n     }\n \n+    @Test\n+    public void testRetrieveCode_In_Another_Zone() throws Exception {\n+        String data = \"{}\";\n+        Timestamp expiresAt = new Timestamp(System.currentTimeMillis() + 60000);\n+        ExpiringCode generatedCode = expiringCodeStore.generateCode(data, expiresAt, null);\n+\n+        IdentityZoneHolder.set(MultitenancyFixture.identityZone(\"other\",\"other\"));\n+        Assert.assertNull(expiringCodeStore.retrieveCode(generatedCode.getCode()));\n+\n+        IdentityZoneHolder.clear();\n+        ExpiringCode retrievedCode = expiringCodeStore.retrieveCode(generatedCode.getCode());\n+        Assert.assertEquals(generatedCode, retrievedCode);\n+\n+\n+    }\n+\n     @Test\n     public void testRetrieveCodeWithCodeNotFound() throws Exception {\n         ExpiringCode retrievedCode = expiringCodeStore.retrieveCode(\"unknown\");\n@@ -150,7 +181,7 @@ public class ExpiringCodeStoreTests extends JdbcTestBase {\n         Arrays.fill(oneMb, 'a');\n         String aaaString = new String(oneMb);\n         ExpiringCode expiringCode = expiringCodeStore.generateCode(aaaString, new Timestamp(\n-                        System.currentTimeMillis() + 60000), null);\n+            System.currentTimeMillis() + 60000), null);\n         String code = expiringCode.getCode();\n         ExpiringCode actualCode = expiringCodeStore.retrieveCode(code);\n         Assert.assertEquals(expiringCode, actualCode);\n@@ -174,10 +205,16 @@ public class ExpiringCodeStoreTests extends JdbcTestBase {\n     public void testExpireCodeByIntent() throws Exception {\n         ExpiringCode code = expiringCodeStore.generateCode(\"{}\", new Timestamp(System.currentTimeMillis() + 60000), \"Test Intent\");\n \n+        Assert.assertEquals(1, countCodes());\n+\n+        IdentityZoneHolder.set(MultitenancyFixture.identityZone(\"id\",\"id\"));\n         expiringCodeStore.expireByIntent(\"Test Intent\");\n+        Assert.assertEquals(1, countCodes());\n \n+        IdentityZoneHolder.clear();\n+        expiringCodeStore.expireByIntent(\"Test Intent\");\n         ExpiringCode retrievedCode = expiringCodeStore.retrieveCode(code.getCode());\n-\n+        Assert.assertEquals(0, countCodes());\n         Assert.assertNull(retrievedCode);\n     }\n \n@@ -206,10 +243,10 @@ public class ExpiringCodeStoreTests extends JdbcTestBase {\n             jdbcTemplate.update(JdbcExpiringCodeStore.insert, \"test\", System.currentTimeMillis() - 1000, \"{}\", null);\n             ((JdbcExpiringCodeStore) expiringCodeStore).cleanExpiredEntries();\n             jdbcTemplate.queryForObject(JdbcExpiringCodeStore.selectAllFields,\n-                            new JdbcExpiringCodeStore.JdbcExpiringCodeMapper(), \"test\");\n+                                        (RowMapper<ExpiringCode>) ReflectionTestUtils.getField(expiringCodeStore, \"rowMapper\"), \"test\");\n         } else {\n             throw new EmptyResultDataAccessException(1);\n         }\n \n     }\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsEndpointMockMvcTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsEndpointMockMvcTests.java\nindex 2336f01cf..219dbf78f 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsEndpointMockMvcTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsEndpointMockMvcTests.java\n@@ -4,6 +4,7 @@ import com.fasterxml.jackson.core.type.TypeReference;\n import org.cloudfoundry.identity.uaa.codestore.ExpiringCode;\n import org.cloudfoundry.identity.uaa.codestore.ExpiringCodeStore;\n import org.cloudfoundry.identity.uaa.codestore.ExpiringCodeType;\n+import org.cloudfoundry.identity.uaa.codestore.InMemoryExpiringCodeStore;\n import org.cloudfoundry.identity.uaa.constants.OriginKeys;\n import org.cloudfoundry.identity.uaa.mock.InjectedMockContextTest;\n import org.cloudfoundry.identity.uaa.mock.util.MockMvcUtils;\n@@ -92,6 +93,7 @@ public class InvitationsEndpointMockMvcTests extends InjectedMockContextTest {\n \n     @After\n     public void cleanUpDomainList() throws Exception {\n+        IdentityZoneHolder.clear();\n         IdentityProvider<UaaIdentityProviderDefinition> uaaProvider = getWebApplicationContext().getBean(JdbcIdentityProviderProvisioning.class).retrieveByOrigin(UAA, IdentityZone.getUaa().getId());\n         uaaProvider.getConfig().setEmailDomain(null);\n         getWebApplicationContext().getBean(JdbcIdentityProviderProvisioning.class).update(uaaProvider);\n@@ -148,7 +150,7 @@ public class InvitationsEndpointMockMvcTests extends InjectedMockContextTest {\n         InvitationsResponse invitationsResponse = readValue(mvcResult.getResponse().getContentAsString(), InvitationsResponse.class);\n         BaseClientDetails defaultClientDetails = new BaseClientDetails();\n         defaultClientDetails.setClientId(\"admin\");\n-        assertResponseAndCodeCorrect(new String[] {email}, redirectUrl, result.getIdentityZone().getSubdomain(), invitationsResponse, defaultClientDetails);\n+        assertResponseAndCodeCorrect(new String[] {email}, redirectUrl, result.getIdentityZone(), invitationsResponse, defaultClientDetails);\n \n     }\n \n@@ -182,7 +184,7 @@ public class InvitationsEndpointMockMvcTests extends InjectedMockContextTest {\n                 .andReturn();\n \n         InvitationsResponse invitationsResponse = readValue(mvcResult.getResponse().getContentAsString(), InvitationsResponse.class);\n-        assertResponseAndCodeCorrect(new String[] {email}, redirectUrl, result.getIdentityZone().getSubdomain(), invitationsResponse, zonifiedScimInviteClientDetails);\n+        assertResponseAndCodeCorrect(new String[] {email}, redirectUrl, result.getIdentityZone(), invitationsResponse, zonifiedScimInviteClientDetails);\n \n     }\n \n@@ -216,7 +218,7 @@ public class InvitationsEndpointMockMvcTests extends InjectedMockContextTest {\n                 .andReturn();\n \n         InvitationsResponse invitationsResponse = readValue(mvcResult.getResponse().getContentAsString(), InvitationsResponse.class);\n-        assertResponseAndCodeCorrect(new String[] {email}, redirectUrl, result.getIdentityZone().getSubdomain(), invitationsResponse, zonifiedScimInviteClientDetails);\n+        assertResponseAndCodeCorrect(new String[] {email}, redirectUrl, result.getIdentityZone(), invitationsResponse, zonifiedScimInviteClientDetails);\n \n     }\n \n@@ -235,7 +237,7 @@ public class InvitationsEndpointMockMvcTests extends InjectedMockContextTest {\n         String redirectUrl = \"example.com\";\n         InvitationsResponse response = sendRequestWithTokenAndReturnResponse(zonedScimInviteToken, result.getIdentityZone().getSubdomain(), zonedClientDetails.getClientId(), redirectUrl, email);\n \n-        assertResponseAndCodeCorrect(new String[] {email}, redirectUrl, result.getIdentityZone().getSubdomain(), response, zonedClientDetails);\n+        assertResponseAndCodeCorrect(new String[] {email}, redirectUrl, result.getIdentityZone(), response, zonedClientDetails);\n     }\n \n     @Test\n@@ -346,6 +348,7 @@ public class InvitationsEndpointMockMvcTests extends InjectedMockContextTest {\n         sendRequestWithToken(userToken, null, clientId, \"example.com\", \"user1@\"+domain);\n \n         String code = getWebApplicationContext().getBean(JdbcTemplate.class).queryForObject(\"SELECT code FROM expiring_code_store\", String.class);\n+        code = new InMemoryExpiringCodeStore().extractCode(code);\n         assertNotNull(\"Invite Code Must be Present\", code);\n \n         MockHttpServletRequestBuilder accept = get(\"/invitations/accept\")\n@@ -371,7 +374,7 @@ public class InvitationsEndpointMockMvcTests extends InjectedMockContextTest {\n         assertThat(response.getFailedInvites().size(), is(0));\n     }\n \n-    private void assertResponseAndCodeCorrect(String[] emails, String redirectUrl, String subdomain, InvitationsResponse response, ClientDetails clientDetails) {\n+    private void assertResponseAndCodeCorrect(String[] emails, String redirectUrl, IdentityZone zone, InvitationsResponse response, ClientDetails clientDetails) {\n         for (int i = 0; i < emails.length; i++) {\n             assertThat(response.getNewInvites().size(), is(emails.length));\n             assertThat(response.getNewInvites().get(i).getEmail(), is(emails[i]));\n@@ -382,8 +385,9 @@ public class InvitationsEndpointMockMvcTests extends InjectedMockContextTest {\n             String link = response.getNewInvites().get(i).getInviteLink().toString();\n             assertFalse(contains(link, \"@\"));\n             assertFalse(contains(link, \"%40\"));\n-            if (StringUtils.hasText(subdomain)) {\n-                assertThat(link, startsWith(\"http://\" + subdomain + \".localhost/invitations/accept\"));\n+            if (zone != null && StringUtils.hasText(zone.getSubdomain())) {\n+                assertThat(link, startsWith(\"http://\" + zone.getSubdomain() + \".localhost/invitations/accept\"));\n+                IdentityZoneHolder.set(zone);\n             } else {\n                 assertThat(link, startsWith(\"http://localhost/invitations/accept\"));\n             }\n@@ -392,6 +396,7 @@ public class InvitationsEndpointMockMvcTests extends InjectedMockContextTest {\n             assertThat(query, startsWith(\"code=\"));\n             String code = query.split(\"=\")[1];\n             ExpiringCode expiringCode = codeStore.retrieveCode(code);\n+            IdentityZoneHolder.clear();\n             assertThat(expiringCode.getExpiresAt().getTime(), is(greaterThan(System.currentTimeMillis())));\n             assertThat(expiringCode.getIntent(), is(ExpiringCodeType.INVITATION.name()));\n             Map<String, String> data = readValue(expiringCode.getData(), new TypeReference<Map<String, String>>() {});\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/InvitationsServiceMockMvcTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/InvitationsServiceMockMvcTests.java\nindex 17dcb57ee..177326455 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/InvitationsServiceMockMvcTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/InvitationsServiceMockMvcTests.java\n@@ -14,6 +14,7 @@\n \n package org.cloudfoundry.identity.uaa.login;\n \n+import org.cloudfoundry.identity.uaa.codestore.InMemoryExpiringCodeStore;\n import org.cloudfoundry.identity.uaa.constants.OriginKeys;\n import org.cloudfoundry.identity.uaa.message.EmailService;\n import org.cloudfoundry.identity.uaa.message.util.FakeJavaMailSender;\n@@ -244,6 +245,7 @@ public class InvitationsServiceMockMvcTests extends InjectedMockContextTest {\n             .andReturn();\n \n         code = getWebApplicationContext().getBean(JdbcTemplate.class).queryForObject(\"select code from expiring_code_store\", String.class);\n+        code = new InMemoryExpiringCodeStore().extractCode(code);\n         MockHttpSession session = (MockHttpSession) result.getRequest().getSession(false);\n         result = getMockMvc().perform(\n             post(\"/invitations/accept.do\")\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/ldap/LdapMockMvcTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/ldap/LdapMockMvcTests.java\nindex aae41a2ee..f407779cf 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/ldap/LdapMockMvcTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/ldap/LdapMockMvcTests.java\n@@ -14,6 +14,7 @@ package org.cloudfoundry.identity.uaa.mock.ldap;\n \n import org.cloudfoundry.identity.uaa.authentication.UaaAuthentication;\n import org.cloudfoundry.identity.uaa.authentication.manager.DynamicZoneAwareAuthenticationManager;\n+import org.cloudfoundry.identity.uaa.codestore.InMemoryExpiringCodeStore;\n import org.cloudfoundry.identity.uaa.constants.OriginKeys;\n import org.cloudfoundry.identity.uaa.mock.DefaultConfigurationTestSuite;\n import org.cloudfoundry.identity.uaa.mock.util.ApacheDSHelper;\n@@ -74,7 +75,6 @@ import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Random;\n import java.util.Set;\n \n import static java.util.Collections.EMPTY_LIST;\n@@ -265,7 +265,9 @@ public class LdapMockMvcTests  {\n             .andReturn();\n \n         code = getWebApplicationContext().getBean(JdbcTemplate.class).queryForObject(\"select code from expiring_code_store\", String.class);\n-\n+        IdentityZoneHolder.set(zone.getZone().getIdentityZone());\n+        code = new InMemoryExpiringCodeStore().extractCode(code);\n+        IdentityZoneHolder.clear();\n         MockHttpSession session = (MockHttpSession) result.getRequest().getSession(false);\n         getMockMvc().perform(post(\"/invitations/accept_enterprise.do\")\n                                  .session(session)\n@@ -306,7 +308,9 @@ public class LdapMockMvcTests  {\n             .andReturn();\n \n         code = getWebApplicationContext().getBean(JdbcTemplate.class).queryForObject(\"select code from expiring_code_store\", String.class);\n-\n+        IdentityZoneHolder.set(zone.getZone().getIdentityZone());\n+        code = new InMemoryExpiringCodeStore().extractCode(code);\n+        IdentityZoneHolder.clear();\n         session = (MockHttpSession) result.getRequest().getSession(false);\n         getMockMvc().perform(post(\"/invitations/accept_enterprise.do\")\n                                  .session(session)\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/scim/endpoints/ScimUserEndpointsMockMvcTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/scim/endpoints/ScimUserEndpointsMockMvcTests.java\nindex ba32b2e8d..2291d3bfb 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/scim/endpoints/ScimUserEndpointsMockMvcTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/scim/endpoints/ScimUserEndpointsMockMvcTests.java\n@@ -37,6 +37,7 @@ import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;\n import org.cloudfoundry.identity.uaa.zone.IdentityZoneSwitchingFilter;\n import org.hamcrest.MatcherAssert;\n import org.json.JSONObject;\n+import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n@@ -115,6 +116,11 @@ public class ScimUserEndpointsMockMvcTests extends InjectedMockContextTest {\n         uaaAdminToken = testClient.getClientCredentialsOAuthAccessToken(clientId, clientSecret, \"uaa.admin\");\n     }\n \n+    @After\n+    public void clear() {\n+        IdentityZoneHolder.clear();\n+    }\n+\n     private ScimUser createUser(String token) throws Exception {\n         return createUser(token, null);\n     }\n@@ -312,7 +318,9 @@ public class ScimUserEndpointsMockMvcTests extends InjectedMockContextTest {\n         String code = getQueryStringParam(query, \"code\");\n         assertThat(code, is(notNullValue()));\n \n+        IdentityZoneHolder.set(zoneResult.getIdentityZone());\n         ExpiringCode expiringCode = codeStore.retrieveCode(code);\n+        IdentityZoneHolder.clear();\n         assertThat(expiringCode.getExpiresAt().getTime(), is(greaterThan(System.currentTimeMillis())));\n         assertThat(expiringCode.getIntent(), is(REGISTRATION.name()));\n         Map<String, String> data = JsonUtils.readValue(expiringCode.getData(), new TypeReference<Map<String, String>>() {});\n@@ -349,7 +357,9 @@ public class ScimUserEndpointsMockMvcTests extends InjectedMockContextTest {\n         String code = getQueryStringParam(query, \"code\");\n         assertThat(code, is(notNullValue()));\n \n+        IdentityZoneHolder.set(zoneResult.getIdentityZone());\n         ExpiringCode expiringCode = codeStore.retrieveCode(code);\n+        IdentityZoneHolder.clear();\n         assertThat(expiringCode.getExpiresAt().getTime(), is(greaterThan(System.currentTimeMillis())));\n         assertThat(expiringCode.getIntent(), is(REGISTRATION.name()));\n         Map<String, String> data = JsonUtils.readValue(expiringCode.getData(), new TypeReference<Map<String, String>>() {});\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "logical and structural changes", "source_commit": "2ca35f1723e039aa7d2318134b05d02e40072a18", "source_date": "Fri May 12 11:58:13 2017 -0700", "source_tag": "3.17.0", "target_commit": "bbf6751bc0d87c4a3aaf21b54e26ce328ab998b3", "target_date": "Fri May 12 12:28:50 2017 -0700", "target_tag": "3.6.10", "FAIL TO PASS": [":cloudfoundry-identity-server:compileTestJava/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/codestore/ExpiringCodeStoreTests.java"], "PASS TO PASS": [":cloudfoundry-identity-model:mainOutputResourcesDir", ":cloudfoundry-identity-model:buildInfo", ":cloudfoundry-identity-model:compileJava", ":cloudfoundry-identity-model:processResources", ":cloudfoundry-identity-model:jar", ":cloudfoundry-identity-model:gitInfo", ":cloudfoundry-identity-model:classes", ":cloudfoundry-identity-server:classes", ":cloudfoundry-identity-server:jar", ":cloudfoundry-identity-server:compileTestJava", ":cloudfoundry-identity-server:compileJava", ":cloudfoundry-identity-server:processResources"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_962", "original_commit_message": "Add zone ID to expiring codes\n[#145313231] https://www.pivotaltracker.com/story/show/145313231", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/ExpiringCodeStore.java b/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/ExpiringCodeStore.java\nindex 535cea240..366a6ea8c 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/ExpiringCodeStore.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/ExpiringCodeStore.java\n@@ -1,5 +1,5 @@\n /*******************************************************************************\n- *     Cloud Foundry \n+ *     Cloud Foundry\n  *     Copyright (c) [2009-2016] Pivotal Software, Inc. All Rights Reserved.\n  *\n  *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n@@ -12,6 +12,7 @@\n  *******************************************************************************/\n package org.cloudfoundry.identity.uaa.codestore;\n \n+import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;\n import org.springframework.security.oauth2.common.util.RandomValueStringGenerator;\n \n import java.sql.Timestamp;\n@@ -20,7 +21,7 @@ public interface ExpiringCodeStore {\n \n     /**\n      * Generate and persist a one-time code with an expiry date.\n-     * \n+     *\n      * @param data JSON object to be associated with the code\n      * @param intent An optional key (not necessarily unique) for looking up codes\n      * @return code the generated one-time code\n@@ -31,7 +32,7 @@ public interface ExpiringCodeStore {\n \n     /**\n      * Retrieve a code and delete it if it exists.\n-     * \n+     *\n      * @param code the one-time code to look for\n      * @return code or null if the code is not found\n      * @throws java.lang.NullPointerException if the code is null\n@@ -40,7 +41,7 @@ public interface ExpiringCodeStore {\n \n     /**\n      * Set the code generator for this store.\n-     * \n+     *\n      * @param generator Code generator\n      */\n     void setGenerator(RandomValueStringGenerator generator);\n@@ -51,4 +52,16 @@ public interface ExpiringCodeStore {\n      * @param intent Intent of codes to remove\n      */\n     void expireByIntent(String intent);\n+\n+    default String zonifyCode(String code) {\n+        return code + \"[zone[\" + IdentityZoneHolder.get().getId()+\"]]\";\n+    }\n+\n+    default String extractCode(String zoneCode) {\n+        int endIndex = zoneCode.indexOf(\"[zone[\" + IdentityZoneHolder.get().getId()+\"]]\");\n+        if (endIndex<0) {\n+            return zoneCode;\n+        }\n+        return zoneCode.substring(0, endIndex);\n+    }\n }\n\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/InMemoryExpiringCodeStore.java b/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/InMemoryExpiringCodeStore.java\nindex e3560b576..7751ace73 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/InMemoryExpiringCodeStore.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/InMemoryExpiringCodeStore.java\n@@ -14,6 +14,7 @@ package org.cloudfoundry.identity.uaa.codestore;\n \n import org.cloudfoundry.identity.uaa.util.TimeService;\n import org.cloudfoundry.identity.uaa.util.TimeServiceImpl;\n+import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;\n import org.springframework.dao.DataIntegrityViolationException;\n import org.springframework.security.oauth2.common.util.RandomValueStringGenerator;\n import org.springframework.util.Assert;\n@@ -44,7 +45,7 @@ public class InMemoryExpiringCodeStore implements ExpiringCodeStore {\n \n         ExpiringCode expiringCode = new ExpiringCode(code, expiresAt, data, intent);\n \n-        ExpiringCode duplicate = store.putIfAbsent(code, expiringCode);\n+        ExpiringCode duplicate = store.putIfAbsent(zonifyCode(code), expiringCode);\n         if (duplicate != null) {\n             throw new DataIntegrityViolationException(\"Duplicate code: \" + code);\n         }\n@@ -58,7 +59,7 @@ public class InMemoryExpiringCodeStore implements ExpiringCodeStore {\n             throw new NullPointerException();\n         }\n \n-        ExpiringCode expiringCode = store.remove(code);\n+        ExpiringCode expiringCode = store.remove(zonifyCode(code));\n \n         if (expiringCode == null || isExpired(expiringCode)) {\n             expiringCode = null;\n@@ -79,8 +80,8 @@ public class InMemoryExpiringCodeStore implements ExpiringCodeStore {\n     @Override\n     public void expireByIntent(String intent) {\n         Assert.hasText(intent);\n-\n-        store.values().stream().filter(c -> intent.equals(c.getIntent())).forEach(c -> store.remove(c.getCode()));\n+        String id = IdentityZoneHolder.get().getId();\n+        store.entrySet().stream().filter(c -> c.getKey().contains(id) && intent.equals(c.getValue().getIntent())).forEach(c -> store.remove(c.getKey()));\n     }\n \n     public InMemoryExpiringCodeStore setTimeService(TimeService timeService) {\n\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/JdbcExpiringCodeStore.java b/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/JdbcExpiringCodeStore.java\nindex bca066ee8..de8ccc790 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/JdbcExpiringCodeStore.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/codestore/JdbcExpiringCodeStore.java\n@@ -35,10 +35,10 @@ public class JdbcExpiringCodeStore implements ExpiringCodeStore {\n \n     protected static final String insert = \"insert into \" + tableName + \" (\" + fields + \") values (?,?,?,?)\";\n     protected static final String delete = \"delete from \" + tableName + \" where code = ?\";\n-    protected static final String deleteIntent = \"delete from \" + tableName + \" where intent = ?\";\n+    protected static final String deleteIntent = \"delete from \" + tableName + \" where intent = ? and code LIKE ?\";\n     protected static final String deleteExpired = \"delete from \" + tableName + \" where expiresat < ?\";\n \n-    private static final JdbcExpiringCodeMapper rowMapper = new JdbcExpiringCodeMapper();\n+    private final JdbcExpiringCodeMapper rowMapper = new JdbcExpiringCodeMapper();\n \n     protected static final String selectAllFields = \"select \" + fields + \" from \" + tableName + \" where code = ?\";\n \n@@ -98,7 +98,7 @@ public class JdbcExpiringCodeStore implements ExpiringCodeStore {\n             count++;\n             String code = generator.generate();\n             try {\n-                int update = jdbcTemplate.update(insert, code, expiresAt.getTime(), data, intent);\n+                int update = jdbcTemplate.update(insert, zonifyCode(code), expiresAt.getTime(), data, intent);\n                 if (update == 1) {\n                     ExpiringCode expiringCode = new ExpiringCode(code, expiresAt, data, intent);\n                     return expiringCode;\n@@ -124,9 +124,9 @@ public class JdbcExpiringCodeStore implements ExpiringCodeStore {\n         }\n \n         try {\n-            ExpiringCode expiringCode = jdbcTemplate.queryForObject(selectAllFields, rowMapper, code);\n+            ExpiringCode expiringCode = jdbcTemplate.queryForObject(selectAllFields, rowMapper, zonifyCode(code));\n             if (expiringCode != null) {\n-                jdbcTemplate.update(delete, code);\n+                jdbcTemplate.update(delete, zonifyCode(code));\n             }\n             if (expiringCode.getExpiresAt().getTime() < timeService.getCurrentTimeMillis()) {\n                 expiringCode = null;\n@@ -146,7 +146,7 @@ public class JdbcExpiringCodeStore implements ExpiringCodeStore {\n     public void expireByIntent(String intent) {\n         Assert.hasText(intent);\n \n-        jdbcTemplate.update(deleteIntent, intent);\n+        jdbcTemplate.update(deleteIntent, intent, zonifyCode(\"%\")+\"%\");\n     }\n \n     public int cleanExpiredEntries() {\n@@ -162,11 +162,11 @@ public class JdbcExpiringCodeStore implements ExpiringCodeStore {\n         return 0;\n     }\n \n-    protected static class JdbcExpiringCodeMapper implements RowMapper<ExpiringCode> {\n+    protected class JdbcExpiringCodeMapper implements RowMapper<ExpiringCode> {\n \n         @Override\n         public ExpiringCode mapRow(ResultSet rs, int rowNum) throws SQLException {\n-            String code = rs.getString(\"code\");\n+            String code = extractCode(rs.getString(\"code\"));\n             Timestamp expiresAt = new Timestamp(rs.getLong(\"expiresat\"));\n             String intent = rs.getString(\"intent\");\n             String data = rs.getString(\"data\");\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/codestore/ExpiringCodeStoreTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/codestore/ExpiringCodeStoreTests.java\nindex ada4d6968..8d1af29d4 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/codestore/ExpiringCodeStoreTests.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/codestore/ExpiringCodeStoreTests.java\n@@ -16,6 +16,8 @@ import org.cloudfoundry.identity.uaa.test.JdbcTestBase;\n import org.cloudfoundry.identity.uaa.test.TestUtils;\n import org.cloudfoundry.identity.uaa.util.TimeService;\n import org.cloudfoundry.identity.uaa.util.TimeServiceImpl;\n+import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;\n+import org.cloudfoundry.identity.uaa.zone.MultitenancyFixture;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n@@ -26,12 +28,15 @@ import org.mockito.Mockito;\n import org.springframework.dao.DataAccessException;\n import org.springframework.dao.DataIntegrityViolationException;\n import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.RowMapper;\n import org.springframework.security.oauth2.common.util.RandomValueStringGenerator;\n+import org.springframework.test.util.ReflectionTestUtils;\n \n import java.sql.SQLException;\n import java.sql.Timestamp;\n import java.util.Arrays;\n import java.util.Collection;\n+import java.util.Map;\n \n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n@@ -50,7 +55,7 @@ public class ExpiringCodeStoreTests extends JdbcTestBase {\n     @Parameters\n     public static Collection<Object[]> data() {\n         return Arrays.asList(new Object[][] {\n-                        { InMemoryExpiringCodeStore.class }, { JdbcExpiringCodeStore.class },\n+            { InMemoryExpiringCodeStore.class }, { JdbcExpiringCodeStore.class },\n         });\n     }\n \n@@ -68,6 +73,16 @@ public class ExpiringCodeStoreTests extends JdbcTestBase {\n         }\n     }\n \n+    public int countCodes() {\n+        if (expiringCodeStore instanceof InMemoryExpiringCodeStore) {\n+            Map map = (Map) ReflectionTestUtils.getField(expiringCodeStore, \"store\");\n+            return map.size();\n+        } else {\n+            // confirm that everything is clean prior to test.\n+            return jdbcTemplate.queryForObject(\"select count(*) from expiring_code_store\", Integer.class);\n+        }\n+    }\n+\n     @Test\n     public void testGenerateCode() throws Exception {\n         String data = \"{}\";\n@@ -132,6 +147,22 @@ public class ExpiringCodeStoreTests extends JdbcTestBase {\n         Assert.assertNull(expiringCodeStore.retrieveCode(generatedCode.getCode()));\n     }\n \n+    @Test\n+    public void testRetrieveCode_In_Another_Zone() throws Exception {\n+        String data = \"{}\";\n+        Timestamp expiresAt = new Timestamp(System.currentTimeMillis() + 60000);\n+        ExpiringCode generatedCode = expiringCodeStore.generateCode(data, expiresAt, null);\n+\n+        IdentityZoneHolder.set(MultitenancyFixture.identityZone(\"other\",\"other\"));\n+        Assert.assertNull(expiringCodeStore.retrieveCode(generatedCode.getCode()));\n+\n+        IdentityZoneHolder.clear();\n+        ExpiringCode retrievedCode = expiringCodeStore.retrieveCode(generatedCode.getCode());\n+        Assert.assertEquals(generatedCode, retrievedCode);\n+\n+\n+    }\n+\n     @Test\n     public void testRetrieveCodeWithCodeNotFound() throws Exception {\n         ExpiringCode retrievedCode = expiringCodeStore.retrieveCode(\"unknown\");\n@@ -150,7 +181,7 @@ public class ExpiringCodeStoreTests extends JdbcTestBase {\n         Arrays.fill(oneMb, 'a');\n         String aaaString = new String(oneMb);\n         ExpiringCode expiringCode = expiringCodeStore.generateCode(aaaString, new Timestamp(\n-                        System.currentTimeMillis() + 60000), null);\n+            System.currentTimeMillis() + 60000), null);\n         String code = expiringCode.getCode();\n         ExpiringCode actualCode = expiringCodeStore.retrieveCode(code);\n         Assert.assertEquals(expiringCode, actualCode);\n@@ -174,10 +205,16 @@ public class ExpiringCodeStoreTests extends JdbcTestBase {\n     public void testExpireCodeByIntent() throws Exception {\n         ExpiringCode code = expiringCodeStore.generateCode(\"{}\", new Timestamp(System.currentTimeMillis() + 60000), \"Test Intent\");\n \n+        Assert.assertEquals(1, countCodes());\n+\n+        IdentityZoneHolder.set(MultitenancyFixture.identityZone(\"id\",\"id\"));\n         expiringCodeStore.expireByIntent(\"Test Intent\");\n+        Assert.assertEquals(1, countCodes());\n \n+        IdentityZoneHolder.clear();\n+        expiringCodeStore.expireByIntent(\"Test Intent\");\n         ExpiringCode retrievedCode = expiringCodeStore.retrieveCode(code.getCode());\n-\n+        Assert.assertEquals(0, countCodes());\n         Assert.assertNull(retrievedCode);\n     }\n \n@@ -206,10 +243,10 @@ public class ExpiringCodeStoreTests extends JdbcTestBase {\n             jdbcTemplate.update(JdbcExpiringCodeStore.insert, \"test\", System.currentTimeMillis() - 1000, \"{}\", null);\n             ((JdbcExpiringCodeStore) expiringCodeStore).cleanExpiredEntries();\n             jdbcTemplate.queryForObject(JdbcExpiringCodeStore.selectAllFields,\n-                            new JdbcExpiringCodeStore.JdbcExpiringCodeMapper(), \"test\");\n+                                        (RowMapper<ExpiringCode>) ReflectionTestUtils.getField(expiringCodeStore, \"rowMapper\"), \"test\");\n         } else {\n             throw new EmptyResultDataAccessException(1);\n         }\n \n     }\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsEndpointMockMvcTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsEndpointMockMvcTests.java\nindex 2336f01cf..219dbf78f 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsEndpointMockMvcTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/invitations/InvitationsEndpointMockMvcTests.java\n@@ -4,6 +4,7 @@ import com.fasterxml.jackson.core.type.TypeReference;\n import org.cloudfoundry.identity.uaa.codestore.ExpiringCode;\n import org.cloudfoundry.identity.uaa.codestore.ExpiringCodeStore;\n import org.cloudfoundry.identity.uaa.codestore.ExpiringCodeType;\n+import org.cloudfoundry.identity.uaa.codestore.InMemoryExpiringCodeStore;\n import org.cloudfoundry.identity.uaa.constants.OriginKeys;\n import org.cloudfoundry.identity.uaa.mock.InjectedMockContextTest;\n import org.cloudfoundry.identity.uaa.mock.util.MockMvcUtils;\n@@ -92,6 +93,7 @@ public class InvitationsEndpointMockMvcTests extends InjectedMockContextTest {\n \n     @After\n     public void cleanUpDomainList() throws Exception {\n+        IdentityZoneHolder.clear();\n         IdentityProvider<UaaIdentityProviderDefinition> uaaProvider = getWebApplicationContext().getBean(JdbcIdentityProviderProvisioning.class).retrieveByOrigin(UAA, IdentityZone.getUaa().getId());\n         uaaProvider.getConfig().setEmailDomain(null);\n         getWebApplicationContext().getBean(JdbcIdentityProviderProvisioning.class).update(uaaProvider);\n@@ -148,7 +150,7 @@ public class InvitationsEndpointMockMvcTests extends InjectedMockContextTest {\n         InvitationsResponse invitationsResponse = readValue(mvcResult.getResponse().getContentAsString(), InvitationsResponse.class);\n         BaseClientDetails defaultClientDetails = new BaseClientDetails();\n         defaultClientDetails.setClientId(\"admin\");\n-        assertResponseAndCodeCorrect(new String[] {email}, redirectUrl, result.getIdentityZone().getSubdomain(), invitationsResponse, defaultClientDetails);\n+        assertResponseAndCodeCorrect(new String[] {email}, redirectUrl, result.getIdentityZone(), invitationsResponse, defaultClientDetails);\n \n     }\n \n@@ -182,7 +184,7 @@ public class InvitationsEndpointMockMvcTests extends InjectedMockContextTest {\n                 .andReturn();\n \n         InvitationsResponse invitationsResponse = readValue(mvcResult.getResponse().getContentAsString(), InvitationsResponse.class);\n-        assertResponseAndCodeCorrect(new String[] {email}, redirectUrl, result.getIdentityZone().getSubdomain(), invitationsResponse, zonifiedScimInviteClientDetails);\n+        assertResponseAndCodeCorrect(new String[] {email}, redirectUrl, result.getIdentityZone(), invitationsResponse, zonifiedScimInviteClientDetails);\n \n     }\n \n@@ -216,7 +218,7 @@ public class InvitationsEndpointMockMvcTests extends InjectedMockContextTest {\n                 .andReturn();\n \n         InvitationsResponse invitationsResponse = readValue(mvcResult.getResponse().getContentAsString(), InvitationsResponse.class);\n-        assertResponseAndCodeCorrect(new String[] {email}, redirectUrl, result.getIdentityZone().getSubdomain(), invitationsResponse, zonifiedScimInviteClientDetails);\n+        assertResponseAndCodeCorrect(new String[] {email}, redirectUrl, result.getIdentityZone(), invitationsResponse, zonifiedScimInviteClientDetails);\n \n     }\n \n@@ -235,7 +237,7 @@ public class InvitationsEndpointMockMvcTests extends InjectedMockContextTest {\n         String redirectUrl = \"example.com\";\n         InvitationsResponse response = sendRequestWithTokenAndReturnResponse(zonedScimInviteToken, result.getIdentityZone().getSubdomain(), zonedClientDetails.getClientId(), redirectUrl, email);\n \n-        assertResponseAndCodeCorrect(new String[] {email}, redirectUrl, result.getIdentityZone().getSubdomain(), response, zonedClientDetails);\n+        assertResponseAndCodeCorrect(new String[] {email}, redirectUrl, result.getIdentityZone(), response, zonedClientDetails);\n     }\n \n     @Test\n@@ -346,6 +348,7 @@ public class InvitationsEndpointMockMvcTests extends InjectedMockContextTest {\n         sendRequestWithToken(userToken, null, clientId, \"example.com\", \"user1@\"+domain);\n \n         String code = getWebApplicationContext().getBean(JdbcTemplate.class).queryForObject(\"SELECT code FROM expiring_code_store\", String.class);\n+        code = new InMemoryExpiringCodeStore().extractCode(code);\n         assertNotNull(\"Invite Code Must be Present\", code);\n \n         MockHttpServletRequestBuilder accept = get(\"/invitations/accept\")\n@@ -371,7 +374,7 @@ public class InvitationsEndpointMockMvcTests extends InjectedMockContextTest {\n         assertThat(response.getFailedInvites().size(), is(0));\n     }\n \n-    private void assertResponseAndCodeCorrect(String[] emails, String redirectUrl, String subdomain, InvitationsResponse response, ClientDetails clientDetails) {\n+    private void assertResponseAndCodeCorrect(String[] emails, String redirectUrl, IdentityZone zone, InvitationsResponse response, ClientDetails clientDetails) {\n         for (int i = 0; i < emails.length; i++) {\n             assertThat(response.getNewInvites().size(), is(emails.length));\n             assertThat(response.getNewInvites().get(i).getEmail(), is(emails[i]));\n@@ -382,8 +385,9 @@ public class InvitationsEndpointMockMvcTests extends InjectedMockContextTest {\n             String link = response.getNewInvites().get(i).getInviteLink().toString();\n             assertFalse(contains(link, \"@\"));\n             assertFalse(contains(link, \"%40\"));\n-            if (StringUtils.hasText(subdomain)) {\n-                assertThat(link, startsWith(\"http://\" + subdomain + \".localhost/invitations/accept\"));\n+            if (zone != null && StringUtils.hasText(zone.getSubdomain())) {\n+                assertThat(link, startsWith(\"http://\" + zone.getSubdomain() + \".localhost/invitations/accept\"));\n+                IdentityZoneHolder.set(zone);\n             } else {\n                 assertThat(link, startsWith(\"http://localhost/invitations/accept\"));\n             }\n@@ -392,6 +396,7 @@ public class InvitationsEndpointMockMvcTests extends InjectedMockContextTest {\n             assertThat(query, startsWith(\"code=\"));\n             String code = query.split(\"=\")[1];\n             ExpiringCode expiringCode = codeStore.retrieveCode(code);\n+            IdentityZoneHolder.clear();\n             assertThat(expiringCode.getExpiresAt().getTime(), is(greaterThan(System.currentTimeMillis())));\n             assertThat(expiringCode.getIntent(), is(ExpiringCodeType.INVITATION.name()));\n             Map<String, String> data = readValue(expiringCode.getData(), new TypeReference<Map<String, String>>() {});\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/InvitationsServiceMockMvcTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/InvitationsServiceMockMvcTests.java\nindex 17dcb57ee..177326455 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/InvitationsServiceMockMvcTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/InvitationsServiceMockMvcTests.java\n@@ -14,6 +14,7 @@\n \n package org.cloudfoundry.identity.uaa.login;\n \n+import org.cloudfoundry.identity.uaa.codestore.InMemoryExpiringCodeStore;\n import org.cloudfoundry.identity.uaa.constants.OriginKeys;\n import org.cloudfoundry.identity.uaa.message.EmailService;\n import org.cloudfoundry.identity.uaa.message.util.FakeJavaMailSender;\n@@ -244,6 +245,7 @@ public class InvitationsServiceMockMvcTests extends InjectedMockContextTest {\n             .andReturn();\n \n         code = getWebApplicationContext().getBean(JdbcTemplate.class).queryForObject(\"select code from expiring_code_store\", String.class);\n+        code = new InMemoryExpiringCodeStore().extractCode(code);\n         MockHttpSession session = (MockHttpSession) result.getRequest().getSession(false);\n         result = getMockMvc().perform(\n             post(\"/invitations/accept.do\")\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/ldap/LdapMockMvcTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/ldap/LdapMockMvcTests.java\nindex aae41a2ee..f407779cf 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/ldap/LdapMockMvcTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/ldap/LdapMockMvcTests.java\n@@ -14,6 +14,7 @@ package org.cloudfoundry.identity.uaa.mock.ldap;\n \n import org.cloudfoundry.identity.uaa.authentication.UaaAuthentication;\n import org.cloudfoundry.identity.uaa.authentication.manager.DynamicZoneAwareAuthenticationManager;\n+import org.cloudfoundry.identity.uaa.codestore.InMemoryExpiringCodeStore;\n import org.cloudfoundry.identity.uaa.constants.OriginKeys;\n import org.cloudfoundry.identity.uaa.mock.DefaultConfigurationTestSuite;\n import org.cloudfoundry.identity.uaa.mock.util.ApacheDSHelper;\n@@ -74,7 +75,6 @@ import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Random;\n import java.util.Set;\n \n import static java.util.Collections.EMPTY_LIST;\n@@ -265,7 +265,9 @@ public class LdapMockMvcTests  {\n             .andReturn();\n \n         code = getWebApplicationContext().getBean(JdbcTemplate.class).queryForObject(\"select code from expiring_code_store\", String.class);\n-\n+        IdentityZoneHolder.set(zone.getZone().getIdentityZone());\n+        code = new InMemoryExpiringCodeStore().extractCode(code);\n+        IdentityZoneHolder.clear();\n         MockHttpSession session = (MockHttpSession) result.getRequest().getSession(false);\n         getMockMvc().perform(post(\"/invitations/accept_enterprise.do\")\n                                  .session(session)\n@@ -306,7 +308,9 @@ public class LdapMockMvcTests  {\n             .andReturn();\n \n         code = getWebApplicationContext().getBean(JdbcTemplate.class).queryForObject(\"select code from expiring_code_store\", String.class);\n-\n+        IdentityZoneHolder.set(zone.getZone().getIdentityZone());\n+        code = new InMemoryExpiringCodeStore().extractCode(code);\n+        IdentityZoneHolder.clear();\n         session = (MockHttpSession) result.getRequest().getSession(false);\n         getMockMvc().perform(post(\"/invitations/accept_enterprise.do\")\n                                  .session(session)\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/scim/endpoints/ScimUserEndpointsMockMvcTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/scim/endpoints/ScimUserEndpointsMockMvcTests.java\nindex ba32b2e8d..2291d3bfb 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/scim/endpoints/ScimUserEndpointsMockMvcTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/scim/endpoints/ScimUserEndpointsMockMvcTests.java\n@@ -37,6 +37,7 @@ import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;\n import org.cloudfoundry.identity.uaa.zone.IdentityZoneSwitchingFilter;\n import org.hamcrest.MatcherAssert;\n import org.json.JSONObject;\n+import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n@@ -115,6 +116,11 @@ public class ScimUserEndpointsMockMvcTests extends InjectedMockContextTest {\n         uaaAdminToken = testClient.getClientCredentialsOAuthAccessToken(clientId, clientSecret, \"uaa.admin\");\n     }\n \n+    @After\n+    public void clear() {\n+        IdentityZoneHolder.clear();\n+    }\n+\n     private ScimUser createUser(String token) throws Exception {\n         return createUser(token, null);\n     }\n@@ -312,7 +318,9 @@ public class ScimUserEndpointsMockMvcTests extends InjectedMockContextTest {\n         String code = getQueryStringParam(query, \"code\");\n         assertThat(code, is(notNullValue()));\n \n+        IdentityZoneHolder.set(zoneResult.getIdentityZone());\n         ExpiringCode expiringCode = codeStore.retrieveCode(code);\n+        IdentityZoneHolder.clear();\n         assertThat(expiringCode.getExpiresAt().getTime(), is(greaterThan(System.currentTimeMillis())));\n         assertThat(expiringCode.getIntent(), is(REGISTRATION.name()));\n         Map<String, String> data = JsonUtils.readValue(expiringCode.getData(), new TypeReference<Map<String, String>>() {});\n@@ -349,7 +357,9 @@ public class ScimUserEndpointsMockMvcTests extends InjectedMockContextTest {\n         String code = getQueryStringParam(query, \"code\");\n         assertThat(code, is(notNullValue()));\n \n+        IdentityZoneHolder.set(zoneResult.getIdentityZone());\n         ExpiringCode expiringCode = codeStore.retrieveCode(code);\n+        IdentityZoneHolder.clear();\n         assertThat(expiringCode.getExpiresAt().getTime(), is(greaterThan(System.currentTimeMillis())));\n         assertThat(expiringCode.getIntent(), is(REGISTRATION.name()));\n         Map<String, String> data = JsonUtils.readValue(expiringCode.getData(), new TypeReference<Map<String, String>>() {});\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "logical and structural changes", "source_commit": "2ca35f1723e039aa7d2318134b05d02e40072a18", "source_date": "Fri May 12 11:58:13 2017 -0700", "source_tag": "3.17.0", "target_commit": "ba23bcf109704ab2eae519b705d7b2a75e023553", "target_date": "Fri May 12 12:09:15 2017 -0700", "target_tag": "3.9.12", "FAIL TO PASS": ["/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/codestore/ExpiringCodeStoreTests.java"], "PASS TO PASS": [":cloudfoundry-identity-model:mainOutputResourcesDir", ":cloudfoundry-identity-model:buildInfo", ":cloudfoundry-identity-model:compileJava", ":cloudfoundry-identity-model:processResources", ":cloudfoundry-identity-model:jar", ":cloudfoundry-identity-model:gitInfo", ":cloudfoundry-identity-server:compileJava/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", ":cloudfoundry-identity-model:classes", "/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", ":cloudfoundry-identity-server:classes", ":cloudfoundry-identity-server:compileTestJava/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", ":cloudfoundry-identity-server:jar", ":cloudfoundry-identity-server:compileTestJava", "/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", ":cloudfoundry-identity-server:compileJava", ":cloudfoundry-identity-server:processResources"]}
{"ecosystem": "maven", "repo": "xwiki-platform", "instance_id": "xwiki-platform_966", "original_commit_message": "XWIKI-21478: Improve rights check of template macros", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/org/xwiki/internal/velocity/XWikiVelocityManager.java b/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/org/xwiki/internal/velocity/XWikiVelocityManager.java\nindex 07ddaa6f112..841980cd1b4 100644\n--- a/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/org/xwiki/internal/velocity/XWikiVelocityManager.java\n+++ b/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/org/xwiki/internal/velocity/XWikiVelocityManager.java\n@@ -42,6 +42,9 @@\n import org.xwiki.observation.EventListener;\n import org.xwiki.observation.ObservationManager;\n import org.xwiki.observation.event.Event;\n+import org.xwiki.security.authorization.AuthorExecutor;\n+import org.xwiki.security.authorization.AuthorizationManager;\n+import org.xwiki.security.authorization.Right;\n import org.xwiki.skin.Skin;\n import org.xwiki.skin.SkinManager;\n import org.xwiki.template.Template;\n@@ -73,7 +76,7 @@ public class XWikiVelocityManager extends DefaultVelocityManager implements Init\n     private static final String VELOCITYENGINE_CACHEKEY_NAME = \"velocity.engine.key\";\n \n     private static final List<Event> EVENTS =\n-        Arrays.<Event>asList(new TemplateUpdatedEvent(), new TemplateDeletedEvent());\n+        Arrays.asList(new TemplateUpdatedEvent(), new TemplateDeletedEvent());\n \n     /**\n      * Used to access the current {@link XWikiContext}.\n@@ -96,10 +99,16 @@ public class XWikiVelocityManager extends DefaultVelocityManager implements Init\n     @Inject\n     private Environment environment;\n \n+    @Inject\n+    private AuthorExecutor authorExecutor;\n+\n+    @Inject\n+    private AuthorizationManager authorizationManager;\n+\n     @Inject\n     private Logger logger;\n \n-    private Map<String, VelocityEngine> velocityEngines = new ConcurrentHashMap<>();\n+    private final Map<String, VelocityEngine> velocityEngines = new ConcurrentHashMap<>();\n \n     @Override\n     public void initialize() throws InitializationException\n@@ -114,7 +123,7 @@ public void onEvent(Event event, Object source, Object data)\n                 if (event instanceof TemplateEvent) {\n                     TemplateEvent templateEvent = (TemplateEvent) event;\n \n-                    velocityEngines.remove(templateEvent.getId());\n+                    XWikiVelocityManager.this.velocityEngines.remove(templateEvent.getId());\n                 }\n             }\n \n@@ -177,8 +186,8 @@ private Template getVelocityEngineMacrosTemplate()\n \n     /**\n      * @return the Velocity Engine corresponding to the current execution context. More specifically returns the\n-     *         Velocity Engine for the current skin since each skin has its own Velocity Engine so that each skin can\n-     *         have global velocimacros defined\n+     *     Velocity Engine for the current skin since each skin has its own Velocity Engine so that each skin can have\n+     *     global velocimacros defined\n      * @throws XWikiVelocityException in case of an error while creating a Velocity Engine\n      */\n     @Override\n@@ -248,10 +257,13 @@ private void injectBaseMacros(VelocityEngine velocityEngine, Template skinMacros\n             }\n         }\n \n-        // Inject skin macros\n-        if (skinMacrosTemplate != null) {\n-            VelocityTemplate skinMacros = compile(\"\", new StringReader(skinMacrosTemplate.getContent().getContent()));\n-\n+        // Inject skin macros if their author has at least Script rights.\n+        if (skinMacrosTemplate != null\n+            && this.authorizationManager.hasAccess(Right.SCRIPT, skinMacrosTemplate.getContent().getAuthorReference(),\n+            skinMacrosTemplate.getContent().getDocumentReference()))\n+        {\n+            VelocityTemplate skinMacros =\n+                compile(\"\", new StringReader(skinMacrosTemplate.getContent().getContent()));\n             velocityEngine.addGlobalMacros(skinMacros.getMacros());\n         }\n     }\n\n\n</patch>\n<test_patch>\ndiff --git a/xwiki-platform-core/xwiki-platform-oldcore/src/test/java/org/xwiki/internal/velocity/XWikiVelocityManagerTest.java b/xwiki-platform-core/xwiki-platform-oldcore/src/test/java/org/xwiki/internal/velocity/XWikiVelocityManagerTest.java\nindex 7ab150ee489..8815d5b14ce 100644\n--- a/xwiki-platform-core/xwiki-platform-oldcore/src/test/java/org/xwiki/internal/velocity/XWikiVelocityManagerTest.java\n+++ b/xwiki-platform-core/xwiki-platform-oldcore/src/test/java/org/xwiki/internal/velocity/XWikiVelocityManagerTest.java\n@@ -22,15 +22,24 @@\n import org.apache.velocity.VelocityContext;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.xwiki.component.manager.ComponentLookupException;\n+import org.mockito.Mock;\n import org.xwiki.internal.script.XWikiScriptContextInitializer;\n import org.xwiki.localization.ContextualLocalizationManager;\n import org.xwiki.logging.internal.DefaultLoggerConfiguration;\n import org.xwiki.model.reference.DocumentReference;\n+import org.xwiki.properties.ConverterManager;\n import org.xwiki.script.internal.DefaultScriptContextManager;\n+import org.xwiki.security.authorization.AuthorizationManager;\n+import org.xwiki.security.authorization.Right;\n+import org.xwiki.skin.Skin;\n+import org.xwiki.skin.SkinManager;\n+import org.xwiki.template.Template;\n+import org.xwiki.template.TemplateContent;\n+import org.xwiki.template.TemplateManager;\n import org.xwiki.test.annotation.ComponentList;\n import org.xwiki.test.junit5.mockito.InjectMockComponents;\n import org.xwiki.test.junit5.mockito.MockComponent;\n+import org.xwiki.velocity.VelocityEngine;\n import org.xwiki.velocity.internal.DefaultVelocityConfiguration;\n import org.xwiki.velocity.internal.VelocityExecutionContextInitializer;\n \n@@ -44,17 +53,29 @@\n import static org.junit.jupiter.api.Assertions.assertNotSame;\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.mockito.ArgumentMatchers.anyMap;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n \n /**\n  * Validate {@link XWikiVelocityManager}.\n- * \n+ *\n  * @version $Id$\n  */\n-@ComponentList(value = {DefaultScriptContextManager.class, XWikiScriptContextInitializer.class,\n-    DefaultVelocityConfiguration.class, DefaultLoggerConfiguration.class})\n+@ComponentList({\n+    DefaultScriptContextManager.class,\n+    XWikiScriptContextInitializer.class,\n+    DefaultVelocityConfiguration.class,\n+    DefaultLoggerConfiguration.class\n+})\n @OldcoreTest\n public class XWikiVelocityManagerTest\n {\n+    private static final DocumentReference TEMPLATE_DOCUMENT = new DocumentReference(\"xwiki\", \"XWiki\", \"TestMacros\");\n+\n+    private static final DocumentReference SCRIPT_USER = new DocumentReference(\"xwiki\", \"XWiki\", \"Script\");\n+\n     @MockComponent\n     private ContextualLocalizationManager localizationManager;\n \n@@ -64,19 +85,47 @@\n     @InjectMockitoOldcore\n     private MockitoOldcore oldcore;\n \n+    @MockComponent\n+    private SkinManager skinManager;\n+\n+    @Mock\n+    private Skin skin;\n+\n+    @MockComponent\n+    private TemplateManager templateManager;\n+\n+    @Mock\n+    private Template template;\n+\n+    @Mock\n+    private TemplateContent templateContent;\n+\n+    @MockComponent\n+    private ConverterManager converterManager;\n+\n     @BeforeEach\n-    public void beforeEach() throws ComponentLookupException\n+    void beforeEach() throws Exception\n     {\n         this.oldcore.getExecutionContext().setProperty(VelocityExecutionContextInitializer.VELOCITY_CONTEXT_ID,\n             new VelocityContext());\n+\n+        when(this.skinManager.getCurrentSkin(true)).thenReturn(this.skin);\n+        when(this.templateManager.getTemplate(\"macros.vm\")).thenReturn(this.template);\n+        when(this.template.getId()).thenReturn(\"testMacros\");\n+        when(this.template.getContent()).thenReturn(this.templateContent);\n+        when(this.templateContent.getDocumentReference()).thenReturn(TEMPLATE_DOCUMENT);\n+        when(this.templateContent.getContent()).thenReturn(\"\");\n+\n+        AuthorizationManager authorizationManager = this.oldcore.getMockAuthorizationManager();\n+        when(authorizationManager.hasAccess(Right.SCRIPT, SCRIPT_USER, TEMPLATE_DOCUMENT)).thenReturn(true);\n     }\n \n     // Tests\n \n     @Test\n-    public void getVelocityContext()\n+    void getVelocityContext()\n     {\n-        VelocityContext context = velocityManager.getVelocityContext();\n+        VelocityContext context = this.velocityManager.getVelocityContext();\n \n         assertNull(context.get(\"doc\"));\n         assertNull(context.get(\"sdoc\"));\n@@ -112,4 +161,19 @@ public void getVelocityContext()\n         assertNotNull(context.get(\"sdoc\"));\n         assertNotSame(sdoc, context.get(\"sdoc\"));\n     }\n+\n+    @Test\n+    void checkMacrosInjectionWithoutScriptRights() throws Exception\n+    {\n+        VelocityEngine engine = this.velocityManager.getVelocityEngine();\n+        verify(engine, never()).addGlobalMacros(anyMap());\n+    }\n+\n+    @Test\n+    void checkMacrosInjectionWithScriptRights() throws Exception\n+    {\n+        when(this.templateContent.getAuthorReference()).thenReturn(SCRIPT_USER);\n+        VelocityEngine engine = this.velocityManager.getVelocityEngine();\n+        verify(engine).addGlobalMacros(anyMap());\n+    }\n }\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "logical and structural changes", "source_commit": "3d4dbb41f52d1a6e39835cfb1695ca6668605a39", "source_date": "Tue Oct 31 11:27:27 2023 +0100", "source_tag": "15.10", "target_commit": "da177c3c972e797d92c1a31e278f946012c41b56", "target_date": "Thu Nov 2 19:01:11 2023 +0100", "target_tag": "15.5.4", "FAIL TO PASS": ["com.xpn.xwiki.render.DefaultVelocityManagerTest.checkMacrosInjectionWithoutScriptRights"], "PASS TO PASS": []}
{"ecosystem": "maven", "repo": "xwiki-platform", "instance_id": "xwiki-platform_967", "original_commit_message": "XWIKI-21478: Improve rights check of template macros", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/render/DefaultVelocityManager.java b/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/render/DefaultVelocityManager.java\nindex b9a57cac376..701719218c3 100644\n--- a/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/render/DefaultVelocityManager.java\n+++ b/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/render/DefaultVelocityManager.java\n@@ -47,6 +47,8 @@\n import org.xwiki.observation.event.Event;\n import org.xwiki.script.ScriptContextManager;\n import org.xwiki.security.authorization.AuthorExecutor;\n+import org.xwiki.security.authorization.AuthorizationManager;\n+import org.xwiki.security.authorization.Right;\n import org.xwiki.skin.Skin;\n import org.xwiki.skin.SkinManager;\n import org.xwiki.template.Template;\n@@ -80,7 +82,7 @@ public class DefaultVelocityManager implements VelocityManager, Initializable\n     private static final String VELOCITYENGINE_CACHEKEY_NAME = \"velocity.engine.key\";\n \n     private static final List<Event> EVENTS =\n-        Arrays.<Event>asList(new TemplateUpdatedEvent(), new TemplateDeletedEvent());\n+        Arrays.asList(new TemplateUpdatedEvent(), new TemplateDeletedEvent());\n \n     /**\n      * Used to access the current {@link org.xwiki.context.ExecutionContext}.\n@@ -121,6 +123,9 @@ public class DefaultVelocityManager implements VelocityManager, Initializable\n     @Inject\n     private AuthorExecutor authorExecutor;\n \n+    @Inject\n+    private AuthorizationManager authorizationManager;\n+\n     @Inject\n     private Logger logger;\n \n@@ -286,11 +291,13 @@ public VelocityEngine getVelocityEngine() throws XWikiVelocityException\n                 if (velocityEngine == null) {\n                     velocityEngine = this.velocityFactory.createVelocityEngine(cacheKey, null);\n \n-                    if (template != null) {\n-                        // Local macros template\n-                        // We execute it ourself to support any kind of template, Velocity only support resource\n-                        // template by default\n-                        try {\n+                    try {\n+                        if (template != null && this.authorizationManager.hasAccess(Right.SCRIPT,\n+                            template.getContent().getAuthorReference(), template.getContent().getDocumentReference()))\n+                        {\n+                            // Local macros template, applied only if their author has at least Script rights.\n+                            // We execute it ourself to support any kind of template, Velocity only support resource\n+                            // template by default\n                             final VelocityEngine finalVelocityEngine = velocityEngine;\n \n                             this.authorExecutor.call(() -> {\n@@ -300,9 +307,9 @@ public VelocityEngine getVelocityEngine() throws XWikiVelocityException\n                                 return null;\n                             }, template.getContent().getAuthorReference(),\n                                 template.getContent().getDocumentReference());\n-                        } catch (Exception e) {\n-                            this.logger.error(\"Failed to evaluate macros templates [{}]\", template.getPath(), e);\n                         }\n+                    } catch (Exception e) {\n+                        this.logger.error(\"Failed to evaluate macros templates [{}]\", template.getPath(), e);\n                     }\n                 }\n             }\n\n\n</patch>\n<test_patch>\ndiff --git a/xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/render/DefaultVelocityManagerTest.java b/xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/render/DefaultVelocityManagerTest.java\nindex 3ea0e555c4e..e2db048d0ce 100644\n--- a/xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/render/DefaultVelocityManagerTest.java\n+++ b/xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/render/DefaultVelocityManagerTest.java\n@@ -19,60 +19,118 @@\n  */\n package com.xpn.xwiki.render;\n \n+import java.io.Writer;\n+\n import org.apache.velocity.VelocityContext;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.xwiki.component.manager.ComponentLookupException;\n+import org.apache.velocity.context.Context;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n import org.xwiki.localization.ContextualLocalizationManager;\n import org.xwiki.logging.internal.DefaultLoggerConfiguration;\n import org.xwiki.model.reference.DocumentReference;\n+import org.xwiki.properties.ConverterManager;\n import org.xwiki.script.internal.DefaultScriptContextManager;\n+import org.xwiki.security.authorization.AuthorizationManager;\n+import org.xwiki.security.authorization.Right;\n+import org.xwiki.skin.Skin;\n+import org.xwiki.skin.SkinManager;\n+import org.xwiki.template.Template;\n+import org.xwiki.template.TemplateContent;\n+import org.xwiki.template.TemplateManager;\n import org.xwiki.test.annotation.ComponentList;\n-import org.xwiki.test.mockito.MockitoComponentMockingRule;\n-import org.xwiki.velocity.VelocityManager;\n+import org.xwiki.test.junit5.mockito.InjectMockComponents;\n+import org.xwiki.test.junit5.mockito.MockComponent;\n+import org.xwiki.velocity.VelocityEngine;\n import org.xwiki.velocity.internal.DefaultVelocityConfiguration;\n+import org.xwiki.velocity.internal.DefaultVelocityFactory;\n import org.xwiki.velocity.internal.VelocityExecutionContextInitializer;\n \n import com.xpn.xwiki.api.Document;\n import com.xpn.xwiki.doc.XWikiDocument;\n-import com.xpn.xwiki.test.MockitoOldcoreRule;\n-\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNotSame;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n+import com.xpn.xwiki.internal.security.authorization.DefaultAuthorExecutor;\n+import com.xpn.xwiki.test.MockitoOldcore;\n+import com.xpn.xwiki.test.junit5.mockito.InjectMockitoOldcore;\n+import com.xpn.xwiki.test.junit5.mockito.OldcoreTest;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n \n /**\n  * Validate {@link DefaultVelocityManager}.\n- * \n+ *\n  * @version $Id$\n  */\n @ComponentList(value = { DefaultScriptContextManager.class, XWikiScriptContextInitializer.class,\n-DefaultVelocityConfiguration.class, DefaultLoggerConfiguration.class })\n+    DefaultVelocityConfiguration.class, DefaultLoggerConfiguration.class, DefaultVelocityFactory.class,\n+    DefaultAuthorExecutor.class })\n+@OldcoreTest\n public class DefaultVelocityManagerTest\n {\n-    public MockitoComponentMockingRule<VelocityManager> mocker =\n-        new MockitoComponentMockingRule<VelocityManager>(DefaultVelocityManager.class);\n+    private static final DocumentReference TEMPLATE_DOCUMENT = new DocumentReference(\"xwiki\", \"XWiki\", \"TestMacros\");\n \n-    @Rule\n-    public MockitoOldcoreRule oldcore = new MockitoOldcoreRule(this.mocker);\n+    private static final DocumentReference SCRIPT_USER = new DocumentReference(\"xwiki\", \"XWiki\", \"Script\");\n \n-    @Before\n-    public void before() throws Exception\n-    {\n-        this.mocker.registerMockComponent(ContextualLocalizationManager.class);\n+    @MockComponent\n+    private ContextualLocalizationManager localizationManager;\n+\n+    @InjectMockComponents\n+    private DefaultVelocityManager velocityManager;\n+\n+    @InjectMockitoOldcore\n+    private MockitoOldcore oldcore;\n+\n+    @MockComponent\n+    private SkinManager skinManager;\n+\n+    @Mock\n+    private Skin skin;\n+\n+    @MockComponent\n+    private TemplateManager templateManager;\n+\n+    @Mock\n+    private Template template;\n+\n+    @Mock\n+    private TemplateContent templateContent;\n+\n+    @MockComponent\n+    private ConverterManager converterManager;\n \n+    @MockComponent\n+    private VelocityEngine velocityEngine;\n+\n+    @BeforeEach\n+    void before() throws Exception\n+    {\n         this.oldcore.getExecutionContext().setProperty(VelocityExecutionContextInitializer.VELOCITY_CONTEXT_ID,\n             new VelocityContext());\n+\n+        when(this.skinManager.getCurrentSkin(true)).thenReturn(this.skin);\n+        when(this.templateManager.getTemplate(\"macros.vm\")).thenReturn(this.template);\n+        when(this.template.getId()).thenReturn(\"testMacros\");\n+        when(this.template.getContent()).thenReturn(this.templateContent);\n+        when(this.templateContent.getDocumentReference()).thenReturn(TEMPLATE_DOCUMENT);\n+        when(this.templateContent.getContent()).thenReturn(\"\");\n+\n+        AuthorizationManager authorizationManager = this.oldcore.getMockAuthorizationManager();\n+        when(authorizationManager.hasAccess(Right.SCRIPT, SCRIPT_USER, TEMPLATE_DOCUMENT)).thenReturn(true);\n     }\n \n     // Tests\n \n     @Test\n-    public void getVelocityContext() throws ComponentLookupException\n+    void getVelocityContext()\n     {\n-        VelocityContext context = this.mocker.getComponentUnderTest().getVelocityContext();\n+        VelocityContext context = this.velocityManager.getVelocityContext();\n \n         assertNull(context.get(\"doc\"));\n         assertNull(context.get(\"sdoc\"));\n@@ -83,7 +141,7 @@ public void getVelocityContext() throws ComponentLookupException\n         this.oldcore.getXWikiContext().setDoc(new XWikiDocument(docReference));\n         this.oldcore.getXWikiContext().put(\"sdoc\", new XWikiDocument(sdocReference));\n \n-        context = this.mocker.getComponentUnderTest().getVelocityContext();\n+        context = this.velocityManager.getVelocityContext();\n \n         Document doc = (Document) context.get(\"doc\");\n         assertNotNull(doc);\n@@ -92,7 +150,7 @@ public void getVelocityContext() throws ComponentLookupException\n         assertNotNull(sdoc);\n \n         // Instances are kept the same when the documents in the context don't change\n-        context = this.mocker.getComponentUnderTest().getVelocityContext();\n+        context = this.velocityManager.getVelocityContext();\n         assertSame(doc, context.get(\"doc\"));\n         assertSame(sdoc, context.get(\"sdoc\"));\n \n@@ -102,10 +160,25 @@ public void getVelocityContext() throws ComponentLookupException\n         this.oldcore.getXWikiContext().setDoc(new XWikiDocument(docReference));\n         this.oldcore.getXWikiContext().put(\"sdoc\", new XWikiDocument(sdocReference));\n \n-        context = this.mocker.getComponentUnderTest().getVelocityContext();\n+        context = this.velocityManager.getVelocityContext();\n         assertNotNull(context.get(\"doc\"));\n         assertNotSame(doc, context.get(\"doc\"));\n         assertNotNull(context.get(\"sdoc\"));\n         assertNotSame(sdoc, context.get(\"sdoc\"));\n     }\n+\n+    @Test\n+    void checkMacrosInjectionWithoutScriptRights() throws Exception\n+    {\n+        VelocityEngine engine = this.velocityManager.getVelocityEngine();\n+        verify(engine, never()).evaluate(any(Context.class), any(Writer.class), anyString(), anyString());\n+    }\n+\n+    @Test\n+    void checkMacrosInjectionWithScriptRights() throws Exception\n+    {\n+        when(this.templateContent.getAuthorReference()).thenReturn(SCRIPT_USER);\n+        VelocityEngine engine = this.velocityManager.getVelocityEngine();\n+        verify(engine).evaluate(any(Context.class), any(Writer.class), anyString(), anyString());\n+    }\n }\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "da177c3c972e797d92c1a31e278f946012c41b56", "source_date": "Thu Nov 2 19:01:11 2023 +0100", "source_tag": "15.5.4", "target_commit": "626d2a5dbf95b4e719ae13bf1a0a9c76e4edd5a2", "target_date": "Fri Nov 3 10:07:58 2023 +0100", "target_tag": "14.10.19", "FAIL TO PASS": ["checkMacrosInjectionWithoutScriptRights"], "PASS TO PASS": []}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_968", "original_commit_message": "better parsing of attributes", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverter.java b/server/src/main/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverter.java\nindex c0b1e9f29..9a9f04f91 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverter.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverter.java\n@@ -13,6 +13,7 @@\n \n package org.cloudfoundry.identity.uaa.resources.jdbc;\n \n+import com.unboundid.scim.sdk.InvalidResourceException;\n import com.unboundid.scim.sdk.SCIMException;\n import com.unboundid.scim.sdk.SCIMFilter;\n import org.apache.commons.logging.Log;\n@@ -25,19 +26,82 @@ import org.springframework.util.StringUtils;\n import java.text.DateFormat;\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n import java.util.Map;\n \n+import static java.util.Collections.emptyList;\n+import static java.util.Optional.ofNullable;\n import static org.cloudfoundry.identity.uaa.resources.jdbc.SearchQueryConverter.ProcessedFilter.ORDER_BY;\n \n public class SimpleSearchQueryConverter implements SearchQueryConverter {\n \n+    //LOWER\n+    public static final List<String> VALID_ATTRIBUTE_NAMES = Collections.unmodifiableList(\n+        Arrays.asList(\n+            \"id\",\n+            \"created\",\n+            \"lastmodified\",\n+            \"version\",\n+            \"username\",\n+            \"password\",\n+            \"email\",\n+            \"givenname\",\n+            \"familyname\",\n+            \"name.familyname\",\n+            \"name.givenname\",\n+            \"active\",\n+            \"phonenumber\",\n+            \"verified\",\n+            \"origin\",\n+            \"identity_zone_id\",\n+            \"passwd_lastmodified\",\n+            \"passwd_change_required\",\n+            \"last_logon_success_time\",\n+            \"previous_logon_success_time\",\n+            \"displayname\",\n+            \"scope\",\n+            \"group_id\",\n+            \"member_id\",\n+            \"member_type\",\n+            \"description\",\n+            \"client_id\",\n+            \"authorized_grant_types\",\n+            \"web_server_redirect_uri\",\n+            \"redirect_uri\",\n+            \"access_token_validity\",\n+            \"refresh_token_validity\",\n+            \"autoapprove\",\n+            \"show_on_home_page\",\n+            \"created_by\",\n+            \"required_user_groups\",\n+            \"user_id\",\n+            \"meta.lastmodified\",\n+            \"meta.created\",\n+            \"meta.location\",\n+            \"meta.resourcetype\",\n+            \"meta.version\",\n+            \"emails.value\",\n+            \"groups.display\",\n+            \"phonenumbers.value\",\n+            \"gm.external_group\",\n+            \"gm.origin\",\n+            \"g.displayname\",\n+            \"g.id\"\n+        )\n+    );\n+\n     private static Log logger = LogFactory.getLog(SimpleSearchQueryConverter.class);\n     private AttributeNameMapper mapper = new SimpleAttributeNameMapper(Collections.<String, String> emptyMap());\n \n     private boolean dbCaseInsensitive = false;\n \n+    public SimpleSearchQueryConverter() {\n+    }\n+\n     public boolean isDbCaseInsensitive() {\n         return dbCaseInsensitive;\n     }\n@@ -92,7 +156,7 @@ public class SimpleSearchQueryConverter implements SearchQueryConverter {\n         }\n     }\n \n-    private SCIMFilter scimFilter(String filter) throws SCIMException {\n+    protected SCIMFilter scimFilter(String filter) throws SCIMException {\n         SCIMFilter scimFilter;\n         try {\n             scimFilter = SCIMFilter.parse(filter);\n@@ -101,9 +165,33 @@ public class SimpleSearchQueryConverter implements SearchQueryConverter {\n             filter = filter.replaceAll(\"'\",\"\\\"\");\n             scimFilter = SCIMFilter.parse(filter);\n         }\n+        validateFilterAttributes(scimFilter);\n         return scimFilter;\n     }\n \n+    private void validateFilterAttributes(SCIMFilter filter) throws SCIMException {\n+        List<String> invalidAttributes = new LinkedList<>();\n+        validateFilterAttributes(filter, invalidAttributes);\n+        if (!invalidAttributes.isEmpty()) {\n+            throw new InvalidResourceException(\"Invalid filter attributes:\"+StringUtils.collectionToCommaDelimitedString(invalidAttributes));\n+        }\n+    }\n+\n+    private void validateFilterAttributes(SCIMFilter filter, List<String> invalidAttribues) {\n+        if (filter.getFilterAttribute()!=null && filter.getFilterAttribute().getAttributeName()!=null) {\n+            String name = filter.getFilterAttribute().getAttributeName();\n+            if (filter.getFilterAttribute().getSubAttributeName()!=null) {\n+                name = name + \".\" + filter.getFilterAttribute().getSubAttributeName();\n+            }\n+            if (!VALID_ATTRIBUTE_NAMES.contains(name.toLowerCase())) {\n+                invalidAttribues.add(name);\n+            }\n+        }\n+        for (SCIMFilter subfilter : ofNullable(filter.getFilterComponents()).orElse(emptyList())) {\n+            validateFilterAttributes(subfilter, invalidAttribues);\n+        }\n+    }\n+\n     private String createFilter(SCIMFilter filter, Map<String,Object> values, AttributeNameMapper mapper, String paramPrefix) {\n         switch (filter.getFilterType()) {\n             case AND:\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverterTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverterTests.java\nnew file mode 100644\nindex 000000000..beadf2e45\n--- /dev/null\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverterTests.java\n@@ -0,0 +1,95 @@\n+/*\n+ * ****************************************************************************\n+ *     Cloud Foundry\n+ *     Copyright (c) [2009-2017] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ * ****************************************************************************\n+ */\n+\n+package org.cloudfoundry.identity.uaa.resources.jdbc;\n+\n+import com.unboundid.scim.sdk.InvalidResourceException;\n+import com.unboundid.scim.sdk.SCIMFilter;\n+import org.cloudfoundry.identity.uaa.scim.jdbc.ScimSearchQueryConverter;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Optional.ofNullable;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+public class SimpleSearchQueryConverterTests {\n+\n+    SimpleSearchQueryConverter converter;\n+\n+    String query = \"user_id eq \\\"7e2345e8-8bbf-4eaa-9bc3-ae1ba610f890\\\"\" +\n+        \"and \" +\n+        \"client_id eq \\\"app\\\"\" +\n+        \"and \" +\n+        \"meta.lastmodified gt \\\"some-value\\\"\" +\n+        \"and \" +\n+        \"(an/**/invalid/**/attribute/**/and/**/1\" + //invalid attribute name\n+        \" pr \" + //operator (present)\n+        \"and \"\n+        + \"1 eq 1)\" + //invalid attribute name 1\n+        \" and \" +\n+        \"\\\"1\\\" eq \\\"1\\\"\";\n+\n+    String validQuery = \"user_id eq \\\"7e2345e8-8bbf-4eaa-9bc3-ae1ba610f890\\\"\" +\n+        \"and \" +\n+        \"client_id eq \\\"app\\\"\" +\n+        \"and \" +\n+        \"meta.lastmodified gt \\\"some-value\\\"\" +\n+        \"and \" +\n+        \"meta.created pr\";\n+\n+    @Rule\n+    public ExpectedException exception = ExpectedException.none();\n+\n+    @Before\n+    public void setup() {\n+        converter = new ScimSearchQueryConverter();\n+    }\n+\n+    @Test\n+    public void test_query() throws Exception {\n+        exception.expect(InvalidResourceException.class);\n+        exception.expectMessage(startsWith(\"Invalid filter attributes\"));\n+        exception.expectMessage(containsString(\"an/**/invalid/**/attribute/**/and/**/1\"));\n+        exception.expectMessage(containsString(\"1\"));\n+        exception.expectMessage(containsString(\"\\\"1\\\"\"));\n+        SCIMFilter filter = converter.scimFilter(query);\n+    }\n+\n+    @Test\n+    public void print_query() throws Exception {\n+        SCIMFilter filter = converter.scimFilter(validQuery);\n+        printFilterAttributes(filter, new AtomicInteger(0));\n+    }\n+\n+    public void printFilterAttributes(SCIMFilter filter, AtomicInteger pos) {\n+        if (filter.getFilterAttribute() != null) {\n+            String name = filter.getFilterAttribute().getAttributeName();\n+            if (filter.getFilterAttribute().getSubAttributeName() != null) {\n+                name = name + \".\" + filter.getFilterAttribute().getSubAttributeName();\n+            }\n+            System.out.println((pos.incrementAndGet()) + \". Attribute name:\" + name);\n+        }\n+        for (SCIMFilter subfilter : ofNullable(filter.getFilterComponents()).orElse(emptyList())) {\n+            printFilterAttributes(subfilter, pos);\n+        }\n+    }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/scim/jdbc/ScimSearchQueryConverterTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/scim/jdbc/ScimSearchQueryConverterTests.java\nindex f4a7074bd..22095768b 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/scim/jdbc/ScimSearchQueryConverterTests.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/scim/jdbc/ScimSearchQueryConverterTests.java\n@@ -58,8 +58,8 @@ public class ScimSearchQueryConverterTests {\n         validate(filterProcessor.convert(\"username pr and emails.value co \\\".com\\\"\", null, false),\"(username IS NOT NULL AND LOWER(email) LIKE LOWER(:__value_0))\", 1);\n         validate(filterProcessor.convert(\"username eq \\\"joe\\\" or emails.value co \\\".com\\\"\", null, false),\"(LOWER(username) = LOWER(:__value_0) OR LOWER(email) LIKE LOWER(:__value_1))\", 2);\n         validate(filterProcessor.convert(\"active eq true\", null, false),\"active = :__value_0\", 1, Boolean.class);\n-        validate(filterProcessor.convert(\"test eq 1000000.45\", null, false),\"test = :__value_0\", 1, Double.class);\n-        validate(filterProcessor.convert(\"test eq 1000000\", null, false),\"test = :__value_0\", 1, Double.class);\n+        validate(filterProcessor.convert(\"Version eq 1000000.45\", null, false),\"Version = :__value_0\", 1, Double.class);\n+        validate(filterProcessor.convert(\"meta.VerSion eq 1000000\", null, false),\"VerSion = :__value_0\", 1, Double.class);\n     }\n \n     @Test\n@@ -84,8 +84,8 @@ public class ScimSearchQueryConverterTests {\n         validate(filterProcessor.convert(\"username pr and emails.value co \\\".com\\\"\", null, false),\"(username IS NOT NULL AND email LIKE :__value_0)\", 1);\n         validate(filterProcessor.convert(\"username eq \\\"joe\\\" or emails.value co \\\".com\\\"\", null, false),\"(username = :__value_0 OR email LIKE :__value_1)\", 2);\n         validate(filterProcessor.convert(\"active eq true\", null, false),\"active = :__value_0\", 1, Boolean.class);\n-        validate(filterProcessor.convert(\"test eq 1000000.45\", null, false),\"test = :__value_0\", 1, Double.class);\n-        validate(filterProcessor.convert(\"test eq 1000000\", null, false),\"test = :__value_0\", 1, Double.class);\n+        validate(filterProcessor.convert(\"Version eq 1000000.45\", null, false),\"Version = :__value_0\", 1, Double.class);\n+        validate(filterProcessor.convert(\"meta.VerSion eq 1000000\", null, false),\"VerSion = :__value_0\", 1, Double.class);\n     }\n \n     @Test\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "2dbeb9e93e076d71d7f0886dea9f77f23e0b8f3c", "source_date": "Wed Apr 19 12:54:17 2017 -0700", "source_tag": "4.0.0", "target_commit": "74b9b270787aa602196d59d58893c3a6e09816f9", "target_date": "Thu Apr 20 12:24:26 2017 -0700", "target_tag": "3.16.0", "FAIL TO PASS": ["/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverterTests.java"], "PASS TO PASS": [":cloudfoundry-identity-model:mainOutputResourcesDir", ":cloudfoundry-identity-model:buildInfo", ":cloudfoundry-identity-model:compileJava", ":cloudfoundry-identity-model:processResources", ":cloudfoundry-identity-model:jar", ":cloudfoundry-identity-model:gitInfo", ":cloudfoundry-identity-server:compileJava/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", ":cloudfoundry-identity-model:classes", "/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", ":cloudfoundry-identity-server:classes", ":cloudfoundry-identity-server:compileTestJava/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", ":cloudfoundry-identity-server:compileTestJava", "/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", ":cloudfoundry-identity-server:compileJava", ":cloudfoundry-identity-server:processResources"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_969", "original_commit_message": "better parsing of attributes", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverter.java b/server/src/main/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverter.java\nindex c0b1e9f29..9a9f04f91 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverter.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverter.java\n@@ -13,6 +13,7 @@\n \n package org.cloudfoundry.identity.uaa.resources.jdbc;\n \n+import com.unboundid.scim.sdk.InvalidResourceException;\n import com.unboundid.scim.sdk.SCIMException;\n import com.unboundid.scim.sdk.SCIMFilter;\n import org.apache.commons.logging.Log;\n@@ -25,19 +26,82 @@ import org.springframework.util.StringUtils;\n import java.text.DateFormat;\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n import java.util.Map;\n \n+import static java.util.Collections.emptyList;\n+import static java.util.Optional.ofNullable;\n import static org.cloudfoundry.identity.uaa.resources.jdbc.SearchQueryConverter.ProcessedFilter.ORDER_BY;\n \n public class SimpleSearchQueryConverter implements SearchQueryConverter {\n \n+    //LOWER\n+    public static final List<String> VALID_ATTRIBUTE_NAMES = Collections.unmodifiableList(\n+        Arrays.asList(\n+            \"id\",\n+            \"created\",\n+            \"lastmodified\",\n+            \"version\",\n+            \"username\",\n+            \"password\",\n+            \"email\",\n+            \"givenname\",\n+            \"familyname\",\n+            \"name.familyname\",\n+            \"name.givenname\",\n+            \"active\",\n+            \"phonenumber\",\n+            \"verified\",\n+            \"origin\",\n+            \"identity_zone_id\",\n+            \"passwd_lastmodified\",\n+            \"passwd_change_required\",\n+            \"last_logon_success_time\",\n+            \"previous_logon_success_time\",\n+            \"displayname\",\n+            \"scope\",\n+            \"group_id\",\n+            \"member_id\",\n+            \"member_type\",\n+            \"description\",\n+            \"client_id\",\n+            \"authorized_grant_types\",\n+            \"web_server_redirect_uri\",\n+            \"redirect_uri\",\n+            \"access_token_validity\",\n+            \"refresh_token_validity\",\n+            \"autoapprove\",\n+            \"show_on_home_page\",\n+            \"created_by\",\n+            \"required_user_groups\",\n+            \"user_id\",\n+            \"meta.lastmodified\",\n+            \"meta.created\",\n+            \"meta.location\",\n+            \"meta.resourcetype\",\n+            \"meta.version\",\n+            \"emails.value\",\n+            \"groups.display\",\n+            \"phonenumbers.value\",\n+            \"gm.external_group\",\n+            \"gm.origin\",\n+            \"g.displayname\",\n+            \"g.id\"\n+        )\n+    );\n+\n     private static Log logger = LogFactory.getLog(SimpleSearchQueryConverter.class);\n     private AttributeNameMapper mapper = new SimpleAttributeNameMapper(Collections.<String, String> emptyMap());\n \n     private boolean dbCaseInsensitive = false;\n \n+    public SimpleSearchQueryConverter() {\n+    }\n+\n     public boolean isDbCaseInsensitive() {\n         return dbCaseInsensitive;\n     }\n@@ -92,7 +156,7 @@ public class SimpleSearchQueryConverter implements SearchQueryConverter {\n         }\n     }\n \n-    private SCIMFilter scimFilter(String filter) throws SCIMException {\n+    protected SCIMFilter scimFilter(String filter) throws SCIMException {\n         SCIMFilter scimFilter;\n         try {\n             scimFilter = SCIMFilter.parse(filter);\n@@ -101,9 +165,33 @@ public class SimpleSearchQueryConverter implements SearchQueryConverter {\n             filter = filter.replaceAll(\"'\",\"\\\"\");\n             scimFilter = SCIMFilter.parse(filter);\n         }\n+        validateFilterAttributes(scimFilter);\n         return scimFilter;\n     }\n \n+    private void validateFilterAttributes(SCIMFilter filter) throws SCIMException {\n+        List<String> invalidAttributes = new LinkedList<>();\n+        validateFilterAttributes(filter, invalidAttributes);\n+        if (!invalidAttributes.isEmpty()) {\n+            throw new InvalidResourceException(\"Invalid filter attributes:\"+StringUtils.collectionToCommaDelimitedString(invalidAttributes));\n+        }\n+    }\n+\n+    private void validateFilterAttributes(SCIMFilter filter, List<String> invalidAttribues) {\n+        if (filter.getFilterAttribute()!=null && filter.getFilterAttribute().getAttributeName()!=null) {\n+            String name = filter.getFilterAttribute().getAttributeName();\n+            if (filter.getFilterAttribute().getSubAttributeName()!=null) {\n+                name = name + \".\" + filter.getFilterAttribute().getSubAttributeName();\n+            }\n+            if (!VALID_ATTRIBUTE_NAMES.contains(name.toLowerCase())) {\n+                invalidAttribues.add(name);\n+            }\n+        }\n+        for (SCIMFilter subfilter : ofNullable(filter.getFilterComponents()).orElse(emptyList())) {\n+            validateFilterAttributes(subfilter, invalidAttribues);\n+        }\n+    }\n+\n     private String createFilter(SCIMFilter filter, Map<String,Object> values, AttributeNameMapper mapper, String paramPrefix) {\n         switch (filter.getFilterType()) {\n             case AND:\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverterTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverterTests.java\nnew file mode 100644\nindex 000000000..beadf2e45\n--- /dev/null\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverterTests.java\n@@ -0,0 +1,95 @@\n+/*\n+ * ****************************************************************************\n+ *     Cloud Foundry\n+ *     Copyright (c) [2009-2017] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ * ****************************************************************************\n+ */\n+\n+package org.cloudfoundry.identity.uaa.resources.jdbc;\n+\n+import com.unboundid.scim.sdk.InvalidResourceException;\n+import com.unboundid.scim.sdk.SCIMFilter;\n+import org.cloudfoundry.identity.uaa.scim.jdbc.ScimSearchQueryConverter;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Optional.ofNullable;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+public class SimpleSearchQueryConverterTests {\n+\n+    SimpleSearchQueryConverter converter;\n+\n+    String query = \"user_id eq \\\"7e2345e8-8bbf-4eaa-9bc3-ae1ba610f890\\\"\" +\n+        \"and \" +\n+        \"client_id eq \\\"app\\\"\" +\n+        \"and \" +\n+        \"meta.lastmodified gt \\\"some-value\\\"\" +\n+        \"and \" +\n+        \"(an/**/invalid/**/attribute/**/and/**/1\" + //invalid attribute name\n+        \" pr \" + //operator (present)\n+        \"and \"\n+        + \"1 eq 1)\" + //invalid attribute name 1\n+        \" and \" +\n+        \"\\\"1\\\" eq \\\"1\\\"\";\n+\n+    String validQuery = \"user_id eq \\\"7e2345e8-8bbf-4eaa-9bc3-ae1ba610f890\\\"\" +\n+        \"and \" +\n+        \"client_id eq \\\"app\\\"\" +\n+        \"and \" +\n+        \"meta.lastmodified gt \\\"some-value\\\"\" +\n+        \"and \" +\n+        \"meta.created pr\";\n+\n+    @Rule\n+    public ExpectedException exception = ExpectedException.none();\n+\n+    @Before\n+    public void setup() {\n+        converter = new ScimSearchQueryConverter();\n+    }\n+\n+    @Test\n+    public void test_query() throws Exception {\n+        exception.expect(InvalidResourceException.class);\n+        exception.expectMessage(startsWith(\"Invalid filter attributes\"));\n+        exception.expectMessage(containsString(\"an/**/invalid/**/attribute/**/and/**/1\"));\n+        exception.expectMessage(containsString(\"1\"));\n+        exception.expectMessage(containsString(\"\\\"1\\\"\"));\n+        SCIMFilter filter = converter.scimFilter(query);\n+    }\n+\n+    @Test\n+    public void print_query() throws Exception {\n+        SCIMFilter filter = converter.scimFilter(validQuery);\n+        printFilterAttributes(filter, new AtomicInteger(0));\n+    }\n+\n+    public void printFilterAttributes(SCIMFilter filter, AtomicInteger pos) {\n+        if (filter.getFilterAttribute() != null) {\n+            String name = filter.getFilterAttribute().getAttributeName();\n+            if (filter.getFilterAttribute().getSubAttributeName() != null) {\n+                name = name + \".\" + filter.getFilterAttribute().getSubAttributeName();\n+            }\n+            System.out.println((pos.incrementAndGet()) + \". Attribute name:\" + name);\n+        }\n+        for (SCIMFilter subfilter : ofNullable(filter.getFilterComponents()).orElse(emptyList())) {\n+            printFilterAttributes(subfilter, pos);\n+        }\n+    }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/scim/jdbc/ScimSearchQueryConverterTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/scim/jdbc/ScimSearchQueryConverterTests.java\nindex f4a7074bd..22095768b 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/scim/jdbc/ScimSearchQueryConverterTests.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/scim/jdbc/ScimSearchQueryConverterTests.java\n@@ -58,8 +58,8 @@ public class ScimSearchQueryConverterTests {\n         validate(filterProcessor.convert(\"username pr and emails.value co \\\".com\\\"\", null, false),\"(username IS NOT NULL AND LOWER(email) LIKE LOWER(:__value_0))\", 1);\n         validate(filterProcessor.convert(\"username eq \\\"joe\\\" or emails.value co \\\".com\\\"\", null, false),\"(LOWER(username) = LOWER(:__value_0) OR LOWER(email) LIKE LOWER(:__value_1))\", 2);\n         validate(filterProcessor.convert(\"active eq true\", null, false),\"active = :__value_0\", 1, Boolean.class);\n-        validate(filterProcessor.convert(\"test eq 1000000.45\", null, false),\"test = :__value_0\", 1, Double.class);\n-        validate(filterProcessor.convert(\"test eq 1000000\", null, false),\"test = :__value_0\", 1, Double.class);\n+        validate(filterProcessor.convert(\"Version eq 1000000.45\", null, false),\"Version = :__value_0\", 1, Double.class);\n+        validate(filterProcessor.convert(\"meta.VerSion eq 1000000\", null, false),\"VerSion = :__value_0\", 1, Double.class);\n     }\n \n     @Test\n@@ -84,8 +84,8 @@ public class ScimSearchQueryConverterTests {\n         validate(filterProcessor.convert(\"username pr and emails.value co \\\".com\\\"\", null, false),\"(username IS NOT NULL AND email LIKE :__value_0)\", 1);\n         validate(filterProcessor.convert(\"username eq \\\"joe\\\" or emails.value co \\\".com\\\"\", null, false),\"(username = :__value_0 OR email LIKE :__value_1)\", 2);\n         validate(filterProcessor.convert(\"active eq true\", null, false),\"active = :__value_0\", 1, Boolean.class);\n-        validate(filterProcessor.convert(\"test eq 1000000.45\", null, false),\"test = :__value_0\", 1, Double.class);\n-        validate(filterProcessor.convert(\"test eq 1000000\", null, false),\"test = :__value_0\", 1, Double.class);\n+        validate(filterProcessor.convert(\"Version eq 1000000.45\", null, false),\"Version = :__value_0\", 1, Double.class);\n+        validate(filterProcessor.convert(\"meta.VerSion eq 1000000\", null, false),\"VerSion = :__value_0\", 1, Double.class);\n     }\n \n     @Test\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "2dbeb9e93e076d71d7f0886dea9f77f23e0b8f3c", "source_date": "Wed Apr 19 12:54:17 2017 -0700", "source_tag": "4.0.0", "target_commit": "01edea6337c8ddb2ab80906aa1254d3c1dc02fbd", "target_date": "Thu Apr 20 15:11:40 2017 -0700", "target_tag": "2.7.4", "FAIL TO PASS": [":cloudfoundry-identity-common:compileTestJava/uaa/common/src/test/java/org/cloudfoundry/identity/uaa/rest/jdbc/SimpleSearchQueryConverterTests.java", "/uaa/common/src/test/java/org/cloudfoundry/identity/uaa/rest/jdbc/SimpleSearchQueryConverterTests.java"], "PASS TO PASS": [":cloudfoundry-identity-common:classes", ":cloudfoundry-identity-common:instrumentedClasses", ":cloudfoundry-identity-payload:compileJava", ":cloudfoundry-identity-payload:jar", ":cloudfoundry-identity-payload:buildInfo", ":cloudfoundry-identity-payload:gitInfo", ":cloudfoundry-identity-payload:processResources", ":cloudfoundry-identity-common:compileInstrumentedJava", ":cloudfoundry-identity-common:compileJava", ":cloudfoundry-identity-common:makeInstrumentedSourceSet", ":cloudfoundry-identity-common:copyCoberturaDatafile", ":cloudfoundry-identity-common:processResources", ":cloudfoundry-identity-common:compileTestJava", ":cloudfoundry-identity-common:jar", ":cloudfoundry-identity-common:instrument", ":cloudfoundry-identity-payload:mainOutputResourcesDir", ":cloudfoundry-identity-common:instrumentedJar", ":cloudfoundry-identity-payload:classes", ":cloudfoundry-identity-common:processInstrumentedResources", ":cloudfoundry-identity-common:copyInstrumentedClasses"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_970", "original_commit_message": "better parsing of attributes", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverter.java b/server/src/main/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverter.java\nindex c0b1e9f29..9a9f04f91 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverter.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverter.java\n@@ -13,6 +13,7 @@\n \n package org.cloudfoundry.identity.uaa.resources.jdbc;\n \n+import com.unboundid.scim.sdk.InvalidResourceException;\n import com.unboundid.scim.sdk.SCIMException;\n import com.unboundid.scim.sdk.SCIMFilter;\n import org.apache.commons.logging.Log;\n@@ -25,19 +26,82 @@ import org.springframework.util.StringUtils;\n import java.text.DateFormat;\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n import java.util.Map;\n \n+import static java.util.Collections.emptyList;\n+import static java.util.Optional.ofNullable;\n import static org.cloudfoundry.identity.uaa.resources.jdbc.SearchQueryConverter.ProcessedFilter.ORDER_BY;\n \n public class SimpleSearchQueryConverter implements SearchQueryConverter {\n \n+    //LOWER\n+    public static final List<String> VALID_ATTRIBUTE_NAMES = Collections.unmodifiableList(\n+        Arrays.asList(\n+            \"id\",\n+            \"created\",\n+            \"lastmodified\",\n+            \"version\",\n+            \"username\",\n+            \"password\",\n+            \"email\",\n+            \"givenname\",\n+            \"familyname\",\n+            \"name.familyname\",\n+            \"name.givenname\",\n+            \"active\",\n+            \"phonenumber\",\n+            \"verified\",\n+            \"origin\",\n+            \"identity_zone_id\",\n+            \"passwd_lastmodified\",\n+            \"passwd_change_required\",\n+            \"last_logon_success_time\",\n+            \"previous_logon_success_time\",\n+            \"displayname\",\n+            \"scope\",\n+            \"group_id\",\n+            \"member_id\",\n+            \"member_type\",\n+            \"description\",\n+            \"client_id\",\n+            \"authorized_grant_types\",\n+            \"web_server_redirect_uri\",\n+            \"redirect_uri\",\n+            \"access_token_validity\",\n+            \"refresh_token_validity\",\n+            \"autoapprove\",\n+            \"show_on_home_page\",\n+            \"created_by\",\n+            \"required_user_groups\",\n+            \"user_id\",\n+            \"meta.lastmodified\",\n+            \"meta.created\",\n+            \"meta.location\",\n+            \"meta.resourcetype\",\n+            \"meta.version\",\n+            \"emails.value\",\n+            \"groups.display\",\n+            \"phonenumbers.value\",\n+            \"gm.external_group\",\n+            \"gm.origin\",\n+            \"g.displayname\",\n+            \"g.id\"\n+        )\n+    );\n+\n     private static Log logger = LogFactory.getLog(SimpleSearchQueryConverter.class);\n     private AttributeNameMapper mapper = new SimpleAttributeNameMapper(Collections.<String, String> emptyMap());\n \n     private boolean dbCaseInsensitive = false;\n \n+    public SimpleSearchQueryConverter() {\n+    }\n+\n     public boolean isDbCaseInsensitive() {\n         return dbCaseInsensitive;\n     }\n@@ -92,7 +156,7 @@ public class SimpleSearchQueryConverter implements SearchQueryConverter {\n         }\n     }\n \n-    private SCIMFilter scimFilter(String filter) throws SCIMException {\n+    protected SCIMFilter scimFilter(String filter) throws SCIMException {\n         SCIMFilter scimFilter;\n         try {\n             scimFilter = SCIMFilter.parse(filter);\n@@ -101,9 +165,33 @@ public class SimpleSearchQueryConverter implements SearchQueryConverter {\n             filter = filter.replaceAll(\"'\",\"\\\"\");\n             scimFilter = SCIMFilter.parse(filter);\n         }\n+        validateFilterAttributes(scimFilter);\n         return scimFilter;\n     }\n \n+    private void validateFilterAttributes(SCIMFilter filter) throws SCIMException {\n+        List<String> invalidAttributes = new LinkedList<>();\n+        validateFilterAttributes(filter, invalidAttributes);\n+        if (!invalidAttributes.isEmpty()) {\n+            throw new InvalidResourceException(\"Invalid filter attributes:\"+StringUtils.collectionToCommaDelimitedString(invalidAttributes));\n+        }\n+    }\n+\n+    private void validateFilterAttributes(SCIMFilter filter, List<String> invalidAttribues) {\n+        if (filter.getFilterAttribute()!=null && filter.getFilterAttribute().getAttributeName()!=null) {\n+            String name = filter.getFilterAttribute().getAttributeName();\n+            if (filter.getFilterAttribute().getSubAttributeName()!=null) {\n+                name = name + \".\" + filter.getFilterAttribute().getSubAttributeName();\n+            }\n+            if (!VALID_ATTRIBUTE_NAMES.contains(name.toLowerCase())) {\n+                invalidAttribues.add(name);\n+            }\n+        }\n+        for (SCIMFilter subfilter : ofNullable(filter.getFilterComponents()).orElse(emptyList())) {\n+            validateFilterAttributes(subfilter, invalidAttribues);\n+        }\n+    }\n+\n     private String createFilter(SCIMFilter filter, Map<String,Object> values, AttributeNameMapper mapper, String paramPrefix) {\n         switch (filter.getFilterType()) {\n             case AND:\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverterTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverterTests.java\nnew file mode 100644\nindex 000000000..beadf2e45\n--- /dev/null\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverterTests.java\n@@ -0,0 +1,95 @@\n+/*\n+ * ****************************************************************************\n+ *     Cloud Foundry\n+ *     Copyright (c) [2009-2017] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ * ****************************************************************************\n+ */\n+\n+package org.cloudfoundry.identity.uaa.resources.jdbc;\n+\n+import com.unboundid.scim.sdk.InvalidResourceException;\n+import com.unboundid.scim.sdk.SCIMFilter;\n+import org.cloudfoundry.identity.uaa.scim.jdbc.ScimSearchQueryConverter;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Optional.ofNullable;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+public class SimpleSearchQueryConverterTests {\n+\n+    SimpleSearchQueryConverter converter;\n+\n+    String query = \"user_id eq \\\"7e2345e8-8bbf-4eaa-9bc3-ae1ba610f890\\\"\" +\n+        \"and \" +\n+        \"client_id eq \\\"app\\\"\" +\n+        \"and \" +\n+        \"meta.lastmodified gt \\\"some-value\\\"\" +\n+        \"and \" +\n+        \"(an/**/invalid/**/attribute/**/and/**/1\" + //invalid attribute name\n+        \" pr \" + //operator (present)\n+        \"and \"\n+        + \"1 eq 1)\" + //invalid attribute name 1\n+        \" and \" +\n+        \"\\\"1\\\" eq \\\"1\\\"\";\n+\n+    String validQuery = \"user_id eq \\\"7e2345e8-8bbf-4eaa-9bc3-ae1ba610f890\\\"\" +\n+        \"and \" +\n+        \"client_id eq \\\"app\\\"\" +\n+        \"and \" +\n+        \"meta.lastmodified gt \\\"some-value\\\"\" +\n+        \"and \" +\n+        \"meta.created pr\";\n+\n+    @Rule\n+    public ExpectedException exception = ExpectedException.none();\n+\n+    @Before\n+    public void setup() {\n+        converter = new ScimSearchQueryConverter();\n+    }\n+\n+    @Test\n+    public void test_query() throws Exception {\n+        exception.expect(InvalidResourceException.class);\n+        exception.expectMessage(startsWith(\"Invalid filter attributes\"));\n+        exception.expectMessage(containsString(\"an/**/invalid/**/attribute/**/and/**/1\"));\n+        exception.expectMessage(containsString(\"1\"));\n+        exception.expectMessage(containsString(\"\\\"1\\\"\"));\n+        SCIMFilter filter = converter.scimFilter(query);\n+    }\n+\n+    @Test\n+    public void print_query() throws Exception {\n+        SCIMFilter filter = converter.scimFilter(validQuery);\n+        printFilterAttributes(filter, new AtomicInteger(0));\n+    }\n+\n+    public void printFilterAttributes(SCIMFilter filter, AtomicInteger pos) {\n+        if (filter.getFilterAttribute() != null) {\n+            String name = filter.getFilterAttribute().getAttributeName();\n+            if (filter.getFilterAttribute().getSubAttributeName() != null) {\n+                name = name + \".\" + filter.getFilterAttribute().getSubAttributeName();\n+            }\n+            System.out.println((pos.incrementAndGet()) + \". Attribute name:\" + name);\n+        }\n+        for (SCIMFilter subfilter : ofNullable(filter.getFilterComponents()).orElse(emptyList())) {\n+            printFilterAttributes(subfilter, pos);\n+        }\n+    }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/scim/jdbc/ScimSearchQueryConverterTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/scim/jdbc/ScimSearchQueryConverterTests.java\nindex f4a7074bd..22095768b 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/scim/jdbc/ScimSearchQueryConverterTests.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/scim/jdbc/ScimSearchQueryConverterTests.java\n@@ -58,8 +58,8 @@ public class ScimSearchQueryConverterTests {\n         validate(filterProcessor.convert(\"username pr and emails.value co \\\".com\\\"\", null, false),\"(username IS NOT NULL AND LOWER(email) LIKE LOWER(:__value_0))\", 1);\n         validate(filterProcessor.convert(\"username eq \\\"joe\\\" or emails.value co \\\".com\\\"\", null, false),\"(LOWER(username) = LOWER(:__value_0) OR LOWER(email) LIKE LOWER(:__value_1))\", 2);\n         validate(filterProcessor.convert(\"active eq true\", null, false),\"active = :__value_0\", 1, Boolean.class);\n-        validate(filterProcessor.convert(\"test eq 1000000.45\", null, false),\"test = :__value_0\", 1, Double.class);\n-        validate(filterProcessor.convert(\"test eq 1000000\", null, false),\"test = :__value_0\", 1, Double.class);\n+        validate(filterProcessor.convert(\"Version eq 1000000.45\", null, false),\"Version = :__value_0\", 1, Double.class);\n+        validate(filterProcessor.convert(\"meta.VerSion eq 1000000\", null, false),\"VerSion = :__value_0\", 1, Double.class);\n     }\n \n     @Test\n@@ -84,8 +84,8 @@ public class ScimSearchQueryConverterTests {\n         validate(filterProcessor.convert(\"username pr and emails.value co \\\".com\\\"\", null, false),\"(username IS NOT NULL AND email LIKE :__value_0)\", 1);\n         validate(filterProcessor.convert(\"username eq \\\"joe\\\" or emails.value co \\\".com\\\"\", null, false),\"(username = :__value_0 OR email LIKE :__value_1)\", 2);\n         validate(filterProcessor.convert(\"active eq true\", null, false),\"active = :__value_0\", 1, Boolean.class);\n-        validate(filterProcessor.convert(\"test eq 1000000.45\", null, false),\"test = :__value_0\", 1, Double.class);\n-        validate(filterProcessor.convert(\"test eq 1000000\", null, false),\"test = :__value_0\", 1, Double.class);\n+        validate(filterProcessor.convert(\"Version eq 1000000.45\", null, false),\"Version = :__value_0\", 1, Double.class);\n+        validate(filterProcessor.convert(\"meta.VerSion eq 1000000\", null, false),\"VerSion = :__value_0\", 1, Double.class);\n     }\n \n     @Test\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "2dbeb9e93e076d71d7f0886dea9f77f23e0b8f3c", "source_date": "Wed Apr 19 12:54:17 2017 -0700", "source_tag": "4.0.0", "target_commit": "5dc5ca9176ed5baa870680d99f37e7e559dddc5d", "target_date": "Thu Apr 20 14:15:56 2017 -0700", "target_tag": "3.6.9", "FAIL TO PASS": [":cloudfoundry-identity-server:compileTestJava/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverterTests.java", "/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverterTests.java"], "PASS TO PASS": [":cloudfoundry-identity-model:mainOutputResourcesDir", ":cloudfoundry-identity-model:buildInfo", ":cloudfoundry-identity-model:compileJava", ":cloudfoundry-identity-model:processResources", ":cloudfoundry-identity-model:jar", ":cloudfoundry-identity-model:gitInfo", ":cloudfoundry-identity-model:classes", ":cloudfoundry-identity-server:classes", ":cloudfoundry-identity-server:compileTestJava", ":cloudfoundry-identity-server:compileJava", ":cloudfoundry-identity-server:processResources"]}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_971", "original_commit_message": "better parsing of attributes", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverter.java b/server/src/main/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverter.java\nindex c0b1e9f29..9a9f04f91 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverter.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverter.java\n@@ -13,6 +13,7 @@\n \n package org.cloudfoundry.identity.uaa.resources.jdbc;\n \n+import com.unboundid.scim.sdk.InvalidResourceException;\n import com.unboundid.scim.sdk.SCIMException;\n import com.unboundid.scim.sdk.SCIMFilter;\n import org.apache.commons.logging.Log;\n@@ -25,19 +26,82 @@ import org.springframework.util.StringUtils;\n import java.text.DateFormat;\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n import java.util.Map;\n \n+import static java.util.Collections.emptyList;\n+import static java.util.Optional.ofNullable;\n import static org.cloudfoundry.identity.uaa.resources.jdbc.SearchQueryConverter.ProcessedFilter.ORDER_BY;\n \n public class SimpleSearchQueryConverter implements SearchQueryConverter {\n \n+    //LOWER\n+    public static final List<String> VALID_ATTRIBUTE_NAMES = Collections.unmodifiableList(\n+        Arrays.asList(\n+            \"id\",\n+            \"created\",\n+            \"lastmodified\",\n+            \"version\",\n+            \"username\",\n+            \"password\",\n+            \"email\",\n+            \"givenname\",\n+            \"familyname\",\n+            \"name.familyname\",\n+            \"name.givenname\",\n+            \"active\",\n+            \"phonenumber\",\n+            \"verified\",\n+            \"origin\",\n+            \"identity_zone_id\",\n+            \"passwd_lastmodified\",\n+            \"passwd_change_required\",\n+            \"last_logon_success_time\",\n+            \"previous_logon_success_time\",\n+            \"displayname\",\n+            \"scope\",\n+            \"group_id\",\n+            \"member_id\",\n+            \"member_type\",\n+            \"description\",\n+            \"client_id\",\n+            \"authorized_grant_types\",\n+            \"web_server_redirect_uri\",\n+            \"redirect_uri\",\n+            \"access_token_validity\",\n+            \"refresh_token_validity\",\n+            \"autoapprove\",\n+            \"show_on_home_page\",\n+            \"created_by\",\n+            \"required_user_groups\",\n+            \"user_id\",\n+            \"meta.lastmodified\",\n+            \"meta.created\",\n+            \"meta.location\",\n+            \"meta.resourcetype\",\n+            \"meta.version\",\n+            \"emails.value\",\n+            \"groups.display\",\n+            \"phonenumbers.value\",\n+            \"gm.external_group\",\n+            \"gm.origin\",\n+            \"g.displayname\",\n+            \"g.id\"\n+        )\n+    );\n+\n     private static Log logger = LogFactory.getLog(SimpleSearchQueryConverter.class);\n     private AttributeNameMapper mapper = new SimpleAttributeNameMapper(Collections.<String, String> emptyMap());\n \n     private boolean dbCaseInsensitive = false;\n \n+    public SimpleSearchQueryConverter() {\n+    }\n+\n     public boolean isDbCaseInsensitive() {\n         return dbCaseInsensitive;\n     }\n@@ -92,7 +156,7 @@ public class SimpleSearchQueryConverter implements SearchQueryConverter {\n         }\n     }\n \n-    private SCIMFilter scimFilter(String filter) throws SCIMException {\n+    protected SCIMFilter scimFilter(String filter) throws SCIMException {\n         SCIMFilter scimFilter;\n         try {\n             scimFilter = SCIMFilter.parse(filter);\n@@ -101,9 +165,33 @@ public class SimpleSearchQueryConverter implements SearchQueryConverter {\n             filter = filter.replaceAll(\"'\",\"\\\"\");\n             scimFilter = SCIMFilter.parse(filter);\n         }\n+        validateFilterAttributes(scimFilter);\n         return scimFilter;\n     }\n \n+    private void validateFilterAttributes(SCIMFilter filter) throws SCIMException {\n+        List<String> invalidAttributes = new LinkedList<>();\n+        validateFilterAttributes(filter, invalidAttributes);\n+        if (!invalidAttributes.isEmpty()) {\n+            throw new InvalidResourceException(\"Invalid filter attributes:\"+StringUtils.collectionToCommaDelimitedString(invalidAttributes));\n+        }\n+    }\n+\n+    private void validateFilterAttributes(SCIMFilter filter, List<String> invalidAttribues) {\n+        if (filter.getFilterAttribute()!=null && filter.getFilterAttribute().getAttributeName()!=null) {\n+            String name = filter.getFilterAttribute().getAttributeName();\n+            if (filter.getFilterAttribute().getSubAttributeName()!=null) {\n+                name = name + \".\" + filter.getFilterAttribute().getSubAttributeName();\n+            }\n+            if (!VALID_ATTRIBUTE_NAMES.contains(name.toLowerCase())) {\n+                invalidAttribues.add(name);\n+            }\n+        }\n+        for (SCIMFilter subfilter : ofNullable(filter.getFilterComponents()).orElse(emptyList())) {\n+            validateFilterAttributes(subfilter, invalidAttribues);\n+        }\n+    }\n+\n     private String createFilter(SCIMFilter filter, Map<String,Object> values, AttributeNameMapper mapper, String paramPrefix) {\n         switch (filter.getFilterType()) {\n             case AND:\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverterTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverterTests.java\nnew file mode 100644\nindex 000000000..beadf2e45\n--- /dev/null\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverterTests.java\n@@ -0,0 +1,95 @@\n+/*\n+ * ****************************************************************************\n+ *     Cloud Foundry\n+ *     Copyright (c) [2009-2017] Pivotal Software, Inc. All Rights Reserved.\n+ *\n+ *     This product is licensed to you under the Apache License, Version 2.0 (the \"License\").\n+ *     You may not use this product except in compliance with the License.\n+ *\n+ *     This product includes a number of subcomponents with\n+ *     separate copyright notices and license terms. Your use of these\n+ *     subcomponents is subject to the terms and conditions of the\n+ *     subcomponent's license, as noted in the LICENSE file.\n+ * ****************************************************************************\n+ */\n+\n+package org.cloudfoundry.identity.uaa.resources.jdbc;\n+\n+import com.unboundid.scim.sdk.InvalidResourceException;\n+import com.unboundid.scim.sdk.SCIMFilter;\n+import org.cloudfoundry.identity.uaa.scim.jdbc.ScimSearchQueryConverter;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Optional.ofNullable;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+public class SimpleSearchQueryConverterTests {\n+\n+    SimpleSearchQueryConverter converter;\n+\n+    String query = \"user_id eq \\\"7e2345e8-8bbf-4eaa-9bc3-ae1ba610f890\\\"\" +\n+        \"and \" +\n+        \"client_id eq \\\"app\\\"\" +\n+        \"and \" +\n+        \"meta.lastmodified gt \\\"some-value\\\"\" +\n+        \"and \" +\n+        \"(an/**/invalid/**/attribute/**/and/**/1\" + //invalid attribute name\n+        \" pr \" + //operator (present)\n+        \"and \"\n+        + \"1 eq 1)\" + //invalid attribute name 1\n+        \" and \" +\n+        \"\\\"1\\\" eq \\\"1\\\"\";\n+\n+    String validQuery = \"user_id eq \\\"7e2345e8-8bbf-4eaa-9bc3-ae1ba610f890\\\"\" +\n+        \"and \" +\n+        \"client_id eq \\\"app\\\"\" +\n+        \"and \" +\n+        \"meta.lastmodified gt \\\"some-value\\\"\" +\n+        \"and \" +\n+        \"meta.created pr\";\n+\n+    @Rule\n+    public ExpectedException exception = ExpectedException.none();\n+\n+    @Before\n+    public void setup() {\n+        converter = new ScimSearchQueryConverter();\n+    }\n+\n+    @Test\n+    public void test_query() throws Exception {\n+        exception.expect(InvalidResourceException.class);\n+        exception.expectMessage(startsWith(\"Invalid filter attributes\"));\n+        exception.expectMessage(containsString(\"an/**/invalid/**/attribute/**/and/**/1\"));\n+        exception.expectMessage(containsString(\"1\"));\n+        exception.expectMessage(containsString(\"\\\"1\\\"\"));\n+        SCIMFilter filter = converter.scimFilter(query);\n+    }\n+\n+    @Test\n+    public void print_query() throws Exception {\n+        SCIMFilter filter = converter.scimFilter(validQuery);\n+        printFilterAttributes(filter, new AtomicInteger(0));\n+    }\n+\n+    public void printFilterAttributes(SCIMFilter filter, AtomicInteger pos) {\n+        if (filter.getFilterAttribute() != null) {\n+            String name = filter.getFilterAttribute().getAttributeName();\n+            if (filter.getFilterAttribute().getSubAttributeName() != null) {\n+                name = name + \".\" + filter.getFilterAttribute().getSubAttributeName();\n+            }\n+            System.out.println((pos.incrementAndGet()) + \". Attribute name:\" + name);\n+        }\n+        for (SCIMFilter subfilter : ofNullable(filter.getFilterComponents()).orElse(emptyList())) {\n+            printFilterAttributes(subfilter, pos);\n+        }\n+    }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/scim/jdbc/ScimSearchQueryConverterTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/scim/jdbc/ScimSearchQueryConverterTests.java\nindex f4a7074bd..22095768b 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/scim/jdbc/ScimSearchQueryConverterTests.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/scim/jdbc/ScimSearchQueryConverterTests.java\n@@ -58,8 +58,8 @@ public class ScimSearchQueryConverterTests {\n         validate(filterProcessor.convert(\"username pr and emails.value co \\\".com\\\"\", null, false),\"(username IS NOT NULL AND LOWER(email) LIKE LOWER(:__value_0))\", 1);\n         validate(filterProcessor.convert(\"username eq \\\"joe\\\" or emails.value co \\\".com\\\"\", null, false),\"(LOWER(username) = LOWER(:__value_0) OR LOWER(email) LIKE LOWER(:__value_1))\", 2);\n         validate(filterProcessor.convert(\"active eq true\", null, false),\"active = :__value_0\", 1, Boolean.class);\n-        validate(filterProcessor.convert(\"test eq 1000000.45\", null, false),\"test = :__value_0\", 1, Double.class);\n-        validate(filterProcessor.convert(\"test eq 1000000\", null, false),\"test = :__value_0\", 1, Double.class);\n+        validate(filterProcessor.convert(\"Version eq 1000000.45\", null, false),\"Version = :__value_0\", 1, Double.class);\n+        validate(filterProcessor.convert(\"meta.VerSion eq 1000000\", null, false),\"VerSion = :__value_0\", 1, Double.class);\n     }\n \n     @Test\n@@ -84,8 +84,8 @@ public class ScimSearchQueryConverterTests {\n         validate(filterProcessor.convert(\"username pr and emails.value co \\\".com\\\"\", null, false),\"(username IS NOT NULL AND email LIKE :__value_0)\", 1);\n         validate(filterProcessor.convert(\"username eq \\\"joe\\\" or emails.value co \\\".com\\\"\", null, false),\"(username = :__value_0 OR email LIKE :__value_1)\", 2);\n         validate(filterProcessor.convert(\"active eq true\", null, false),\"active = :__value_0\", 1, Boolean.class);\n-        validate(filterProcessor.convert(\"test eq 1000000.45\", null, false),\"test = :__value_0\", 1, Double.class);\n-        validate(filterProcessor.convert(\"test eq 1000000\", null, false),\"test = :__value_0\", 1, Double.class);\n+        validate(filterProcessor.convert(\"Version eq 1000000.45\", null, false),\"Version = :__value_0\", 1, Double.class);\n+        validate(filterProcessor.convert(\"meta.VerSion eq 1000000\", null, false),\"VerSion = :__value_0\", 1, Double.class);\n     }\n \n     @Test\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "2dbeb9e93e076d71d7f0886dea9f77f23e0b8f3c", "source_date": "Wed Apr 19 12:54:17 2017 -0700", "source_tag": "4.0.0", "target_commit": "b6d6526cb89120043d390bf0274cd062e9fc452f", "target_date": "Thu Apr 20 12:31:06 2017 -0700", "target_tag": "3.9.11", "FAIL TO PASS": ["/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/resources/jdbc/SimpleSearchQueryConverterTests.java"], "PASS TO PASS": [":cloudfoundry-identity-model:mainOutputResourcesDir", ":cloudfoundry-identity-model:buildInfo", ":cloudfoundry-identity-model:compileJava", ":cloudfoundry-identity-model:processResources", ":cloudfoundry-identity-model:jar", ":cloudfoundry-identity-model:gitInfo", ":cloudfoundry-identity-server:compileJava/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", ":cloudfoundry-identity-model:classes", "/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", ":cloudfoundry-identity-server:classes", ":cloudfoundry-identity-server:compileTestJava/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/test/network/NetworkTestUtils.java", ":cloudfoundry-identity-server:compileTestJava", "/uaa/server/src/main/java/org/cloudfoundry/identity/uaa/util/SocketUtils.java", ":cloudfoundry-identity-server:compileJava", ":cloudfoundry-identity-server:processResources"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_462", "original_commit_message": "Fixed CVE-2019-19118 -- Required edit permissions on parent model for editable inlines in admin.\nThank you to Shen Ying for reporting this issue.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 520e3d023e..57c3d4f4d6 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -1471,13 +1471,20 @@ class ModelAdmin(BaseModelAdmin):\n         )\n \n     def get_inline_formsets(self, request, formsets, inline_instances, obj=None):\n+        # Edit permissions on parent model are required for editable inlines.\n+        can_edit_parent = self.has_change_permission(request, obj) if obj else self.has_add_permission(request)\n         inline_admin_formsets = []\n         for inline, formset in zip(inline_instances, formsets):\n             fieldsets = list(inline.get_fieldsets(request, obj))\n             readonly = list(inline.get_readonly_fields(request, obj))\n-            has_add_permission = inline._has_add_permission(request, obj)\n-            has_change_permission = inline.has_change_permission(request, obj)\n-            has_delete_permission = inline.has_delete_permission(request, obj)\n+            if can_edit_parent:\n+                has_add_permission = inline._has_add_permission(request, obj)\n+                has_change_permission = inline.has_change_permission(request, obj)\n+                has_delete_permission = inline.has_delete_permission(request, obj)\n+            else:\n+                # Disable all edit-permissions, and overide formset settings.\n+                has_add_permission = has_change_permission = has_delete_permission = False\n+                formset.extra = formset.max_num = 0\n             has_view_permission = inline.has_view_permission(request, obj)\n             prepopulated = dict(inline.get_prepopulated_fields(request, obj))\n             inline_admin_formset = helpers.InlineAdminFormSet(\n@@ -1542,8 +1549,12 @@ class ModelAdmin(BaseModelAdmin):\n         else:\n             obj = self.get_object(request, unquote(object_id), to_field)\n \n-            if not self.has_view_or_change_permission(request, obj):\n-                raise PermissionDenied\n+            if request.method == 'POST':\n+                if not self.has_change_permission(request, obj):\n+                    raise PermissionDenied\n+            else:\n+                if not self.has_view_or_change_permission(request, obj):\n+                    raise PermissionDenied\n \n             if obj is None:\n                 return self._get_obj_does_not_exist_redirect(request, opts, object_id)\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 09fcd0f300..dd40ff675c 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -1,3 +1,5 @@\n+from selenium.common.exceptions import NoSuchElementException\n+\n from django.contrib.admin import ModelAdmin, TabularInline\n from django.contrib.admin.helpers import InlineAdminForm\n from django.contrib.admin.tests import AdminSeleniumTestCase\n@@ -852,6 +854,98 @@ class TestInlinePermissions(TestCase):\n         )\n \n \n+@override_settings(ROOT_URLCONF='admin_inlines.urls')\n+class TestReadOnlyChangeViewInlinePermissions(TestCase):\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.user = User.objects.create_user('testing', password='password', is_staff=True)\n+        cls.user.user_permissions.add(\n+            Permission.objects.get(codename='view_poll', content_type=ContentType.objects.get_for_model(Poll))\n+        )\n+        cls.user.user_permissions.add(\n+            *Permission.objects.filter(\n+                codename__endswith=\"question\", content_type=ContentType.objects.get_for_model(Question)\n+            ).values_list('pk', flat=True)\n+        )\n+\n+        cls.poll = Poll.objects.create(name=\"Survey\")\n+        cls.add_url = reverse('admin:admin_inlines_poll_add')\n+        cls.change_url = reverse('admin:admin_inlines_poll_change', args=(cls.poll.id,))\n+\n+    def setUp(self):\n+        self.client.force_login(self.user)\n+\n+    def test_add_url_not_allowed(self):\n+        response = self.client.get(self.add_url)\n+        self.assertEqual(response.status_code, 403)\n+\n+        response = self.client.post(self.add_url, {})\n+        self.assertEqual(response.status_code, 403)\n+\n+    def test_post_to_change_url_not_allowed(self):\n+        response = self.client.post(self.change_url, {})\n+        self.assertEqual(response.status_code, 403)\n+\n+    def test_get_to_change_url_is_allowed(self):\n+        response = self.client.get(self.change_url)\n+        self.assertEqual(response.status_code, 200)\n+\n+    def test_main_model_is_rendered_as_read_only(self):\n+        response = self.client.get(self.change_url)\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\">%s</div>' % self.poll.name,\n+            html=True\n+        )\n+        input = '<input type=\"text\" name=\"name\" value=\"%s\" class=\"vTextField\" maxlength=\"40\" required id=\"id_name\">'\n+        self.assertNotContains(\n+            response,\n+            input % self.poll.name,\n+            html=True\n+        )\n+\n+    def test_inlines_are_rendered_as_read_only(self):\n+        question = Question.objects.create(text=\"How will this be rendered?\", poll=self.poll)\n+        response = self.client.get(self.change_url)\n+        self.assertContains(\n+            response,\n+            '<td class=\"field-text\"><p>%s</p></td>' % question.text,\n+            html=True\n+        )\n+        self.assertNotContains(response, 'id=\"id_question_set-0-text\"')\n+        self.assertNotContains(response, 'id=\"id_related_objs-0-DELETE\"')\n+\n+    def test_submit_line_shows_only_close_button(self):\n+        response = self.client.get(self.change_url)\n+        self.assertContains(\n+            response,\n+            '<a href=\"/admin/admin_inlines/poll/\" class=\"closelink\">Close</a>',\n+            html=True\n+        )\n+        delete_link = '<p class=\"deletelink-box\"><a href=\"/admin/admin_inlines/poll/%s/delete/\" class=\"deletelink\">Delete</a></p>'  # noqa\n+        self.assertNotContains(\n+            response,\n+            delete_link % self.poll.id,\n+            html=True\n+        )\n+        self.assertNotContains(response, '<input type=\"submit\" value=\"Save and add another\" name=\"_addanother\">')\n+        self.assertNotContains(response, '<input type=\"submit\" value=\"Save and continue editing\" name=\"_continue\">')\n+\n+    def test_inline_delete_buttons_are_not_shown(self):\n+        Question.objects.create(text=\"How will this be rendered?\", poll=self.poll)\n+        response = self.client.get(self.change_url)\n+        self.assertNotContains(\n+            response,\n+            '<input type=\"checkbox\" name=\"question_set-0-DELETE\" id=\"id_question_set-0-DELETE\">',\n+            html=True\n+        )\n+\n+    def test_extra_inlines_are_not_shown(self):\n+        response = self.client.get(self.change_url)\n+        self.assertNotContains(response, 'id=\"id_question_set-0-text\"')\n+\n+\n @override_settings(ROOT_URLCONF='admin_inlines.urls')\n class SeleniumTests(AdminSeleniumTestCase):\n \n@@ -955,6 +1049,24 @@ class SeleniumTests(AdminSeleniumTestCase):\n         self.assertEqual(ProfileCollection.objects.all().count(), 1)\n         self.assertEqual(Profile.objects.all().count(), 3)\n \n+    def test_add_inline_link_absent_for_view_only_parent_model(self):\n+        user = User.objects.create_user('testing', password='password', is_staff=True)\n+        user.user_permissions.add(\n+            Permission.objects.get(codename='view_poll', content_type=ContentType.objects.get_for_model(Poll))\n+        )\n+        user.user_permissions.add(\n+            *Permission.objects.filter(\n+                codename__endswith=\"question\", content_type=ContentType.objects.get_for_model(Question)\n+            ).values_list('pk', flat=True)\n+        )\n+        self.admin_login(username='testing', password='password')\n+        poll = Poll.objects.create(name=\"Survey\")\n+        change_url = reverse('admin:admin_inlines_poll_change', args=(poll.id,))\n+        self.selenium.get(self.live_server_url + change_url)\n+        with self.disable_implicit_wait():\n+            with self.assertRaises(NoSuchElementException):\n+                self.selenium.find_element_by_link_text('Add another Question')\n+\n     def test_delete_inlines(self):\n         self.admin_login(username='super', password='secret')\n         self.selenium.get(self.live_server_url + reverse('admin:admin_inlines_profilecollection_add'))\n\ndiff --git a/tests/admin_views/admin.py b/tests/admin_views/admin.py\nindex 0b0ad41e2e..a18fb363aa 100644\n--- a/tests/admin_views/admin.py\n+++ b/tests/admin_views/admin.py\n@@ -1149,12 +1149,3 @@ class ArticleAdmin9(admin.ModelAdmin):\n \n site9 = admin.AdminSite(name='admin9')\n site9.register(Article, ArticleAdmin9)\n-\n-\n-class ArticleAdmin10(admin.ModelAdmin):\n-    def has_change_permission(self, request, obj=None):\n-        return False\n-\n-\n-site10 = admin.AdminSite(name='admin10')\n-site10.register(Article, ArticleAdmin10)\n\ndiff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 0cc16509ff..9fdca85c0d 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -1775,8 +1775,7 @@ class AdminViewPermissionsTest(TestCase):\n         self.assertEqual(post.status_code, 403)\n         self.client.get(reverse('admin:logout'))\n \n-        # view user should be able to view the article but not change any of them\n-        # (the POST can be sent, but no modification occurs)\n+        # view user can view articles but not make changes.\n         self.client.force_login(self.viewuser)\n         response = self.client.get(article_changelist_url)\n         self.assertEqual(response.status_code, 200)\n@@ -1787,7 +1786,7 @@ class AdminViewPermissionsTest(TestCase):\n         self.assertContains(response, '<label>Extra form field:</label>')\n         self.assertContains(response, '<a href=\"/test_admin/admin/admin_views/article/\" class=\"closelink\">Close</a>')\n         post = self.client.post(article_change_url, change_dict)\n-        self.assertEqual(post.status_code, 302)\n+        self.assertEqual(post.status_code, 403)\n         self.assertEqual(Article.objects.get(pk=self.a1.pk).content, '<p>Middle content</p>')\n         self.client.get(reverse('admin:logout'))\n \n@@ -1845,7 +1844,7 @@ class AdminViewPermissionsTest(TestCase):\n                 response = self.client.get(change_url_3)\n                 self.assertEqual(response.status_code, 200)\n                 response = self.client.post(change_url_3, {'name': 'changed'})\n-                self.assertRedirects(response, self.index_url)\n+                self.assertEqual(response.status_code, 403)\n                 self.assertEqual(RowLevelChangePermissionModel.objects.get(id=3).name, 'odd id mult 3')\n                 response = self.client.get(change_url_6)\n                 self.assertEqual(response.status_code, 200)\n@@ -1882,21 +1881,6 @@ class AdminViewPermissionsTest(TestCase):\n         self.assertEqual(response.context['title'], 'View article')\n         self.assertContains(response, '<a href=\"/test_admin/admin9/admin_views/article/\" class=\"closelink\">Close</a>')\n \n-    def test_change_view_post_without_object_change_permission(self):\n-        \"\"\"A POST redirects to changelist without modifications.\"\"\"\n-        change_dict = {\n-            'title': 'Ikke fordømt',\n-            'content': '<p>edited article</p>',\n-            'date_0': '2008-03-18', 'date_1': '10:54:39',\n-            'section': self.s1.pk,\n-        }\n-        change_url = reverse('admin10:admin_views_article_change', args=(self.a1.pk,))\n-        changelist_url = reverse('admin10:admin_views_article_changelist')\n-        self.client.force_login(self.viewuser)\n-        response = self.client.post(change_url, change_dict)\n-        self.assertRedirects(response, changelist_url)\n-        self.assertEqual(Article.objects.get(pk=self.a1.pk).content, '<p>Middle content</p>')\n-\n     def test_change_view_save_as_new(self):\n         \"\"\"\n         'Save as new' should raise PermissionDenied for users without the 'add'\n@@ -4053,52 +4037,6 @@ class AdminInlineTests(TestCase):\n         self.assertEqual(Widget.objects.count(), 1)\n         self.assertEqual(Widget.objects.all()[0].name, \"Widget 1 Updated\")\n \n-    def test_simple_inline_permissions(self):\n-        \"\"\"\n-        Changes aren't allowed without change permissions for the inline object.\n-        \"\"\"\n-        # User who can view Articles\n-        permissionuser = User.objects.create_user(\n-            username='permissionuser', password='secret',\n-            email='vuser@example.com', is_staff=True,\n-        )\n-        permissionuser.user_permissions.add(get_perm(Collector, get_permission_codename('view', Collector._meta)))\n-        permissionuser.user_permissions.add(get_perm(Widget, get_permission_codename('view', Widget._meta)))\n-        self.client.force_login(permissionuser)\n-        # Without add permission, a new inline can't be added.\n-        self.post_data['widget_set-0-name'] = 'Widget 1'\n-        collector_url = reverse('admin:admin_views_collector_change', args=(self.collector.pk,))\n-        response = self.client.post(collector_url, self.post_data)\n-        self.assertEqual(response.status_code, 302)\n-        self.assertEqual(Widget.objects.count(), 0)\n-        # But after adding the permisson it can.\n-        permissionuser.user_permissions.add(get_perm(Widget, get_permission_codename('add', Widget._meta)))\n-        self.post_data['widget_set-0-name'] = \"Widget 1\"\n-        collector_url = reverse('admin:admin_views_collector_change', args=(self.collector.pk,))\n-        response = self.client.post(collector_url, self.post_data)\n-        self.assertEqual(response.status_code, 302)\n-        self.assertEqual(Widget.objects.count(), 1)\n-        self.assertEqual(Widget.objects.first().name, 'Widget 1')\n-        widget_id = Widget.objects.first().id\n-        # Without the change permission, a POST doesn't change the object.\n-        self.post_data['widget_set-INITIAL_FORMS'] = '1'\n-        self.post_data['widget_set-0-id'] = str(widget_id)\n-        self.post_data['widget_set-0-name'] = 'Widget 1 Updated'\n-        response = self.client.post(collector_url, self.post_data)\n-        self.assertEqual(response.status_code, 302)\n-        self.assertEqual(Widget.objects.count(), 1)\n-        self.assertEqual(Widget.objects.first().name, 'Widget 1')\n-        # Now adding the change permission and editing works.\n-        permissionuser.user_permissions.remove(get_perm(Widget, get_permission_codename('add', Widget._meta)))\n-        permissionuser.user_permissions.add(get_perm(Widget, get_permission_codename('change', Widget._meta)))\n-        self.post_data['widget_set-INITIAL_FORMS'] = '1'\n-        self.post_data['widget_set-0-id'] = str(widget_id)\n-        self.post_data['widget_set-0-name'] = 'Widget 1 Updated'\n-        response = self.client.post(collector_url, self.post_data)\n-        self.assertEqual(response.status_code, 302)\n-        self.assertEqual(Widget.objects.count(), 1)\n-        self.assertEqual(Widget.objects.first().name, 'Widget 1 Updated')\n-\n     def test_explicit_autofield_inline(self):\n         \"A model with an explicit autofield primary key can be saved as inlines. Regression for #8093\"\n         # First add a new inline\n\ndiff --git a/tests/admin_views/urls.py b/tests/admin_views/urls.py\nindex fdb61d759d..ca684b2f2e 100644\n--- a/tests/admin_views/urls.py\n+++ b/tests/admin_views/urls.py\n@@ -17,7 +17,6 @@ urlpatterns = [\n     # All admin views accept `extra_context` to allow adding it like this:\n     path('test_admin/admin8/', (admin.site.get_urls(), 'admin', 'admin-extra-context'), {'extra_context': {}}),\n     path('test_admin/admin9/', admin.site9.urls),\n-    path('test_admin/admin10/', admin.site10.urls),\n     path('test_admin/has_permission_admin/', custom_has_permission_admin.site.urls),\n     path('test_admin/autocomplete_admin/', autocomplete_site.urls),\n ]\n\ndiff --git a/tests/auth_tests/test_views.py b/tests/auth_tests/test_views.py\nindex e7ad1cbcdf..67d4840446 100644\n--- a/tests/auth_tests/test_views.py\n+++ b/tests/auth_tests/test_views.py\n@@ -1246,7 +1246,7 @@ class ChangelistTests(AuthViewsTestCase):\n         data['password'] = 'shouldnotchange'\n         change_url = reverse('auth_test_admin:auth_user_change', args=(u.pk,))\n         response = self.client.post(change_url, data)\n-        self.assertRedirects(response, reverse('auth_test_admin:auth_user_changelist'))\n+        self.assertEqual(response.status_code, 403)\n         u.refresh_from_db()\n         self.assertEqual(u.password, original_password)\n \n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "36f580a17f0b3cb087deadf3b65eea024f479c21", "source_date": "Mon Dec 2 08:58:14 2019 +0100", "source_tag": "2.2.8", "target_commit": "103ebe2b5ff1b2614b85a52c239f471904d26244", "target_date": "Mon Dec 2 08:58:35 2019 +0100", "target_tag": "2.1.15", "FAIL TO PASS": ["admin_inlines.tests.TestReadOnlyChangeViewInlinePermissions.test_submit_line_shows_only_close_button", "admin_inlines.tests.TestReadOnlyChangeViewInlinePermissions.test_extra_inlines_are_not_shown", "admin_inlines.tests.TestReadOnlyChangeViewInlinePermissions.test_inline_delete_buttons_are_not_shown", "admin_views.tests.AdminViewPermissionsTest.test_change_view", "auth_tests.test_views.ChangelistTests.test_view_user_password_is_readonly", "admin_inlines.tests.TestReadOnlyChangeViewInlinePermissions.test_post_to_change_url_not_allowed", "admin_inlines.tests.TestReadOnlyChangeViewInlinePermissions.test_inlines_are_rendered_as_read_only"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_464", "original_commit_message": "[1.8.x] Fixed an infinite loop possibility in strip_tags().\nThis is a security fix; disclosure to follow shortly.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/utils/html.py b/django/utils/html.py\nindex 66cbcee8f3..4197dc9e23 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -183,8 +183,10 @@ def strip_tags(value):\n     # is redundant, but helps to reduce number of executions of _strip_once.\n     while '<' in value and '>' in value:\n         new_value = _strip_once(value)\n-        if new_value == value:\n-            # _strip_once was not able to detect more tags\n+        if len(new_value) >= len(value):\n+            # _strip_once was not able to detect more tags or length increased\n+            # due to http://bugs.python.org/issue20288\n+            # (affects Python 2 < 2.7.7 and Python 3 < 3.3.5)\n             break\n         value = new_value\n     return value\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex db49046682..7456b67d50 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -82,6 +82,9 @@ class TestUtilsHtml(TestCase):\n             ('a<p a >b</p>c', 'abc'),\n             ('d<a:b c:d>e</p>f', 'def'),\n             ('<strong>foo</strong><a href=\"http://example.com\">bar</a>', 'foobar'),\n+            # caused infinite loop on Pythons not patched with\n+            # http://bugs.python.org/issue20288\n+            ('&gotcha&#;<>', '&gotcha&#;<>'),\n         )\n         for value, output in items:\n             self.check_output(f, value, output)\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "5447709a571cd5d95971f1d5d21d4a7edcf85bbd", "source_date": "Wed Mar 18 19:23:21 2015 -0400", "source_tag": "1.8", "target_commit": "b6b3cb9899214a23ebb0f4ebf0e0b300b0ee524f", "target_date": "Wed Mar 18 08:47:16 2015 -0400", "target_tag": "1.6.11", "FAIL TO PASS": ["utils_tests.test_html.TestUtilsHtml.test_strip_tags"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_465", "original_commit_message": "[1.8.x] Fixed an infinite loop possibility in strip_tags().\nThis is a security fix; disclosure to follow shortly.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/utils/html.py b/django/utils/html.py\nindex 66cbcee8f3..4197dc9e23 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -183,8 +183,10 @@ def strip_tags(value):\n     # is redundant, but helps to reduce number of executions of _strip_once.\n     while '<' in value and '>' in value:\n         new_value = _strip_once(value)\n-        if new_value == value:\n-            # _strip_once was not able to detect more tags\n+        if len(new_value) >= len(value):\n+            # _strip_once was not able to detect more tags or length increased\n+            # due to http://bugs.python.org/issue20288\n+            # (affects Python 2 < 2.7.7 and Python 3 < 3.3.5)\n             break\n         value = new_value\n     return value\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex db49046682..7456b67d50 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -82,6 +82,9 @@ class TestUtilsHtml(TestCase):\n             ('a<p a >b</p>c', 'abc'),\n             ('d<a:b c:d>e</p>f', 'def'),\n             ('<strong>foo</strong><a href=\"http://example.com\">bar</a>', 'foobar'),\n+            # caused infinite loop on Pythons not patched with\n+            # http://bugs.python.org/issue20288\n+            ('&gotcha&#;<>', '&gotcha&#;<>'),\n         )\n         for value, output in items:\n             self.check_output(f, value, output)\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "5447709a571cd5d95971f1d5d21d4a7edcf85bbd", "source_date": "Wed Mar 18 19:23:21 2015 -0400", "source_tag": "1.8", "target_commit": "e63363f8e075fa8d66326ad6a1cc3391cc95cd97", "target_date": "Wed Mar 18 08:51:21 2015 -0400", "target_tag": "1.7.7", "FAIL TO PASS": ["utils_tests.test_html.TestUtilsHtml.test_strip_tags"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "glance", "instance_id": "glance_468", "original_commit_message": "Cleanup chunks for deleted image that was 'saving'\nCurrently image data cannot be removed synchronously for an image that\nis in saving state. And when, the upload operation for such an image is\ncompleted the operator configured quota can be exceeded.\nThis patch fixes the issue of left over chunks for an image which was\ndeleted from saving status. However, by the limitation of the design we\ncannot enforce a global quota check for the image in saving status.\nThis change introduces a inconsonance between http response codes of\nv1 and v2 APIs. The status codes which we will now see after the upload\nprocess completes on an image which was deleted mid way are:\nv1: 412 Precondition Failed\nv2: 410 Gone\nSecurityImpact\nUpgradeImpact\nAPIImpact\nCloses-Bug: 1383973\nCloses-Bug: 1398830\nCloses-Bug: 1188532\nChange-Id: I47229b366c25367ec1bd48aec684e0880f3dfe60\nSigned-off-by: Zhi Yan Liu <zhiyanl@cn.ibm.com>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/glance/api/authorization.py b/glance/api/authorization.py\nindex 811c97af4..5a5df455e 100644\n--- a/glance/api/authorization.py\n+++ b/glance/api/authorization.py\n@@ -161,10 +161,10 @@ class ImageMemberRepoProxy(glance.domain.proxy.Repo):\n             raise exception.Forbidden(message\n                                       % self.image.image_id)\n \n-    def save(self, image_member):\n+    def save(self, image_member, from_state=None):\n         if (self.context.is_admin or\n                 self.context.owner == image_member.member_id):\n-            self.member_repo.save(image_member)\n+            self.member_repo.save(image_member, from_state=from_state)\n         else:\n             message = _(\"You cannot update image member %s\")\n             raise exception.Forbidden(message % image_member.member_id)\n\ndiff --git a/glance/api/policy.py b/glance/api/policy.py\nindex c6257e5a8..824575ee4 100755\n--- a/glance/api/policy.py\n+++ b/glance/api/policy.py\n@@ -118,9 +118,9 @@ class ImageRepoProxy(glance.domain.proxy.Repo):\n         self.policy.enforce(self.context, 'get_images', {})\n         return super(ImageRepoProxy, self).list(*args, **kwargs)\n \n-    def save(self, image):\n+    def save(self, image, from_state=None):\n         self.policy.enforce(self.context, 'modify_image', {})\n-        return super(ImageRepoProxy, self).save(image)\n+        return super(ImageRepoProxy, self).save(image, from_state=from_state)\n \n     def add(self, image):\n         self.policy.enforce(self.context, 'add_image', {})\n@@ -221,9 +221,9 @@ class ImageMemberRepoProxy(glance.domain.proxy.Repo):\n         self.policy.enforce(self.context, 'get_member', {})\n         return self.member_repo.get(member_id)\n \n-    def save(self, member):\n+    def save(self, member, from_state=None):\n         self.policy.enforce(self.context, 'modify_member', {})\n-        self.member_repo.save(member)\n+        self.member_repo.save(member, from_state=from_state)\n \n     def list(self, *args, **kwargs):\n         self.policy.enforce(self.context, 'get_members', {})\n\ndiff --git a/glance/api/v1/upload_utils.py b/glance/api/v1/upload_utils.py\nindex b55717322..17828c1f9 100644\n--- a/glance/api/v1/upload_utils.py\n+++ b/glance/api/v1/upload_utils.py\n@@ -153,14 +153,21 @@ def upload_data_to_store(req, image_meta, image_data, store, notifier):\n         update_data = {'checksum': checksum,\n                        'size': size}\n         try:\n-            image_meta = registry.update_image_metadata(req.context,\n-                                                        image_id,\n-                                                        update_data,\n-                                                        from_state='saving')\n-\n-        except exception.NotFound as e:\n-            msg = _(\"Image %s could not be found after upload. The image may\"\n-                    \" have been deleted during the upload.\") % image_id\n+            try:\n+                state = 'saving'\n+                image_meta = registry.update_image_metadata(req.context,\n+                                                            image_id,\n+                                                            update_data,\n+                                                            from_state=state)\n+            except exception.Duplicate:\n+                image = registry.get_image_metadata(req.context, image_id)\n+                if image['status'] == 'deleted':\n+                    raise exception.NotFound()\n+                else:\n+                    raise\n+        except exception.NotFound:\n+            msg = _LI(\"Image %s could not be found after upload. The image may\"\n+                      \" have been deleted during the upload.\") % image_id\n             LOG.info(msg)\n \n             # NOTE(jculp): we need to clean up the datastore if an image\n\ndiff --git a/glance/api/v2/image_data.py b/glance/api/v2/image_data.py\nindex a71243bce..fa6c19d2e 100644\n--- a/glance/api/v2/image_data.py\n+++ b/glance/api/v2/image_data.py\n@@ -72,14 +72,12 @@ class ImageDataController(object):\n             try:\n                 image_repo.save(image)\n                 image.set_data(data, size)\n-                image_repo.save(image)\n-            except exception.NotFound as e:\n-                msg = (_(\"Image %(id)s could not be found after upload.\"\n+                image_repo.save(image, from_state='saving')\n+            except (exception.NotFound, exception.Conflict):\n+                msg = (_(\"Image %s could not be found after upload. \"\n                          \"The image may have been deleted during the \"\n-                         \"upload: %(error)s Cleaning up the chunks \"\n-                         \"uploaded\") %\n-                       {'id': image_id,\n-                        'error': utils.exception_to_str(e)})\n+                         \"upload, cleaning up the chunks uploaded.\") %\n+                       image_id)\n                 LOG.warn(msg)\n                 # NOTE(sridevi): Cleaning up the uploaded chunks.\n                 try:\n@@ -152,6 +150,10 @@ class ImageDataController(object):\n             raise webob.exc.HTTPServiceUnavailable(explanation=msg,\n                                                    request=req)\n \n+        except webob.exc.HTTPGone as e:\n+            with excutils.save_and_reraise_exception():\n+                LOG.error(_LE(\"Failed to upload image data due to HTTP error\"))\n+\n         except webob.exc.HTTPError as e:\n             with excutils.save_and_reraise_exception():\n                 LOG.error(_LE(\"Failed to upload image data due to HTTP error\"))\n\ndiff --git a/glance/db/__init__.py b/glance/db/__init__.py\nindex 82b42b860..a9a96a7dc 100644\n--- a/glance/db/__init__.py\n+++ b/glance/db/__init__.py\n@@ -166,7 +166,7 @@ class ImageRepo(object):\n         image.created_at = new_values['created_at']\n         image.updated_at = new_values['updated_at']\n \n-    def save(self, image):\n+    def save(self, image, from_state=None):\n         image_values = self._format_image_to_db(image)\n         if image_values['size'] > CONF.image_size_cap:\n             raise exception.ImageSizeLimitExceeded\n@@ -174,7 +174,8 @@ class ImageRepo(object):\n             new_values = self.db_api.image_update(self.context,\n                                                   image.image_id,\n                                                   image_values,\n-                                                  purge_props=True)\n+                                                  purge_props=True,\n+                                                  from_state=from_state)\n         except (exception.NotFound, exception.Forbidden):\n             msg = _(\"No image found with ID %s\") % image.image_id\n             raise exception.NotFound(msg)\n@@ -267,7 +268,7 @@ class ImageMemberRepo(object):\n             msg = _(\"The specified member %s could not be found\")\n             raise exception.NotFound(msg % image_member.id)\n \n-    def save(self, image_member):\n+    def save(self, image_member, from_state=None):\n         image_member_values = self._format_image_member_to_db(image_member)\n         try:\n             new_values = self.db_api.image_member_update(self.context,\n\ndiff --git a/glance/domain/proxy.py b/glance/domain/proxy.py\nindex c7b1b7cbf..4df85caa0 100644\n--- a/glance/domain/proxy.py\n+++ b/glance/domain/proxy.py\n@@ -94,9 +94,9 @@ class Repo(object):\n         result = self.base.add(base_item)\n         return self.helper.proxy(result)\n \n-    def save(self, item):\n+    def save(self, item, from_state=None):\n         base_item = self.helper.unproxy(item)\n-        result = self.base.save(base_item)\n+        result = self.base.save(base_item, from_state=from_state)\n         return self.helper.proxy(result)\n \n     def remove(self, item):\n\ndiff --git a/glance/location.py b/glance/location.py\nindex 46b8c7c69..3ae653543 100644\n--- a/glance/location.py\n+++ b/glance/location.py\n@@ -61,8 +61,8 @@ class ImageRepoProxy(glance.domain.proxy.Repo):\n         self._set_acls(image)\n         return result\n \n-    def save(self, image):\n-        result = super(ImageRepoProxy, self).save(image)\n+    def save(self, image, from_state=None):\n+        result = super(ImageRepoProxy, self).save(image, from_state=from_state)\n         self._set_acls(image)\n         return result\n \n\ndiff --git a/glance/notifier.py b/glance/notifier.py\nindex bec513791..394ce73a9 100644\n--- a/glance/notifier.py\n+++ b/glance/notifier.py\n@@ -125,8 +125,8 @@ class ImageRepoProxy(glance.domain.proxy.Repo):\n                                              item_proxy_class=ImageProxy,\n                                              item_proxy_kwargs=proxy_kwargs)\n \n-    def save(self, image):\n-        super(ImageRepoProxy, self).save(image)\n+    def save(self, image, from_state=None):\n+        super(ImageRepoProxy, self).save(image, from_state=from_state)\n         self.notifier.info('image.update',\n                            format_image_notification(image))\n \n\ndiff --git a/glance/quota/__init__.py b/glance/quota/__init__.py\nindex cee7a866f..88bb6af82 100644\n--- a/glance/quota/__init__.py\n+++ b/glance/quota/__init__.py\n@@ -104,10 +104,10 @@ class ImageRepoProxy(glance.domain.proxy.Repo):\n             LOG.debug(six.text_type(exc))\n             raise exc\n \n-    def save(self, image):\n+    def save(self, image, from_state=None):\n         if image.added_new_properties():\n             self._enforce_image_property_quota(len(image.extra_properties))\n-        return super(ImageRepoProxy, self).save(image)\n+        return super(ImageRepoProxy, self).save(image, from_state=from_state)\n \n     def add(self, image):\n         self._enforce_image_property_quota(len(image.extra_properties))\n\n\n</patch>\n<test_patch>\ndiff --git a/glance/tests/unit/test_domain_proxy.py b/glance/tests/unit/test_domain_proxy.py\nindex fa3e89718..911a745c6 100644\n--- a/glance/tests/unit/test_domain_proxy.py\n+++ b/glance/tests/unit/test_domain_proxy.py\n@@ -74,7 +74,7 @@ class TestProxyRepoPlain(test_utils.BaseTestCase):\n         self._test_method('add', 'snuff', 'enough')\n \n     def test_save(self):\n-        self._test_method('save', 'snuff', 'enough')\n+        self._test_method('save', 'snuff', 'enough', from_state=None)\n \n     def test_remove(self):\n         self._test_method('add', None, 'flying')\n@@ -121,14 +121,14 @@ class TestProxyRepoWrapping(test_utils.BaseTestCase):\n             self.assertEqual(tuple(), results[i].args)\n             self.assertEqual({'a': 1}, results[i].kwargs)\n \n-    def _test_method_with_proxied_argument(self, name, result):\n+    def _test_method_with_proxied_argument(self, name, result, **kwargs):\n         self.fake_repo.result = result\n         item = FakeProxy('snoop')\n         method = getattr(self.proxy_repo, name)\n         proxy_result = method(item)\n \n         self.assertEqual(('snoop',), self.fake_repo.args)\n-        self.assertEqual({}, self.fake_repo.kwargs)\n+        self.assertEqual(kwargs, self.fake_repo.kwargs)\n \n         if result is None:\n             self.assertIsNone(proxy_result)\n@@ -145,10 +145,12 @@ class TestProxyRepoWrapping(test_utils.BaseTestCase):\n         self._test_method_with_proxied_argument('add', None)\n \n     def test_save(self):\n-        self._test_method_with_proxied_argument('save', 'dog')\n+        self._test_method_with_proxied_argument('save', 'dog',\n+                                                from_state=None)\n \n     def test_save_with_no_result(self):\n-        self._test_method_with_proxied_argument('save', None)\n+        self._test_method_with_proxied_argument('save', None,\n+                                                from_state=None)\n \n     def test_remove(self):\n         self._test_method_with_proxied_argument('remove', 'dog')\n\ndiff --git a/glance/tests/unit/test_policy.py b/glance/tests/unit/test_policy.py\nindex e0bdcddcd..e386e2e6f 100644\n--- a/glance/tests/unit/test_policy.py\n+++ b/glance/tests/unit/test_policy.py\n@@ -78,7 +78,7 @@ class MemberRepoStub(object):\n     def get(self, *args, **kwargs):\n         return 'member_repo_get'\n \n-    def save(self, image_member):\n+    def save(self, image_member, from_state=None):\n         image_member.output = 'member_repo_save'\n \n     def list(self, *args, **kwargs):\n\ndiff --git a/glance/tests/unit/test_quota.py b/glance/tests/unit/test_quota.py\nindex d2f6e47cb..c59bde496 100644\n--- a/glance/tests/unit/test_quota.py\n+++ b/glance/tests/unit/test_quota.py\n@@ -366,7 +366,8 @@ class TestImagePropertyQuotas(test_utils.BaseTestCase):\n         self.image.extra_properties = {'foo': 'bar'}\n         self.image_repo_proxy.save(self.image)\n \n-        self.image_repo_mock.save.assert_called_once_with(self.base_image)\n+        self.image_repo_mock.save.assert_called_once_with(self.base_image,\n+                                                          from_state=None)\n \n     def test_save_image_too_many_image_properties(self):\n         self.config(image_property_quota=1)\n@@ -382,7 +383,8 @@ class TestImagePropertyQuotas(test_utils.BaseTestCase):\n         self.image.extra_properties = {'foo': 'bar'}\n         self.image_repo_proxy.save(self.image)\n \n-        self.image_repo_mock.save.assert_called_once_with(self.base_image)\n+        self.image_repo_mock.save.assert_called_once_with(self.base_image,\n+                                                          from_state=None)\n \n     def test_add_image_with_image_property(self):\n         self.config(image_property_quota=1)\n@@ -421,7 +423,8 @@ class TestImagePropertyQuotas(test_utils.BaseTestCase):\n         self.config(image_property_quota=1)\n         self.image.extra_properties = {'foo': 'frob', 'spam': 'eggs'}\n         self.image_repo_proxy.save(self.image)\n-        self.image_repo_mock.save.assert_called_once_with(self.base_image)\n+        self.image_repo_mock.save.assert_called_once_with(self.base_image,\n+                                                          from_state=None)\n         self.assertEqual('frob', self.base_image.extra_properties['foo'])\n         self.assertEqual('eggs', self.base_image.extra_properties['spam'])\n \n@@ -430,7 +433,8 @@ class TestImagePropertyQuotas(test_utils.BaseTestCase):\n         self.config(image_property_quota=1)\n         del self.image.extra_properties['foo']\n         self.image_repo_proxy.save(self.image)\n-        self.image_repo_mock.save.assert_called_once_with(self.base_image)\n+        self.image_repo_mock.save.assert_called_once_with(self.base_image,\n+                                                          from_state=None)\n         self.assertNotIn('foo', self.base_image.extra_properties)\n         self.assertEqual('ham', self.base_image.extra_properties['spam'])\n \n@@ -452,7 +456,7 @@ class TestImagePropertyQuotas(test_utils.BaseTestCase):\n         del self.image.extra_properties['frob']\n         del self.image.extra_properties['lorem']\n         self.image_repo_proxy.save(self.image)\n-        call_args = mock.call(self.base_image)\n+        call_args = mock.call(self.base_image, from_state=None)\n         self.assertEqual(call_args, self.image_repo_mock.save.call_args)\n         self.assertEqual('bar', self.base_image.extra_properties['foo'])\n         self.assertEqual('ham', self.base_image.extra_properties['spam'])\n@@ -471,7 +475,8 @@ class TestImagePropertyQuotas(test_utils.BaseTestCase):\n         self.config(image_property_quota=1)\n         del self.image.extra_properties['foo']\n         self.image_repo_proxy.save(self.image)\n-        self.image_repo_mock.save.assert_called_once_with(self.base_image)\n+        self.image_repo_mock.save.assert_called_once_with(self.base_image,\n+                                                          from_state=None)\n         self.assertNotIn('foo', self.base_image.extra_properties)\n         self.assertEqual('ham', self.base_image.extra_properties['spam'])\n         self.assertEqual('baz', self.base_image.extra_properties['frob'])\n\ndiff --git a/glance/tests/unit/test_store_image.py b/glance/tests/unit/test_store_image.py\nindex b0818b680..48f110a5c 100644\n--- a/glance/tests/unit/test_store_image.py\n+++ b/glance/tests/unit/test_store_image.py\n@@ -35,7 +35,7 @@ class ImageRepoStub(object):\n     def add(self, image):\n         return image\n \n-    def save(self, image):\n+    def save(self, image, from_state=None):\n         return image\n \n \n\ndiff --git a/glance/tests/unit/v1/test_api.py b/glance/tests/unit/v1/test_api.py\nindex 5ddae5543..29f48cf79 100644\n--- a/glance/tests/unit/v1/test_api.py\n+++ b/glance/tests/unit/v1/test_api.py\n@@ -1741,8 +1741,7 @@ class TestGlanceAPI(base.IsolatedUnitTest):\n \n         self.assertEqual(1, mock_store_add_to_backend.call_count)\n \n-    def test_delete_during_image_upload(self):\n-        req = unit_test_utils.get_fake_request()\n+    def _check_delete_during_image_upload(self, is_admin=False):\n \n         fixture_headers = {'x-image-meta-store': 'file',\n                            'x-image-meta-disk-format': 'vhd',\n@@ -1750,8 +1749,8 @@ class TestGlanceAPI(base.IsolatedUnitTest):\n                            'x-image-meta-name': 'fake image #3',\n                            'x-image-meta-property-key1': 'value1'}\n \n-        req = webob.Request.blank(\"/images\")\n-        req.method = 'POST'\n+        req = unit_test_utils.get_fake_request(path=\"/images\",\n+                                               is_admin=is_admin)\n         for k, v in six.iteritems(fixture_headers):\n             req.headers[k] = v\n \n@@ -1776,31 +1775,18 @@ class TestGlanceAPI(base.IsolatedUnitTest):\n                        mock_initiate_deletion)\n \n         orig_update_image_metadata = registry.update_image_metadata\n-        ctlr = glance.api.v1.controller.BaseController\n-        orig_get_image_meta_or_404 = ctlr.get_image_meta_or_404\n-\n-        def mock_update_image_metadata(*args, **kwargs):\n \n-            if args[2].get('status', None) == 'deleted':\n+        data = \"somedata\"\n \n-                # One shot.\n-                def mock_get_image_meta_or_404(*args, **kwargs):\n-                    ret = orig_get_image_meta_or_404(*args, **kwargs)\n-                    ret['status'] = 'queued'\n-                    self.stubs.Set(ctlr, 'get_image_meta_or_404',\n-                                   orig_get_image_meta_or_404)\n-                    return ret\n-\n-                self.stubs.Set(ctlr, 'get_image_meta_or_404',\n-                               mock_get_image_meta_or_404)\n+        def mock_update_image_metadata(*args, **kwargs):\n \n-                req = webob.Request.blank(\"/images/%s\" % image_id)\n-                req.method = 'PUT'\n-                req.headers['Content-Type'] = 'application/octet-stream'\n-                req.body = \"somedata\"\n+            if args[2].get('size', None) == len(data):\n+                path = \"/images/%s\" % image_id\n+                req = unit_test_utils.get_fake_request(path=path,\n+                                                       method='DELETE',\n+                                                       is_admin=is_admin)\n                 res = req.get_response(self.api)\n                 self.assertEqual(200, res.status_int)\n-                self.assertFalse(res.location)\n \n                 self.stubs.Set(registry, 'update_image_metadata',\n                                orig_update_image_metadata)\n@@ -1810,20 +1796,30 @@ class TestGlanceAPI(base.IsolatedUnitTest):\n         self.stubs.Set(registry, 'update_image_metadata',\n                        mock_update_image_metadata)\n \n-        req = webob.Request.blank(\"/images/%s\" % image_id)\n-        req.method = 'DELETE'\n+        req = unit_test_utils.get_fake_request(path=\"/images/%s\" % image_id,\n+                                               method='PUT')\n+        req.headers['Content-Type'] = 'application/octet-stream'\n+        req.body = data\n         res = req.get_response(self.api)\n-        self.assertEqual(200, res.status_int)\n+        self.assertEqual(412, res.status_int)\n+        self.assertFalse(res.location)\n \n         self.assertTrue(called['initiate_deletion'])\n \n-        req = webob.Request.blank(\"/images/%s\" % image_id)\n-        req.method = 'HEAD'\n+        req = unit_test_utils.get_fake_request(path=\"/images/%s\" % image_id,\n+                                               method='HEAD',\n+                                               is_admin=True)\n         res = req.get_response(self.api)\n         self.assertEqual(200, res.status_int)\n         self.assertEqual('True', res.headers['x-image-meta-deleted'])\n         self.assertEqual('deleted', res.headers['x-image-meta-status'])\n \n+    def test_delete_during_image_upload_by_normal_user(self):\n+        self._check_delete_during_image_upload(is_admin=False)\n+\n+    def test_delete_during_image_upload_by_admin(self):\n+        self._check_delete_during_image_upload(is_admin=True)\n+\n     def test_disable_purge_props(self):\n         \"\"\"\n         Test the special x-glance-registry-purge-props header controls\n\ndiff --git a/glance/tests/unit/v2/test_image_data_resource.py b/glance/tests/unit/v2/test_image_data_resource.py\nindex 0a8c15324..807238723 100644\n--- a/glance/tests/unit/v2/test_image_data_resource.py\n+++ b/glance/tests/unit/v2/test_image_data_resource.py\n@@ -79,7 +79,7 @@ class FakeImageRepo(object):\n         else:\n             return self.result\n \n-    def save(self, image):\n+    def save(self, image, from_state=None):\n         self.saved_image = image\n \n \n@@ -182,17 +182,21 @@ class TestImagesController(base.StoreClearingUnitTest):\n                           request, unit_test_utils.UUID1, 'YYYY', 4)\n \n     def test_upload_non_existent_image_during_save_initiates_deletion(self):\n-        def fake_save(self):\n+        def fake_save_not_found(self):\n             raise exception.NotFound()\n \n-        request = unit_test_utils.get_fake_request()\n-        image = FakeImage('abcd', locations=['http://example.com/image'])\n-        self.image_repo.result = image\n-        self.image_repo.save = fake_save\n-        image.delete = mock.Mock()\n-        self.assertRaises(webob.exc.HTTPGone, self.controller.upload,\n-                          request, str(uuid.uuid4()), 'ABC', 3)\n-        self.assertTrue(image.delete.called)\n+        def fake_save_conflict(self):\n+            raise exception.Conflict()\n+\n+        for fun in [fake_save_not_found, fake_save_conflict]:\n+            request = unit_test_utils.get_fake_request()\n+            image = FakeImage('abcd', locations=['http://example.com/image'])\n+            self.image_repo.result = image\n+            self.image_repo.save = fun\n+            image.delete = mock.Mock()\n+            self.assertRaises(webob.exc.HTTPGone, self.controller.upload,\n+                              request, str(uuid.uuid4()), 'ABC', 3)\n+            self.assertTrue(image.delete.called)\n \n     def test_upload_non_existent_image_raises_not_found_exception(self):\n         def fake_save(self):\n\n</test_patch>\n", "file change type": "Backport adds and omits files", "content change type": "logical and structural changes", "source_commit": "0dc8fbb3479a53c5bba8475d14f4c7206904c5ea", "source_date": "Thu Jan 15 15:56:56 2015 +0000", "source_tag": "11.0.0", "target_commit": "f1260cc771ee068651aa62b972bef49d9af81eb0", "target_date": "Fri Jan 23 15:45:46 2015 +0100", "target_tag": "2014.1.4", "FAIL TO PASS": ["glance.tests.unit.test_quota.TestImagePropertyQuotas.test_save_image_unlimited_image_properties", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_delete_during_image_upload_by_normal_user", "glance.tests.unit.test_domain_proxy.TestProxyRepoWrapping.test_save", "glance.tests.unit.v2.test_image_data_resource.TestImagesController.test_upload_non_existent_image_during_save_initiates_deletion", "glance.tests.unit.test_quota.TestImagePropertyQuotas.test_save_image_with_image_property", "glance.tests.unit.test_domain_proxy.TestProxyRepoWrapping.test_save_with_no_result", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_delete_during_image_upload_by_admin", "glance.tests.unit.test_domain_proxy.TestProxyRepoPlain.test_save"], "PASS TO PASS": ["glance.tests.unit.test_store_image.TestStoreAddToBackend.test_nested_dict", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_delete_queued_image", "glance.tests.unit.test_store_image.TestStoreMetaDataChecker.test_nested_dict", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_delete_not_allowed", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_image_is_checksummed", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_configured_container_format_good", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_check_no_url_info_ml", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_copy_from_image_unauthorized", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_update_copy_from_upload_image_unauthorized", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_member_positive", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_bad_min_ram_size_update", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_prop_protection_with_create_and_permitted_role", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_create_member_to_deleted_image_raises_404", "glance.tests.unit.v2.test_image_data_resource.TestImageDataSerializer.test_download_forbidden", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_delete_non_exist_member", "glance.tests.unit.v2.test_image_data_resource.TestImageDataSerializer.test_download_with_checksum", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_image_no_location_no_content_type", "glance.tests.unit.test_domain_proxy.TestImageFactory.test_proxy_plain", "glance.tests.unit.v1.test_api.TestAPIPropertyQuotas.test_update_image_with_too_many_properties", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_update_non_existing_image", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_delete_member_allowed_by_policy", "glance.tests.unit.test_store_image.TestImageFactory.test_new_image_with_location", "glance.tests.unit.test_store_image.TestStoreImage.test_image_change_extend_invalid_locations_uri", "glance.tests.unit.test_domain_proxy.TestProxyRepoWrapping.test_add_with_no_result", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_image_status_when_delete_fails", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_image_size_data_too_big", "glance.tests.unit.test_store_image.TestStoreImage.test_image_reverse_locations_order", "glance.tests.unit.test_policy.TestMemberPolicy.test_get_members_allowed", "glance.tests.unit.test_policy.TestTaskPolicy.test_get_task_allowed", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_delete_non_protected_prop", "glance.tests.unit.test_policy.TestImagePolicy.test_add_image_allowed", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_get_image_members_forbidden_by_policy", "glance.tests.unit.test_store_image.TestStoreAddToBackend.test_bad_top_level_nonunicode", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_delete_non_exists_image", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_image_size_header_exceed_quota", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_update_non_protected_prop", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_update_protected_props_mix_read", "glance.tests.unit.test_store_image.TestStoreMetaDataChecker.test_unicode", "glance.tests.unit.test_store_image.TestStoreAddToBackend.test_bad_nonunicode_dict_list", "glance.tests.unit.v2.test_image_data_resource.TestImagesController.test_upload_status", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_member_overlimit", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_defaulted_amazon_format", "glance.tests.unit.v2.test_image_data_resource.TestImagesController.test_upload", "glance.tests.unit.test_policy.TestMemberPolicy.test_get_member_allowed", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_member_unlimited", "glance.tests.unit.test_store_image.TestStoreAddToBackend.test_unicode_dict_list", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_image_size_header_too_big", "glance.tests.unit.test_domain_proxy.TestProxyRepoPlain.test_add", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_configured_disk_format_bad", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_show_image_unauthorized_download", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_replace_members_forbidden_by_policy", "glance.tests.unit.test_quota.TestImagePropertyQuotas.test_add_image_unlimited_image_properties", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_show_image_basic", "glance.tests.unit.test_store_image.TestStoreImageRepo.test_add_updates_acls", "glance.tests.unit.v2.test_image_data_resource.TestImageDataSerializer.test_upload", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_get_images_detailed_unauthorized", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_location_with_conflict_image_size", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_upload_safe_kill", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_create_with_location_unknown_scheme", "glance.tests.unit.test_domain_proxy.TestImage.test_proxied_member_repo", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_bad_min_ram_size_create", "glance.tests.unit.test_store_image.TestStoreImage.test_image_change_insert_invalid_location_uri", "glance.tests.unit.v1.test_api.TestImageSerializer.test_image_send_notification", "glance.tests.unit.test_domain_proxy.TestImageMembershipFactory.test_proxy_plain", "glance.tests.unit.v2.test_image_data_resource.TestImagesController.test_download_get_image_location_forbidden", "glance.tests.unit.test_store_image.TestStoreImage.test_image_change_delete_location", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_replace_members_positive", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_member_unauthorized", "glance.tests.unit.test_store_image.TestStoreImage.test_image_get_data", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_delete_protected_props_mix_read", "glance.tests.unit.v2.test_image_data_resource.TestImagesController.test_upload_storage_forbidden", "glance.tests.unit.test_policy.TestImagePolicy.test_get_image_not_allowed", "glance.tests.unit.test_policy.TestContextPolicyEnforcer.test_context_nonadmin_policy_admin", "glance.tests.unit.test_store_image.TestStoreAddToBackend.test_string", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_copy_from_upload_image_unauthorized_with_body", "glance.tests.unit.test_domain_proxy.TestProxyRepoWrapping.test_get", "glance.tests.unit.test_store_image.TestStoreImage.test_image_set_data_location_metadata", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_delete_queued_image_delayed_delete", "glance.tests.unit.test_policy.TestImagePolicy.test_modify_image_allowed", "glance.tests.unit.v2.test_image_data_resource.TestImagesController.test_download_non_existent_image", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_prop_protection_update_noop", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_replace_members_of_image_overlimit", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_delete_image", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_prop_protection_with_detail_and_unpermitted_role", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_check_no_url_info_both_off", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_image_wrong_content_type", "glance.tests.unit.test_store_image.TestStoreImage.test_image_set_data", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_delete_member_of_deleted_image_raises_404", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_props_of_active_image_mutable_for_admin", "glance.tests.unit.test_policy.TestMemberPolicy.test_modify_member_not_allowed", "glance.tests.unit.test_policy.TestMemberPolicy.test_add_member_allowed", "glance.tests.unit.v1.test_api.TestImageSerializer.test_show", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_image_size_mismatch", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_member_with_body", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_check_no_url_info_both_on", "glance.tests.unit.test_store_image.TestStoreImageRepo.test_add_fetches_members_if_private", "glance.tests.unit.test_policy.TestImagePolicy.test_get_images_not_allowed", "glance.tests.unit.test_store_image.TestStoreAddToBackend.test_bad_metadata_not_dict", "glance.tests.unit.test_policy.TestMemberPolicy.test_modify_member_allowed", "glance.tests.unit.test_policy.TestMemberPolicy.test_add_member_not_allowed", "glance.tests.unit.v2.test_image_data_resource.TestImagesController.test_download", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_image_checksum_mismatch", "glance.tests.unit.test_store_image.TestStoreImage.test_image_change_extend_invalid_locations_metadata", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_get_members_of_deleted_image_raises_404", "glance.tests.unit.test_store_image.TestStoreAddToBackend.test_empty", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_member_forbidden_by_policy", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_copy_from_with_location", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_member_allowed_by_policy", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_prop_protection_with_permitted_policy_config", "glance.tests.unit.test_store_image.TestStoreImage.test_image_delete", "glance.tests.unit.test_store_image.TestStoreImage.test_image_change_pop_location", "glance.tests.unit.test_domain_proxy.TestProxyRepoPlain.test_list", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_prop_protection_with_delete_and_unpermitted_read", "glance.tests.unit.test_store_image.TestStoreImage.test_image_change_adding_locations", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_image_no_location_no_image_as_body", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_read_locked_down_protected_prop", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_get_image_members", "glance.tests.unit.test_domain_proxy.TestImageFactory.test_proxy_wrapping", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_prop_protection_with_detail_and_unpermitted_policy", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_bad_image_size", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_delete_deleted_image", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_prop_protection_with_detail_and_permitted_role", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_bad_image_name", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_store_location_not_revealed", "glance.tests.unit.test_store_image.TestImageFactory.test_new_image", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_image_meta_unauthorized", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_image_unauthorized", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_prop_protection_with_update_and_unpermitted_policy", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_container_and_disk_amazon_format_differs", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_get_index_sort_name_asc", "glance.tests.unit.v1.test_api.TestImageSerializer.test_meta", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_update_public_image", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_delete_pending_delete_image", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_prop_protection_with_update_and_permitted_role", "glance.tests.unit.test_policy.TestPolicyEnforcer.test_policy_file_custom_location", "glance.tests.unit.test_policy.TestImagePolicy.test_delete_image_not_allowed", "glance.tests.unit.test_store_image.TestStoreImage.test_image_change_insert_invalid_location_metadata", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_delete_member_on_non_existing_image", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_create_non_protected_prop", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_configured_container_format_bad", "glance.tests.unit.test_policy.TestImagePolicy.test_delete_image_allowed", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_disable_purge_props", "glance.tests.unit.test_store_image.TestStoreMetaDataChecker.test_unicode_dict", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_replace_members_non_existing_image", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_configured_disk_format_good", "glance.tests.unit.test_policy.TestMemberPolicy.test_delete_member_allowed", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_put_image_content_missing_container_type", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_register_and_upload", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_update_locked_down_protected_prop", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_image_zero_size", "glance.tests.unit.test_policy.TestImagePolicy.test_modify_image_not_allowed", "glance.tests.unit.test_policy.TestPolicyEnforcer.test_policy_file_check", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_show_non_exists_image", "glance.tests.unit.test_store_image.TestStoreImage.test_image_change_delete_locations", "glance.tests.unit.test_store_image.TestStoreImage.test_image_change_adding_invalid_location_metadata", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_prop_protection_with_detail_and_permitted_policy", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_image_size_data_exceed_quota_readd", "glance.tests.unit.v1.test_api.TestImageSerializer.test_noop_redact_location", "glance.tests.unit.test_policy.TestContextPolicyEnforcer.test_context_admin_policy_nonadmin", "glance.tests.unit.v2.test_image_data_resource.TestImageDataDeserializer.test_upload_wrong_content_type", "glance.tests.unit.test_store_image.TestStoreAddToBackend.test_list", "glance.tests.unit.test_domain_proxy.TestImageMembershipFactory.test_proxy_both_wrapped", "glance.tests.unit.test_store_image.TestStoreImageRepo.test_add_ignores_acls_if_no_locations", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_post_image_content_missing_disk_format", "glance.tests.unit.test_policy.TestImagePolicy.test_get_image_allowed", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_copy_from_image_authorized_upload_image_authorized", "glance.tests.unit.v2.test_image_data_resource.TestImagesController.test_upload_non_existent_image_before_save", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_get_details_filter_changes_since", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_delete_image_member", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_prop_protection_with_delete_and_permitted_role", "glance.tests.unit.v2.test_image_data_resource.TestImagesController.test_download_forbidden", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_copy_from_upload_image_unauthorized", "glance.tests.unit.test_policy.TestImagePolicy.test_image_set_data", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_upload_to_image_status_saving", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_get_member_images", "glance.tests.unit.v1.test_api.TestImageSerializer.test_redact_location", "glance.tests.unit.test_policy.TestContextPolicyEnforcer.test_context_nonadmin_policy_nonadmin", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_create_with_bad_store_name", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_update_copy_from_unauthorized", "glance.tests.unit.test_policy.TestPolicyEnforcerNoFile.test_policy_file_specified_but_not_found", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_member_non_existing_image", "glance.tests.unit.test_policy.TestImagePolicy.test_new_image_visibility_public_allowed", "glance.tests.unit.test_policy.TestPolicyEnforcer.test_policy_file_custom_rules_default_location", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_prop_protection_with_show_and_permitted_role", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_publicize_image_unauthorized", "glance.tests.unit.test_store_image.TestStoreImage.test_image_change_append_invalid_location_metatdata", "glance.tests.unit.v1.test_api.TestAPIPropertyQuotas.test_update_image_with_too_many_properties_without_purge_props", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_update_data_upload_bad_store_uri", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_image_meta", "glance.tests.unit.test_policy.TestImagePolicy.test_publicize_image_not_allowed", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_bad_container_format", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_delete_protected_props_mix_no_read", "glance.tests.unit.test_policy.TestTaskPolicy.test_add_task_not_allowed", "glance.tests.unit.test_store_image.TestStoreMetaDataChecker.test_unicode_dict_list", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_prop_protection_with_delete_and_unpermitted_delete", "glance.tests.unit.test_policy.TestImagePolicy.test_add_image_not_allowed", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_prop_protection_with_get_and_permitted_role", "glance.tests.unit.test_policy.TestContextPolicyEnforcer.test_context_admin_policy_admin", "glance.tests.unit.test_store_image.TestStoreImage.test_image_change_append_locations", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_prop_protection_with_update_and_unpermitted_role", "glance.tests.unit.test_policy.TestMemberPolicy.test_get_member_not_allowed", "glance.tests.unit.test_policy.TestPolicyEnforcer.test_policy_file_default_rules_default_location", "glance.tests.unit.test_store_image.TestStoreImageRepo.test_save_fetches_members_if_private", "glance.tests.unit.test_domain_proxy.TestProxyRepoPlain.test_remove", "glance.tests.unit.v2.test_image_data_resource.TestImagesController.test_download_no_location", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_replace_members_allowed_by_policy", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_publicize_image_authorized", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_get_images_bad_urls", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_image_size_chunked_data_too_big", "glance.tests.unit.test_store_image.TestStoreImage.test_image_checking_location_exists", "glance.tests.unit.test_store_image.TestStoreMetaDataChecker.test_empty", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_replace_members_of_image", "glance.tests.unit.test_store_image.TestStoreMetaDataChecker.test_unicode_list", "glance.tests.unit.test_policy.TestTaskPolicy.test_get_tasks_not_allowed", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_prop_protection_with_update_and_permitted_policy", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_bad_checksum_prevents_image_creation", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_upload_safe_kill_deleted", "glance.tests.unit.test_store_image.TestStoreImage.test_image_change_remove_location", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_prop_protection_with_delete_and_permitted_policy", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_update_protected_props_mix_no_read", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_publicize_image_unauthorized", "glance.tests.unit.test_store_image.TestStoreMetaDataChecker.test_simple_bad", "glance.tests.unit.test_store_image.TestStoreImage.test_image_change_extend_locations", "glance.tests.unit.test_store_image.TestStoreMetaDataChecker.test_list_bad", "glance.tests.unit.v2.test_image_data_resource.TestImagesController.test_upload_storage_write_denied", "glance.tests.unit.v1.test_api.TestImageSerializer.test_image_send_notification_error", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_image_bad_store", "glance.tests.unit.v2.test_image_data_resource.TestImageDataDeserializer.test_upload_chunked", "glance.tests.unit.v2.test_image_data_resource.TestImagesController.test_upload_no_size", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_prop_protection_update_without_read", "glance.tests.unit.v2.test_image_data_resource.TestImagesController.test_upload_data_exists", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_copy_from_with_nonempty_body", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_update_image_size_header_too_big", "glance.tests.unit.test_domain_proxy.TestProxyRepoWrapping.test_remove", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_bad_min_disk_size_create", "glance.tests.unit.v1.test_api.TestAPIPropertyQuotas.test_update_properties_without_purge_props_overwrite_value", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_get_details_invalid_marker", "glance.tests.unit.test_domain_proxy.TestProxyRepoPlain.test_get", "glance.tests.unit.test_domain_proxy.TestProxyRepoWrapping.test_remove_with_no_result", "glance.tests.unit.test_store_image.TestStoreImageRepo.test_save_updates_acls", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_prop_protection_with_show_and_unpermitted_role", "glance.tests.unit.test_store_image.TestStoreImage.test_image_change_insert_location", "glance.tests.unit.test_store_image.TestStoreImage.test_image_change_adding_invalid_location_uri", "glance.tests.unit.test_store_image.TestStoreImage.test_image_set_data_unknown_size", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_post_image_content_missing_container_type", "glance.tests.unit.v2.test_image_data_resource.TestImagesController.test_restore_image_when_upload_failed", "glance.tests.unit.test_policy.TestTaskPolicy.test_get_task_not_allowed", "glance.tests.unit.test_store_image.TestStoreImage.test_image_get_location_index", "glance.tests.unit.test_policy.TestImagePolicy.test_image_get_data", "glance.tests.unit.test_store_image.TestStoreImage.test_image_get_location_by_index", "glance.tests.unit.test_domain_proxy.TestTaskFactory.test_proxy_wrapping", "glance.tests.unit.test_policy.TestPolicyEnforcerNoFile.test_policy_file_default_not_found", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_update_data_upload_image_unauthorized", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_create_locked_down_protected_prop", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_delete_locked_down_protected_prop", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_get_image_members_allowed_by_policy", "glance.tests.unit.test_policy.TestMemberPolicy.test_get_members_not_allowed", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_get_images_unauthorized", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_bad_min_disk_size_update", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_read_protected_props_leak_with_update", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_prop_protection_with_get_and_unpermitted_role", "glance.tests.unit.test_quota.TestImagePropertyQuotas.test_add_image_too_many_image_properties", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_replace_members", "glance.tests.unit.test_quota.TestImagePropertyQuotas.test_save_image_too_many_image_properties", "glance.tests.unit.test_store_image.TestStoreMetaDataChecker.test_nested_dict_bad", "glance.tests.unit.v2.test_image_data_resource.TestImagesController.test_image_size_limit_exceeded", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_read_non_protected_prop", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_delete_member", "glance.tests.unit.v2.test_image_data_resource.TestImageDataSerializer.test_download", "glance.tests.unit.v1.test_api.TestImageSerializer.test_meta_utf8", "glance.tests.unit.v2.test_image_data_resource.TestImageDataDeserializer.test_upload_with_incorrect_content_length", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_replace_members_bad_request", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_image_size_data_exceed_quota", "glance.tests.unit.test_domain_proxy.TestTaskFactory.test_proxy_plain", "glance.tests.unit.v1.test_api.TestAPIProtectedProps.test_prop_protection_with_create_and_unpermitted_role", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_update_deleted_image", "glance.tests.unit.test_store_image.TestStoreImage.test_image_change_append_invalid_location_uri", "glance.tests.unit.v2.test_image_data_resource.TestImagesController.test_upload_invalid", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_put_image_content_missing_disk_format", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_update_image_size_data_too_big", "glance.tests.unit.v1.test_api.TestImageSerializer.test_show_notify", "glance.tests.unit.test_store_image.TestStoreImage.test_image_get_data_from_second_location", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_active_image_immutable_props_for_user", "glance.tests.unit.v1.test_api.TestFilterValidator.test_filter_validator", "glance.tests.unit.v2.test_image_data_resource.TestImageDataDeserializer.test_upload", "glance.tests.unit.v2.test_image_data_resource.TestImagesController.test_upload_storage_full", "glance.tests.unit.test_store_image.TestStoreImageRepo.test_member_addition_updates_acls", "glance.tests.unit.test_policy.TestTaskPolicy.test_get_tasks_allowed", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_check_no_url_info_direct_url", "glance.tests.unit.test_store_image.TestStoreAddToBackend.test_unicode_dict", "glance.tests.unit.test_domain_proxy.TestImage.test_normal_member_repo", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_replace_members_of_image_unlimited", "glance.tests.unit.test_domain_proxy.TestProxyRepoWrapping.test_list", "glance.tests.unit.test_policy.TestImagePolicy.test_new_image_visibility", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_delete_protected_image", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_bad_disk_format", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_create_with_location_no_container_format", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_image_checksum_and_size_mismatch", "glance.tests.unit.test_policy.TestMemberPolicy.test_delete_member_not_allowed", "glance.tests.unit.test_store_image.TestStoreImageRepo.test_member_removal_updates_acls", "glance.tests.unit.test_policy.TestTaskPolicy.test_add_task_allowed", "glance.tests.unit.test_domain_proxy.TestImageMembershipFactory.test_proxy_wrapped_image", "glance.tests.unit.test_domain_proxy.TestImageMembershipFactory.test_proxy_wrapped_membership", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_get_image_members_not_existing", "glance.tests.unit.v2.test_image_data_resource.TestImageDataDeserializer.test_upload_chunked_with_content_length", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_create_image_with_too_many_properties", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_update_image_size_chunked_data_too_big", "glance.tests.unit.test_policy.TestImagePolicy.test_get_images_allowed", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_delete_member_forbidden_by_policy", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_add_location_with_nonempty_body", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_etag_equals_checksum_header", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_create_with_location_bad_store_uri", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_delete_image_unauthorized", "glance.tests.unit.test_quota.TestImagePropertyQuotas.test_add_image_with_image_property", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_get_index_filter_on_user_defined_properties", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_update_members_of_deleted_image_raises_404", "glance.tests.unit.test_domain_proxy.TestProxyRepoWrapping.test_add", "glance.tests.unit.test_policy.TestImagePolicy.test_publicize_image_allowed", "glance.tests.unit.v1.test_api.TestGlanceAPI.test_show_image_unauthorized"]}
{"ecosystem": "maven", "repo": "tomcat", "instance_id": "tomcat_981", "original_commit_message": "Move check for current streams to end of header parsing.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/java/org/apache/coyote/http2/Http2Parser.java b/java/org/apache/coyote/http2/Http2Parser.java\nindex e2b7c5b857..fa828c93a6 100644\n--- a/java/org/apache/coyote/http2/Http2Parser.java\n+++ b/java/org/apache/coyote/http2/Http2Parser.java\n@@ -737,7 +737,7 @@ class Http2Parser {\n         HeaderEmitter headersStart(int streamId, boolean headersEndStream)\n                 throws Http2Exception, IOException;\n         void headersContinue(int payloadSize, boolean endOfHeaders);\n-        void headersEnd(int streamId) throws ConnectionException;\n+        void headersEnd(int streamId) throws Http2Exception;\n \n         // Priority frames (also headers)\n         void reprioritise(int streamId, int parentStreamId, boolean exclusive, int weight)\n\ndiff --git a/java/org/apache/coyote/http2/Http2UpgradeHandler.java b/java/org/apache/coyote/http2/Http2UpgradeHandler.java\nindex f50601bb6d..dd3eb8e77b 100644\n--- a/java/org/apache/coyote/http2/Http2UpgradeHandler.java\n+++ b/java/org/apache/coyote/http2/Http2UpgradeHandler.java\n@@ -1450,16 +1450,6 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH\n             stream.checkState(FrameType.HEADERS);\n             stream.receivedStartOfHeaders(headersEndStream);\n             closeIdleStreams(streamId);\n-            if (localSettings.getMaxConcurrentStreams() < activeRemoteStreamCount.incrementAndGet()) {\n-                setConnectionTimeoutForStreamCount(activeRemoteStreamCount.decrementAndGet());\n-                // Ignoring maxConcurrentStreams increases the overhead count\n-                increaseOverheadCount();\n-                throw new StreamException(sm.getString(\"upgradeHandler.tooManyRemoteStreams\",\n-                        Long.toString(localSettings.getMaxConcurrentStreams())),\n-                        Http2Error.REFUSED_STREAM, streamId);\n-            }\n-            // Valid new stream reduces the overhead count\n-            reduceOverheadCount();\n             return stream;\n         } else {\n             if (log.isDebugEnabled()) {\n@@ -1527,12 +1517,24 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH\n \n \n     @Override\n-    public void headersEnd(int streamId) throws ConnectionException {\n+    public void headersEnd(int streamId) throws Http2Exception {\n         Stream stream = getStream(streamId, connectionState.get().isNewStreamAllowed());\n         if (stream != null) {\n             setMaxProcessedStream(streamId);\n             if (stream.isActive()) {\n                 if (stream.receivedEndOfHeaders()) {\n+\n+                    if (localSettings.getMaxConcurrentStreams() < activeRemoteStreamCount.incrementAndGet()) {\n+                        setConnectionTimeoutForStreamCount(activeRemoteStreamCount.decrementAndGet());\n+                        // Ignoring maxConcurrentStreams increases the overhead count\n+                        increaseOverheadCount();\n+                        throw new StreamException(sm.getString(\"upgradeHandler.tooManyRemoteStreams\",\n+                                Long.toString(localSettings.getMaxConcurrentStreams())),\n+                                Http2Error.REFUSED_STREAM, streamId);\n+                    }\n+                    // Valid new stream reduces the overhead count\n+                    reduceOverheadCount();\n+\n                     processStreamOnContainerThread(stream);\n                 }\n             }\n\n\n</patch>\n<test_patch>\ndiff --git a/test/org/apache/coyote/http2/TestHttp2Section_5_1.java b/test/org/apache/coyote/http2/TestHttp2Section_5_1.java\nindex f878653ecf..0b937a9fb9 100644\n--- a/test/org/apache/coyote/http2/TestHttp2Section_5_1.java\n+++ b/test/org/apache/coyote/http2/TestHttp2Section_5_1.java\n@@ -222,11 +222,11 @@ public class TestHttp2Section_5_1 extends Http2TestBase {\n         // Expecting\n         // 1 * headers\n         // 56k-1 of body (7 * ~8k)\n-        // 1 * error (could be in any order)\n-        for (int i = 0; i < 8; i++) {\n+        // 1 * error\n+        // for a total of 9 frames (could be in any order)\n+        for (int i = 0; i < 9; i++) {\n             parser.readFrame(true);\n         }\n-        parser.readFrame(true);\n \n         Assert.assertTrue(output.getTrace(),\n                 output.getTrace().contains(\"5-RST-[\" +\n@@ -238,14 +238,20 @@ public class TestHttp2Section_5_1 extends Http2TestBase {\n \n         // Release the remaining body\n         sendWindowUpdate(0, (1 << 31) - 2);\n-        // Allow for the 8k still in the stream window\n+        // Allow for the ~8k still in the stream window\n         sendWindowUpdate(3, (1 << 31) - 8193);\n \n-        // 192k of body (24 * 8k)\n-        // 1 * error (could be in any order)\n-        for (int i = 0; i < 24; i++) {\n+        // Read until the end of stream 3\n+        while (!output.getTrace().contains(\"3-EndOfStream\")) {\n             parser.readFrame(true);\n         }\n+        output.clearTrace();\n+\n+        // Confirm another request can be sent once concurrency falls back below limit\n+        sendSimpleGetRequest(7);\n+        parser.readFrame(true);\n+        parser.readFrame(true);\n+        Assert.assertEquals(getSimpleResponseTrace(7), output.getTrace());\n     }\n \n \n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "1bbc650cbc3f08d85a1ec6d803c47ae53a84f3bb", "source_date": "Mon Aug 17 16:09:30 2020 +0100", "source_tag": "10.0.0", "target_commit": "55911430df13f8c9998fbdee1f9716994d2db59b", "target_date": "Mon Aug 17 19:48:40 2020 +0100", "target_tag": "9.0.38", "FAIL TO PASS": ["testExceedMaxActiveStreams[0]"], "PASS TO PASS": ["testErrorOnWaitingStream[0]", "halfClosedRemoteInvalidFrame[0]", "testClosedInvalidFrame01[0]", "testIdleStateInvalidFrame02[0]", "testImplicitClose[0]", "testIdleStateInvalidFrame01[0]", "testImplicitCloseLargeId[0]", "testClientSendEvenStream[0]", "testClosedInvalidFrame02[0]", "testClientSendOldStream[0]"]}
{"ecosystem": "maven", "repo": "tomcat", "instance_id": "tomcat_980", "original_commit_message": "Move check for current streams to end of header parsing.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/java/org/apache/coyote/http2/Http2Parser.java b/java/org/apache/coyote/http2/Http2Parser.java\nindex d6bdf0da60..38f0b1325b 100644\n--- a/java/org/apache/coyote/http2/Http2Parser.java\n+++ b/java/org/apache/coyote/http2/Http2Parser.java\n@@ -737,7 +737,7 @@ class Http2Parser {\n         HeaderEmitter headersStart(int streamId, boolean headersEndStream)\n                 throws Http2Exception, IOException;\n         void headersContinue(int payloadSize, boolean endOfHeaders);\n-        void headersEnd(int streamId) throws ConnectionException;\n+        void headersEnd(int streamId) throws Http2Exception;\n \n         // Priority frames (also headers)\n         void reprioritise(int streamId, int parentStreamId, boolean exclusive, int weight)\n\ndiff --git a/java/org/apache/coyote/http2/Http2UpgradeHandler.java b/java/org/apache/coyote/http2/Http2UpgradeHandler.java\nindex f0d5f27bda..b92bd2b545 100644\n--- a/java/org/apache/coyote/http2/Http2UpgradeHandler.java\n+++ b/java/org/apache/coyote/http2/Http2UpgradeHandler.java\n@@ -1450,16 +1450,6 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH\n             stream.checkState(FrameType.HEADERS);\n             stream.receivedStartOfHeaders(headersEndStream);\n             closeIdleStreams(streamId);\n-            if (localSettings.getMaxConcurrentStreams() < activeRemoteStreamCount.incrementAndGet()) {\n-                setConnectionTimeoutForStreamCount(activeRemoteStreamCount.decrementAndGet());\n-                // Ignoring maxConcurrentStreams increases the overhead count\n-                increaseOverheadCount();\n-                throw new StreamException(sm.getString(\"upgradeHandler.tooManyRemoteStreams\",\n-                        Long.toString(localSettings.getMaxConcurrentStreams())),\n-                        Http2Error.REFUSED_STREAM, streamId);\n-            }\n-            // Valid new stream reduces the overhead count\n-            reduceOverheadCount();\n             return stream;\n         } else {\n             if (log.isDebugEnabled()) {\n@@ -1527,12 +1517,24 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH\n \n \n     @Override\n-    public void headersEnd(int streamId) throws ConnectionException {\n+    public void headersEnd(int streamId) throws Http2Exception {\n         Stream stream = getStream(streamId, connectionState.get().isNewStreamAllowed());\n         if (stream != null) {\n             setMaxProcessedStream(streamId);\n             if (stream.isActive()) {\n                 if (stream.receivedEndOfHeaders()) {\n+\n+                    if (localSettings.getMaxConcurrentStreams() < activeRemoteStreamCount.incrementAndGet()) {\n+                        setConnectionTimeoutForStreamCount(activeRemoteStreamCount.decrementAndGet());\n+                        // Ignoring maxConcurrentStreams increases the overhead count\n+                        increaseOverheadCount();\n+                        throw new StreamException(sm.getString(\"upgradeHandler.tooManyRemoteStreams\",\n+                                Long.toString(localSettings.getMaxConcurrentStreams())),\n+                                Http2Error.REFUSED_STREAM, streamId);\n+                    }\n+                    // Valid new stream reduces the overhead count\n+                    reduceOverheadCount();\n+\n                     processStreamOnContainerThread(stream);\n                 }\n             }\n\n\n</patch>\n<test_patch>\ndiff --git a/test/org/apache/coyote/http2/TestHttp2Section_5_1.java b/test/org/apache/coyote/http2/TestHttp2Section_5_1.java\nindex f878653ecf..0b937a9fb9 100644\n--- a/test/org/apache/coyote/http2/TestHttp2Section_5_1.java\n+++ b/test/org/apache/coyote/http2/TestHttp2Section_5_1.java\n@@ -222,11 +222,11 @@ public class TestHttp2Section_5_1 extends Http2TestBase {\n         // Expecting\n         // 1 * headers\n         // 56k-1 of body (7 * ~8k)\n-        // 1 * error (could be in any order)\n-        for (int i = 0; i < 8; i++) {\n+        // 1 * error\n+        // for a total of 9 frames (could be in any order)\n+        for (int i = 0; i < 9; i++) {\n             parser.readFrame(true);\n         }\n-        parser.readFrame(true);\n \n         Assert.assertTrue(output.getTrace(),\n                 output.getTrace().contains(\"5-RST-[\" +\n@@ -238,14 +238,20 @@ public class TestHttp2Section_5_1 extends Http2TestBase {\n \n         // Release the remaining body\n         sendWindowUpdate(0, (1 << 31) - 2);\n-        // Allow for the 8k still in the stream window\n+        // Allow for the ~8k still in the stream window\n         sendWindowUpdate(3, (1 << 31) - 8193);\n \n-        // 192k of body (24 * 8k)\n-        // 1 * error (could be in any order)\n-        for (int i = 0; i < 24; i++) {\n+        // Read until the end of stream 3\n+        while (!output.getTrace().contains(\"3-EndOfStream\")) {\n             parser.readFrame(true);\n         }\n+        output.clearTrace();\n+\n+        // Confirm another request can be sent once concurrency falls back below limit\n+        sendSimpleGetRequest(7);\n+        parser.readFrame(true);\n+        parser.readFrame(true);\n+        Assert.assertEquals(getSimpleResponseTrace(7), output.getTrace());\n     }\n \n \n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "55911430df13f8c9998fbdee1f9716994d2db59b", "source_date": "Mon Aug 17 19:48:40 2020 +0100", "source_tag": "9.0.38", "target_commit": "9d7def063b47407a09a2f9202beed99f4dcb292a", "target_date": "Mon Aug 17 19:49:12 2020 +0100", "target_tag": "8.5.58", "FAIL TO PASS": ["testExceedMaxActiveStreams"], "PASS TO PASS": ["testImplicitCloseLargeId", "testClosedInvalidFrame01", "testIdleStateInvalidFrame02", "testClosedInvalidFrame02", "halfClosedRemoteInvalidFrame", "testIdleStateInvalidFrame01", "testClientSendEvenStream", "testImplicitClose", "testErrorOnWaitingStream", "testClientSendOldStream"]}
{"ecosystem": "maven", "repo": "tomcat", "instance_id": "tomcat_983", "original_commit_message": "Ensure ReadListener.onError() is fired if client drops the connection", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/java/org/apache/coyote/http11/Http11InputBuffer.java b/java/org/apache/coyote/http11/Http11InputBuffer.java\nindex c12df8aff5..e3ace89237 100644\n--- a/java/org/apache/coyote/http11/Http11InputBuffer.java\n+++ b/java/org/apache/coyote/http11/Http11InputBuffer.java\n@@ -761,11 +761,13 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler\n     private boolean fill(boolean block) throws IOException {\n \n         if (log.isDebugEnabled()) {\n-            log.debug(\"Before fill(): [\" + parsingHeader +\n+            log.debug(\"Before fill(): parsingHeader: [\" + parsingHeader +\n                     \"], parsingRequestLine: [\" + parsingRequestLine +\n                     \"], parsingRequestLinePhase: [\" + parsingRequestLinePhase +\n                     \"], parsingRequestLineStart: [\" + parsingRequestLineStart +\n-                    \"], byteBuffer.position() [\" + byteBuffer.position() + \"]\");\n+                    \"], byteBuffer.position(): [\" + byteBuffer.position() +\n+                    \"], byteBuffer.limit(): [\" + byteBuffer.limit() +\n+                    \"], end: [\" + end + \"]\");\n         }\n \n         if (parsingHeader) {\n@@ -780,19 +782,25 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler\n             byteBuffer.limit(end).position(end);\n         }\n \n-        byteBuffer.mark();\n-        if (byteBuffer.position() < byteBuffer.limit()) {\n-            byteBuffer.position(byteBuffer.limit());\n-        }\n-        byteBuffer.limit(byteBuffer.capacity());\n-        SocketWrapperBase<?> socketWrapper = this.wrapper;\n         int nRead = -1;\n-        if (socketWrapper != null) {\n-            nRead = socketWrapper.read(block, byteBuffer);\n-        } else {\n-            throw new CloseNowException(sm.getString(\"iib.eof.error\"));\n+        byteBuffer.mark();\n+        try {\n+            if (byteBuffer.position() < byteBuffer.limit()) {\n+                byteBuffer.position(byteBuffer.limit());\n+            }\n+            byteBuffer.limit(byteBuffer.capacity());\n+            SocketWrapperBase<?> socketWrapper = this.wrapper;\n+            if (socketWrapper != null) {\n+                nRead = socketWrapper.read(block, byteBuffer);\n+            } else {\n+                throw new CloseNowException(sm.getString(\"iib.eof.error\"));\n+            }\n+        } finally {\n+            // Ensure that the buffer limit and position are returned to a\n+            // consistent \"ready for read\" state if an error occurs during in\n+            // the above code block.\n+            byteBuffer.limit(byteBuffer.position()).reset();\n         }\n-        byteBuffer.limit(byteBuffer.position()).reset();\n \n         if (log.isDebugEnabled()) {\n             log.debug(\"Received [\"\n\n\n</patch>\n<test_patch>\ndiff --git a/test/org/apache/catalina/core/TestAsyncContextImpl.java b/test/org/apache/catalina/core/TestAsyncContextImpl.java\nindex c8607e7958..e242917302 100644\n--- a/test/org/apache/catalina/core/TestAsyncContextImpl.java\n+++ b/test/org/apache/catalina/core/TestAsyncContextImpl.java\n@@ -17,6 +17,7 @@\n package org.apache.catalina.core;\n \n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.PrintWriter;\n import java.net.URI;\n import java.net.URISyntaxException;\n@@ -866,7 +867,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {\n         }\n     }\n \n-    private static class TrackingListener implements AsyncListener {\n+    public static class TrackingListener implements AsyncListener {\n \n         private final boolean completeOnError;\n         private final boolean completeOnTimeout;\n@@ -3016,4 +3017,171 @@ public class TestAsyncContextImpl extends TomcatBaseTest {\n         }\n     }\n \n+\n+    /*\n+     * Tests an error on an async thread when the client closes the connection\n+     * before fully writing the request body.\n+     *\n+     * Required sequence is:\n+     * - enter Servlet's service() method\n+     * - startAsync()\n+     * - start async thread\n+     * - read partial body\n+     * - close client connection\n+     * - read on async thread -> I/O error\n+     * - exit Servlet's service() method\n+     *\n+     * This test makes extensive use of instance fields in the Servlet that\n+     * would normally be considered very poor practice. It is only safe in this\n+     * test as the Servlet only processes a single request.\n+     */\n+    @Test\n+    public void testCanceledPost() throws Exception {\n+        CountDownLatch partialReadLatch = new CountDownLatch(1);\n+        CountDownLatch clientCloseLatch = new CountDownLatch(1);\n+        CountDownLatch threadCompleteLatch = new CountDownLatch(1);\n+\n+        AtomicBoolean testFailed = new AtomicBoolean(true);\n+\n+        // Setup Tomcat instance\n+        Tomcat tomcat = getTomcatInstance();\n+\n+        // No file system docBase required\n+        Context ctx = tomcat.addContext(\"\", null);\n+\n+        PostServlet postServlet = new PostServlet(partialReadLatch, clientCloseLatch, threadCompleteLatch, testFailed);\n+        Wrapper wrapper = Tomcat.addServlet(ctx, \"postServlet\", postServlet);\n+        wrapper.setAsyncSupported(true);\n+        ctx.addServletMappingDecoded(\"/*\", \"postServlet\");\n+\n+        tomcat.start();\n+\n+        PostClient client = new PostClient();\n+        client.setPort(getPort());\n+        client.setRequest(new String[] { \"POST / HTTP/1.1\" + SimpleHttpClient.CRLF +\n+                                         \"Host: localhost:\" + SimpleHttpClient.CRLF +\n+                                         \"Content-Length: 100\" + SimpleHttpClient.CRLF +\n+                                         SimpleHttpClient.CRLF +\n+                                         \"This is 16 bytes\"\n+                                         });\n+        client.connect();\n+        client.sendRequest();\n+\n+        // Wait server to read partial request body\n+        partialReadLatch.await();\n+\n+        client.disconnect();\n+\n+        clientCloseLatch.countDown();\n+\n+        threadCompleteLatch.await();\n+\n+        Assert.assertFalse(testFailed.get());\n+    }\n+\n+\n+    private static final class PostClient extends SimpleHttpClient {\n+\n+        @Override\n+        public boolean isResponseBodyOK() {\n+            return true;\n+        }\n+    }\n+\n+\n+    private static final class PostServlet extends HttpServlet {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        private final transient CountDownLatch partialReadLatch;\n+        private final transient CountDownLatch clientCloseLatch;\n+        private final transient CountDownLatch threadCompleteLatch;\n+        private final AtomicBoolean testFailed;\n+\n+        public PostServlet(CountDownLatch doPostLatch, CountDownLatch clientCloseLatch,\n+                CountDownLatch threadCompleteLatch, AtomicBoolean testFailed) {\n+            this.partialReadLatch = doPostLatch;\n+            this.clientCloseLatch = clientCloseLatch;\n+            this.threadCompleteLatch = threadCompleteLatch;\n+            this.testFailed = testFailed;\n+        }\n+\n+        @Override\n+        protected void doPost(HttpServletRequest req, HttpServletResponse resp)\n+                throws ServletException, IOException {\n+\n+            AsyncContext ac = req.startAsync();\n+            Thread t = new PostServletThread(ac, partialReadLatch, clientCloseLatch, threadCompleteLatch, testFailed);\n+            t.start();\n+\n+            try {\n+                threadCompleteLatch.await();\n+            } catch (InterruptedException e) {\n+                // Ignore\n+            }\n+        }\n+    }\n+\n+\n+    private static final class PostServletThread extends Thread {\n+\n+        private final AsyncContext ac;\n+        private final CountDownLatch partialReadLatch;\n+        private final CountDownLatch clientCloseLatch;\n+        private final CountDownLatch threadCompleteLatch;\n+        private final AtomicBoolean testFailed;\n+\n+        public PostServletThread(AsyncContext ac, CountDownLatch partialReadLatch, CountDownLatch clientCloseLatch,\n+                CountDownLatch threadCompleteLatch, AtomicBoolean testFailed) {\n+            this.ac = ac;\n+            this.partialReadLatch = partialReadLatch;\n+            this.clientCloseLatch = clientCloseLatch;\n+            this.threadCompleteLatch = threadCompleteLatch;\n+            this.testFailed = testFailed;\n+        }\n+\n+        @Override\n+        public void run() {\n+            try {\n+                int bytesRead = 0;\n+                byte[] buffer = new byte[32];\n+                InputStream is = null;\n+\n+                try {\n+                    is = ac.getRequest().getInputStream();\n+\n+                    // Read the partial request body\n+                    while (bytesRead < 16) {\n+                        int read = is.read(buffer);\n+                        if (read == -1) {\n+                            // Error condition\n+                            return;\n+                        }\n+                        bytesRead += read;\n+                    }\n+                } catch (IOException ioe) {\n+                    // Error condition\n+                    return;\n+                } finally {\n+                    partialReadLatch.countDown();\n+                }\n+\n+                // Wait for client to close connection\n+                clientCloseLatch.await();\n+\n+                // Read again\n+                try {\n+                    is.read();\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                    // Required. Clear the error marker.\n+                    testFailed.set(false);\n+                }\n+            } catch (InterruptedException e) {\n+                // Ignore\n+            } finally {\n+                threadCompleteLatch.countDown();\n+            }\n+        }\n+    }\n }\n\ndiff --git a/test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java b/test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java\nindex 99329bdfb7..0578b5f4bf 100644\n--- a/test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java\n+++ b/test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java\n@@ -32,7 +32,10 @@ import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Level;\n+import java.util.logging.LogManager;\n \n import javax.net.SocketFactory;\n \n@@ -46,6 +49,7 @@ import jakarta.servlet.ServletInputStream;\n import jakarta.servlet.ServletOutputStream;\n import jakarta.servlet.WriteListener;\n import jakarta.servlet.annotation.WebServlet;\n+import jakarta.servlet.http.HttpServlet;\n import jakarta.servlet.http.HttpServletRequest;\n import jakarta.servlet.http.HttpServletResponse;\n \n@@ -54,7 +58,9 @@ import org.junit.Ignore;\n import org.junit.Test;\n \n import org.apache.catalina.Context;\n+import org.apache.catalina.Wrapper;\n import org.apache.catalina.startup.BytesStreamer;\n+import org.apache.catalina.startup.SimpleHttpClient;\n import org.apache.catalina.startup.TesterServlet;\n import org.apache.catalina.startup.Tomcat;\n import org.apache.catalina.startup.TomcatBaseTest;\n@@ -1114,4 +1120,190 @@ public class TestNonBlockingAPI extends TomcatBaseTest {\n \n         }\n     }\n+\n+\n+    /*\n+     * Tests an error on an non-blocking read when the client closes the\n+     * connection before fully writing the request body.\n+     *\n+     * Required sequence is:\n+     * - enter Servlet's service() method\n+     * - startAsync()\n+     * - configure non-blocking read\n+     * - read partial body\n+     * - close client connection\n+     * - error is triggered\n+     * - exit Servlet's service() method\n+     *\n+     * This test makes extensive use of instance fields in the Servlet that\n+     * would normally be considered very poor practice. It is only safe in this\n+     * test as the Servlet only processes a single request.\n+     */\n+    @Test\n+    public void testCanceledPost() throws Exception {\n+\n+        LogManager.getLogManager().getLogger(\"org.apache.coyote\").setLevel(Level.ALL);\n+        LogManager.getLogManager().getLogger(\"org.apache.tomcat.util.net\").setLevel(Level.ALL);\n+\n+        CountDownLatch partialReadLatch = new CountDownLatch(1);\n+        CountDownLatch completeLatch = new CountDownLatch(1);\n+\n+        AtomicBoolean testFailed = new AtomicBoolean(true);\n+\n+        // Setup Tomcat instance\n+        Tomcat tomcat = getTomcatInstance();\n+\n+        // No file system docBase required\n+        Context ctx = tomcat.addContext(\"\", null);\n+\n+        PostServlet postServlet = new PostServlet(partialReadLatch, completeLatch, testFailed);\n+        Wrapper wrapper = Tomcat.addServlet(ctx, \"postServlet\", postServlet);\n+        wrapper.setAsyncSupported(true);\n+        ctx.addServletMappingDecoded(\"/*\", \"postServlet\");\n+\n+        tomcat.start();\n+\n+        PostClient client = new PostClient();\n+        client.setPort(getPort());\n+        client.setRequest(new String[] { \"POST / HTTP/1.1\" + SimpleHttpClient.CRLF +\n+                                         \"Host: localhost:\" + SimpleHttpClient.CRLF +\n+                                         \"Content-Length: 100\" + SimpleHttpClient.CRLF +\n+                                         SimpleHttpClient.CRLF +\n+                                         \"This is 16 bytes\"\n+                                         });\n+        client.connect();\n+        client.sendRequest();\n+\n+        // Wait server to read partial request body\n+        partialReadLatch.await();\n+\n+        client.disconnect();\n+\n+        completeLatch.await();\n+\n+        Assert.assertFalse(testFailed.get());\n+    }\n+\n+\n+    private static final class PostClient extends SimpleHttpClient {\n+\n+        @Override\n+        public boolean isResponseBodyOK() {\n+            return true;\n+        }\n+    }\n+\n+\n+    private static final class PostServlet extends HttpServlet {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        private final transient CountDownLatch partialReadLatch;\n+        private final transient CountDownLatch completeLatch;\n+        private final AtomicBoolean testFailed;\n+\n+        public PostServlet(CountDownLatch doPostLatch, CountDownLatch completeLatch, AtomicBoolean testFailed) {\n+            this.partialReadLatch = doPostLatch;\n+            this.completeLatch = completeLatch;\n+            this.testFailed = testFailed;\n+        }\n+\n+        @Override\n+        protected void doPost(HttpServletRequest req, HttpServletResponse resp)\n+                throws ServletException, IOException {\n+\n+            AsyncContext ac = req.startAsync();\n+            ac.setTimeout(-1);\n+            CanceledPostAsyncListener asyncListener = new CanceledPostAsyncListener(completeLatch);\n+            ac.addListener(asyncListener);\n+\n+            CanceledPostReadListener readListener = new CanceledPostReadListener(ac, partialReadLatch, testFailed);\n+            req.getInputStream().setReadListener(readListener);\n+        }\n+    }\n+\n+\n+    private static final class CanceledPostAsyncListener implements AsyncListener {\n+\n+        private final transient CountDownLatch completeLatch;\n+\n+        public CanceledPostAsyncListener(CountDownLatch completeLatch) {\n+            this.completeLatch = completeLatch;\n+        }\n+\n+        @Override\n+        public void onComplete(AsyncEvent event) throws IOException {\n+            System.out.println(\"complete\");\n+            completeLatch.countDown();\n+        }\n+\n+        @Override\n+        public void onTimeout(AsyncEvent event) throws IOException {\n+            System.out.println(\"onTimeout\");\n+        }\n+\n+        @Override\n+        public void onError(AsyncEvent event) throws IOException {\n+            System.out.println(\"onError-async\");\n+        }\n+\n+        @Override\n+        public void onStartAsync(AsyncEvent event) throws IOException {\n+            System.out.println(\"onStartAsync\");\n+        }\n+    }\n+\n+    private static final class CanceledPostReadListener implements ReadListener {\n+\n+        private final AsyncContext ac;\n+        private final CountDownLatch partialReadLatch;\n+        private final AtomicBoolean testFailed;\n+        private int totalRead = 0;\n+\n+        public CanceledPostReadListener(AsyncContext ac, CountDownLatch partialReadLatch, AtomicBoolean testFailed) {\n+            this.ac = ac;\n+            this.partialReadLatch = partialReadLatch;\n+            this.testFailed = testFailed;\n+        }\n+\n+        @Override\n+        public void onDataAvailable() throws IOException {\n+            ServletInputStream sis = ac.getRequest().getInputStream();\n+            boolean isReady;\n+\n+            byte[] buffer = new byte[32];\n+            do {\n+                if (partialReadLatch.getCount() == 0) {\n+                    System.out.println(\"debug\");\n+                }\n+                int bytesRead = sis.read(buffer);\n+\n+                if (bytesRead == -1) {\n+                    return;\n+                }\n+                totalRead += bytesRead;\n+                isReady = sis.isReady();\n+                System.out.println(\"Read [\" + bytesRead +\n+                        \"], buffer [\" + new String(buffer, 0, bytesRead, StandardCharsets.UTF_8) +\n+                        \"], total read [\" + totalRead +\n+                        \"], isReady [\" + isReady + \"]\");\n+            } while (isReady);\n+            if (totalRead == 16) {\n+                partialReadLatch.countDown();\n+            }\n+        }\n+\n+        @Override\n+        public void onAllDataRead() throws IOException {\n+            ac.complete();\n+        }\n+\n+        @Override\n+        public void onError(Throwable throwable) {\n+            throwable.printStackTrace();\n+            // This is the expected behaviour so clear the failed flag.\n+            testFailed.set(false);\n+            ac.complete();\n+        }\n+    }\n }\n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "86ccc43940861703c2be96a5f35384407522125a", "source_date": "Thu Feb 18 16:42:10 2021 +0000", "source_tag": "10.0.3", "target_commit": "ce4b154e7b48f66bd98858626347747cd2514311", "target_date": "Thu Feb 18 16:43:41 2021 +0000", "target_tag": "9.0.44", "FAIL TO PASS": ["testCanceledPost"], "PASS TO PASS": ["testForwardDispatchUrlWithSpaces", "testDispatchErrorWithThreadDouble", "testTimeoutListenerCompleteAsyncDispatch", "testListeners", "testDispatchErrorSingleThenComplete", "testDispatchErrorDouble", "testEmptyDispatchWithCustomRequestResponse", "testBug50753", "testDispatchWithThreadMultiple", "testNonBlockingReadWithDispatch", "testAsyncStartNoComplete", "testDelayedNBWrite", "testNonBlockingWriteWithKeepAlive", "testDispatchWithThreadDouble", "testGetResponseISE", "testNonBlockingWriteError", "testGetRequestISE", "testTimeoutErrorDispatchAsyncComplete", "testNonBlockingRead", "testDispatchErrorMultiple", "testBug51197a", "testDispatchErrorMultipleThenComplete", "testBug51197c", "testAsyncIoEnd03", "testBug63816", "testBug61185", "testTimeoutErrorDispatchNonAsync", "testTimeoutErrorDispatchNone", "testNonBlockingReadIgnoreIsReady", "testAsyncIoEnd00", "testTimeoutErrorDispatchAsyncDispatch", "testAsyncRequestURI_24", "testBug55438NonBlockingReadWriteEmptyRead", "testDispatchErrorWithThreadMultipleThenComplete", "testCanceledPost", "testErrorHandling", "testEmptyDispatch", "testBug49567", "testDispatchFromOtherContainerThread", "testAsyncIoEnd01", "testNonBlockingReadAsync", "testTimeoutListenerNoCompleteNonAsyncDispatch", "testAsyncRequestURI_25", "testDispatchErrorWithThreadSingleThenComplete", "testDispatchWithCustomRequestResponse", "testDispatchSingle", "testDispatchErrorDoubleThenComplete", "testTimeoutListenerCompleteNonAsyncDispatch", "testBug54178", "testAsyncContextListenerClearing", "testDispatchErrorWithThreadDoubleThenComplete", "testNonBlockingWrite", "testBug59219a", "testTimeoutDispatchCustomErrorPage", "testDispatchErrorSingle", "testTimeoutNoListener", "testAsyncDispatchUrlWithSpaces", "testTimeoutListenerCompleteNoDispatch", "testCommitOnComplete", "testBug59219b", "testBug53337", "testTimeoutListenerNoCompleteNoDispatch", "testBug53843", "testDispatchErrorWithThreadSingle", "testForbiddenDispatching", "testBug51197b", "testDispatchDouble", "testAsyncIoEnd02", "testBug51197d", "testDispatchWithThreadSingle", "testAsyncListenerSupplyRequestResponse", "testBug49528", "testTimeoutErrorDispatchAsyncStart", "testDispatchErrorWithThreadMultiple", "testAsyncStartWithComplete", "testTimeoutListenerNoCompleteAsyncDispatch", "testBug50352", "testDispatchMultiple"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_472", "original_commit_message": "Fixed CVE-2023-36053 -- Prevented potential ReDoS in EmailValidator and URLValidator.\nThanks Seokchan Yoon for reports.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/core/validators.py b/django/core/validators.py\nindex 0f6515f657..fe8d46526a 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -104,6 +104,7 @@ class URLValidator(RegexValidator):\n     message = _(\"Enter a valid URL.\")\n     schemes = [\"http\", \"https\", \"ftp\", \"ftps\"]\n     unsafe_chars = frozenset(\"\\t\\r\\n\")\n+    max_length = 2048\n \n     def __init__(self, schemes=None, **kwargs):\n         super().__init__(**kwargs)\n@@ -111,7 +112,7 @@ class URLValidator(RegexValidator):\n             self.schemes = schemes\n \n     def __call__(self, value):\n-        if not isinstance(value, str):\n+        if not isinstance(value, str) or len(value) > self.max_length:\n             raise ValidationError(self.message, code=self.code, params={\"value\": value})\n         if self.unsafe_chars.intersection(value):\n             raise ValidationError(self.message, code=self.code, params={\"value\": value})\n@@ -203,7 +204,9 @@ class EmailValidator:\n             self.domain_allowlist = allowlist\n \n     def __call__(self, value):\n-        if not value or \"@\" not in value:\n+        # The maximum length of an email is 320 characters per RFC 3696\n+        # section 3.\n+        if not value or \"@\" not in value or len(value) > 320:\n             raise ValidationError(self.message, code=self.code, params={\"value\": value})\n \n         user_part, domain_part = value.rsplit(\"@\", 1)\n\ndiff --git a/django/forms/fields.py b/django/forms/fields.py\nindex b8316079a3..bd226de543 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -616,6 +616,9 @@ class EmailField(CharField):\n     default_validators = [validators.validate_email]\n \n     def __init__(self, **kwargs):\n+        # The default maximum length of an email is 320 characters per RFC 3696\n+        # section 3.\n+        kwargs.setdefault(\"max_length\", 320)\n         super().__init__(strip=True, **kwargs)\n \n \n\n\n</patch>\n<test_patch>\ndiff --git a/tests/forms_tests/field_tests/test_emailfield.py b/tests/forms_tests/field_tests/test_emailfield.py\nindex 869a1aacc5..079267ca8b 100644\n--- a/tests/forms_tests/field_tests/test_emailfield.py\n+++ b/tests/forms_tests/field_tests/test_emailfield.py\n@@ -8,8 +8,9 @@ from . import FormFieldAssertionsMixin\n class EmailFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n     def test_emailfield_1(self):\n         f = EmailField()\n+        self.assertEqual(f.max_length, 320)\n         self.assertWidgetRendersTo(\n-            f, '<input type=\"email\" name=\"f\" id=\"id_f\" required>'\n+            f, '<input type=\"email\" name=\"f\" id=\"id_f\" maxlength=\"320\" required>'\n         )\n         with self.assertRaisesMessage(ValidationError, \"'This field is required.'\"):\n             f.clean(\"\")\n\ndiff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 5563dc35fd..c283ab20ef 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -546,7 +546,8 @@ class FormsTestCase(SimpleTestCase):\n \n         f = SignupForm(auto_id=False)\n         self.assertHTMLEqual(\n-            str(f[\"email\"]), '<input type=\"email\" name=\"email\" required>'\n+            str(f[\"email\"]),\n+            '<input type=\"email\" name=\"email\" maxlength=\"320\" required>',\n         )\n         self.assertHTMLEqual(\n             str(f[\"get_spam\"]), '<input type=\"checkbox\" name=\"get_spam\" required>'\n@@ -555,7 +556,8 @@ class FormsTestCase(SimpleTestCase):\n         f = SignupForm({\"email\": \"test@example.com\", \"get_spam\": True}, auto_id=False)\n         self.assertHTMLEqual(\n             str(f[\"email\"]),\n-            '<input type=\"email\" name=\"email\" value=\"test@example.com\" required>',\n+            '<input type=\"email\" name=\"email\" maxlength=\"320\" value=\"test@example.com\" '\n+            \"required>\",\n         )\n         self.assertHTMLEqual(\n             str(f[\"get_spam\"]),\n@@ -3521,7 +3523,7 @@ Options: <select multiple name=\"options\" required>\n             <option value=\"false\">No</option>\n             </select></li>\n             <li><label for=\"id_email\">Email:</label>\n-            <input type=\"email\" name=\"email\" id=\"id_email\"></li>\n+            <input type=\"email\" name=\"email\" id=\"id_email\" maxlength=\"320\"></li>\n             <li class=\"required error\"><ul class=\"errorlist\">\n             <li>This field is required.</li></ul>\n             <label class=\"required\" for=\"id_age\">Age:</label>\n@@ -3543,7 +3545,7 @@ Options: <select multiple name=\"options\" required>\n             <option value=\"false\">No</option>\n             </select></p>\n             <p><label for=\"id_email\">Email:</label>\n-            <input type=\"email\" name=\"email\" id=\"id_email\"></p>\n+            <input type=\"email\" name=\"email\" id=\"id_email\" maxlength=\"320\"></p>\n             <ul class=\"errorlist\"><li>This field is required.</li></ul>\n             <p class=\"required error\"><label class=\"required\" for=\"id_age\">Age:</label>\n             <input type=\"number\" name=\"age\" id=\"id_age\" required></p>\n@@ -3563,7 +3565,7 @@ Options: <select multiple name=\"options\" required>\n <option value=\"false\">No</option>\n </select></td></tr>\n <tr><th><label for=\"id_email\">Email:</label></th><td>\n-<input type=\"email\" name=\"email\" id=\"id_email\"></td></tr>\n+<input type=\"email\" name=\"email\" id=\"id_email\" maxlength=\"320\"></td></tr>\n <tr class=\"required error\"><th><label class=\"required\" for=\"id_age\">Age:</label></th>\n <td><ul class=\"errorlist\"><li>This field is required.</li></ul>\n <input type=\"number\" name=\"age\" id=\"id_age\" required></td></tr>\"\"\",\n@@ -3578,7 +3580,7 @@ Options: <select multiple name=\"options\" required>\n             '<option value=\"unknown\" selected>Unknown</option>'\n             '<option value=\"true\">Yes</option><option value=\"false\">No</option>'\n             '</select></div><div><label for=\"id_email\">Email:</label>'\n-            '<input type=\"email\" name=\"email\" id=\"id_email\" /></div>'\n+            '<input type=\"email\" name=\"email\" id=\"id_email\" maxlength=\"320\"/></div>'\n             '<div class=\"required error\"><label for=\"id_age\" class=\"required\">Age:'\n             '</label><ul class=\"errorlist\"><li>This field is required.</li></ul>'\n             '<input type=\"number\" name=\"age\" required id=\"id_age\" /></div>',\n@@ -5094,8 +5096,9 @@ class OverrideTests(SimpleTestCase):\n             '<p>Name: <input type=\"text\" name=\"name\" maxlength=\"50\"></p>'\n             '<div class=\"errorlist\">'\n             '<div class=\"error\">Enter a valid email address.</div></div>'\n-            '<p>Email: <input type=\"email\" name=\"email\" value=\"invalid\" required></p>'\n-            '<div class=\"errorlist\">'\n+            \"<p>Email: \"\n+            '<input type=\"email\" name=\"email\" value=\"invalid\" maxlength=\"320\" required>'\n+            '</p><div class=\"errorlist\">'\n             '<div class=\"error\">This field is required.</div></div>'\n             '<p>Comment: <input type=\"text\" name=\"comment\" required></p>',\n         )\n\ndiff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex af08a785fe..e689435e3c 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -106,6 +106,7 @@ VALID_URLS = [\n     \"ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\"\n     \"ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\"\n     \"ddddddddddddddddd:password@example.com:8080\",\n+    \"http://userid:password\" + \"d\" * 2000 + \"@example.aaaaaaaaaaaaa.com\",\n     \"http://142.42.1.1/\",\n     \"http://142.42.1.1:8080/\",\n     \"http://➡.ws/䨹\",\n@@ -236,6 +237,7 @@ INVALID_URLS = [\n     \"aaaaaa.com\",\n     \"http://example.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n     \"aaaaaa\",\n+    \"http://example.\" + (\"a\" * 63 + \".\") * 1000 + \"com\",\n     \"http://aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaa.\"\n     \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaa\"\n     \"aaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaa\"\n@@ -291,6 +293,7 @@ TEST_DATA = [\n     (validate_email, \"example@%s.%s.atm\" % (\"a\" * 63, \"b\" * 10), None),\n     (validate_email, \"example@atm.%s\" % (\"a\" * 64), ValidationError),\n     (validate_email, \"example@%s.atm.%s\" % (\"b\" * 64, \"a\" * 63), ValidationError),\n+    (validate_email, \"example@%scom\" % ((\"a\" * 63 + \".\") * 100), ValidationError),\n     (validate_email, None, ValidationError),\n     (validate_email, \"\", ValidationError),\n     (validate_email, \"abc\", ValidationError),\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "ad0410ec4f458aa39803e5f6b9a3736527062dcd", "source_date": "Mon Jul 3 08:16:55 2023 +0200", "source_tag": "5.0", "target_commit": "454f2fb93437f98917283336201b4048293f7582", "target_date": "Mon Jul 3 08:32:26 2023 +0200", "target_tag": "3.2.20", "FAIL TO PASS": ["forms_tests.tests.test_forms.FormsTestCase.test_various_boolean_values", "forms_tests.field_tests.test_emailfield.EmailFieldTest.test_emailfield_1", "validators.tests.TestValidators.test_validators", "forms_tests.tests.test_forms.FormsTestCase.test_errorlist_override", "forms_tests.tests.test_forms.FormsTestCase.test_error_html_required_html_classes"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_474", "original_commit_message": "Fixed CVE-2023-36053 -- Prevented potential ReDoS in EmailValidator and URLValidator.\nThanks Seokchan Yoon for reports.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/core/validators.py b/django/core/validators.py\nindex 0f6515f657..fe8d46526a 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -104,6 +104,7 @@ class URLValidator(RegexValidator):\n     message = _(\"Enter a valid URL.\")\n     schemes = [\"http\", \"https\", \"ftp\", \"ftps\"]\n     unsafe_chars = frozenset(\"\\t\\r\\n\")\n+    max_length = 2048\n \n     def __init__(self, schemes=None, **kwargs):\n         super().__init__(**kwargs)\n@@ -111,7 +112,7 @@ class URLValidator(RegexValidator):\n             self.schemes = schemes\n \n     def __call__(self, value):\n-        if not isinstance(value, str):\n+        if not isinstance(value, str) or len(value) > self.max_length:\n             raise ValidationError(self.message, code=self.code, params={\"value\": value})\n         if self.unsafe_chars.intersection(value):\n             raise ValidationError(self.message, code=self.code, params={\"value\": value})\n@@ -203,7 +204,9 @@ class EmailValidator:\n             self.domain_allowlist = allowlist\n \n     def __call__(self, value):\n-        if not value or \"@\" not in value:\n+        # The maximum length of an email is 320 characters per RFC 3696\n+        # section 3.\n+        if not value or \"@\" not in value or len(value) > 320:\n             raise ValidationError(self.message, code=self.code, params={\"value\": value})\n \n         user_part, domain_part = value.rsplit(\"@\", 1)\n\ndiff --git a/django/forms/fields.py b/django/forms/fields.py\nindex b8316079a3..bd226de543 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -616,6 +616,9 @@ class EmailField(CharField):\n     default_validators = [validators.validate_email]\n \n     def __init__(self, **kwargs):\n+        # The default maximum length of an email is 320 characters per RFC 3696\n+        # section 3.\n+        kwargs.setdefault(\"max_length\", 320)\n         super().__init__(strip=True, **kwargs)\n \n \n\n\n</patch>\n<test_patch>\ndiff --git a/tests/forms_tests/field_tests/test_emailfield.py b/tests/forms_tests/field_tests/test_emailfield.py\nindex 869a1aacc5..079267ca8b 100644\n--- a/tests/forms_tests/field_tests/test_emailfield.py\n+++ b/tests/forms_tests/field_tests/test_emailfield.py\n@@ -8,8 +8,9 @@ from . import FormFieldAssertionsMixin\n class EmailFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n     def test_emailfield_1(self):\n         f = EmailField()\n+        self.assertEqual(f.max_length, 320)\n         self.assertWidgetRendersTo(\n-            f, '<input type=\"email\" name=\"f\" id=\"id_f\" required>'\n+            f, '<input type=\"email\" name=\"f\" id=\"id_f\" maxlength=\"320\" required>'\n         )\n         with self.assertRaisesMessage(ValidationError, \"'This field is required.'\"):\n             f.clean(\"\")\n\ndiff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 5563dc35fd..c283ab20ef 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -546,7 +546,8 @@ class FormsTestCase(SimpleTestCase):\n \n         f = SignupForm(auto_id=False)\n         self.assertHTMLEqual(\n-            str(f[\"email\"]), '<input type=\"email\" name=\"email\" required>'\n+            str(f[\"email\"]),\n+            '<input type=\"email\" name=\"email\" maxlength=\"320\" required>',\n         )\n         self.assertHTMLEqual(\n             str(f[\"get_spam\"]), '<input type=\"checkbox\" name=\"get_spam\" required>'\n@@ -555,7 +556,8 @@ class FormsTestCase(SimpleTestCase):\n         f = SignupForm({\"email\": \"test@example.com\", \"get_spam\": True}, auto_id=False)\n         self.assertHTMLEqual(\n             str(f[\"email\"]),\n-            '<input type=\"email\" name=\"email\" value=\"test@example.com\" required>',\n+            '<input type=\"email\" name=\"email\" maxlength=\"320\" value=\"test@example.com\" '\n+            \"required>\",\n         )\n         self.assertHTMLEqual(\n             str(f[\"get_spam\"]),\n@@ -3521,7 +3523,7 @@ Options: <select multiple name=\"options\" required>\n             <option value=\"false\">No</option>\n             </select></li>\n             <li><label for=\"id_email\">Email:</label>\n-            <input type=\"email\" name=\"email\" id=\"id_email\"></li>\n+            <input type=\"email\" name=\"email\" id=\"id_email\" maxlength=\"320\"></li>\n             <li class=\"required error\"><ul class=\"errorlist\">\n             <li>This field is required.</li></ul>\n             <label class=\"required\" for=\"id_age\">Age:</label>\n@@ -3543,7 +3545,7 @@ Options: <select multiple name=\"options\" required>\n             <option value=\"false\">No</option>\n             </select></p>\n             <p><label for=\"id_email\">Email:</label>\n-            <input type=\"email\" name=\"email\" id=\"id_email\"></p>\n+            <input type=\"email\" name=\"email\" id=\"id_email\" maxlength=\"320\"></p>\n             <ul class=\"errorlist\"><li>This field is required.</li></ul>\n             <p class=\"required error\"><label class=\"required\" for=\"id_age\">Age:</label>\n             <input type=\"number\" name=\"age\" id=\"id_age\" required></p>\n@@ -3563,7 +3565,7 @@ Options: <select multiple name=\"options\" required>\n <option value=\"false\">No</option>\n </select></td></tr>\n <tr><th><label for=\"id_email\">Email:</label></th><td>\n-<input type=\"email\" name=\"email\" id=\"id_email\"></td></tr>\n+<input type=\"email\" name=\"email\" id=\"id_email\" maxlength=\"320\"></td></tr>\n <tr class=\"required error\"><th><label class=\"required\" for=\"id_age\">Age:</label></th>\n <td><ul class=\"errorlist\"><li>This field is required.</li></ul>\n <input type=\"number\" name=\"age\" id=\"id_age\" required></td></tr>\"\"\",\n@@ -3578,7 +3580,7 @@ Options: <select multiple name=\"options\" required>\n             '<option value=\"unknown\" selected>Unknown</option>'\n             '<option value=\"true\">Yes</option><option value=\"false\">No</option>'\n             '</select></div><div><label for=\"id_email\">Email:</label>'\n-            '<input type=\"email\" name=\"email\" id=\"id_email\" /></div>'\n+            '<input type=\"email\" name=\"email\" id=\"id_email\" maxlength=\"320\"/></div>'\n             '<div class=\"required error\"><label for=\"id_age\" class=\"required\">Age:'\n             '</label><ul class=\"errorlist\"><li>This field is required.</li></ul>'\n             '<input type=\"number\" name=\"age\" required id=\"id_age\" /></div>',\n@@ -5094,8 +5096,9 @@ class OverrideTests(SimpleTestCase):\n             '<p>Name: <input type=\"text\" name=\"name\" maxlength=\"50\"></p>'\n             '<div class=\"errorlist\">'\n             '<div class=\"error\">Enter a valid email address.</div></div>'\n-            '<p>Email: <input type=\"email\" name=\"email\" value=\"invalid\" required></p>'\n-            '<div class=\"errorlist\">'\n+            \"<p>Email: \"\n+            '<input type=\"email\" name=\"email\" value=\"invalid\" maxlength=\"320\" required>'\n+            '</p><div class=\"errorlist\">'\n             '<div class=\"error\">This field is required.</div></div>'\n             '<p>Comment: <input type=\"text\" name=\"comment\" required></p>',\n         )\n\ndiff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex af08a785fe..e689435e3c 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -106,6 +106,7 @@ VALID_URLS = [\n     \"ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\"\n     \"ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\"\n     \"ddddddddddddddddd:password@example.com:8080\",\n+    \"http://userid:password\" + \"d\" * 2000 + \"@example.aaaaaaaaaaaaa.com\",\n     \"http://142.42.1.1/\",\n     \"http://142.42.1.1:8080/\",\n     \"http://➡.ws/䨹\",\n@@ -236,6 +237,7 @@ INVALID_URLS = [\n     \"aaaaaa.com\",\n     \"http://example.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n     \"aaaaaa\",\n+    \"http://example.\" + (\"a\" * 63 + \".\") * 1000 + \"com\",\n     \"http://aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaa.\"\n     \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaa\"\n     \"aaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaa\"\n@@ -291,6 +293,7 @@ TEST_DATA = [\n     (validate_email, \"example@%s.%s.atm\" % (\"a\" * 63, \"b\" * 10), None),\n     (validate_email, \"example@atm.%s\" % (\"a\" * 64), ValidationError),\n     (validate_email, \"example@%s.atm.%s\" % (\"b\" * 64, \"a\" * 63), ValidationError),\n+    (validate_email, \"example@%scom\" % ((\"a\" * 63 + \".\") * 100), ValidationError),\n     (validate_email, None, ValidationError),\n     (validate_email, \"\", ValidationError),\n     (validate_email, \"abc\", ValidationError),\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "ad0410ec4f458aa39803e5f6b9a3736527062dcd", "source_date": "Mon Jul 3 08:16:55 2023 +0200", "source_tag": "5.0", "target_commit": "beb3f3d55940d9aa7198bf9d424ab74e873aec3d", "target_date": "Mon Jul 3 08:27:05 2023 +0200", "target_tag": "4.1.10", "FAIL TO PASS": ["forms_tests.tests.test_forms.FormsTestCase.test_various_boolean_values", "forms_tests.field_tests.test_emailfield.EmailFieldTest.test_emailfield_1", "validators.tests.TestValidators.test_validators", "forms_tests.tests.test_deprecation_forms.DeprecatedTests.test_errorlist_override_str", "forms_tests.tests.test_forms.OverrideTests.test_errorlist_override", "forms_tests.tests.test_forms.FormsTestCase.test_error_html_required_html_classes"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_476", "original_commit_message": "Fixed CVE-2023-36053 -- Prevented potential ReDoS in EmailValidator and URLValidator.\nThanks Seokchan Yoon for reports.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/core/validators.py b/django/core/validators.py\nindex 0f6515f657..fe8d46526a 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -104,6 +104,7 @@ class URLValidator(RegexValidator):\n     message = _(\"Enter a valid URL.\")\n     schemes = [\"http\", \"https\", \"ftp\", \"ftps\"]\n     unsafe_chars = frozenset(\"\\t\\r\\n\")\n+    max_length = 2048\n \n     def __init__(self, schemes=None, **kwargs):\n         super().__init__(**kwargs)\n@@ -111,7 +112,7 @@ class URLValidator(RegexValidator):\n             self.schemes = schemes\n \n     def __call__(self, value):\n-        if not isinstance(value, str):\n+        if not isinstance(value, str) or len(value) > self.max_length:\n             raise ValidationError(self.message, code=self.code, params={\"value\": value})\n         if self.unsafe_chars.intersection(value):\n             raise ValidationError(self.message, code=self.code, params={\"value\": value})\n@@ -203,7 +204,9 @@ class EmailValidator:\n             self.domain_allowlist = allowlist\n \n     def __call__(self, value):\n-        if not value or \"@\" not in value:\n+        # The maximum length of an email is 320 characters per RFC 3696\n+        # section 3.\n+        if not value or \"@\" not in value or len(value) > 320:\n             raise ValidationError(self.message, code=self.code, params={\"value\": value})\n \n         user_part, domain_part = value.rsplit(\"@\", 1)\n\ndiff --git a/django/forms/fields.py b/django/forms/fields.py\nindex b8316079a3..bd226de543 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -616,6 +616,9 @@ class EmailField(CharField):\n     default_validators = [validators.validate_email]\n \n     def __init__(self, **kwargs):\n+        # The default maximum length of an email is 320 characters per RFC 3696\n+        # section 3.\n+        kwargs.setdefault(\"max_length\", 320)\n         super().__init__(strip=True, **kwargs)\n \n \n\n\n</patch>\n<test_patch>\ndiff --git a/tests/forms_tests/field_tests/test_emailfield.py b/tests/forms_tests/field_tests/test_emailfield.py\nindex 869a1aacc5..079267ca8b 100644\n--- a/tests/forms_tests/field_tests/test_emailfield.py\n+++ b/tests/forms_tests/field_tests/test_emailfield.py\n@@ -8,8 +8,9 @@ from . import FormFieldAssertionsMixin\n class EmailFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n     def test_emailfield_1(self):\n         f = EmailField()\n+        self.assertEqual(f.max_length, 320)\n         self.assertWidgetRendersTo(\n-            f, '<input type=\"email\" name=\"f\" id=\"id_f\" required>'\n+            f, '<input type=\"email\" name=\"f\" id=\"id_f\" maxlength=\"320\" required>'\n         )\n         with self.assertRaisesMessage(ValidationError, \"'This field is required.'\"):\n             f.clean(\"\")\n\ndiff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 5563dc35fd..c283ab20ef 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -546,7 +546,8 @@ class FormsTestCase(SimpleTestCase):\n \n         f = SignupForm(auto_id=False)\n         self.assertHTMLEqual(\n-            str(f[\"email\"]), '<input type=\"email\" name=\"email\" required>'\n+            str(f[\"email\"]),\n+            '<input type=\"email\" name=\"email\" maxlength=\"320\" required>',\n         )\n         self.assertHTMLEqual(\n             str(f[\"get_spam\"]), '<input type=\"checkbox\" name=\"get_spam\" required>'\n@@ -555,7 +556,8 @@ class FormsTestCase(SimpleTestCase):\n         f = SignupForm({\"email\": \"test@example.com\", \"get_spam\": True}, auto_id=False)\n         self.assertHTMLEqual(\n             str(f[\"email\"]),\n-            '<input type=\"email\" name=\"email\" value=\"test@example.com\" required>',\n+            '<input type=\"email\" name=\"email\" maxlength=\"320\" value=\"test@example.com\" '\n+            \"required>\",\n         )\n         self.assertHTMLEqual(\n             str(f[\"get_spam\"]),\n@@ -3521,7 +3523,7 @@ Options: <select multiple name=\"options\" required>\n             <option value=\"false\">No</option>\n             </select></li>\n             <li><label for=\"id_email\">Email:</label>\n-            <input type=\"email\" name=\"email\" id=\"id_email\"></li>\n+            <input type=\"email\" name=\"email\" id=\"id_email\" maxlength=\"320\"></li>\n             <li class=\"required error\"><ul class=\"errorlist\">\n             <li>This field is required.</li></ul>\n             <label class=\"required\" for=\"id_age\">Age:</label>\n@@ -3543,7 +3545,7 @@ Options: <select multiple name=\"options\" required>\n             <option value=\"false\">No</option>\n             </select></p>\n             <p><label for=\"id_email\">Email:</label>\n-            <input type=\"email\" name=\"email\" id=\"id_email\"></p>\n+            <input type=\"email\" name=\"email\" id=\"id_email\" maxlength=\"320\"></p>\n             <ul class=\"errorlist\"><li>This field is required.</li></ul>\n             <p class=\"required error\"><label class=\"required\" for=\"id_age\">Age:</label>\n             <input type=\"number\" name=\"age\" id=\"id_age\" required></p>\n@@ -3563,7 +3565,7 @@ Options: <select multiple name=\"options\" required>\n <option value=\"false\">No</option>\n </select></td></tr>\n <tr><th><label for=\"id_email\">Email:</label></th><td>\n-<input type=\"email\" name=\"email\" id=\"id_email\"></td></tr>\n+<input type=\"email\" name=\"email\" id=\"id_email\" maxlength=\"320\"></td></tr>\n <tr class=\"required error\"><th><label class=\"required\" for=\"id_age\">Age:</label></th>\n <td><ul class=\"errorlist\"><li>This field is required.</li></ul>\n <input type=\"number\" name=\"age\" id=\"id_age\" required></td></tr>\"\"\",\n@@ -3578,7 +3580,7 @@ Options: <select multiple name=\"options\" required>\n             '<option value=\"unknown\" selected>Unknown</option>'\n             '<option value=\"true\">Yes</option><option value=\"false\">No</option>'\n             '</select></div><div><label for=\"id_email\">Email:</label>'\n-            '<input type=\"email\" name=\"email\" id=\"id_email\" /></div>'\n+            '<input type=\"email\" name=\"email\" id=\"id_email\" maxlength=\"320\"/></div>'\n             '<div class=\"required error\"><label for=\"id_age\" class=\"required\">Age:'\n             '</label><ul class=\"errorlist\"><li>This field is required.</li></ul>'\n             '<input type=\"number\" name=\"age\" required id=\"id_age\" /></div>',\n@@ -5094,8 +5096,9 @@ class OverrideTests(SimpleTestCase):\n             '<p>Name: <input type=\"text\" name=\"name\" maxlength=\"50\"></p>'\n             '<div class=\"errorlist\">'\n             '<div class=\"error\">Enter a valid email address.</div></div>'\n-            '<p>Email: <input type=\"email\" name=\"email\" value=\"invalid\" required></p>'\n-            '<div class=\"errorlist\">'\n+            \"<p>Email: \"\n+            '<input type=\"email\" name=\"email\" value=\"invalid\" maxlength=\"320\" required>'\n+            '</p><div class=\"errorlist\">'\n             '<div class=\"error\">This field is required.</div></div>'\n             '<p>Comment: <input type=\"text\" name=\"comment\" required></p>',\n         )\n\ndiff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex af08a785fe..e689435e3c 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -106,6 +106,7 @@ VALID_URLS = [\n     \"ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\"\n     \"ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\"\n     \"ddddddddddddddddd:password@example.com:8080\",\n+    \"http://userid:password\" + \"d\" * 2000 + \"@example.aaaaaaaaaaaaa.com\",\n     \"http://142.42.1.1/\",\n     \"http://142.42.1.1:8080/\",\n     \"http://➡.ws/䨹\",\n@@ -236,6 +237,7 @@ INVALID_URLS = [\n     \"aaaaaa.com\",\n     \"http://example.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n     \"aaaaaa\",\n+    \"http://example.\" + (\"a\" * 63 + \".\") * 1000 + \"com\",\n     \"http://aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaa.\"\n     \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaa\"\n     \"aaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaa\"\n@@ -291,6 +293,7 @@ TEST_DATA = [\n     (validate_email, \"example@%s.%s.atm\" % (\"a\" * 63, \"b\" * 10), None),\n     (validate_email, \"example@atm.%s\" % (\"a\" * 64), ValidationError),\n     (validate_email, \"example@%s.atm.%s\" % (\"b\" * 64, \"a\" * 63), ValidationError),\n+    (validate_email, \"example@%scom\" % ((\"a\" * 63 + \".\") * 100), ValidationError),\n     (validate_email, None, ValidationError),\n     (validate_email, \"\", ValidationError),\n     (validate_email, \"abc\", ValidationError),\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "ad0410ec4f458aa39803e5f6b9a3736527062dcd", "source_date": "Mon Jul 3 08:16:55 2023 +0200", "source_tag": "5.0", "target_commit": "b7c5feb35a31799de6e582ad6a5a91a9de74e0f9", "target_date": "Mon Jul 3 08:19:23 2023 +0200", "target_tag": "4.2.3", "FAIL TO PASS": ["forms_tests.tests.test_forms.FormsTestCase.test_various_boolean_values", "forms_tests.field_tests.test_emailfield.EmailFieldTest.test_emailfield_1", "validators.tests.TestValidators.test_validators", "forms_tests.tests.test_deprecation_forms.DeprecatedTests.test_errorlist_override_str", "forms_tests.tests.test_forms.OverrideTests.test_errorlist_override", "forms_tests.tests.test_forms.FormsTestCase.test_error_html_required_html_classes"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_477", "original_commit_message": "[5.0.x] Fixed CVE-2024-41989 -- Prevented excessive memory consumption in floatformat.\nThanks Elias Myllymäki for the report.\nCo-authored-by: Shai Berger <shai@platonix.com>", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 1f1ea4d7a9..b71c5555f0 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -164,6 +164,19 @@ def floatformat(text, arg=-1):\n     except ValueError:\n         return input_val\n \n+    _, digits, exponent = d.as_tuple()\n+    try:\n+        number_of_digits_and_exponent_sum = len(digits) + abs(exponent)\n+    except TypeError:\n+        # Exponent values can be \"F\", \"n\", \"N\".\n+        number_of_digits_and_exponent_sum = 0\n+\n+    # Values with more than 200 digits, or with a large exponent, are returned \"as is\"\n+    # to avoid high memory consumption and potential denial-of-service attacks.\n+    # The cut-off of 200 is consistent with django.utils.numberformat.floatformat().\n+    if number_of_digits_and_exponent_sum > 200:\n+        return input_val\n+\n     try:\n         m = int(d) - d\n     except (ValueError, OverflowError, InvalidOperation):\n\n\n</patch>\n<test_patch>\ndiff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex db17622309..c22b5dca6b 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -77,6 +77,7 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, 20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n+        self.assertEqual(floatformat(\"1e199\"), \"1\" + \"0\" * 199)\n \n     def test_force_grouping(self):\n         with translation.override(\"en\"):\n@@ -134,6 +135,22 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(pos_inf), \"inf\")\n         self.assertEqual(floatformat(neg_inf), \"-inf\")\n         self.assertEqual(floatformat(pos_inf / pos_inf), \"nan\")\n+        self.assertEqual(floatformat(\"inf\"), \"inf\")\n+        self.assertEqual(floatformat(\"NaN\"), \"NaN\")\n+\n+    def test_too_many_digits_to_render(self):\n+        cases = [\n+            \"1e200\",\n+            \"1E200\",\n+            \"1E10000000000000000\",\n+            \"-1E10000000000000000\",\n+            \"1e10000000000000000\",\n+            \"-1e10000000000000000\",\n+            \"1\" + \"0\" * 1_000_000,\n+        ]\n+        for value in cases:\n+            with self.subTest(value=value):\n+                self.assertEqual(floatformat(value), value)\n \n     def test_float_dunder_method(self):\n         class FloatWrapper:\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "27900fe56f3d3cabb4aeb6ccb82f92bab29073a8", "source_date": "Tue Aug 6 08:51:55 2024 +0200", "source_tag": "5.0.8", "target_commit": "fc76660f589ac07e45e9cd34ccb8087aeb11904b", "target_date": "Wed Jul 31 16:11:59 2024 +0200", "target_tag": "4.2.15", "FAIL TO PASS": ["template_tests.filter_tests.test_floatformat.FunctionTests.test_too_many_digits_to_render"], "PASS TO PASS": []}
{"ecosystem": "maven", "repo": "tomcat", "instance_id": "tomcat_993", "original_commit_message": "Ensure IOException on request read always triggers error handling", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/java/org/apache/catalina/connector/InputBuffer.java b/java/org/apache/catalina/connector/InputBuffer.java\nindex ae1eb27440..e1b3af68e7 100644\n--- a/java/org/apache/catalina/connector/InputBuffer.java\n+++ b/java/org/apache/catalina/connector/InputBuffer.java\n@@ -29,6 +29,7 @@ import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n \n import jakarta.servlet.ReadListener;\n+import jakarta.servlet.RequestDispatcher;\n \n import org.apache.catalina.security.SecurityUtil;\n import org.apache.coyote.ActionCode;\n@@ -308,11 +309,23 @@ public class InputBuffer extends Reader implements ByteChunk.ByteInputChannel, A\n         try {\n             return coyoteRequest.doRead(this);\n         } catch (BadRequestException bre) {\n+            // Set flag used by asynchronous processing to detect errors on non-container threads\n             coyoteRequest.setErrorException(bre);\n+            // In synchronous processing, this exception may be swallowed by the application so set error flags here.\n+            coyoteRequest.setAttribute(RequestDispatcher.ERROR_EXCEPTION, bre);\n+            coyoteRequest.getResponse().setStatus(400);\n+            coyoteRequest.getResponse().setError();\n+            // Make the exception visible to the application\n             throw bre;\n         } catch (IOException ioe) {\n+            // Set flag used by asynchronous processing to detect errors on non-container threads\n             coyoteRequest.setErrorException(ioe);\n+            // In synchronous processing, this exception may be swallowed by the application so set error flags here.\n+            coyoteRequest.setAttribute(RequestDispatcher.ERROR_EXCEPTION, ioe);\n+            coyoteRequest.getResponse().setStatus(400);\n+            coyoteRequest.getResponse().setError();\n             // Any other IOException on a read is almost always due to the remote client aborting the request.\n+            // Make the exception visible to the application\n             throw new ClientAbortException(ioe);\n         }\n     }\n\n\n</patch>\n<test_patch>\ndiff --git a/test/org/apache/coyote/http11/filters/TestChunkedInputFilter.java b/test/org/apache/coyote/http11/filters/TestChunkedInputFilter.java\nindex 2230fe9bc7..3454d8d010 100644\n--- a/test/org/apache/coyote/http11/filters/TestChunkedInputFilter.java\n+++ b/test/org/apache/coyote/http11/filters/TestChunkedInputFilter.java\n@@ -428,6 +428,83 @@ public class TestChunkedInputFilter extends TomcatBaseTest {\n         }\n     }\n \n+\n+    @Test\n+    public void testTrailerHeaderNameNotTokenThrowException() throws Exception {\n+        doTestTrailerHeaderNameNotToken(false);\n+    }\n+\n+    @Test\n+    public void testTrailerHeaderNameNotTokenSwallowException() throws Exception {\n+        doTestTrailerHeaderNameNotToken(true);\n+    }\n+\n+    private void doTestTrailerHeaderNameNotToken(boolean swallowException) throws Exception {\n+\n+        // Setup Tomcat instance\n+        Tomcat tomcat = getTomcatInstance();\n+\n+        // No file system docBase required\n+        Context ctx = tomcat.addContext(\"\", null);\n+\n+        Tomcat.addServlet(ctx, \"servlet\", new SwallowBodyServlet(swallowException));\n+        ctx.addServletMappingDecoded(\"/\", \"servlet\");\n+\n+        tomcat.start();\n+\n+        String[] request = new String[]{\n+            \"POST / HTTP/1.1\" + SimpleHttpClient.CRLF +\n+            \"Host: localhost\" + SimpleHttpClient.CRLF +\n+            \"Transfer-encoding: chunked\" + SimpleHttpClient.CRLF +\n+            \"Content-Type: application/x-www-form-urlencoded\" + SimpleHttpClient.CRLF +\n+            \"Connection: close\" + SimpleHttpClient.CRLF +\n+            SimpleHttpClient.CRLF +\n+            \"3\" + SimpleHttpClient.CRLF +\n+            \"a=0\" + SimpleHttpClient.CRLF +\n+            \"4\" + SimpleHttpClient.CRLF +\n+            \"&b=1\" + SimpleHttpClient.CRLF +\n+            \"0\" + SimpleHttpClient.CRLF +\n+            \"x@trailer: Test\" + SimpleHttpClient.CRLF +\n+            SimpleHttpClient.CRLF };\n+\n+        TrailerClient client = new TrailerClient(tomcat.getConnector().getLocalPort());\n+        client.setRequest(request);\n+\n+        client.connect();\n+        client.processRequest();\n+        // Expected to fail because of invalid trailer header name\n+        Assert.assertTrue(client.getResponseLine(), client.isResponse400());\n+    }\n+\n+    private static class SwallowBodyServlet extends HttpServlet {\n+        private static final long serialVersionUID = 1L;\n+\n+        private final boolean swallowException;\n+\n+        SwallowBodyServlet(boolean swallowException) {\n+            this.swallowException = swallowException;\n+        }\n+\n+        @Override\n+        protected void doPost(HttpServletRequest req, HttpServletResponse resp)\n+                throws ServletException, IOException {\n+            resp.setContentType(\"text/plain\");\n+            PrintWriter pw = resp.getWriter();\n+\n+            // Read the body\n+            InputStream is = req.getInputStream();\n+            try {\n+                while (is.read() > -1) {\n+                }\n+                pw.write(\"OK\");\n+            } catch (IOException ioe) {\n+                if (!swallowException) {\n+                    throw ioe;\n+                }\n+            }\n+        }\n+    }\n+\n     private static class EchoHeaderServlet extends HttpServlet {\n         private static final long serialVersionUID = 1L;\n \n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "namespace changes", "source_commit": "b5776d769bffeade865061bc8ecbeb2b56167b08", "source_date": "Wed Nov 8 15:58:39 2023 +0000", "source_tag": "10.1.16", "target_commit": "7a2d8818fcea0b51747a67af9510ce7977245ebd", "target_date": "Wed Nov 8 16:01:35 2023 +0000", "target_tag": "9.0.83", "FAIL TO PASS": ["testTrailerHeaderNameNotTokenSwallowException"], "PASS TO PASS": ["testNoTrailingHeaders", "testSecondTrailingHeadersLF", "testChunkSizeEightDigit", "testFirstTrailingHeadersCRLF", "testChunkLF", "testChunkHeaderLF", "testTrailingHeadersSizeLimit", "testSecondTrailingHeadersCRLF", "testChunkSizeNineDigit", "testChunkCRLF", "testChunkSizeMinusOne", "testFirstTrailingHeadersLF", "testExtensionSizeLimitOneBelow", "testChunkSizeZero", "testChunkSizeIntegerMinValue", "testChunkSizeAbsent", "testChunkSizeTwentyFive", "testEndLF", "testExtensionSizeLimitExact", "testChunkSizeLong", "testChunkHeaderCRLF", "testExtensionSizeLimitOneOver", "testEndCRLF"]}
{"ecosystem": "maven", "repo": "tomcat", "instance_id": "tomcat_994", "original_commit_message": "Ensure IOException on request read always triggers error handling", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/java/org/apache/catalina/connector/InputBuffer.java b/java/org/apache/catalina/connector/InputBuffer.java\nindex ae1eb27440..e1b3af68e7 100644\n--- a/java/org/apache/catalina/connector/InputBuffer.java\n+++ b/java/org/apache/catalina/connector/InputBuffer.java\n@@ -29,6 +29,7 @@ import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n \n import jakarta.servlet.ReadListener;\n+import jakarta.servlet.RequestDispatcher;\n \n import org.apache.catalina.security.SecurityUtil;\n import org.apache.coyote.ActionCode;\n@@ -308,11 +309,23 @@ public class InputBuffer extends Reader implements ByteChunk.ByteInputChannel, A\n         try {\n             return coyoteRequest.doRead(this);\n         } catch (BadRequestException bre) {\n+            // Set flag used by asynchronous processing to detect errors on non-container threads\n             coyoteRequest.setErrorException(bre);\n+            // In synchronous processing, this exception may be swallowed by the application so set error flags here.\n+            coyoteRequest.setAttribute(RequestDispatcher.ERROR_EXCEPTION, bre);\n+            coyoteRequest.getResponse().setStatus(400);\n+            coyoteRequest.getResponse().setError();\n+            // Make the exception visible to the application\n             throw bre;\n         } catch (IOException ioe) {\n+            // Set flag used by asynchronous processing to detect errors on non-container threads\n             coyoteRequest.setErrorException(ioe);\n+            // In synchronous processing, this exception may be swallowed by the application so set error flags here.\n+            coyoteRequest.setAttribute(RequestDispatcher.ERROR_EXCEPTION, ioe);\n+            coyoteRequest.getResponse().setStatus(400);\n+            coyoteRequest.getResponse().setError();\n             // Any other IOException on a read is almost always due to the remote client aborting the request.\n+            // Make the exception visible to the application\n             throw new ClientAbortException(ioe);\n         }\n     }\n\n\n</patch>\n<test_patch>\ndiff --git a/test/org/apache/coyote/http11/filters/TestChunkedInputFilter.java b/test/org/apache/coyote/http11/filters/TestChunkedInputFilter.java\nindex 2230fe9bc7..3454d8d010 100644\n--- a/test/org/apache/coyote/http11/filters/TestChunkedInputFilter.java\n+++ b/test/org/apache/coyote/http11/filters/TestChunkedInputFilter.java\n@@ -428,6 +428,83 @@ public class TestChunkedInputFilter extends TomcatBaseTest {\n         }\n     }\n \n+\n+    @Test\n+    public void testTrailerHeaderNameNotTokenThrowException() throws Exception {\n+        doTestTrailerHeaderNameNotToken(false);\n+    }\n+\n+    @Test\n+    public void testTrailerHeaderNameNotTokenSwallowException() throws Exception {\n+        doTestTrailerHeaderNameNotToken(true);\n+    }\n+\n+    private void doTestTrailerHeaderNameNotToken(boolean swallowException) throws Exception {\n+\n+        // Setup Tomcat instance\n+        Tomcat tomcat = getTomcatInstance();\n+\n+        // No file system docBase required\n+        Context ctx = tomcat.addContext(\"\", null);\n+\n+        Tomcat.addServlet(ctx, \"servlet\", new SwallowBodyServlet(swallowException));\n+        ctx.addServletMappingDecoded(\"/\", \"servlet\");\n+\n+        tomcat.start();\n+\n+        String[] request = new String[]{\n+            \"POST / HTTP/1.1\" + SimpleHttpClient.CRLF +\n+            \"Host: localhost\" + SimpleHttpClient.CRLF +\n+            \"Transfer-encoding: chunked\" + SimpleHttpClient.CRLF +\n+            \"Content-Type: application/x-www-form-urlencoded\" + SimpleHttpClient.CRLF +\n+            \"Connection: close\" + SimpleHttpClient.CRLF +\n+            SimpleHttpClient.CRLF +\n+            \"3\" + SimpleHttpClient.CRLF +\n+            \"a=0\" + SimpleHttpClient.CRLF +\n+            \"4\" + SimpleHttpClient.CRLF +\n+            \"&b=1\" + SimpleHttpClient.CRLF +\n+            \"0\" + SimpleHttpClient.CRLF +\n+            \"x@trailer: Test\" + SimpleHttpClient.CRLF +\n+            SimpleHttpClient.CRLF };\n+\n+        TrailerClient client = new TrailerClient(tomcat.getConnector().getLocalPort());\n+        client.setRequest(request);\n+\n+        client.connect();\n+        client.processRequest();\n+        // Expected to fail because of invalid trailer header name\n+        Assert.assertTrue(client.getResponseLine(), client.isResponse400());\n+    }\n+\n+    private static class SwallowBodyServlet extends HttpServlet {\n+        private static final long serialVersionUID = 1L;\n+\n+        private final boolean swallowException;\n+\n+        SwallowBodyServlet(boolean swallowException) {\n+            this.swallowException = swallowException;\n+        }\n+\n+        @Override\n+        protected void doPost(HttpServletRequest req, HttpServletResponse resp)\n+                throws ServletException, IOException {\n+            resp.setContentType(\"text/plain\");\n+            PrintWriter pw = resp.getWriter();\n+\n+            // Read the body\n+            InputStream is = req.getInputStream();\n+            try {\n+                while (is.read() > -1) {\n+                }\n+                pw.write(\"OK\");\n+            } catch (IOException ioe) {\n+                if (!swallowException) {\n+                    throw ioe;\n+                }\n+            }\n+        }\n+    }\n+\n     private static class EchoHeaderServlet extends HttpServlet {\n         private static final long serialVersionUID = 1L;\n \n\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "namespace changes", "source_commit": "b5776d769bffeade865061bc8ecbeb2b56167b08", "source_date": "Wed Nov 8 15:58:39 2023 +0000", "source_tag": "10.1.16", "target_commit": "aa92971e879a519384c517febc39fd04c48d4642", "target_date": "Wed Nov 8 16:01:43 2023 +0000", "target_tag": "8.5.96", "FAIL TO PASS": ["testTrailerHeaderNameNotTokenSwallowException"], "PASS TO PASS": ["testNoTrailingHeaders", "testSecondTrailingHeadersLF", "testChunkSizeEightDigit", "testFirstTrailingHeadersCRLF", "testChunkLF", "testChunkHeaderLF", "testTrailingHeadersSizeLimit", "testSecondTrailingHeadersCRLF", "testChunkSizeNineDigit", "testChunkCRLF", "testChunkSizeMinusOne", "testFirstTrailingHeadersLF", "testExtensionSizeLimitOneBelow", "testChunkSizeZero", "testChunkSizeIntegerMinValue", "testChunkSizeAbsent", "testChunkSizeTwentyFive", "testEndLF", "testExtensionSizeLimitExact", "testChunkSizeLong", "testChunkHeaderCRLF", "testExtensionSizeLimitOneOver", "testEndCRLF"]}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_484", "original_commit_message": "[4.0.x] Fixed CVE-2021-45452 -- Fixed potential path traversal in storage subsystem.\nThanks to Dennis Brinkrolf for the report.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex 8ee6443d2b..bbb3e8b21d 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -51,7 +51,10 @@ class Storage:\n             content = File(content, name)\n \n         name = self.get_available_name(name, max_length=max_length)\n-        return self._save(name, content)\n+        name = self._save(name, content)\n+        # Ensure that the name returned from the storage system is still valid.\n+        validate_file_name(name, allow_relative_path=True)\n+        return name\n \n     # These methods are part of the public API, with default implementations.\n \n@@ -75,6 +78,7 @@ class Storage:\n         Return a filename that's free on the target storage system and\n         available for new content to be written to.\n         \"\"\"\n+        name = str(name).replace('\\\\', '/')\n         dir_name, file_name = os.path.split(name)\n         if '..' in pathlib.PurePath(dir_name).parts:\n             raise SuspiciousFileOperation(\"Detected path traversal attempt in '%s'\" % dir_name)\n@@ -108,6 +112,7 @@ class Storage:\n         Validate the filename by calling get_valid_name() and return a filename\n         to be passed to the save() method.\n         \"\"\"\n+        filename = str(filename).replace('\\\\', '/')\n         # `filename` may include a path as returned by FileField.upload_to.\n         dirname, filename = os.path.split(filename)\n         if '..' in pathlib.PurePath(dirname).parts:\n@@ -297,6 +302,8 @@ class FileSystemStorage(Storage):\n         if self.file_permissions_mode is not None:\n             os.chmod(full_path, self.file_permissions_mode)\n \n+        # Ensure the saved path is always relative to the storage root.\n+        name = os.path.relpath(full_path, self.location)\n         # Store filenames with forward slashes, even on Windows.\n         return str(name).replace('\\\\', '/')\n \n\n\n</patch>\n<test_patch>\ndiff --git a/tests/file_storage/test_generate_filename.py b/tests/file_storage/test_generate_filename.py\nindex 66551c495b..78fd064732 100644\n--- a/tests/file_storage/test_generate_filename.py\n+++ b/tests/file_storage/test_generate_filename.py\n@@ -53,13 +53,20 @@ class GenerateFilenameStorageTests(SimpleTestCase):\n                     s.generate_filename(file_name)\n \n     def test_storage_dangerous_paths_dir_name(self):\n-        file_name = '/tmp/../path'\n+        candidates = [\n+            ('tmp/../path', 'tmp/..'),\n+            ('tmp\\\\..\\\\path', 'tmp/..'),\n+            ('/tmp/../path', '/tmp/..'),\n+            ('\\\\tmp\\\\..\\\\path', '/tmp/..'),\n+        ]\n         s = FileSystemStorage()\n-        msg = \"Detected path traversal attempt in '/tmp/..'\"\n-        with self.assertRaisesMessage(SuspiciousFileOperation, msg):\n-            s.get_available_name(file_name)\n-        with self.assertRaisesMessage(SuspiciousFileOperation, msg):\n-            s.generate_filename(file_name)\n+        for file_name, path in candidates:\n+            msg = \"Detected path traversal attempt in '%s'\" % path\n+            with self.subTest(file_name=file_name):\n+                with self.assertRaisesMessage(SuspiciousFileOperation, msg):\n+                    s.get_available_name(file_name)\n+                with self.assertRaisesMessage(SuspiciousFileOperation, msg):\n+                    s.generate_filename(file_name)\n \n     def test_filefield_dangerous_filename(self):\n         candidates = [\n\ndiff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 8969253e2b..66edbb204f 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -298,6 +298,12 @@ class FileStorageTests(SimpleTestCase):\n \n         self.storage.delete('path/to/test.file')\n \n+    def test_file_save_abs_path(self):\n+        test_name = 'path/to/test.file'\n+        f = ContentFile('file saved with path')\n+        f_name = self.storage.save(os.path.join(self.temp_dir, test_name), f)\n+        self.assertEqual(f_name, test_name)\n+\n     @unittest.skipUnless(symlinks_supported(), 'Must be able to symlink to run this test.')\n     def test_file_save_broken_symlink(self):\n         \"\"\"A new path is created on save when a broken symlink is supplied.\"\"\"\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "function location changes", "source_commit": "e1592e0f26302e79856cc7f2218ae848ae19b0f6", "source_date": "Tue Jan 4 10:10:14 2022 +0100", "source_tag": "4.0.1", "target_commit": "4cb35b384ceef52123fc66411a73c36a706825e1", "target_date": "Tue Jan 4 10:20:31 2022 +0100", "target_tag": "2.2.26", "FAIL TO PASS": ["file_storage.tests.FileStorageTests.test_file_save_abs_path", "file_storage.test_generate_filename.GenerateFilenameStorageTests.test_storage_dangerous_paths_dir_name", "file_storage.tests.CustomStorageTests.test_file_save_abs_path", "file_storage.tests.OverwritingStorageTests.test_file_save_abs_path", "file_storage.tests.DiscardingFalseContentStorageTests.test_file_save_abs_path"], "PASS TO PASS": []}
{"ecosystem": "pypi", "repo": "django", "instance_id": "django_485", "original_commit_message": "[4.0.x] Fixed CVE-2021-45452 -- Fixed potential path traversal in storage subsystem.\nThanks to Dennis Brinkrolf for the report.", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex 8ee6443d2b..bbb3e8b21d 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -51,7 +51,10 @@ class Storage:\n             content = File(content, name)\n \n         name = self.get_available_name(name, max_length=max_length)\n-        return self._save(name, content)\n+        name = self._save(name, content)\n+        # Ensure that the name returned from the storage system is still valid.\n+        validate_file_name(name, allow_relative_path=True)\n+        return name\n \n     # These methods are part of the public API, with default implementations.\n \n@@ -75,6 +78,7 @@ class Storage:\n         Return a filename that's free on the target storage system and\n         available for new content to be written to.\n         \"\"\"\n+        name = str(name).replace('\\\\', '/')\n         dir_name, file_name = os.path.split(name)\n         if '..' in pathlib.PurePath(dir_name).parts:\n             raise SuspiciousFileOperation(\"Detected path traversal attempt in '%s'\" % dir_name)\n@@ -108,6 +112,7 @@ class Storage:\n         Validate the filename by calling get_valid_name() and return a filename\n         to be passed to the save() method.\n         \"\"\"\n+        filename = str(filename).replace('\\\\', '/')\n         # `filename` may include a path as returned by FileField.upload_to.\n         dirname, filename = os.path.split(filename)\n         if '..' in pathlib.PurePath(dirname).parts:\n@@ -297,6 +302,8 @@ class FileSystemStorage(Storage):\n         if self.file_permissions_mode is not None:\n             os.chmod(full_path, self.file_permissions_mode)\n \n+        # Ensure the saved path is always relative to the storage root.\n+        name = os.path.relpath(full_path, self.location)\n         # Store filenames with forward slashes, even on Windows.\n         return str(name).replace('\\\\', '/')\n \n\n\n</patch>\n<test_patch>\ndiff --git a/tests/file_storage/test_generate_filename.py b/tests/file_storage/test_generate_filename.py\nindex 66551c495b..78fd064732 100644\n--- a/tests/file_storage/test_generate_filename.py\n+++ b/tests/file_storage/test_generate_filename.py\n@@ -53,13 +53,20 @@ class GenerateFilenameStorageTests(SimpleTestCase):\n                     s.generate_filename(file_name)\n \n     def test_storage_dangerous_paths_dir_name(self):\n-        file_name = '/tmp/../path'\n+        candidates = [\n+            ('tmp/../path', 'tmp/..'),\n+            ('tmp\\\\..\\\\path', 'tmp/..'),\n+            ('/tmp/../path', '/tmp/..'),\n+            ('\\\\tmp\\\\..\\\\path', '/tmp/..'),\n+        ]\n         s = FileSystemStorage()\n-        msg = \"Detected path traversal attempt in '/tmp/..'\"\n-        with self.assertRaisesMessage(SuspiciousFileOperation, msg):\n-            s.get_available_name(file_name)\n-        with self.assertRaisesMessage(SuspiciousFileOperation, msg):\n-            s.generate_filename(file_name)\n+        for file_name, path in candidates:\n+            msg = \"Detected path traversal attempt in '%s'\" % path\n+            with self.subTest(file_name=file_name):\n+                with self.assertRaisesMessage(SuspiciousFileOperation, msg):\n+                    s.get_available_name(file_name)\n+                with self.assertRaisesMessage(SuspiciousFileOperation, msg):\n+                    s.generate_filename(file_name)\n \n     def test_filefield_dangerous_filename(self):\n         candidates = [\n\ndiff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 8969253e2b..66edbb204f 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -298,6 +298,12 @@ class FileStorageTests(SimpleTestCase):\n \n         self.storage.delete('path/to/test.file')\n \n+    def test_file_save_abs_path(self):\n+        test_name = 'path/to/test.file'\n+        f = ContentFile('file saved with path')\n+        f_name = self.storage.save(os.path.join(self.temp_dir, test_name), f)\n+        self.assertEqual(f_name, test_name)\n+\n     @unittest.skipUnless(symlinks_supported(), 'Must be able to symlink to run this test.')\n     def test_file_save_broken_symlink(self):\n         \"\"\"A new path is created on save when a broken symlink is supplied.\"\"\"\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "e1592e0f26302e79856cc7f2218ae848ae19b0f6", "source_date": "Tue Jan 4 10:10:14 2022 +0100", "source_tag": "4.0.1", "target_commit": "8d2f7cff76200cbd2337b2cf1707e383eb1fb54b", "target_date": "Tue Jan 4 10:19:49 2022 +0100", "target_tag": "3.2.11", "FAIL TO PASS": ["file_storage.tests.FileStorageTests.test_file_save_abs_path", "file_storage.test_generate_filename.GenerateFilenameStorageTests.test_storage_dangerous_paths_dir_name", "file_storage.tests.CustomStorageTests.test_file_save_abs_path", "file_storage.tests.OverwritingStorageTests.test_file_save_abs_path", "file_storage.tests.DiscardingFalseContentStorageTests.test_file_save_abs_path"], "PASS TO PASS": []}
{"ecosystem": "maven", "repo": "uaa", "instance_id": "uaa_1005", "original_commit_message": "Improve reset password experience", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/account/UaaResetPasswordService.java b/server/src/main/java/org/cloudfoundry/identity/uaa/account/UaaResetPasswordService.java\nindex c29f96072..7bff4f921 100644\n--- a/server/src/main/java/org/cloudfoundry/identity/uaa/account/UaaResetPasswordService.java\n+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/account/UaaResetPasswordService.java\n@@ -49,6 +49,7 @@ import static org.springframework.util.StringUtils.isEmpty;\n public class UaaResetPasswordService implements ResetPasswordService, ApplicationEventPublisherAware {\n \n     public static final int PASSWORD_RESET_LIFETIME = 30 * 60 * 1000;\n+    public static final String FORGOT_PASSWORD_INTENT_PREFIX = \"forgot_password_for_id:\";\n \n     private final ScimUserProvisioning scimUserProvisioning;\n     private final ExpiringCodeStore expiringCodeStore;\n@@ -141,7 +142,9 @@ public class UaaResetPasswordService implements ResetPasswordService, Applicatio\n         ScimUser scimUser = results.get(0);\n \n         PasswordChange change = new PasswordChange(scimUser.getId(), scimUser.getUserName(), scimUser.getPasswordLastModified(), clientId, redirectUri);\n-        ExpiringCode code = expiringCodeStore.generateCode(JsonUtils.writeValueAsString(change), new Timestamp(System.currentTimeMillis() + PASSWORD_RESET_LIFETIME), null);\n+        String intent = FORGOT_PASSWORD_INTENT_PREFIX+scimUser.getId();\n+        expiringCodeStore.expireByIntent(intent);\n+        ExpiringCode code = expiringCodeStore.generateCode(JsonUtils.writeValueAsString(change), new Timestamp(System.currentTimeMillis() + PASSWORD_RESET_LIFETIME), intent);\n         publish(new ResetPasswordRequestEvent(email, code.getCode(), SecurityContextHolder.getContext().getAuthentication()));\n         return new ForgotPasswordInfo(scimUser.getId(), code);\n     }\n\n\n</patch>\n<test_patch>\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/login/UaaResetPasswordServiceTests.java b/server/src/test/java/org/cloudfoundry/identity/uaa/login/UaaResetPasswordServiceTests.java\nindex b733da009..0943f68d1 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/login/UaaResetPasswordServiceTests.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/login/UaaResetPasswordServiceTests.java\n@@ -12,15 +12,15 @@\n  *******************************************************************************/\n package org.cloudfoundry.identity.uaa.login;\n \n-import org.cloudfoundry.identity.uaa.codestore.ExpiringCode;\n-import org.cloudfoundry.identity.uaa.codestore.ExpiringCodeStore;\n-import org.cloudfoundry.identity.uaa.authentication.InvalidCodeException;\n import org.cloudfoundry.identity.uaa.account.ConflictException;\n import org.cloudfoundry.identity.uaa.account.ForgotPasswordInfo;\n import org.cloudfoundry.identity.uaa.account.NotFoundException;\n import org.cloudfoundry.identity.uaa.account.ResetPasswordService.ResetPasswordResponse;\n import org.cloudfoundry.identity.uaa.account.UaaResetPasswordService;\n import org.cloudfoundry.identity.uaa.account.event.ResetPasswordRequestEvent;\n+import org.cloudfoundry.identity.uaa.authentication.InvalidCodeException;\n+import org.cloudfoundry.identity.uaa.codestore.ExpiringCode;\n+import org.cloudfoundry.identity.uaa.codestore.ExpiringCodeStore;\n import org.cloudfoundry.identity.uaa.scim.ScimMeta;\n import org.cloudfoundry.identity.uaa.scim.ScimUser;\n import org.cloudfoundry.identity.uaa.scim.ScimUserProvisioning;\n@@ -93,18 +93,24 @@ public class UaaResetPasswordServiceTests {\n         when(scimUserProvisioning.query(contains(\"origin\"))).thenReturn(Arrays.asList(user));\n         Timestamp expiresAt = new Timestamp(System.currentTimeMillis());\n \n+        ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);\n+\n         when(codeStore.generateCode(eq(\"{\\\"user_id\\\":\\\"user-id-001\\\",\\\"username\\\":\\\"user@example.com\\\",\\\"passwordModifiedTime\\\":1234,\\\"client_id\\\":\\\"example\\\",\\\"redirect_uri\\\":\\\"redirect.example.com\\\"}\"),\n-                                    any(Timestamp.class), eq(null))).thenReturn(new ExpiringCode(\"code\", expiresAt, \"user-id-001\", null));\n+                                    any(Timestamp.class), anyString())).thenReturn(new ExpiringCode(\"code\", expiresAt, \"user-id-001\", null));\n \n         ForgotPasswordInfo forgotPasswordInfo = emailResetPasswordService.forgotPassword(\"user@example.com\", \"example\", \"redirect.example.com\");\n-        assertThat(forgotPasswordInfo.getUserId(), equalTo(\"user-id-001\"));\n \n+        verify(codeStore).expireByIntent(captor.capture());\n+        assertEquals(UaaResetPasswordService.FORGOT_PASSWORD_INTENT_PREFIX+user.getId(), captor.getValue());\n+        assertThat(forgotPasswordInfo.getUserId(), equalTo(\"user-id-001\"));\n         ExpiringCode resetPasswordCode = forgotPasswordInfo.getResetPasswordCode();\n         assertThat(resetPasswordCode.getCode(), equalTo(\"code\"));\n         assertThat(resetPasswordCode.getExpiresAt(), equalTo(expiresAt));\n         assertThat(resetPasswordCode.getData(), equalTo(\"user-id-001\"));\n     }\n \n+\n+\n     @Test\n     public void forgotPassword_PublishesResetPasswordRequestEvent() throws Exception {\n         ApplicationEventPublisher publisher = mock(ApplicationEventPublisher.class);\n@@ -115,7 +121,7 @@ public class UaaResetPasswordServiceTests {\n         user.setPrimaryEmail(\"user@example.com\");\n         when(scimUserProvisioning.query(contains(\"origin\"))).thenReturn(Arrays.asList(user));\n         Timestamp expiresAt = new Timestamp(System.currentTimeMillis());\n-        when(codeStore.generateCode(anyString(), any(Timestamp.class), eq(null))).thenReturn(new ExpiringCode(\"code\", expiresAt, \"user-id-001\", null));\n+        when(codeStore.generateCode(anyString(), any(Timestamp.class), anyString())).thenReturn(new ExpiringCode(\"code\", expiresAt, \"user-id-001\", null));\n \n         emailResetPasswordService.forgotPassword(\"user@example.com\", \"\", \"\");\n         ArgumentCaptor<ResetPasswordRequestEvent> captor = ArgumentCaptor.forClass(ResetPasswordRequestEvent.class);\n\ndiff --git a/server/src/test/java/org/cloudfoundry/identity/uaa/scim/endpoints/PasswordResetEndpointTest.java b/server/src/test/java/org/cloudfoundry/identity/uaa/scim/endpoints/PasswordResetEndpointTest.java\nindex df6af79c5..9893c5c97 100644\n--- a/server/src/test/java/org/cloudfoundry/identity/uaa/scim/endpoints/PasswordResetEndpointTest.java\n+++ b/server/src/test/java/org/cloudfoundry/identity/uaa/scim/endpoints/PasswordResetEndpointTest.java\n@@ -81,10 +81,10 @@ public class PasswordResetEndpointTest extends TestClassNullifier {\n \n         PasswordChange change = new PasswordChange(\"id001\", \"user@example.com\", yesterday, null, null);\n \n-        when(expiringCodeStore.generateCode(eq(\"id001\"), any(Timestamp.class), eq(null)))\n+        when(expiringCodeStore.generateCode(eq(\"id001\"), any(Timestamp.class), anyString()))\n                 .thenReturn(new ExpiringCode(\"secret_code\", new Timestamp(System.currentTimeMillis() + UaaResetPasswordService.PASSWORD_RESET_LIFETIME), \"id001\", null));\n \n-        when(expiringCodeStore.generateCode(eq(JsonUtils.writeValueAsString(change)), any(Timestamp.class), eq(null)))\n+        when(expiringCodeStore.generateCode(eq(JsonUtils.writeValueAsString(change)), any(Timestamp.class), anyString()))\n             .thenReturn(new ExpiringCode(\"secret_code\", new Timestamp(System.currentTimeMillis() + UaaResetPasswordService.PASSWORD_RESET_LIFETIME), JsonUtils.writeValueAsString(change), null));\n        }\n \n@@ -100,7 +100,7 @@ public class PasswordResetEndpointTest extends TestClassNullifier {\n                 .thenReturn(Arrays.asList(user));\n \n         PasswordChange change = new PasswordChange(\"id001\", email, yesterday, clientId, redirectUri);\n-        when(expiringCodeStore.generateCode(anyString(), any(Timestamp.class), eq(null)))\n+        when(expiringCodeStore.generateCode(anyString(), any(Timestamp.class), anyString()))\n                 .thenReturn(new ExpiringCode(\"secret_code\", new Timestamp(System.currentTimeMillis() + UaaResetPasswordService.PASSWORD_RESET_LIFETIME), JsonUtils.writeValueAsString(change), null));\n \n         MockHttpServletRequestBuilder post = post(\"/password_resets\")\n@@ -113,7 +113,7 @@ public class PasswordResetEndpointTest extends TestClassNullifier {\n         mockMvc.perform(post)\n                 .andExpect(status().isCreated());\n \n-        verify(expiringCodeStore).generateCode(eq(JsonUtils.writeValueAsString(change)), any(Timestamp.class), eq(null));\n+        verify(expiringCodeStore).generateCode(eq(JsonUtils.writeValueAsString(change)), any(Timestamp.class), anyString());\n     }\n \n     @Test\n@@ -137,7 +137,7 @@ public class PasswordResetEndpointTest extends TestClassNullifier {\n         mockMvc.perform(post)\n                 .andExpect(status().isCreated());\n \n-        verify(expiringCodeStore).generateCode(eq(JsonUtils.writeValueAsString(change)), any(Timestamp.class), eq(null));\n+        verify(expiringCodeStore).generateCode(eq(JsonUtils.writeValueAsString(change)), any(Timestamp.class), anyString());\n     }\n \n     @Test\n@@ -206,7 +206,7 @@ public class PasswordResetEndpointTest extends TestClassNullifier {\n             .thenReturn(Arrays.asList(user));\n \n         PasswordChange change = new PasswordChange(\"id001\", \"user\\\"'@example.com\", yesterday, null, null);\n-        when(expiringCodeStore.generateCode(eq(JsonUtils.writeValueAsString(change)), any(Timestamp.class), eq(null)))\n+        when(expiringCodeStore.generateCode(eq(JsonUtils.writeValueAsString(change)), any(Timestamp.class), anyString()))\n             .thenReturn(new ExpiringCode(\"secret_code\", new Timestamp(System.currentTimeMillis() + UaaResetPasswordService.PASSWORD_RESET_LIFETIME), JsonUtils.writeValueAsString(change), null));\n \n         MockHttpServletRequestBuilder post = post(\"/password_resets\")\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/ResetPasswordControllerMockMvcTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/ResetPasswordControllerMockMvcTests.java\nindex 34171b557..56ecc9f2e 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/ResetPasswordControllerMockMvcTests.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/ResetPasswordControllerMockMvcTests.java\n@@ -12,6 +12,7 @@\n  *******************************************************************************/\n package org.cloudfoundry.identity.uaa.login;\n \n+import org.cloudfoundry.identity.uaa.account.UaaResetPasswordService;\n import org.cloudfoundry.identity.uaa.authentication.UaaPrincipal;\n import org.cloudfoundry.identity.uaa.codestore.ExpiringCode;\n import org.cloudfoundry.identity.uaa.codestore.ExpiringCodeStore;\n@@ -20,7 +21,6 @@ import org.cloudfoundry.identity.uaa.constants.OriginKeys;\n import org.cloudfoundry.identity.uaa.mock.InjectedMockContextTest;\n import org.cloudfoundry.identity.uaa.mock.util.MockMvcUtils;\n import org.cloudfoundry.identity.uaa.mock.util.MockMvcUtils.PredictableGenerator;\n-import org.cloudfoundry.identity.uaa.account.UaaResetPasswordService;\n import org.cloudfoundry.identity.uaa.scim.ScimUser;\n import org.cloudfoundry.identity.uaa.scim.ScimUserProvisioning;\n import org.cloudfoundry.identity.uaa.scim.endpoints.PasswordChange;\n@@ -28,6 +28,7 @@ import org.cloudfoundry.identity.uaa.util.JsonUtils;\n import org.junit.Before;\n import org.junit.Test;\n import org.springframework.http.MediaType;\n+import org.springframework.jdbc.core.JdbcTemplate;\n import org.springframework.mock.web.MockHttpServletRequest;\n import org.springframework.mock.web.MockHttpSession;\n import org.springframework.security.core.Authentication;\n@@ -156,6 +157,34 @@ public class ResetPasswordControllerMockMvcTests extends InjectedMockContextTest\n             .andExpect(redirectedUrl(\"home\"));\n     }\n \n+    @Test\n+    public void create_new_code_for_repeated_request() throws Exception {\n+        String username = new RandomValueStringGenerator().generate() + \"@test.org\";\n+        ScimUser user = new ScimUser(null, username, \"givenname\",\"familyname\");\n+        user.setPrimaryEmail(username);\n+        user.setPassword(\"secret\");\n+        String token = MockMvcUtils.utils().getClientCredentialsOAuthAccessToken(getMockMvc(), \"admin\", \"adminsecret\", null, null);\n+        user = MockMvcUtils.utils().createUser(getMockMvc(), token, user);\n+\n+\n+        PredictableGenerator generator = new PredictableGenerator();\n+        JdbcExpiringCodeStore store = getWebApplicationContext().getBean(JdbcExpiringCodeStore.class);\n+        store.setGenerator(generator);\n+        JdbcTemplate template = getWebApplicationContext().getBean(JdbcTemplate.class);\n+        String intent = UaaResetPasswordService.FORGOT_PASSWORD_INTENT_PREFIX+user.getId();\n+\n+        getMockMvc().perform(post(\"/forgot_password.do\")\n+                                 .param(\"email\", user.getUserName()))\n+            .andExpect(redirectedUrl(\"email_sent?code=reset_password\"));\n+\n+        getMockMvc().perform(post(\"/forgot_password.do\")\n+                                 .param(\"email\", user.getUserName()))\n+            .andExpect(redirectedUrl(\"email_sent?code=reset_password\"));\n+\n+        assertEquals(1, (int)template.queryForObject(\"select count(*) from expiring_code_store where intent=?\", new Object[] {intent}, Integer.class));\n+\n+    }\n+\n     @Test\n     public void redirectToSavedRequest_ifPresent() throws Exception {\n         String username = new RandomValueStringGenerator().generate() + \"@test.org\";\n\ndiff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/scim/endpoints/ScimUserEndpointDocs.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/scim/endpoints/ScimUserEndpointDocs.java\nindex c8d618d69..4d223ec46 100644\n--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/scim/endpoints/ScimUserEndpointDocs.java\n+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/scim/endpoints/ScimUserEndpointDocs.java\n@@ -57,6 +57,7 @@ import static org.springframework.restdocs.request.RequestDocumentation.pathPara\n import static org.springframework.restdocs.request.RequestDocumentation.requestParameters;\n import static org.springframework.restdocs.snippet.Attributes.key;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n public class ScimUserEndpointDocs extends InjectedMockContextTest {\n@@ -458,7 +459,7 @@ public class ScimUserEndpointDocs extends InjectedMockContextTest {\n     public void getUserVerificationLink() throws Exception {\n         String accessToken = testClient.getClientCredentialsOAuthAccessToken(\"admin\", \"adminsecret\", \"uaa.admin\");\n \n-        String email = \"joel@example.com\";\n+        String email = \"joel\"+new RandomValueStringGenerator().generate()+\"@example.com\";\n         ScimUser joel = new ScimUser(null, email, \"Joel\", \"D'sa\");\n         joel.setVerified(false);\n         joel.addEmail(email);\n@@ -477,6 +478,7 @@ public class ScimUserEndpointDocs extends InjectedMockContextTest {\n             RequestDocumentation.parameterWithName(\"userId\").description(\"The ID of the user to verify\")\n         );\n         getMockMvc().perform(get)\n+            .andDo(print())\n             .andExpect(status().isOk())\n             .andDo(document(\"{ClassName}/{methodName}\", preprocessResponse(prettyPrint()),\n                             pathParameters, requestHeaders, requestParameters, responseFields))\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "1d3ad7399d010f6a29dc3bf8139d792121301ab8", "source_date": "Tue May 3 12:21:35 2016 -0600", "source_tag": "3.4.0", "target_commit": "460627ed419e4227b10ff121248b3ffc009011a9", "target_date": "Tue May 3 14:43:26 2016 -0600", "target_tag": "3.3.0", "FAIL TO PASS": [":cloudfoundry-identity-server:compileTestJava/uaa/server/src/test/java/org/cloudfoundry/identity/uaa/login/UaaResetPasswordServiceTests.java"], "PASS TO PASS": [":cloudfoundry-identity-model:mainOutputResourcesDir", ":cloudfoundry-identity-model:buildInfo", ":cloudfoundry-identity-model:compileJava", ":cloudfoundry-identity-model:processResources", ":cloudfoundry-identity-model:jar", ":cloudfoundry-identity-model:gitInfo", ":cloudfoundry-identity-model:classes", ":cloudfoundry-identity-server:classes", ":cloudfoundry-identity-server:jar", ":cloudfoundry-identity-server:compileTestJava", ":cloudfoundry-identity-server:compileJava", ":cloudfoundry-identity-server:processResources"]}
{"ecosystem": "maven", "repo": "xwiki-platform", "instance_id": "xwiki-platform_1527", "original_commit_message": "XWIKI-21411: Improve check of translation document author rights\n* Check both author and content author and improve JavaDoc", "hints": "The original patch is split into a patch for non-test files and a patch for test files:\n<patch>\ndiff --git a/xwiki-platform-core/xwiki-platform-localization/xwiki-platform-localization-sources/xwiki-platform-localization-source-wiki/src/main/java/org/xwiki/localization/wiki/internal/AbstractDocumentTranslationBundle.java b/xwiki-platform-core/xwiki-platform-localization/xwiki-platform-localization-sources/xwiki-platform-localization-source-wiki/src/main/java/org/xwiki/localization/wiki/internal/AbstractDocumentTranslationBundle.java\nindex 8549a4de0c1..d5028991f1d 100644\n--- a/xwiki-platform-core/xwiki-platform-localization/xwiki-platform-localization-sources/xwiki-platform-localization-source-wiki/src/main/java/org/xwiki/localization/wiki/internal/AbstractDocumentTranslationBundle.java\n+++ b/xwiki-platform-core/xwiki-platform-localization/xwiki-platform-localization-sources/xwiki-platform-localization-source-wiki/src/main/java/org/xwiki/localization/wiki/internal/AbstractDocumentTranslationBundle.java\n@@ -138,19 +138,25 @@ protected void setReference(DocumentReference reference)\n         setId(this.idPrefix + this.serializer.serialize(reference));\n     }\n \n-    protected LocalizedTranslationBundle loadDocumentLocaleBundle(Locale locale) throws Exception\n+    /**\n+     * Gets the document that defines the translation bundle for a given locale.\n+     *\n+     * @param locale the requested locale\n+     * @return the document defining the translation bundle, or null if it could not be fetched yet and requires a retry\n+     */\n+    protected XWikiDocument getDocumentLocaleBundle(Locale locale) throws Exception\n     {\n         XWikiContext context = this.contextProvider.get();\n \n         if (context == null) {\n-            // No context for some reason, lets try later\n+            // No context for some reason, let's try later.\n             return null;\n         }\n \n         XWiki xwiki = context.getWiki();\n \n         if (xwiki == null) {\n-            // No XWiki instance ready, lets try later\n+            // No XWiki instance ready, let's try later.\n             return null;\n         }\n \n@@ -158,11 +164,23 @@ protected LocalizedTranslationBundle loadDocumentLocaleBundle(Locale locale) thr\n \n         if (locale != null && !locale.equals(Locale.ROOT) && !locale.equals(document.getDefaultLocale())) {\n             document = xwiki.getDocument(new DocumentReference(document.getDocumentReference(), locale), context);\n+        }\n \n-            if (document.isNew()) {\n-                // No document found for this locale\n-                return LocalizedTranslationBundle.EMPTY;\n-            }\n+        return document;\n+    }\n+\n+    protected LocalizedTranslationBundle loadDocumentLocaleBundle(Locale locale) throws Exception\n+    {\n+        XWikiDocument document = getDocumentLocaleBundle(locale);\n+\n+        if (document == null) {\n+            // Either no context or XWiki instance not ready, let's try later.\n+            return null;\n+        }\n+\n+        if (document.isNew()) {\n+            // No document found for this locale.\n+            return LocalizedTranslationBundle.EMPTY;\n         }\n \n         String content = document.getContent();\n@@ -170,7 +188,7 @@ protected LocalizedTranslationBundle loadDocumentLocaleBundle(Locale locale) thr\n         Properties properties = new Properties();\n         properties.load(new StringReader(content));\n \n-        // Convert to LocalBundle\n+        // Convert to LocalBundle.\n         DefaultLocalizedTranslationBundle localeBundle = new DefaultLocalizedTranslationBundle(this, locale);\n \n         TranslationMessageParser parser = getTranslationMessageParser();\n\ndiff --git a/xwiki-platform-core/xwiki-platform-localization/xwiki-platform-localization-sources/xwiki-platform-localization-source-wiki/src/main/java/org/xwiki/localization/wiki/internal/ComponentDocumentTranslationBundle.java b/xwiki-platform-core/xwiki-platform-localization/xwiki-platform-localization-sources/xwiki-platform-localization-source-wiki/src/main/java/org/xwiki/localization/wiki/internal/ComponentDocumentTranslationBundle.java\nindex c4fd0923d6f..65b3951b782 100644\n--- a/xwiki-platform-core/xwiki-platform-localization/xwiki-platform-localization-sources/xwiki-platform-localization-source-wiki/src/main/java/org/xwiki/localization/wiki/internal/ComponentDocumentTranslationBundle.java\n+++ b/xwiki-platform-core/xwiki-platform-localization/xwiki-platform-localization-sources/xwiki-platform-localization-source-wiki/src/main/java/org/xwiki/localization/wiki/internal/ComponentDocumentTranslationBundle.java\n@@ -19,6 +19,8 @@\n  */\n package org.xwiki.localization.wiki.internal;\n \n+import java.util.Locale;\n+\n import org.xwiki.bridge.event.WikiDeletedEvent;\n import org.xwiki.component.descriptor.ComponentDescriptor;\n import org.xwiki.component.manager.ComponentLookupException;\n@@ -27,6 +29,11 @@\n import org.xwiki.localization.message.TranslationMessageParser;\n import org.xwiki.model.reference.DocumentReference;\n import org.xwiki.observation.event.Event;\n+import org.xwiki.security.authorization.AccessDeniedException;\n+\n+import com.xpn.xwiki.XWiki;\n+import com.xpn.xwiki.XWikiContext;\n+import com.xpn.xwiki.doc.XWikiDocument;\n \n /**\n  * Component wiki document based implementation of Bundle.\n@@ -37,6 +44,8 @@\n  */\n public class ComponentDocumentTranslationBundle extends AbstractDocumentTranslationBundle\n {\n+    private DocumentTranslationBundleFactory factory;\n+\n     private ComponentDescriptor<TranslationBundle> descriptor;\n \n     /**\n@@ -45,17 +54,54 @@ public class ComponentDocumentTranslationBundle extends AbstractDocumentTranslat\n      * @param componentManager used to lookup components needed to manipulate wiki documents\n      * @param translationMessageParser the parser to use for each message\n      * @param descriptor the component descriptor used to unregister the bundle\n+     * @param factory the factory\n      * @throws ComponentLookupException failed to lookup some required components\n      */\n     public ComponentDocumentTranslationBundle(String idPrefix, DocumentReference documentReference,\n         ComponentManager componentManager, TranslationMessageParser translationMessageParser,\n-        ComponentDescriptor<TranslationBundle> descriptor) throws ComponentLookupException\n+        ComponentDescriptor<TranslationBundle> descriptor, DocumentTranslationBundleFactory factory)\n+        throws ComponentLookupException\n     {\n         super(idPrefix, documentReference, componentManager, translationMessageParser);\n \n+        this.factory = factory;\n         this.descriptor = descriptor;\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     * This overrides the default implementation to first check the author rights for the document.\n+     *\n+     * @param locale the requested locale\n+     * @return the document defining the translation bundle if its author has the necessary rights, the default locale\n+     *     otherwise, and fallback on the original implementation if the document doesn't exist or could not be fetched\n+     */\n+    @Override\n+    protected XWikiDocument getDocumentLocaleBundle(Locale locale) throws Exception\n+    {\n+        XWikiDocument document = super.getDocumentLocaleBundle(locale);\n+\n+        if (document != null && !document.isNew()) {\n+            XWikiContext context = this.contextProvider.get();\n+            XWiki xwiki = context.getWiki();\n+            XWikiDocument defaultLocaleDocument = xwiki.getDocument(this.documentReference, context);\n+\n+            if (defaultLocaleDocument != document) {\n+                // We only need to check rights for non-default locales.\n+                try {\n+                    this.factory.checkRegistrationAuthorizationForDocumentLocaleBundle(document, defaultLocaleDocument);\n+                } catch (AccessDeniedException e) {\n+                    this.logger.warn(\"Failed to load and register the translation for locale [{}] from document [{}]. \"\n+                        + \"Falling back to default locale.\", locale, document.getDocumentReference());\n+                    // We return the default translation bundle if the requested one has permission issues.\n+                    return defaultLocaleDocument;\n+                }\n+            }\n+        }\n+\n+        return document;\n+    }\n+\n     @Override\n     public void onEvent(Event event, Object source, Object data)\n     {\n\ndiff --git a/xwiki-platform-core/xwiki-platform-localization/xwiki-platform-localization-sources/xwiki-platform-localization-source-wiki/src/main/java/org/xwiki/localization/wiki/internal/DocumentTranslationBundleFactory.java b/xwiki-platform-core/xwiki-platform-localization/xwiki-platform-localization-sources/xwiki-platform-localization-source-wiki/src/main/java/org/xwiki/localization/wiki/internal/DocumentTranslationBundleFactory.java\nindex 233aefc5e0e..f045772aae2 100644\n--- a/xwiki-platform-core/xwiki-platform-localization/xwiki-platform-localization-sources/xwiki-platform-localization-source-wiki/src/main/java/org/xwiki/localization/wiki/internal/DocumentTranslationBundleFactory.java\n+++ b/xwiki-platform-core/xwiki-platform-localization/xwiki-platform-localization-sources/xwiki-platform-localization-source-wiki/src/main/java/org/xwiki/localization/wiki/internal/DocumentTranslationBundleFactory.java\n@@ -56,6 +56,7 @@\n import org.xwiki.localization.wiki.internal.TranslationDocumentModel.Scope;\n import org.xwiki.model.reference.DocumentReference;\n import org.xwiki.model.reference.DocumentReferenceResolver;\n+import org.xwiki.model.reference.EntityReference;\n import org.xwiki.model.reference.EntityReferenceSerializer;\n import org.xwiki.model.reference.WikiReference;\n import org.xwiki.observation.EventListener;\n@@ -324,7 +325,7 @@ private ComponentDocumentTranslationBundle createComponentDocumentBundle(XWikiDo\n         try {\n             documentBundle =\n                 new ComponentDocumentTranslationBundle(ID_PREFIX, document.getDocumentReference(),\n-                    this.componentManagerProvider.get(), this.translationParser, descriptor);\n+                    this.componentManagerProvider.get(), this.translationParser, descriptor, this);\n         } catch (ComponentLookupException e) {\n             throw new TranslationBundleDoesNotExistsException(\"Failed to create document bundle\", e);\n         }\n@@ -434,6 +435,23 @@ private void registerTranslationBundle(XWikiDocument document) throws Translatio\n         }\n     }\n \n+    /**\n+     * Checks that the author of a document defining a translation bundle has the necessary rights to make it\n+     * available, based on the scope of the default locale translation bundle.\n+     *\n+     * @param document the document defining the translation bundle to check\n+     * @param defaultLocaleDocument the document containing the default locale translation bundle\n+     * @throws AccessDeniedException when the document author does not have enough rights for the defined scope\n+     */\n+    protected void checkRegistrationAuthorizationForDocumentLocaleBundle(XWikiDocument document,\n+        XWikiDocument defaultLocaleDocument) throws AccessDeniedException\n+    {\n+        Scope scope = getScope(defaultLocaleDocument);\n+        if (scope != null && scope != Scope.ON_DEMAND) {\n+            checkRegistrationAuthorization(document, scope);\n+        }\n+    }\n+\n     /**\n      * @param document the translation document\n      * @param scope the scope\n@@ -442,18 +460,24 @@ private void registerTranslationBundle(XWikiDocument document) throws Translatio\n      */\n     private void checkRegistrationAuthorization(XWikiDocument document, Scope scope) throws AccessDeniedException\n     {\n+        EntityReference entityReference;\n         switch (scope) {\n             case GLOBAL:\n                 this.authorizationManager.checkAccess(Right.PROGRAM, document.getAuthorReference(), null);\n+                this.authorizationManager.checkAccess(Right.PROGRAM, document.getContentAuthorReference(), null);\n                 break;\n             case WIKI:\n-                this.authorizationManager.checkAccess(Right.ADMIN, document.getAuthorReference(), document\n-                    .getDocumentReference().getWikiReference());\n+                entityReference = document.getDocumentReference().getWikiReference();\n+                this.authorizationManager.checkAccess(Right.ADMIN, document.getAuthorReference(), entityReference);\n+                this.authorizationManager.checkAccess(Right.ADMIN, document.getContentAuthorReference(),\n+                    entityReference);\n                 break;\n             case USER:\n                 if (this.configuration.isRestrictUserTranslations()) {\n-                    this.authorizationManager.checkAccess(Right.SCRIPT, document.getAuthorReference(),\n-                        document.getDocumentReference());\n+                    entityReference = document.getDocumentReference();\n+                    this.authorizationManager.checkAccess(Right.SCRIPT, document.getAuthorReference(), entityReference);\n+                    this.authorizationManager.checkAccess(Right.SCRIPT, document.getContentAuthorReference(),\n+                        entityReference);\n                 }\n                 break;\n             default:\n\n\n</patch>\n<test_patch>\ndiff --git a/xwiki-platform-core/xwiki-platform-localization/xwiki-platform-localization-sources/xwiki-platform-localization-source-wiki/src/test/java/org/xwiki/localization/wiki/internal/ComponentDocumentTranslationBundleTest.java b/xwiki-platform-core/xwiki-platform-localization/xwiki-platform-localization-sources/xwiki-platform-localization-source-wiki/src/test/java/org/xwiki/localization/wiki/internal/ComponentDocumentTranslationBundleTest.java\nnew file mode 100644\nindex 00000000000..a33079da91c\n--- /dev/null\n+++ b/xwiki-platform-core/xwiki-platform-localization/xwiki-platform-localization-sources/xwiki-platform-localization-source-wiki/src/test/java/org/xwiki/localization/wiki/internal/ComponentDocumentTranslationBundleTest.java\n@@ -0,0 +1,208 @@\n+/*\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.xwiki.localization.wiki.internal;\n+\n+import java.util.Collections;\n+import java.util.Locale;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.mockito.Mock;\n+import org.xwiki.cache.Cache;\n+import org.xwiki.cache.CacheManager;\n+import org.xwiki.cache.config.CacheConfiguration;\n+import org.xwiki.component.internal.multi.ComponentManagerManager;\n+import org.xwiki.job.event.status.JobProgressManager;\n+import org.xwiki.localization.LocalizationManager;\n+import org.xwiki.localization.Translation;\n+import org.xwiki.localization.TranslationBundleFactory;\n+import org.xwiki.localization.internal.DefaultLocalizationManager;\n+import org.xwiki.localization.internal.DefaultTranslationBundleContext;\n+import org.xwiki.localization.messagetool.internal.MessageToolTranslationMessageParser;\n+import org.xwiki.model.internal.DefaultModelContext;\n+import org.xwiki.model.reference.DocumentReference;\n+import org.xwiki.observation.internal.DefaultObservationManager;\n+import org.xwiki.query.Query;\n+import org.xwiki.query.QueryManager;\n+import org.xwiki.rendering.internal.parser.plain.PlainTextBlockParser;\n+import org.xwiki.rendering.internal.renderer.plain.PlainTextBlockRenderer;\n+import org.xwiki.rendering.internal.renderer.plain.PlainTextRendererFactory;\n+import org.xwiki.rendering.syntax.Syntax;\n+import org.xwiki.security.authorization.AccessDeniedException;\n+import org.xwiki.security.authorization.Right;\n+import org.xwiki.test.LogLevel;\n+import org.xwiki.test.annotation.BeforeComponent;\n+import org.xwiki.test.annotation.ComponentList;\n+import org.xwiki.test.junit5.LogCaptureExtension;\n+import org.xwiki.test.junit5.mockito.MockComponent;\n+\n+import com.xpn.xwiki.doc.XWikiDocument;\n+import com.xpn.xwiki.objects.BaseObject;\n+import com.xpn.xwiki.test.MockitoOldcore;\n+import com.xpn.xwiki.test.junit5.mockito.InjectMockitoOldcore;\n+import com.xpn.xwiki.test.junit5.mockito.OldcoreTest;\n+import com.xpn.xwiki.test.reference.ReferenceComponentList;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Unit tests for {@link ComponentDocumentTranslationBundle}.\n+ *\n+ * @version $Id$\n+ */\n+@OldcoreTest\n+@ComponentList({\n+    DocumentTranslationBundleFactory.class,\n+    DefaultLocalizationManager.class,\n+    DefaultTranslationBundleContext.class,\n+    TranslationDocumentClassInitializer.class,\n+    DefaultModelContext.class,\n+    PlainTextBlockRenderer.class,\n+    PlainTextRendererFactory.class,\n+    DefaultObservationManager.class,\n+    MessageToolTranslationMessageParser.class,\n+    PlainTextBlockParser.class\n+})\n+@ReferenceComponentList\n+class ComponentDocumentTranslationBundleTest\n+{\n+    private static final DocumentReference TRANSLATION_ROOT_REFERENCE = new DocumentReference(\"xwiki\", \"space\",\n+        \"Translations\");\n+\n+    private static final DocumentReference ADMIN_USER_REFERENCE = new DocumentReference(\"xwiki\", \"XWiki\", \"XWikiAdmin\");\n+\n+    @InjectMockitoOldcore\n+    private MockitoOldcore oldcore;\n+\n+    @MockComponent\n+    private WikiTranslationConfiguration translationConfiguration;\n+\n+    @MockComponent\n+    private QueryManager mockQueryManager;\n+\n+    @Mock\n+    private Query mockQuery;\n+\n+    @MockComponent\n+    private ComponentManagerManager componentManagerManager;\n+\n+    @MockComponent\n+    private JobProgressManager jobProgressManager;\n+\n+    @Inject\n+    private LocalizationManager localization;\n+\n+    private XWikiDocument translationFrDocument;\n+\n+    private DocumentReference adminUserReference;\n+\n+    /**\n+     * Capture logs.\n+     */\n+    @RegisterExtension\n+    private LogCaptureExtension logCapture = new LogCaptureExtension(LogLevel.WARN);\n+\n+    @MockComponent\n+    private CacheManager cacheManager;\n+\n+    @BeforeComponent\n+    void before() throws Exception\n+    {\n+        Cache<Object> cache = mock(Cache.class);\n+        when(this.cacheManager.createNewCache(any(CacheConfiguration.class))).thenReturn(cache);\n+    }\n+\n+    @BeforeEach\n+    void setUp() throws Exception\n+    {\n+        this.oldcore.notifyDocumentCreatedEvent(true);\n+\n+        when(this.mockQueryManager.createQuery(anyString(), anyString())).thenReturn(this.mockQuery);\n+        when(this.mockQuery.execute()).thenReturn(Collections.emptyList());\n+\n+        when(this.componentManagerManager.getComponentManager(\"wiki:xwiki\", true)).thenReturn(this.oldcore.getMocker());\n+        this.oldcore.getMocker().getInstance(TranslationBundleFactory.class, DocumentTranslationBundleFactory.ID);\n+\n+        XWikiDocument translationRootDocument = this.oldcore.getSpyXWiki().getDocument(TRANSLATION_ROOT_REFERENCE,\n+            this.oldcore.getXWikiContext());\n+\n+        BaseObject translationObject = translationRootDocument.newXObject(\n+            new DocumentReference(\"xwiki\", \"XWiki\", \"TranslationDocumentClass\"),\n+            this.oldcore.getXWikiContext());\n+        translationObject.setStringValue(TranslationDocumentModel.TRANSLATIONCLASS_PROP_SCOPE,\n+            TranslationDocumentModel.Scope.WIKI.toString());\n+\n+        translationRootDocument.setSyntax(Syntax.PLAIN_1_0);\n+        translationRootDocument.setContent(\"xwiki.translation=root\");\n+        translationRootDocument.setAuthorReference(ADMIN_USER_REFERENCE);\n+        this.oldcore.getSpyXWiki().saveDocument(translationRootDocument, this.oldcore.getXWikiContext());\n+\n+        this.translationFrDocument = translationRootDocument.getTranslatedDocument(Locale.FRENCH,\n+            this.oldcore.getXWikiContext());\n+        if (this.translationFrDocument == translationRootDocument) {\n+            this.translationFrDocument =\n+                new XWikiDocument(this.translationFrDocument.getDocumentReference(), Locale.FRENCH);\n+            this.translationFrDocument.setDefaultLocale(this.translationFrDocument.getDefaultLocale());\n+        }\n+        this.translationFrDocument.setSyntax(Syntax.PLAIN_1_0);\n+        this.translationFrDocument.setContent(\"xwiki.translation=fr\");\n+        this.oldcore.getSpyXWiki().saveDocument(this.translationFrDocument, this.oldcore.getXWikiContext());\n+\n+        doThrow(new AccessDeniedException(Right.SCRIPT, null, translationRootDocument.getDocumentReference()))\n+            .when(this.oldcore.getMockAuthorizationManager()).checkAccess(Right.ADMIN, null,\n+                TRANSLATION_ROOT_REFERENCE.getWikiReference());\n+    }\n+\n+    @Test\n+    void checkTranslationWithExpectedRights() throws Exception\n+    {\n+        this.translationFrDocument.setAuthorReference(ADMIN_USER_REFERENCE);\n+        this.translationFrDocument.setContentAuthorReference(ADMIN_USER_REFERENCE);\n+        this.oldcore.getSpyXWiki().saveDocument(this.translationFrDocument, this.oldcore.getXWikiContext());\n+        Translation frTranslation = this.localization.getTranslation(\"xwiki.translation\", Locale.FRENCH);\n+        assertEquals(\"fr\", frTranslation.getRawSource());\n+        // Authorizations are checked twice because the mocked behavior is not actual locale bundle registration.\n+        verify(this.oldcore.getMockAuthorizationManager(), times(4)).checkAccess(Right.ADMIN, ADMIN_USER_REFERENCE,\n+            TRANSLATION_ROOT_REFERENCE.getWikiReference());\n+    }\n+\n+    @Test\n+    void checkTranslationWithoutExpectedRights() throws Exception\n+    {\n+        Translation frTranslation = this.localization.getTranslation(\"xwiki.translation\", Locale.FRENCH);\n+        assertEquals(\n+            \"Failed to load and register the translation for locale [fr] from document [xwiki:space.Translations]. \"\n+                + \"Falling back to default locale.\",\n+            this.logCapture.getMessage(0));\n+        assertEquals(\"root\", frTranslation.getRawSource());\n+        verify(this.oldcore.getMockAuthorizationManager()).checkAccess(Right.ADMIN, null,\n+            TRANSLATION_ROOT_REFERENCE.getWikiReference());\n+    }\n+}\n\n</test_patch>\n", "file change type": "Files matched", "content change type": "no content changes", "source_commit": "c4c8d61c30de72298d805ccc82df2a307f131c54", "source_date": "Thu Nov 16 16:06:02 2023 +0100", "source_tag": "15.10", "target_commit": "73aef9648bbff04b697837f1b906932f0d5caacb", "target_date": "Thu Nov 16 16:20:03 2023 +0100", "target_tag": "15.5.4", "FAIL TO PASS": ["org.xwiki.localization.wiki.internal.ComponentDocumentTranslationBundleTest.checkTranslationWithExpectedRights"], "PASS TO PASS": []}
